/*
 * Automatic wrapping of 'vtkAmiVolRen' library for AMILab.
 * File: /home/karl/projects/Sourceforge/amilab/trunk/Modules/vtkAmiVolRen/src/Wrapping/Generated/addwrap_vtkAmiVolRen.cpp.new
 * Generated by the script '/home/karl/projects/Sourceforge/amilab/trunk/src/../PythonWrap/parse_xml/parse_xml2.py'
 * Date: '08-10-2011'
 */

#include "Variables.hpp"
#include "ami_object.h"
#include "addwrap_vtkAmiVolRen.h"
#include "vtkAmiVolRen_includes.h"

// Currently 2 objects (classes,structures,typedefs,...) are wrapped 
extern void WrapClassvtkAMILabGPUMultiVolumeRayCastMapper_AddStaticMethods( Variables::ptr&);
extern void WrapClassvtkAMILabOpenGLGPUMultiVolumeRayCastMapper_AddStaticMethods( Variables::ptr&);

/* Adding an enumeration value */
static void AddEnumVal( AMIObject::ptr& obj, const char* name, int val)
{
  BasicVariable::ptr var = AMILabType<int >::CreateVar(val);
  var->Rename(name);
  obj->GetContext()->AddVar(var,obj->GetContext());
}

static void wrap_enums( Variables::ptr& context);
static void wrap_vars( Variables::ptr& context);
static void wrap_macros( Variables::ptr& context);
/*
 * Adding all the wrapped classes to the library context.
 * @param context the library context.
 */
void wrap_vtkAmiVolRen_classes( Variables::ptr& context)
{


  WrapClassvtkAMILabGPUMultiVolumeRayCastMapper_AddStaticMethods( context);
  WrapClassvtkAMILabOpenGLGPUMultiVolumeRayCastMapper_AddStaticMethods( context);

  wrap_enums (context);
  wrap_vars  (context);
  wrap_macros(context);
}
static void wrap_enums( Variables::ptr& context)
{
}

static void wrap_vars( Variables::ptr& context)
{
}

static void wrap_macros( Variables::ptr& context)
{
}

