
func "Common/ScriptGui"

# load module 
if (!exists(amiOpenCV)) {
  func "../Load_amiOpenCV"
} else {
  func "../ReLoad_amiOpenCV"
}

if (!exists(HoughTransformsClass)) {

  Class HoughTransformsClass : public ScriptGui \
  {
    
    //---------------------------------------------------
    proc ::Init() {
      
        ::input_name   = "","Name of the input image variable"
        #::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki/doku.php?id=tutorial-mainalgorithms-levelset#level_set_segmentation"

        ::html_filename = GetScriptsDir+"/HoughTransforms/Doc/HoughTransforms/index.html"
    }


    #-----------------------------------------------
    proc ::load_input() {
      eval "::input <<= "+::input_name+";"
      if (::input_name=="BrowseImage") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
  
      if (exists(::win)) {
        ::win.Update(-1)
      }
    }
    Comments( ::load_input, "Copies the input image in a local image member named 'input'")

    proc ::RunHoughCircles() {
        # Translating C++ code to amilab

        # set some 'typedefs', referencing to the constructors
        Size = &cv_Size__int.Size_
        Point = &cv_Point__int.Point_
        Scalar = &cv_Scalar__double.Scalar_

        # more complicated, std::vector has default template, so long name ...
        Vector_Vec3f = &std_vector_cv_Vec_float_3_std_allocator_cv_Vec_float_3.vector

        # the rest is quite clean ...

        ::input.save "/tmp/inputim.png"
        img = cv_imread("/tmp/inputim.png",1)
        if (!img.empty()) {
        gray= cv_Mat.Mat()
        cv_cvtColor(img, gray, CV_BGR2GRAY)
        cv_GaussianBlur( gray, gray, Size(3, 3), 2, 2 )


        circles= Vector_Vec3f()

        cv_HoughCircles(gray, circles, CV_HOUGH_GRADIENT,2, gray.rows/4, 200, 50 )

        # OK, but still need to fix some wrapping problems ...


        for i=0 to circles.size()-1 {
          del center
          center = Point( cvRound(circles[i][0]), cvRound(circles[i][1]))
          radius = cvRound(circles[i][2])
          
          # draw circle center
          cv_circle( img, center, 3,      Scalar(0,255,0),-1, 8, 0)
          #draw circle outline
          cv_circle( img, center, radius, Scalar(0,0,255), 3, 8, 0 )
        }

        cv_namedWindow("circles",1)
        cv_imshow("circles",img)
        } else {
          InfoDialog "Failed to read the image"
        }
    }


    #-----------------------------------------------
    proc ::Run() \
    {
      if (!exists(::input)) {
        InfoDialog "First load the input image !"
      } else {
        ::RunHoughCircles()
      }
    }

    //---------------------------------------------------
    proc ::Gui() {
    
      if (exists(::parent_panel)) {
        ::win = ParamPanel("HoughTransforms",&::parent_panel)
      } else {
        ::win = ParamPanel("HoughTransforms")
      }
      
      ::win.BeginBook()
    
        ::win.AddPage("Init")

          ::win.BeginBoxPanel("Input Image")
            # set the input image
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::load_input)
            ::win.EndHorizontal()
          ::win.EndBoxPanel()

        ::win.AddPage("Param")
          ::win.AddLabel("Info:","Set your parameters here")

        ::win.AddPage("Run")
          ::win.AddButton("Run Filter",::Run)

        if wx.wxFileName(::html_filename).FileExists() {
          ::AddHelpPage(&::win)
        }
    
      ::win.EndBook()
    
      ::AddStandardButtons(&::win)

      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::win.Update(-1)


    }
    ::Init()
    
  }
  # End of class
  
} 
# End of If
