# Translating C++ code to amilab

# set some 'typedefs', referencing to the constructors
Size = &cv_Size__int.Size_
Point = &cv_Point__int.Point_
Scalar = &cv_Scalar__double.Scalar_

# more complicated, std::vector has default template, so long name ...
Vector_Vec3f = &std_vector_cv_Vec_float_3_std_allocator_cv_Vec_float_3.vector

# the rest is quite clean ...

img = cv_imread("/home/karl/projects/data/DenoisingTestImages/barbara.png",1)
gray= cv_Mat.Mat()
cv_cvtColor(img, gray, CV_BGR2GRAY)
cv_GaussianBlur( gray, gray, Size(9, 9), 2, 2 )


circles= Vector_Vec3f()

cv_HoughCircles(gray, circles, CV_HOUGH_GRADIENT,2, gray.rows/4, 200, 100 )

# OK, but still need to fix some wrapping problems ...


for i=0 to circles.size()-1 {
  del center
  center = Point( cvRound(circles[i][0]), cvRound(circles[i][1]))
  radius = cvRound(circles[i][2])
  
  # draw circle center
  cv_circle( img, center, 3,      Scalar(0,255,0),-1, 8, 0)
  #draw circle outline
  cv_circle( img, center, radius, Scalar(0,0,255), 3, 8, 0 )
}

cv_namedWindow("circles",1)
cv_imshow("circles",img)
