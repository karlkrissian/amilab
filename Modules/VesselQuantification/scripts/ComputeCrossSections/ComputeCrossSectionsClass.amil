
func "Common/ScriptGui"

# load module 
if (!exists(VesselQuantification)) {
  func "../Load_VesselQuantification"
} else {
  func "../ReLoad_VesselQuantification"
}

if (!exists(ComputeCrossSectionsClass)) {

  #
  # Moving code from PythonCoolKit to fit ellipses in cross-sections
  #

  Class ComputeCrossSectionsClass : public ScriptGui \
  {
  
    func "VectorClass.amil"
    ::VectorClass = &VectorClass

    
    #---------------------------------------------------------------------------
    proc ::Init() {
      
        ::input_name   = "","Name of the input image variable"
        #::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki/doku.php?id=tutorial-mainalgorithms-levelset#level_set_segmentation"

        ::html_filename = GetScriptsDir+"/ComputeCrossSections/Doc/ComputeCrossSections/index.html"
        
        
        # ::image
        # ::lines
        # spacing: should get the minimal spacing from input image
        ::slice_spacing = 1,  "Slice spacing for X,Y coordinates in "+\
                              "the cross-section"
                              
        ::imsize = 50, "each section will be ::imsize::imsize pixels"
        
        ::maxtrnorm = 1, "maximal displacement allowed from the ellipse fitting"
        
    }


    #---------------------------------------------------------------------------
    proc ::load_input() {
      eval "::input <<= (FLOAT)"+::input_name+";"
      if (::input_name=="BrowseImage") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
  
      if (exists(::win)) {
        ::win.Update(-1)
      }
    }
    Comments( ::load_input, "Copies the input image in a local image member named 'input'")


    #---------------------------------------------------------------------------
    proc ::ComputeSections() {}
    
    #---------------------------------------------------------------------------
    # p1 and p2 are 2 successive std::vector<double> 3D points 
    # from the centerline
    #
    proc ::EstimateRadius(OBJECT p1, OBJECT p2) \
    {
      ::ellipse_found = false
      ::VectorClass P1
      ::VectorClass P2
      P1 = p1
      P2 = p2
      v = P2-P1
      norm1 = v.Norm()
      ::center = P1
      ::VectorClass ::newvect0
      ::VectorClass ::newvect1
      ::coeffs   = vector_double(6,0)
      if (norm1>1E-2) {
        v = v/norm1
        ::VectorClass v1
        ::VectorClass v2
        ::FindOrthogonalVectors(v,v1,v2)
        reslice = vtk.vtkImageReslice.New()

        del ::vtk_input
        ::vtk_input = vtktools.ToVtkImageData( ::input)
        
        del ::ir
        ::ir = vtk.vtkImageReslice.New()
        ::ir.SetInputConnection(&::vtk_input.GetProducerPort())

        ::ir.SetResliceAxesOrigin(P1[0],P1[1],P1[2])
        ::ir.SetResliceAxesDirectionCosines(::v1[0],::v1[1],::v1[2],\
                                            ::v2[0],::v2[1],::v2[2],\
                                            ::v[0], ::v[1], ::v[2])
        ::ir.SetOutputDimensionality(2)
        ::ir.SetOutputSpacing(::slice_spacing,::slice_spacing,1)
        ::ir.SetOutputOrigin(-1.0*::imsize/2,-1.0*::imsize/2,0)
        ::ir.SetOutputExtent( 0,1.0*::imsize/::slice_spacing-1,\
                              0,1.0*::imsize/::slice_spacing-1,\
                              0,0)
        ::ir.InterpolateOn()
        ::ir.SetInterpolationModeToCubic()
        ::ir.Update()
        del ::vtk_oneslice
        ::vtk_oneslice = ::ir.GetOutput()

        # put the output to an image
        #---- fit an ellipse to the zero-crossings
        contours = vtkContourFilter()
        contours.SetInputConnection(::ir.GetOutputPort())
        contours.GenerateValues( 1, 0.0,0.0)
        contours.Update()
        pd = contours.GetOutput()
        #--- Get the closest component to the center
        cf = vtk.vtkPolyDataConnectivityFilter()
        cf.SetInputConnection(contours.GetOutputPort())
        cf.SetClosestPoint(0,0,0)
        cf.SetExtractionModeToClosestPointRegion()
        cf.Update()
        pd1=cf.GetOutput()
        
        # import amiOpenCV module
        func "../Modules/amiOpenCV/scripts/Load_amiOpenCV"
        points = amiOpenCV.std_vector_cv_Point__float_std_allocator_cv_Point__float.vector()

        pts=pd1.GetPoints() # vtkPoints

        #print pd1, "\n"
        #print pd1.GetPoints(), "\n"
        nb_pts = pts.GetNumberOfPoints()
        if (nb_pts<5) {
          InfoDialog "Two few points for ellipse fitting with opencv ..."
        }
        for n=0 to pts.GetNumberOfPoints() {
            points.push_back(amiOpenCV.cv_Point__float.\
              Point_( pts.GetPoint(n)[0],\
                      pts.GetPoint(n)[1]))
        }

        rect = amiOpenCV.cv_fitEllipse(points)

        res_points = points
        res_points.resize(4)
        rect.points(&res_points[0])
               
        center_x = (res_points[0].x+res_points[1].x+\
                    res_points[2].x+res_points[3].x)/4
        center_y = (res_points[0].y+res_points[1].y+\
                    res_points[2].y+res_points[3].y)/4
        
        res_v1_x = res_points[1].x-res_points[0].x
        res_v1_y = res_points[1].y-res_points[0].y
        res_v1_norm = sqrt(res_v1_x*res_v1_x+res_v1_y*res_v1_y)
        res_v1_x /= res_v1_norm
        res_v1_y /= res_v1_norm
        
        res_v2_x = res_points[1].x-res_points[0].x
        res_v2_y = res_points[1].y-res_points[0].y
        res_v2_norm = sqrt(res_v2_x*res_v2_x+res_v2_y*res_v2_y)
        res_v2_x /= res_v2_norm
        res_v2_y /= res_v2_norm

        norm_tr = sqrt(center_x*center_x+center_y*center_y)
        if norm_tr<::maxtrnorm {
          ::newvect0 = v1*res_v1_x+v2*res_v1_y
          ::newvect1 = v1*res_v2_x+v2*res_v2_y
          if (::newvect0.ProdEsc(::newvect1)>0.01) {
            printn "|newvect0.newvect1|>0.01 : %1%" % \
              ::newvect0.ProdEsc(::newvect1)
          }
          
        } else {
          printn "norm(tr) = %1%" % norm_tr
          ::newvect0 = ::newvect0back
          ::newvect1 = ::newvect1back
          ::center = P1
        }
      } else {
        printn "norm1 = %1% <= 1E-2" % norm1
      }
      ::newvect0back = ::newvect0
      ::newvect1back = ::newvect1
      
    }

    
    #---------------------------------------------------------------------------
    proc ::FindOrthogonalVectors( OBJECT v, OBJECT w1, OBJECT w2) \
    {
      if (exists(::v1_prev) \
      {
        w2 = v.ProdVect(::v1_prev)
        w2.Normalize()
        w1 = w2.ProdVect(v)
        w1.Normalize()
        ::v1_prev = w1
      } \
      else \
      {
        w1.Init() # initialized to 0 by default
        # try to choose the best direction, find the less important direction
        if (abs(v[0])<=abs(v[1])) && (abs(v[0])<=abs(v[2])) { 
          w1[1] = -v[2];w1[2] = v[1]
          
        } else {
          if abs(v[1])<=abs(v[2]) {
            w1[0] = -v[2]; w1[2] = v[0]
          } else { 
            w1[0] = -v[1]; w1[1] = v[0]
          }
        }
        w1.Normalize()
        w2 = v.ProdVect(w1)
        w2.Normalize()
        ::v1_prev = w1
      }
    }
    
    #---------------------------------------------------------------------------
    proc ::Run() \
    {
      if (!exists(::input)) {
        InfoDialog "First load the input image !"
      } else {
        InfoDialog "Filtro fantastico :) !!!"
      }
    }

    #---------------------------------------------------------------------------
    proc ::Gui() {
    
      if (exists(::parent_panel)) {
        ::win = ParamPanel("ComputeCrossSections",&::parent_panel)
      } else {
        ::win = ParamPanel("ComputeCrossSections")
      }
      
      ::win.BeginBook()
    
        ::win.AddPage("Init")

          ::win.BeginBoxPanel("Input Image")
            # set the input image
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::load_input)
            ::win.EndHorizontal()
          ::win.EndBoxPanel()

        ::win.AddPage("Param")
          ::win.AddLabel("Info:","Set your parameters here")

        ::win.AddPage("Run")
          ::win.AddButton("Run Filter",::Run)

        if wx.wxFileName(::html_filename).FileExists() {
          ::AddHelpPage(&::win)
        }
    
      ::win.EndBook()
    
      ::AddStandardButtons(&::win)

      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::win.Update(-1)


    }
    ::Init()
    
  }
  # End of class
  
} 
# End of If
