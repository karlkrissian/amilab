
func "Common/ScriptGui"

if (!exists(DownloadData)) {
  func "../Load_DownloadData"
}



if (!exists(URLLoadClass)) {

  Class URLLoadClass : public ScriptGui \
  {
    
    proc ::CreateImageLists_sipi_misc() \
    {
      func "Utils/Var_Vec"

      # Signal and Image Processing Institute (SIPI) Image Database
      # misc volume
      Var_Vec ::sipi_misc
      ::sipi_misc.SetThis(&::sipi_misc)
      f = wx.wxTextFile()
      f.Open(op_system.GetCurrentScriptDir()+"/sipi_misc.txt")
      #sipi_exp = "([^\\s]+)\\s+(([^\\s]+\\s)+)\\s+([\\d]+)\\s+(Color|Gray)"
      sipi_exp = "([^[:blank:]]+)[[:blank:]]{2,}(([^[:blank:]]+)([ ][^[:blank:]]+)*)[[:blank:]]{2,}([[:digit:]]+)[[:blank:]]+(Color|Gray)"
      sipi_re = wx.wxRegEx(sipi_exp,wx.wxRE_ADVANCED)
      sipi_re.Compile(sipi_exp)
      #printn "IsValid = %1%" % sipi_re.IsValid()
      if sipi_re.IsValid() {
        SetStatusText("Parsing SIPI misc file")
        for n =0 to f.GetLineCount()-1 {
          SetProgress(100*n/f.GetLineCount())
          current_line = f[n]
          #printn "*"
          if sipi_re.Matches(&current_line) {
            del im_name
            im_name  = wx.FromWxString(sipi_re.GetMatch(&current_line,1))
            del im_desc
            im_desc  = wx.FromWxString(sipi_re.GetMatch(&current_line,2))
            del im_size
            im_size  = wx.FromWxString(sipi_re.GetMatch(&current_line,5))
            del im_color
            im_color = wx.FromWxString(sipi_re.GetMatch(&current_line,6))
            #printn " '%1%' " % im_name + \
                    #" '%1%' " %im_desc  + \
                    #" '%1%' " %im_size  + \
                    #" '%1%' " %im_color
            ::sipi_misc += im_name
          } else {
            printn "no match;"
          }
        }
        SetStatusText("Done")
        SetProgress(0)
      }
      #::sipi_misc.Display()
      ::sipi_misc_has_icon = VarVector(::sipi_misc.size(),false)
    }

    proc ::CreateImageLists_osirix_examples() \
    {
      func "Utils/Var_Vec"

      # Examples from Osirix website
      Var_Vec ::osirix_examples
      ::osirix_examples.SetThis(&::osirix_examples)
      f = wx.wxTextFile()
      f.Open(op_system.GetCurrentScriptDir()+"/osirix_examples.txt")
      name_exp     = "[[:blank:]]*Alias Name: ([A-Z0-9]+)"
      modality_exp = "[[:blank:]]*Modality: (.+)"
      size_exp     = "[[:blank:]]*File Size: (.+)"
      descr_exp    = "[[:blank:]]*Description: (.+)"

      name_re = wx.wxRegEx(name_exp,wx.wxRE_ADVANCED)
      name_re.Compile(name_exp)
      modality_re = wx.wxRegEx(modality_exp,wx.wxRE_ADVANCED)
      modality_re.Compile(modality_exp)
      size_re = wx.wxRegEx(size_exp,wx.wxRE_ADVANCED)
      size_re.Compile(size_exp)
      descr_re = wx.wxRegEx(descr_exp,wx.wxRE_ADVANCED)
      descr_re.Compile(descr_exp)

      Class Osirix_image_info {
        ::name = "-"
        ::modality = "-"
        ::size = "-"
        ::descr = "-"
      }

      #printn "IsValid = %1%" % sipi_re.IsValid()
      SetStatusText("Parsing Osirix file")
      for n =0 to f.GetLineCount()-1 {
        SetProgress(100*n/f.GetLineCount())
        current_line = f[n]
        #printn "*"
        if name_re.Matches(&current_line) {
          del vinfo
          Osirix_image_info vinfo
          vinfo.name     = wx.FromWxString(name_re    .GetMatch(&current_line,1))
          n++;current_line = f[n]
          if modality_re.Matches(&current_line) {
            vinfo.modality = wx.FromWxString(modality_re.GetMatch(&current_line,1))
          }
          n++;current_line = f[n]
          if size_re.Matches(&current_line) {
            vinfo.size     = wx.FromWxString(size_re    .GetMatch(&current_line,1))
          }
          n++;current_line = f[n]
          if descr_re.Matches(&current_line) {
            vinfo.descr    = wx.FromWxString(descr_re   .GetMatch(&current_line,1))
          }
          printn "Found '%1%'" % vinfo.name + " '%1%' " % vinfo.modality + " '%1%' " % vinfo.size + " '%1%' " % vinfo.descr 
          # TODO: check why += does not work
          ::osirix_examples.v.push_back(&vinfo)
        } else {
          printn "no match;"
        }
      }
      SetStatusText("Done")
      SetProgress(0)
      #::sipi_misc.Display()
      ::osirix_examples_has_icon = VarVector(::osirix_examples.size(),false)
    }

    proc ::CreateImageLists() \
    {
      func "Utils/Var_Vec"
      # Denoising of Natural Images 
      # from http://decsai.ugr.es/~javier/denoise/test_images/index.htm
      Var_Vec ::den_list
      ::den_list.SetThis(&::den_list)
      ::den_list = ::den_list+"lena"+"barbara"+"boat"+"fingerprint"+"house"+\
                    "peppers256"

      ::CreateImageLists_sipi_misc()
      ::CreateImageLists_osirix_examples()
    }
    
    # need to call it here ...
    ::CreateImageLists()

    //---------------------------------------------------
    proc ::Init() {
      
      ::url_name = "", "Name of the url to load"
      #::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki/doku.php?id=tutorial-mainalgorithms-levelset#level_set_segmentation"

      ::output_path = ".",    "Save Path Folder"
      ::output_filename = "", "Output filename"
      ::output_imagename = "", "Output image name"
      
      ::InitUserScriptData()
      ::download_dir = ::scriptdata_path, "Directory for downloads"
        
      ::html_filename = GetScriptsDir+"/URLLoad/Doc/URLLoad/index.html"

      sp = wx.wxStandardPathsBase.Get()
      user_app_path = wx.FromWxString(sp.GetUserLocalDataDir())
      if !wx.wxDir.Exists(user_app_path) {
        wx.wxFileName.Mkdir(user_app_path)
      }

      ::user_script_path = user_app_path + "/URLLoad"
      if !wx.wxDir.Exists(::user_script_path) {
        wx.wxFileName.Mkdir(::user_script_path)
      }

    }


    #---------------------------------------------------------------------------
    proc ::LoadDenoisingImage( STRING imname ) {
      #::url_name = "http://decsai.ugr.es/~javier/denoise/%1%.png" % imname
      ::url_name = "http://download.visinf.tu-darmstadt.de/data/foe/img/%1%.png" % imname
      ::OnUrl()
      ::ReadImage(false)
    }

    #---------------------------------------------------------------------------
    for n=0 to ::den_list.size()-1\
    {
      eval "proc ::Load_%1%( ) { ::LoadDenoisingImage(\"%1%\"); };" \
              % ::den_list[n]
    }

    #---------------------------------------------------------------------------
    proc ::Im2Var_sipi_misc(STRING imname) \
    {
      wx_imname = wx.wxString(imname)
      wx_imname.Replace(".","_")
      return = wx.FromWxString(wx_imname)
      return = "SIPI_misc_"+ return
      #printn "Im2Var_sipi_misc returns %1%" % return
    }

    #---------------------------------------------------------------------------
    proc ::Im2Var_osirix_examples(STRING imname) \
    {
      wx_imname = wx.wxString(imname)
      wx_imname.Replace(".","_")
      return = wx.FromWxString(wx_imname)
      return = "Osirix_"+ return
      #printn "Im2Var_sipi_misc returns %1%" % return
    }

    #---------------------------------------------------------------------------
    proc ::Load_SIPI_misc_Image( STRING imname, NUM n ) {
      ::url_name = "http://sipi.usc.edu/database/download.php?vol=misc&img=%1%" % imname
      varname=::Im2Var_sipi_misc(imname)
      ::output_filename  = varname
      ::output_imagename = varname
      ::win.Update(-1)
      ::ReadImage(!::sipi_misc_has_icon[n])
      #if  {
      #  printn "Need to update icon"
      #  ::URL2Icon(::url_name,varname)
      #}
    }

    #---------------------------------------------------------------------------
    proc ::Load_osirix_examples_Image( STRING imname, NUM n ) {
      ::url_name = "http://www.osirix-viewer.com/datasets/DATA/%1%.zip" % imname
      varname=::Im2Var_osirix_examples(imname)
      ::output_filename  = varname
      ::output_imagename = varname
      ::win.Update(-1)
      ::ReadDicomArchive()
    }

    #---------------------------------------------------------------------------
    SetStatusText("Creating SIPI callbacks")
    for n=0 to ::sipi_misc.size()-1\
    {
      SetProgress(100.0*n/::sipi_misc.size())
      imname = ::sipi_misc[n]
      varname = ::Im2Var_sipi_misc(::sipi_misc[n])
      cmd = "proc ::Load_%1%( ) " % varname +\
            "{ ::Load_SIPI_misc_Image(\"%1%\"" % imname+\
            ",%1%); };" % n
      #printn cmd
      eval cmd
    }
    SetStatusText("Done")
    SetProgress(0)

    SetStatusText("Creating Orisix callbacks")
    for n=0 to ::osirix_examples.size()-1\
    {
      SetProgress(100.0*n/::osirix_examples.size())
      imname = ::osirix_examples[n].name
      varname = ::Im2Var_osirix_examples(::osirix_examples[n].name)
      cmd = "proc ::Load_%1%( ) " % varname +\
            "{ ::Load_osirix_examples_Image(\"%1%\"" % imname+\
            ",%1%); };" % n
      #printn cmd
      eval cmd
    }
    SetStatusText("Done")
    SetProgress(0)

    #---------------------------------------------------------------------------
    proc ::IconFileName( STRING imname ) \
    {
      return = ::user_script_path+"/%1%_32x32.png" % imname
    }


    #---------------------------------------------------------------------------
    proc ::LoadImageIcon( STRING imname ) \
    {
      icon_filename = ::IconFileName(imname)
      if wx.wxFileName(icon_filename).FileExists() {
        eval "::%1%_icon = wx.wxImage(icon_filename);" % imname
        return=true
      } else {
        if !exists(::_Picture) {
          ::icons.LoadIconPNG("Picture")
        }
        eval "::%1%_icon = &::icons._Picture;" % imname
        return=false
      }
    }


    #---------------------------------------------------------------------------
    proc ::AddImageButton( STRING varname) \
    {
      printn "Starting ::AddImageButton(%1%)" %varname
      return=::LoadImageIcon(varname);
      eval "bmp = wx.wxBitmap(&::%1%_icon.Scale(32,32));" % varname
      #eval "::bmp_%1% = &bmp;" % varname
      callback_name = "Load_%1%" % varname

      # more complicate to allow changing the image afterwards
      #eval "return = ::win.AddBitmapButton(\"%1%\", ::%1%, &bmp);" % callback_name
      sizer = ::win.GetCurrentSizer()
      bb0 = wx.wxBitmapButton(&::win.CurrentParent(),wx.wxID_ANY,&bmp)
      # TODO: tooltip
      #bb0.SetToolTip("Wiki link")
      #flags = wx.wxSizerFlags(0)
      sizer.Add(&bb0,wx.wxSizerFlags(0).Border(wx.wxALL, 2))

      eval "evh_bt0 = wx.wxAmiEventHandler(&::%1%);" % callback_name
      bb0.Connect(wx.wxEVT_COMMAND_BUTTON_CLICKED,&evh_bt0.GetEventFunction(),\
                  &NULL,&evh_bt0)
      # can't free the event handler, otherwise segfault ..
      eval "::evh_bt_%1% = &evh_bt0;" % varname
      # keep the bitmap button for posterior use 
      eval "::bb_%1% = &bb0;" % varname

    }

    #---------------------------------------------------------------------------
    proc ::AddDenoisingButtons( ) \
    {
      ::win.BeginBoxPanel("Natural Denoising Images")
        ::win.BeginHorizontal()
        c=0
        for n=0 to ::den_list.size()-1 {
          ::AddImageButton(::den_list[n])
          c++
          if (c%4)==0 {
            ::win.EndHorizontal()
            ::win.BeginHorizontal()
          }
        }
        ::win.EndHorizontal()
      ::win.EndBoxPanel()
    }


    #---------------------------------------------------------------------------
    proc ::SIPI_misc_load_previews( ) \
    {
      for n=0 to ::sipi_misc.size()-1 {
        imname = ::sipi_misc[n]
        varname = ::Im2Var_sipi_misc(::sipi_misc[n])
        # 1. check if the icon exists
        icon_filename = ::IconFileName(varname)
        if !wx.wxFileName(icon_filename).FileExists() {
          # preview link
          SetStatusText(  " getting file %1%  " % varname + \
                          " %1%"%(n+1) + "/%1%" % ::sipi_misc.size())
          SetProgress((100.0*n)/(::sipi_misc.size()-1))
          preview_link = "http://sipi.usc.edu/database/preview/misc/%1%.png" \
                            % imname
          ::URL2Icon(preview_link,varname)
          # Read icon
          eval "::%1%_icon = wx.wxImage(icon_filename);" % varname
          # Set corresponding button
          eval "::bb_%1%.SetBitmapLabel(&wx.wxBitmap(&::%1%_icon));" % varname
        }
      }
      SetProgress(0)
    }

    #---------------------------------------------------------------------------
    proc ::Osirix_load_previews( ) \
    {
      #
      for n=0 to ::osirix_examples.size()-1 {
        imname = ::osirix_examples[n].name
        # special case ...
        if imname == "WRIX" { imname = "WRIST"; }
        varname = ::Im2Var_osirix_examples(::osirix_examples[n].name)
        # 1. check if the icon exists
        printn "varname = %1%" % varname
        icon_filename = ::IconFileName(varname)
        if !wx.wxFileName(icon_filename).FileExists() {
          # preview link
          SetStatusText(  " getting file %1%  " % varname + \
                          " %1%"%(n+1) + "/%1%" % ::osirix_examples.size())
          SetProgress((100.0*n)/(::osirix_examples.size()-1))
          preview_link = "http://www.osirix-viewer.com/datasets/Thumbnails/%1%.jpg" \
                            % imname
          ::URL2Icon(preview_link,varname)
          # Read icon
          eval "::%1%_icon = wx.wxImage(icon_filename);" % varname
          # Set corresponding button
          eval "::bb_%1%.SetBitmapLabel(&wx.wxBitmap(&::%1%_icon));" % varname
        }
      }
      SetProgress(0)
    }

    #---------------------------------------------------------------------------
    proc ::Add_SIPI_misc_Buttons( ) \
    {
      ::win.BeginBoxPanel("SIPI database: misc")
        ::win.AddButton("Load Previews",&::SIPI_misc_load_previews)
        ::win.BeginHorizontal()
        c=0
        SetStatusText("Adding SIPI misc bitmap buttons")
        for n=0 to ::sipi_misc.size()-1 {
          SetProgress(100*n/::sipi_misc.size())
          #printn "1"
          imname = ::sipi_misc[n]
          #printn imname
          varname = ::Im2Var_sipi_misc(::sipi_misc[n])
          ok = ::AddImageButton(varname)
          ::sipi_misc_has_icon[n] = ok
          c++
          if (c%4)==0 {
            ::win.EndHorizontal()
            ::win.BeginHorizontal()
          }
        }
        SetStatusText("Done")
        SetProgress(0)
        ::win.EndHorizontal()
      ::win.EndBoxPanel()
    }

    #---------------------------------------------------------------------------
    proc ::Add_Osirix_Buttons( ) \
    {
      ::win.BeginBoxPanel("Osirix image example database")
        ::win.AddButton("Load Previews",&::Osirix_load_previews)
        ::win.BeginHorizontal()
        c=0
        SetStatusText("Adding Osirix bitmap buttons")
        for n=0 to ::osirix_examples.size()-1 {
          SetProgress(100*n/::osirix_examples.size())
          #printn "1"
          imname = ::osirix_examples[n].name
          varname = ::Im2Var_osirix_examples(::osirix_examples[n].name)
          ok = ::AddImageButton(varname)
          #if n==0 {
          tt = "%1%"      % (::osirix_examples[n].modality)
          tt = tt+", %1%" % (::osirix_examples[n].size)
          tt = tt+", %1%" % (::osirix_examples[n].descr)
          cmd =  "::bb_%1%."%varname
          cmd = cmd + ("SetToolTip(\"%1%\");" % tt)
          eval cmd
          #}
          ::osirix_examples_has_icon[n] = ok
          c++
          if (c%4)==0 {
            ::win.EndHorizontal()
            ::win.BeginHorizontal()
          }
        }
        SetStatusText("Done")
        SetProgress(0)
        ::win.EndHorizontal()
      ::win.EndBoxPanel()
    }

    #---------------------------------------------------------------------------
    proc ::Download_size( ) \
    {
      SetStatusText(" Output size = %1%" % wx.wxFileName(::output_fname).\
        GetSize().ToDouble()/1000 )
    }

    #---------------------------------------------------------------------------
    proc ::URL2File( STRING urlstr, STRING fname) \
    {
      ::evh = wx.wxAmiEventHandler(&::Download_size)
      ::timer = wx.wxTimer(&::evh)
      ::evh.Connect(wx.wxEVT_TIMER,&::evh.GetEventFunction())
      ::timer.Start(1000)
      ::output_fname = fname
      url = wx.wxURL(urlstr)
      if url.IsOk() {
        in_st = url.GetInputStream()
        if (in_st.IsOk()) {
          out_file = wxFileOutputStream(fname)
          canread = in_st.CanRead()
          while canread {
            in_st.Read(&out_file)
            SetStatusText("%1% Kb read from url stream" % (in_st.LastRead()/1000))
            canread = in_st.CanRead()
          }
          return=true
        } else {
          printn "input stream not OK"
          return=false
        }
      } else {
        InfoDialog "url [%1%] not valid" % urlstr
        return=false
      }
      ::timer.Stop()
    }

    #---------------------------------------------
    proc ::URL2Icon( STRING urlstr, STRING varname) \
    {
      printn "%1%" % urlstr
      icon_filename = ::IconFileName(varname)
      url = wx.wxURL(urlstr)
      if url.IsOk() {
        in_st = url.GetInputStream()
        # write to a MemoryOutputStream
        out_mem = wxMemoryOutputStream()
        canread = in_st.CanRead()
        while canread {
          in_st.Read(&out_mem)
          SetStatusText("%1% Kb read from url stream" % (in_st.LastRead()/1000))
          canread = in_st.CanRead()
        }
        # initialize a MemoryInputStream from the result
        in_mem = wxMemoryInputStream(&out_mem)

        if (in_mem.IsOk()) {
          SetStatusText("Reading image")
          out_wxim = wx.wxImage(&in_mem)
          if out_wxim.IsOk() {
            SetStatusText("Image OK, resizing")
            wxim_32 = out_wxim.Scale(32,32,wx.wxIMAGE_QUALITY_HIGH)
            saved = wxim_32.SaveFile(icon_filename)
            SetStatusText("file %1% saved = " % icon_filename + " %1%" % saved)
          }
        } else {
          printn "input stream not OK"
        }
      } else {
        InfoDialog "url [%1%] not valid" % urlstr
      }
    }

    #-----------------------------------------------
    proc ::OnUrl() \
    {
      SetStatusText("::OnUrl")
      sipi_found=false
      sipi_test="http://sipi.usc.edu/database/download.php\\?vol=([[:alnum:]]*)&img=([[:digit:].]*)"
      printn wx.FromWxString(wx.wxString(sipi_test))
      del sumre
      sumre = wx.wxRegEx(sipi_test,wx.wxRE_ADVANCED)
      sumre.Compile(sipi_test)
      if sumre.IsValid() {
        printn "::url_name = '%1%'" % ::url_name
        if sumre.Matches(::url_name) {
          sipi_found=true
          res1 = wx.FromWxString(sumre.GetMatch(&::url_name,1))
          res2 = wx.FromWxString(sumre.GetMatch(&::url_name,2))
          printn "res1=%1%" %res1
          printn "res2=%1%" %res2
          name = res1+"_"+res2
          ::output_filename  = name
          imname = wx.wxString(name)
          imname.Replace(".","_")
          ::output_imagename = wx.FromWxString(imname)
        } else {
          SetStatusText("no match")
        }
      } else {
        SetStatusText("Invalid Regular Expression !")
      }

      if !sipi_found {
        ::output_filename  = wx.FromWxString(wx.wxFileName(::url_name).GetFullName())
        ::output_imagename = wx.FromWxString(wx.wxFileName(::url_name).GetName())
      }
      ::win.Update(-1)
    }

    #-----------------------------------------------
    proc ::SaveIcon() \
    {
      ::URL2Icon(::url_name,::output_filename)
    }

    #-----------------------------------------------
    proc ::SaveFile() \
    {
      ::URL2File(::url_name,::output_path+"/"+::output_filename)
    }

    #-----------------------------------------------
    proc ::ReadImage( NUM saveicon) \
    {
      wx_fname = wx.wxFileName.CreateTempFileName(::output_filename)
      wx_fname.Replace("\\","/")
      fname = wx.FromWxString(wx_fname)
      SetStatusText("temporary file is "+fname)
      ::URL2File(::url_name,fname)
      imname = wx.FromWxString(wx.wxFileName(::output_imagename).GetName())
      cmd= "global::"+imname+" = Image \"%1%\";" % fname
      SetStatusText(cmd)
      eval cmd
      cmd= "show global::"+imname+";"
      SetStatusText(cmd)
      eval cmd

      if saveicon {
        icon_filename = ::IconFileName(::output_imagename)
        out_wxim = wx.wxImage(fname)
        if out_wxim.IsOk() {
          SetStatusText("Image OK, resizing")
          wxim_32 = out_wxim.Scale(32,32,wx.wxIMAGE_QUALITY_HIGH)
          saved = wxim_32.SaveFile(icon_filename)
          SetStatusText("file %1% saved = " % icon_filename + " %1%" % saved)
        }
      }

    }
    
    #-----------------------------------------------
    proc ::ReadDicomArchive( ) \
    {
      wx_fname = wx.wxFileName(::download_dir+"/"+::output_filename+".zip").\
                   GetFullPath()
      wx_fname.Replace("\\","/")
      fname = wx.FromWxString(wx_fname)
      printn "Output file is "+fname
      ::URL2File(::url_name,fname)
      imname = wx.FromWxString(wx.wxFileName(::output_imagename).GetName())

      #cmd= "global::"+imname+" = Image \"%1%\";" % fname
      #SetStatusText(cmd)
      #eval cmd
      #cmd= "show global::"+imname+";"
      #SetStatusText(cmd)
      #eval cmd

    }

    #---------------------------------------------------
    proc ::Gui() {
    
      if (exists(::parent_panel)) {
        ::win = ParamPanel("URLLoad",&::parent_panel)
      } else {
        ::win = ParamPanel("URLLoad")
      }
      

      ::win.AddString(&::url_name,"URL")
      ::win.SetCallback(&::OnUrl)

      ::win.AddDirname(&::output_path, "Path")
      ::win.AddString( &::output_filename,  "Filename")
      ::win.AddString( &::output_imagename, "Image name")
    
      ::win.AddButton("ReadImage",&::ReadImage)
      ::win.BeginHorizontal()
        ::win.AddButton("SaveFile", &::SaveFile)
        ::win.AddButton("SaveIcon", &::SaveIcon)
      ::win.EndHorizontal()

      if wx.wxFileName(::html_filename).FileExists() {
        ::AddHelpPage(&::win)
      }

      ::win.BeginBook()
        ::win.AddPage("Standard")
          ::AddDenoisingButtons()
        ::win.AddPage("sipi")
          ::Add_SIPI_misc_Buttons( )
        ::win.AddPage("Osirix")
          ::Add_Osirix_Buttons( )
      ::win.EndBook()
    
      ::AddStandardButtons(&::win)

      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::win.Update(-1)


    }
    ::Init()
    
  }
  # End of class
  
} 
# End of If
