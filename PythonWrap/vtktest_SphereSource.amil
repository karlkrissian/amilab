

# almost like the python example
#!/usr/bin/env python

# This simple example shows how to do basic texture mapping.

import_vtk
func "Common/ScriptGui"

Class vtktest_SphereSourceClass : public ScriptGui \
{

  #----------------------------
  proc ::Init() {
    ::input_name  =  "", "name of the input image"
    ::mode = INT(0), "0: plane, 1: sphere"
    ::theta_res = INT(20), "Theta resolution"
    ::phi_res = INT(10), "Phi resolution"
    ::theta = INT(360), "maximum longitude angle"
    ::phi = INT(180), "maximum latitude angle"
  }

  #----------------------------
  proc ::load_input() {
    if (exists(::input)) { del ::input; }
    eval "::input = &"+::input_name+";"
    if (::input_name=="BrowseImage") {
      ::input_name = "::input"
    }
    ::win.Update(-1)
  }

  #----------------------------
  proc ::ImReload() \
  {
    ::load_input()
  }
  Comments(::ImReload,"(Re)Loads the input image.")

  #----------------------------
  proc ::CreateFrame() \
  {
    ::frame = wx.wxFrame(&ami.MainFrame,wx.wxID_ANY,"Frame Title",\
          wx.wxPoint(100,100),wx.wxSize(300,300),\
          wx.wxRESIZE_BORDER|wx.wxCLOSE_BOX,"test")
    ::frame.Show()


    ::sizer = wx.wxBoxSizer(wx.wxVERTICAL)
    ::frame.SetSizer( &::sizer )      # use the sizer for layout

    ::panel = wx.wxScrolledWindow(&::frame)
    ::panel.SetScrollbars(20, 20, 50, 50);
    ::panel.SetMinSize(&wx.wxSize(50,50))

    sbox = wx.wxStaticBox(&::panel,wx.wxID_ANY,"VTK-test")
    ::sbox_sizer = wx.wxStaticBoxSizer(&sbox,wx.wxVERTICAL)
    ::panel.SetSizer(&::sbox_sizer)
    # create widget here

    ::renwin_interact = global::wxVTKRenderWindowInteractor(&::panel,wx.wxID_ANY)
      #::renwin_interact = wxVTKFrame(&panel,-1)

    ::renwin_interact.UseCaptureMouseOn()
    ::renwin_interact.SetMinSize(&wx.wxSize(50,50))
    # Still drawing problem (missed exposed events???)
    ::renwin_interact.SetBackgroundColour(wx.wxColour(0,0,0))

    ::renwin_interact.Reparent(&::panel)
    ::sbox_sizer.Add(&::renwin_interact, wx.wxSizerFlags().Expand().Proportion(1) )

    ::sizer.Add(&::panel, wx.wxSizerFlags().Expand().Proportion(1) )
    #::panel.Fit()
    ::frame.SetMinSize(wx.wxSize(250,250))
    ::frame.Fit()

  }

  #----------------------------
  proc ::OnSphere() \
  {
    if (exists(::sphere)) {
      ::sphere.SetThetaResolution(::theta_res)
      ::sphere.SetPhiResolution(::phi_res)
      ::sphere.SetTheta(::theta)
      ::sphere.SetPhi(::phi)
      if (exists(::renwin)) { ::renwin.Render(); }
    }
  }

  #----------------------------
  proc ::Run() {
    if (!exists(::input)) {
      ::load_input()
    }
    # Load in the texture map. A texture is any unsigned char image. If it
    # is not of this type, you will have to map it through a lookup table
    # or by using vtkImageShiftScale.

    vtkinput  = global::ToVtkImageData(&::input)

    #bmpReader = vtk.vtkBMPReader.New()
    #bmpReader.SetFileName(::texture_filename)
    atext = vtk.vtkTexture.New()
    atext.SetInput(&vtkinput)
    atext.InterpolateOn()
    
    # Create a plane source and actor. The vtkPlanesSource generates
    # texture coordinates.
    if (::mode==0) {
      plane = vtk.vtkPlaneSource.New()
      polydataMapper = vtk.vtkPolyDataMapper.New()
      polydataMapper.SetInputConnection(&plane.GetOutputPort())
    }
    if (::mode==1) {
      ::sphere = vtk.vtkTexturedSphereSource.New()
      polydataMapper = vtk.vtkPolyDataMapper.New()
      polydataMapper.SetInputConnection(&::sphere.GetOutputPort())
      ::OnSphere()
    }

    planeActor = vtk.vtkActor.New()
    planeActor.SetMapper(&polydataMapper)
    planeActor.SetTexture(&atext)
    
    # Create the RenderWindow, Renderer and both Actors
    ren = vtk.vtkRenderer.New()
    ::renwin   = ::renwin_interact.GetRenderWindow()
    ::renwin.AddRenderer(&ren)
    iren = &::renwin_interact
    
    # Add the actors to the renderer, set the background and size
    ren.AddActor(&planeActor)
    ren.SetBackground(0.1, 0.2, 0.4)
    ::renwin.SetSize(500, 500)
    
    ren.ResetCamera()
    cam1 = ren.GetActiveCamera()
    cam1.Elevation(-30)
    cam1.Roll(-20)
    ren.ResetCameraClippingRange()
    
    #iren.Initialize()
    interact = vtk.vtkInteractorStyleTrackballCamera.New()
    ::renwin_interact.SetInteractorStyle(&interact)
    ::renwin.Render()
    #iren.Start()
  }

    #----------------------------
    # Redefinition of Close to close the panel tab in main_book
    #
    proc ::Close() {
      ::frame.Close()
      ::win.HidePanel()
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")

    #----------------------------
    proc ::Gui() {
    
      ::win = global::ami_import.ParamPanel("vtkTexture 2D")
      
      ::win.BeginBook()
    
        ::win.AddPage("IO")
          # set the input image drawing window
          ::win.BeginBoxPanel("Input")
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::AddBitmapButton16(&::win, &::icons._Refresh, "ImReload")
              #::win.AddButton( "ImReload",&::ImReload)
            ::win.EndHorizontal()
          ::win.EndBoxPanel()

          ::mode_id = ::win.AddEnum(&::mode,"Mode")
            ::win.AddEnumChoice(::mode_id,"Plane")
            ::win.AddEnumChoice(::mode_id,"Sphere")

          ::win.AddButton("Run",&::Run)

        ::win.AddPage("Params")
          ::win.AddInt(&::theta_res,"theta-res",0,100)
          ::win.SetCallback( &::OnSphere)
          ::win.AddInt(&::phi_res,"phi-res",0,100)
          ::win.SetCallback( &::OnSphere)

          ::win.AddInt(&::theta,"theta",0,360)
          ::win.SetCallback( &::OnSphere)

          ::win.AddInt(&::phi,"phi",0,360)
          ::win.SetCallback( &::OnSphere)

      ::win.EndBook()

      ::AddStandardButtons(&::win)
      ::win.Display()
      ::win.Update(-1)
    }

  ::Init()
  ::CreateFrame()
}
