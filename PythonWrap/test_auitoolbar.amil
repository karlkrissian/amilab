
newtb = wx.wxAuiToolBar(&ami.MainFrame, wx.wxID_ANY, \
                    wx.wxPoint(-1,-1), \
                    wx.wxSize(-1,-1), \
                    wx.wxAUI_TB_DEFAULT_STYLE | wx.wxAUI_TB_OVERFLOW)

newtb.SetToolBitmapSize(wx.wxSize(36,36))

func "Common/LoadIcons.amil"
LoadIcons icons

# Add two icons: open and save

# we need to be sure that the id is not in use ...
Class toolbar_id \
{
  ::open_id = 3001
  ::close_id = 3002
}
toolbar_id tbid

newtb.AddTool(tbid.open_id,  "Open", wx.wxBitmap(icons._Open),"Open")
newtb.AddSeparator()
newtb.AddTool(tbid.close_id, "Close", wx.wxBitmap(icons._Close),"Close")
newtb.Realize()

# add the toolbars to the manager
mgr = ami.MainFrame.GetAuiManager()
mgr.AddPane(&newtb, wx.wxAuiPaneInfo().\
              Name("newtb").Caption("New Toolbar"). \
              ToolbarPane().Top().\
              LeftDockable(false).RightDockable(false))

# tell the manager to "commit" all the changes just made
mgr.Update()

# now deal with button events ...
proc TB_Open() { InfoDialog("open ..."); }
evoph=wx.wxAmiEventHandler(&TB_Open)

# wxEVT_COMMAND_TOOL_CLICKED event (a synonym for wxEVT_COMMAND_MENU_SELECTED)
newtb.Connect(tbid.open_id,wx.wxEVT_COMMAND_MENU_SELECTED,&evoph.GetEventFunction(),\
                      wx.wxObject(),&evoph)
