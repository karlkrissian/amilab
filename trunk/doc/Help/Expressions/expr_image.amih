
***** expr_image: Image expression *****

token(s):
SIN     sin
COS     cos
TAN     tan
ACOS    acos
ASIN    asin
ATAN    atan
EXP     exp
LOG     log
LN      ln
LE_OP   <=
GE_OP   >=
EQ_OP   ==
NE_OP   !=
AND_OP  &&
OR_OP   ||


description:
Arithmetic expression can be applied to images.
This provides a very intuitive way to operate
point to point on one or several images and to create
new images.

The operators sorted by priority order are 
(for more detailed rules, see the appendices):

1.  primary_image
	  image, ( expr_image )

2.  unary_image
    [-,+] cast_image,
    SIN:  sinus, 
    COS:  cosinus, 
    TAN:  tangent, 
    ASIN: arcsinus, 
    ACOS: arccosinus, 
    ATAN: arctangent, 
    EXP:  exponential, 
    LOG:  logarithm basis 10, 
    LN:   neperian logarithm,

3.  cast_image
    ( basic_type ) unary_image: image conversion

4.  multiplicative_image
    multiplicative_image * cast_expr  : multiplication of an image by a scalar
    multiplicative_image / cast_expr  : division of an image by a scalar

    multiplicative_image * cast_image : multiplication of an image by another image
    multiplicative_image / cast_image : division of an image by another image

5.  additive image
    additive_image + multiplicative_expr: addition of a scalar to an image
    additive_image - multiplicative_expr: subtraction of a scalar to an image
    additive_image + multiplicative_image: addition    of two images
    additive_image - multiplicative_image: subtraction of two images

6.  shift_image (= additive_image)

7.  relational_image
    // Comparison between two images
    relational_image <     shift_image: inferior,return 1 or 0 for each {vo,pi}xel.
    relational_image >     shift_image: superior
    relational_image LE_OP shift_image: lower or equal
    relational_image GE_OP shift_image: greater or equal
    // Comparison between an image and a scalar
    relational_image <     shift_expr: inferior, return 1 or 0 for each {vo,pi}xel.
    relational_image >     shift_expr: superior
    relational_image LE_OP shift_expr: lower or equal
    relational_image GE_OP shift_expr: greater or equal

8.  equality_image
    equality_image EQ_OP relational_image: equal,
    equality_image NE_OP relational_image: not equal

9.  and_image
    and_image & equality_image: and

10. exclusive_or_image
    exclusive_or_image ^ and_image: exclusive or

11. inclusice_or_image
    inclusive_or_image | exclusive_or_image: or

12. logical_and_image
    logical_and_image AND_OP inclusive_or_image: logical and

13. logical_or_image
    logical_or_image OR_OP logical_and_image: logical or

14. conditional_image
    logical_or_image ? logical_or_image : conditional_image
    conditional expression

15. assignment_image
    unary_image assignment_operator assignment_image

16. expr_image

Remark:
The multiplication of two vectorial images
is their scalar product.


Example(s):
- Thresholding an image i 
ti = i>50

- multiplying the image by 2 
i = i*2

- Combining to images i and j if j is higher than 50
k = i + j*(j>50)

- Computing the sinus of an image
j = sin(i)

- scalar product between two vectorial images
sij = i*j

******************************