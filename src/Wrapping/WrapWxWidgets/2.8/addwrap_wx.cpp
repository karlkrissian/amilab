/*
 * Automatic wrapping of 'wx' library for AMILab.
 * File: wrap/wx2.8//addwrap_wx.cpp
 * Generated by the script './parse_xml/parse_xml2.py'
 * Date: '09-12-2010'
 */

// Currently 177 objects (classes,structures,typedefs,...) are wrapped 
#include "wrap_wxAcceleratorEntry.h"
#include "wrap_wxAcceleratorTable.h"
#include "wrap_wxActivateEvent.h"
#include "wrap_wxAmiEventHandler.h"
#include "wrap_wxArrayInt.h"
#include "wrap_wxAuiDockArt.h"
#include "wrap_wxAuiFloatingFrame.h"
#include "wrap_wxAuiManager.h"
#include "wrap_wxAuiManagerEvent.h"
#include "wrap_wxAuiNotebook.h"
#include "wrap_wxAuiPaneInfo.h"
#include "wrap_wxAuiPaneInfoArray.h"
#include "wrap_wxAuiTabArt.h"
#include "wrap_wxAuiToolBar.h"
#include "wrap_wxAuiToolBarArt.h"
#include "wrap_wxAuiToolBarItem.h"
#include "wrap_wxAuiToolBarItemArray.h"
#include "wrap_wxBaseArrayInt.h"
#include "wrap_wxBitmap.h"
#include "wrap_wxBitmapBase.h"
#include "wrap_wxBitmapButton.h"
#include "wrap_wxBitmapButtonBase.h"
#include "wrap_wxBitmapHandler.h"
#include "wrap_wxBitmapHandlerBase.h"
#include "wrap_wxBoxSizer.h"
#include "wrap_wxBrush.h"
#include "wrap_wxBrushBase.h"
#include "wrap_wxButton.h"
#include "wrap_wxButtonBase.h"
#include "wrap_wxCharBuffer.h"
#include "wrap_wxChildFocusEvent.h"
#include "wrap_wxClassInfo.h"
#include "wrap_wxClientData.h"
#include "wrap_wxClientDataContainer.h"
#include "wrap_wxCloseEvent.h"
#include "wrap_wxColour.h"
#include "wrap_wxColourBase.h"
#include "wrap_wxCommandEvent.h"
#include "wrap_wxCommandEventFunction.h"
#include "wrap_wxConfigBase.h"
#include "wrap_wxControl.h"
#include "wrap_wxControlBase.h"
#include "wrap_wxCursor.h"
#include "wrap_wxDC.h"
#include "wrap_wxDCBase.h"
#include "wrap_wxDateSpan.h"
#include "wrap_wxDateTime.h"
#include "wrap_wxDialog.h"
#include "wrap_wxDialogBase.h"
#include "wrap_wxDrawObject.h"
#include "wrap_wxEvent.h"
#include "wrap_wxEventTable.h"
#include "wrap_wxEventTableEntryBase.h"
#include "wrap_wxEvtHandler.h"
#include "wrap_wxFSFile.h"
#include "wrap_wxFileName.h"
#include "wrap_wxFileSystem.h"
#include "wrap_wxFileSystemHandler.h"
#include "wrap_wxFocusEvent.h"
#include "wrap_wxFont.h"
#include "wrap_wxFontBase.h"
#include "wrap_wxFrame.h"
#include "wrap_wxFrameBase.h"
#include "wrap_wxGDIObject.h"
#include "wrap_wxHelpEvent.h"
#include "wrap_wxHtmlCell.h"
#include "wrap_wxHtmlContainerCell.h"
#include "wrap_wxHtmlEntitiesParser.h"
#include "wrap_wxHtmlFilter.h"
#include "wrap_wxHtmlLinkInfo.h"
#include "wrap_wxHtmlParser.h"
#include "wrap_wxHtmlRenderingInfo.h"
#include "wrap_wxHtmlRenderingState.h"
#include "wrap_wxHtmlRenderingStyle.h"
#include "wrap_wxHtmlSelection.h"
#include "wrap_wxHtmlTag.h"
#include "wrap_wxHtmlTagHandler.h"
#include "wrap_wxHtmlTagsModule.h"
#include "wrap_wxHtmlWinParser.h"
#include "wrap_wxHtmlWindow.h"
#include "wrap_wxHtmlWindowInterface.h"
#include "wrap_wxIcon.h"
#include "wrap_wxIconBundle.h"
#include "wrap_wxIconLocation.h"
#include "wrap_wxIconLocationBase.h"
#include "wrap_wxIdleEvent.h"
#include "wrap_wxImage.h"
#include "wrap_wxImageHandler.h"
#include "wrap_wxImageHistogram.h"
#include "wrap_wxImageHistogramBase.h"
#include "wrap_wxImageHistogramBase_wxImplementation_HashTable.h"
#include "wrap_wxImageHistogramBase_wxImplementation_KeyEx.h"
#include "wrap_wxImageHistogramBase_wxImplementation_Pair.h"
#include "wrap_wxImageHistogramEntry.h"
#include "wrap_wxInitDialogEvent.h"
#include "wrap_wxInputStream.h"
#include "wrap_wxIntegerEqual.h"
#include "wrap_wxIntegerHash.h"
#include "wrap_wxKeyEvent.h"
#include "wrap_wxLayoutConstraints.h"
#include "wrap_wxList.h"
#include "wrap_wxListBase.h"
#include "wrap_wxListKey.h"
#include "wrap_wxLongLongNative.h"
#include "wrap_wxMBConv.h"
#include "wrap_wxMask.h"
#include "wrap_wxMenu.h"
#include "wrap_wxMenuBar.h"
#include "wrap_wxMenuBarBase.h"
#include "wrap_wxMenuBase.h"
#include "wrap_wxMenuEvent.h"
#include "wrap_wxMenuItem.h"
#include "wrap_wxMenuItemBase.h"
#include "wrap_wxMenuItemList.h"
#include "wrap_wxMessageDialog.h"
#include "wrap_wxMessageDialogBase.h"
#include "wrap_wxMiniFrame.h"
#include "wrap_wxModule.h"
#include "wrap_wxMouseEvent.h"
#include "wrap_wxNavigationKeyEvent.h"
#include "wrap_wxNodeBase.h"
#include "wrap_wxObject.h"
#include "wrap_wxObjectEventFunction.h"
#include "wrap_wxObjectList.h"
#include "wrap_wxObjectListNode.h"
#include "wrap_wxObjectRefData.h"
#include "wrap_wxOutputStream.h"
#include "wrap_wxPaintEvent.h"
#include "wrap_wxPalette.h"
#include "wrap_wxPaletteBase.h"
#include "wrap_wxPanel.h"
#include "wrap_wxPen.h"
#include "wrap_wxPoint.h"
#include "wrap_wxRect.h"
#include "wrap_wxRegion.h"
#include "wrap_wxRegionBase.h"
#include "wrap_wxScrollHelper.h"
#include "wrap_wxScrollHelperNative.h"
#include "wrap_wxScrollWinEvent.h"
#include "wrap_wxScrolledWindow.h"
#include "wrap_wxSize.h"
#include "wrap_wxSizeEvent.h"
#include "wrap_wxSizer.h"
#include "wrap_wxSizerFlags.h"
#include "wrap_wxSizerItem.h"
#include "wrap_wxSizerItemList.h"
#include "wrap_wxStaticBox.h"
#include "wrap_wxStaticBoxBase.h"
#include "wrap_wxStaticBoxSizer.h"
#include "wrap_wxStatusBar.h"
#include "wrap_wxStatusBarBase.h"
#include "wrap_wxStdDialogButtonSizer.h"
#include "wrap_wxStreamBase.h"
#include "wrap_wxString.h"
#include "wrap_wxStringBase.h"
#include "wrap_wxSysColourChangedEvent.h"
#include "wrap_wxThread.h"
#include "wrap_wxTimeSpan.h"
#include "wrap_wxToolBar.h"
#include "wrap_wxToolBarBase.h"
#include "wrap_wxToolBarToolBase.h"
#include "wrap_wxTopLevelWindow.h"
#include "wrap_wxTopLevelWindowBase.h"
#include "wrap_wxTopLevelWindowGTK.h"
#include "wrap_wxULongLongNative.h"
#include "wrap_wxUpdateUIEvent.h"
#include "wrap_wxValidator.h"
#include "wrap_wxVisualAttributes.h"
#include "wrap_wxWCharBuffer.h"
#include "wrap_wxWindow.h"
#include "wrap_wxWindowBase.h"
#include "wrap_wxWindowList.h"
#include "wrap_wxWindowListNode.h"
#include "wrap_wxWritableCharBuffer.h"
#include "wrap_wxWritableWCharBuffer.h"
#include "wrap_wxwxMenuItemListNode.h"
#include "wrap_wxwxSizerItemListNode.h"

/*
 * Adding all the wrapped classes to the library context.
 * @param context the library context.
 */
void wrap_wx_classes( Variables::ptr& context)
{

  // Create a macro to simplify ...
  #define ADD_WX_CLASS(classname) \
    WrapClass_##classname::AddStaticMethods( context);

  ADD_WX_CLASS( wxAcceleratorEntry)
  ADD_WX_CLASS( wxAcceleratorTable)
  ADD_WX_CLASS( wxActivateEvent)
  ADD_WX_CLASS( wxAmiEventHandler)
  ADD_WX_CLASS( wxArrayInt)
  ADD_WX_CLASS( wxAuiDockArt)
  ADD_WX_CLASS( wxAuiFloatingFrame)
  ADD_WX_CLASS( wxAuiManager)
  ADD_WX_CLASS( wxAuiManagerEvent)
  ADD_WX_CLASS( wxAuiNotebook)
  ADD_WX_CLASS( wxAuiPaneInfo)
  ADD_WX_CLASS( wxAuiPaneInfoArray)
  ADD_WX_CLASS( wxAuiTabArt)
  ADD_WX_CLASS( wxAuiToolBar)
  ADD_WX_CLASS( wxAuiToolBarArt)
  ADD_WX_CLASS( wxAuiToolBarItem)
  ADD_WX_CLASS( wxAuiToolBarItemArray)
  ADD_WX_CLASS( wxBaseArrayInt)
  ADD_WX_CLASS( wxBitmap)
  ADD_WX_CLASS( wxBitmapBase)
  ADD_WX_CLASS( wxBitmapButton)
  ADD_WX_CLASS( wxBitmapButtonBase)
  ADD_WX_CLASS( wxBitmapHandler)
  ADD_WX_CLASS( wxBitmapHandlerBase)
  ADD_WX_CLASS( wxBoxSizer)
  ADD_WX_CLASS( wxBrush)
  ADD_WX_CLASS( wxBrushBase)
  ADD_WX_CLASS( wxButton)
  ADD_WX_CLASS( wxButtonBase)
  ADD_WX_CLASS( wxCharBuffer)
  ADD_WX_CLASS( wxChildFocusEvent)
  ADD_WX_CLASS( wxClassInfo)
  ADD_WX_CLASS( wxClientData)
  ADD_WX_CLASS( wxClientDataContainer)
  ADD_WX_CLASS( wxCloseEvent)
  ADD_WX_CLASS( wxColour)
  ADD_WX_CLASS( wxColourBase)
  ADD_WX_CLASS( wxCommandEvent)
  ADD_WX_CLASS( wxCommandEventFunction)
  ADD_WX_CLASS( wxConfigBase)
  ADD_WX_CLASS( wxControl)
  ADD_WX_CLASS( wxControlBase)
  ADD_WX_CLASS( wxCursor)
  ADD_WX_CLASS( wxDC)
  ADD_WX_CLASS( wxDCBase)
  ADD_WX_CLASS( wxDateSpan)
  ADD_WX_CLASS( wxDateTime)
  ADD_WX_CLASS( wxDialog)
  ADD_WX_CLASS( wxDialogBase)
  ADD_WX_CLASS( wxDrawObject)
  ADD_WX_CLASS( wxEvent)
  ADD_WX_CLASS( wxEventTable)
  ADD_WX_CLASS( wxEventTableEntryBase)
  ADD_WX_CLASS( wxEvtHandler)
  ADD_WX_CLASS( wxFSFile)
  ADD_WX_CLASS( wxFileName)
  ADD_WX_CLASS( wxFileSystem)
  ADD_WX_CLASS( wxFileSystemHandler)
  ADD_WX_CLASS( wxFocusEvent)
  ADD_WX_CLASS( wxFont)
  ADD_WX_CLASS( wxFontBase)
  ADD_WX_CLASS( wxFrame)
  ADD_WX_CLASS( wxFrameBase)
  ADD_WX_CLASS( wxGDIObject)
  ADD_WX_CLASS( wxHelpEvent)
  ADD_WX_CLASS( wxHtmlCell)
  ADD_WX_CLASS( wxHtmlContainerCell)
  ADD_WX_CLASS( wxHtmlEntitiesParser)
  ADD_WX_CLASS( wxHtmlFilter)
  ADD_WX_CLASS( wxHtmlLinkInfo)
  ADD_WX_CLASS( wxHtmlParser)
  ADD_WX_CLASS( wxHtmlRenderingInfo)
  ADD_WX_CLASS( wxHtmlRenderingState)
  ADD_WX_CLASS( wxHtmlRenderingStyle)
  ADD_WX_CLASS( wxHtmlSelection)
  ADD_WX_CLASS( wxHtmlTag)
  ADD_WX_CLASS( wxHtmlTagHandler)
  ADD_WX_CLASS( wxHtmlTagsModule)
  ADD_WX_CLASS( wxHtmlWinParser)
  ADD_WX_CLASS( wxHtmlWindow)
  ADD_WX_CLASS( wxHtmlWindowInterface)
  ADD_WX_CLASS( wxIcon)
  ADD_WX_CLASS( wxIconBundle)
  ADD_WX_CLASS( wxIconLocation)
  ADD_WX_CLASS( wxIconLocationBase)
  ADD_WX_CLASS( wxIdleEvent)
  ADD_WX_CLASS( wxImage)
  ADD_WX_CLASS( wxImageHandler)
  ADD_WX_CLASS( wxImageHistogram)
  ADD_WX_CLASS( wxImageHistogramBase)
  ADD_WX_CLASS( wxImageHistogramBase_wxImplementation_HashTable)
  ADD_WX_CLASS( wxImageHistogramBase_wxImplementation_KeyEx)
  ADD_WX_CLASS( wxImageHistogramBase_wxImplementation_Pair)
  ADD_WX_CLASS( wxImageHistogramEntry)
  ADD_WX_CLASS( wxInitDialogEvent)
  ADD_WX_CLASS( wxInputStream)
  ADD_WX_CLASS( wxIntegerEqual)
  ADD_WX_CLASS( wxIntegerHash)
  ADD_WX_CLASS( wxKeyEvent)
  ADD_WX_CLASS( wxLayoutConstraints)
  ADD_WX_CLASS( wxList)
  ADD_WX_CLASS( wxListBase)
  ADD_WX_CLASS( wxListKey)
  ADD_WX_CLASS( wxLongLongNative)
  ADD_WX_CLASS( wxMBConv)
  ADD_WX_CLASS( wxMask)
  ADD_WX_CLASS( wxMenu)
  ADD_WX_CLASS( wxMenuBar)
  ADD_WX_CLASS( wxMenuBarBase)
  ADD_WX_CLASS( wxMenuBase)
  ADD_WX_CLASS( wxMenuEvent)
  ADD_WX_CLASS( wxMenuItem)
  ADD_WX_CLASS( wxMenuItemBase)
  ADD_WX_CLASS( wxMenuItemList)
  ADD_WX_CLASS( wxMessageDialog)
  ADD_WX_CLASS( wxMessageDialogBase)
  ADD_WX_CLASS( wxMiniFrame)
  ADD_WX_CLASS( wxModule)
  ADD_WX_CLASS( wxMouseEvent)
  ADD_WX_CLASS( wxNavigationKeyEvent)
  ADD_WX_CLASS( wxNodeBase)
  ADD_WX_CLASS( wxObject)
  ADD_WX_CLASS( wxObjectEventFunction)
  ADD_WX_CLASS( wxObjectList)
  ADD_WX_CLASS( wxObjectListNode)
  ADD_WX_CLASS( wxObjectRefData)
  ADD_WX_CLASS( wxOutputStream)
  ADD_WX_CLASS( wxPaintEvent)
  ADD_WX_CLASS( wxPalette)
  ADD_WX_CLASS( wxPaletteBase)
  ADD_WX_CLASS( wxPanel)
  ADD_WX_CLASS( wxPen)
  ADD_WX_CLASS( wxPoint)
  ADD_WX_CLASS( wxRect)
  ADD_WX_CLASS( wxRegion)
  ADD_WX_CLASS( wxRegionBase)
  ADD_WX_CLASS( wxScrollHelper)
  ADD_WX_CLASS( wxScrollHelperNative)
  ADD_WX_CLASS( wxScrollWinEvent)
  ADD_WX_CLASS( wxScrolledWindow)
  ADD_WX_CLASS( wxSize)
  ADD_WX_CLASS( wxSizeEvent)
  ADD_WX_CLASS( wxSizer)
  ADD_WX_CLASS( wxSizerFlags)
  ADD_WX_CLASS( wxSizerItem)
  ADD_WX_CLASS( wxSizerItemList)
  ADD_WX_CLASS( wxStaticBox)
  ADD_WX_CLASS( wxStaticBoxBase)
  ADD_WX_CLASS( wxStaticBoxSizer)
  ADD_WX_CLASS( wxStatusBar)
  ADD_WX_CLASS( wxStatusBarBase)
  ADD_WX_CLASS( wxStdDialogButtonSizer)
  ADD_WX_CLASS( wxStreamBase)
  ADD_WX_CLASS( wxString)
  ADD_WX_CLASS( wxStringBase)
  ADD_WX_CLASS( wxSysColourChangedEvent)
  ADD_WX_CLASS( wxThread)
  ADD_WX_CLASS( wxTimeSpan)
  ADD_WX_CLASS( wxToolBar)
  ADD_WX_CLASS( wxToolBarBase)
  ADD_WX_CLASS( wxToolBarToolBase)
  ADD_WX_CLASS( wxTopLevelWindow)
  ADD_WX_CLASS( wxTopLevelWindowBase)
  ADD_WX_CLASS( wxTopLevelWindowGTK)
  ADD_WX_CLASS( wxULongLongNative)
  ADD_WX_CLASS( wxUpdateUIEvent)
  ADD_WX_CLASS( wxValidator)
  ADD_WX_CLASS( wxVisualAttributes)
  ADD_WX_CLASS( wxWCharBuffer)
  ADD_WX_CLASS( wxWindow)
  ADD_WX_CLASS( wxWindowBase)
  ADD_WX_CLASS( wxWindowList)
  ADD_WX_CLASS( wxWindowListNode)
  ADD_WX_CLASS( wxWritableCharBuffer)
  ADD_WX_CLASS( wxWritableWCharBuffer)
  ADD_WX_CLASS( wxwxMenuItemListNode)
  ADD_WX_CLASS( wxwxSizerItemListNode)

  #undef ADD_WX_CLASS

  #define ADD_WX_ENUMVAL(enum,name,val) \
    {\
    BasicVariable::ptr var = AMILabType<int >::CreateVar(val);\
    if (var.get()) {\
      var->Rename(#name);\
       obj_##enum->GetContext()->AddVar(var,obj_##enum->GetContext());\
    }}


  // New enumeration enum_132
  AMIObject::ptr obj_enum_132(new AMIObject);
  obj_enum_132->SetName("enum_132");

  ADD_WX_ENUMVAL(enum_132,wxLIST_RECT_BOUNDS,0);
  ADD_WX_ENUMVAL(enum_132,wxLIST_RECT_LABEL,2);
  ADD_WX_ENUMVAL(enum_132,wxLIST_RECT_ICON,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_132->GetName().c_str(),obj_enum_132,context);
  context->AddDefault(obj_enum_132->GetContext());

  // New enumeration enum_130
  AMIObject::ptr obj_enum_130(new AMIObject);
  obj_enum_130->SetName("enum_130");

  ADD_WX_ENUMVAL(enum_130,wxLIST_ALIGN_LEFT,1);
  ADD_WX_ENUMVAL(enum_130,wxLIST_ALIGN_SNAP_TO_GRID,3);
  ADD_WX_ENUMVAL(enum_130,wxLIST_ALIGN_TOP,2);
  ADD_WX_ENUMVAL(enum_130,wxLIST_ALIGN_DEFAULT,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_130->GetName().c_str(),obj_enum_130,context);
  context->AddDefault(obj_enum_130->GetContext());

  // New enumeration enum_131
  AMIObject::ptr obj_enum_131(new AMIObject);
  obj_enum_131->SetName("enum_131");

  ADD_WX_ENUMVAL(enum_131,wxLIST_AUTOSIZE_USEHEADER,-2);
  ADD_WX_ENUMVAL(enum_131,wxLIST_AUTOSIZE,-1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_131->GetName().c_str(),obj_enum_131,context);
  context->AddDefault(obj_enum_131->GetContext());

  // New enumeration wxSystemFeature
  AMIObject::ptr obj_wxSystemFeature(new AMIObject);
  obj_wxSystemFeature->SetName("wxSystemFeature");

  ADD_WX_ENUMVAL(wxSystemFeature,wxSYS_CAN_ICONIZE_FRAME,2);
  ADD_WX_ENUMVAL(wxSystemFeature,wxSYS_CAN_DRAW_FRAME_DECORATIONS,1);
  ADD_WX_ENUMVAL(wxSystemFeature,wxSYS_TABLET_PRESENT,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxSystemFeature->GetName().c_str(),obj_wxSystemFeature,context);
  context->AddDefault(obj_wxSystemFeature->GetContext());

  // New enumeration wxPaperSize
  AMIObject::ptr obj_wxPaperSize(new AMIObject);
  obj_wxPaperSize->SetName("wxPaperSize");

  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_FANFOLD_STD_GERMAN,40);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_TABLOID_EXTRA,50);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_LETTER_ROTATED,73);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_DSHEET,5);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_B5_JIS_ROTATED,78);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_TABLOID,8);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_P16K_ROTATED,104);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JAPANESE_POSTCARD_ROTATED,79);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_P32KBIG_ROTATED,106);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JENV_CHOU3,71);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JENV_CHOU4,72);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_10,103);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_P32KBIG,93);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_NONE,0);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A3_ROTATED,74);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JENV_CHOU4_ROTATED,85);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_B4,33);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_B5,34);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_B6,35);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_9_ROTATED,115);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_7_ROTATED,113);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_FANFOLD_LGL_GERMAN,41);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_DBL_JAPANESE_POSTCARD,67);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_ITALY,36);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A3_EXTRA,61);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_LETTER_PLUS,57);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_C65,32);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JAPANESE_POSTCARD,43);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_4_ROTATED,110);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_P32K_ROTATED,105);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_11,24);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_10,23);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_12,25);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_14,26);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_C3,29);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_B5_EXTRA,63);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_C6,31);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_C5,28);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_C4,30);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_LETTER_EXTRA,48);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JENV_KAKU2_ROTATED,82);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_B_PLUS,56);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_DL,27);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A4_PLUS,58);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_LEGAL_EXTRA,49);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_B4_JIS_ROTATED,77);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_1_ROTATED,107);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JENV_YOU4_ROTATED,90);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_LETTER_EXTRA_TRANSVERSE,54);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_P32K,92);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_2,95);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_3,96);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_1,94);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_6,99);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_7,100);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_4,97);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_5,98);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_LETTER,1);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_9,102);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A_PLUS,55);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_11X17,20);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JENV_KAKU3_ROTATED,83);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_NOTE,21);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_QUARTO,18);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JENV_YOU4,89);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_B6_JIS,86);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A3_TRANSVERSE,65);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A3_EXTRA_TRANSVERSE,66);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JENV_KAKU2,69);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JENV_KAKU3,70);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ESHEET,6);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A5_TRANSVERSE,59);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_FOLIO,17);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_3_ROTATED,109);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ISO_B4,42);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_FANFOLD_US,39);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_P16K,91);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_CSHEET,4);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_JENV_CHOU3_ROTATED,84);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A4_EXTRA,51);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_9X11,44);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A6_ROTATED,81);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_6_ROTATED,112);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_5_ROTATED,111);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_DBL_JAPANESE_POSTCARD_ROTATED,80);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_MONARCH,37);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_B6_JIS_ROTATED,87);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_12X11,88);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_8,101);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A4_TRANSVERSE,53);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_EXECUTIVE,11);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_2_ROTATED,108);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_LEGAL,2);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_10X14,19);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_10X11,45);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_LETTER_TRANSVERSE,52);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_LEDGER,9);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_LETTERSMALL,7);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A5_ROTATED,76);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A4SMALL,13);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A5,14);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A4,3);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A6,68);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A3,12);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A2,64);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_15X11,46);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A5_EXTRA,62);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_INVITE,47);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_10_ROTATED,116);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_A4_ROTATED,75);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_9,22);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_ENV_PERSONAL,38);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_B4,15);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_B5,16);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_B5_TRANSVERSE,60);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_STATEMENT,10);
  ADD_WX_ENUMVAL(wxPaperSize,wxPAPER_PENV_8_ROTATED,114);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxPaperSize->GetName().c_str(),obj_wxPaperSize,context);
  context->AddDefault(obj_wxPaperSize->GetContext());

  // New enumeration wxFontFamily
  AMIObject::ptr obj_wxFontFamily(new AMIObject);
  obj_wxFontFamily->SetName("wxFontFamily");

  ADD_WX_ENUMVAL(wxFontFamily,wxFONTFAMILY_DECORATIVE,71);
  ADD_WX_ENUMVAL(wxFontFamily,wxFONTFAMILY_MODERN,75);
  ADD_WX_ENUMVAL(wxFontFamily,wxFONTFAMILY_ROMAN,72);
  ADD_WX_ENUMVAL(wxFontFamily,wxFONTFAMILY_SWISS,74);
  ADD_WX_ENUMVAL(wxFontFamily,wxFONTFAMILY_SCRIPT,73);
  ADD_WX_ENUMVAL(wxFontFamily,wxFONTFAMILY_DEFAULT,70);
  ADD_WX_ENUMVAL(wxFontFamily,wxFONTFAMILY_MAX,77);
  ADD_WX_ENUMVAL(wxFontFamily,wxFONTFAMILY_TELETYPE,76);
  ADD_WX_ENUMVAL(wxFontFamily,wxFONTFAMILY_UNKNOWN,77);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxFontFamily->GetName().c_str(),obj_wxFontFamily,context);
  context->AddDefault(obj_wxFontFamily->GetContext());

  // New enumeration enum_115
  AMIObject::ptr obj_enum_115(new AMIObject);
  obj_enum_115->SetName("enum_115");

  ADD_WX_ENUMVAL(enum_115,wxBMP_8BPP_PALETTE,11);
  ADD_WX_ENUMVAL(enum_115,wxBMP_1BPP_BW,2);
  ADD_WX_ENUMVAL(enum_115,wxBMP_1BPP,1);
  ADD_WX_ENUMVAL(enum_115,wxBMP_8BPP_GREY,9);
  ADD_WX_ENUMVAL(enum_115,wxBMP_24BPP,24);
  ADD_WX_ENUMVAL(enum_115,wxBMP_4BPP,4);
  ADD_WX_ENUMVAL(enum_115,wxBMP_8BPP_GRAY,9);
  ADD_WX_ENUMVAL(enum_115,wxBMP_8BPP_RED,10);
  ADD_WX_ENUMVAL(enum_115,wxBMP_8BPP,8);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_115->GetName().c_str(),obj_enum_115,context);
  context->AddDefault(obj_enum_115->GetContext());

  // New enumeration enum_110
  AMIObject::ptr obj_enum_110(new AMIObject);
  obj_enum_110->SetName("enum_110");

  ADD_WX_ENUMVAL(enum_110,wxACCEL_ALT,1);
  ADD_WX_ENUMVAL(enum_110,wxACCEL_SHIFT,4);
  ADD_WX_ENUMVAL(enum_110,wxACCEL_CMD,2);
  ADD_WX_ENUMVAL(enum_110,wxACCEL_NORMAL,0);
  ADD_WX_ENUMVAL(enum_110,wxACCEL_CTRL,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_110->GetName().c_str(),obj_enum_110,context);
  context->AddDefault(obj_enum_110->GetContext());

  // New enumeration wxDirection
  AMIObject::ptr obj_wxDirection(new AMIObject);
  obj_wxDirection->SetName("wxDirection");

  ADD_WX_ENUMVAL(wxDirection,wxEAST,32);
  ADD_WX_ENUMVAL(wxDirection,wxALL,240);
  ADD_WX_ENUMVAL(wxDirection,wxNORTH,64);
  ADD_WX_ENUMVAL(wxDirection,wxWEST,16);
  ADD_WX_ENUMVAL(wxDirection,wxTOP,64);
  ADD_WX_ENUMVAL(wxDirection,wxSOUTH,128);
  ADD_WX_ENUMVAL(wxDirection,wxBOTTOM,128);
  ADD_WX_ENUMVAL(wxDirection,wxUP,64);
  ADD_WX_ENUMVAL(wxDirection,wxRIGHT,32);
  ADD_WX_ENUMVAL(wxDirection,wxDOWN,128);
  ADD_WX_ENUMVAL(wxDirection,wxLEFT,16);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxDirection->GetName().c_str(),obj_wxDirection,context);
  context->AddDefault(obj_wxDirection->GetContext());

  // New enumeration wxRegionContain
  AMIObject::ptr obj_wxRegionContain(new AMIObject);
  obj_wxRegionContain->SetName("wxRegionContain");

  ADD_WX_ENUMVAL(wxRegionContain,wxOutRegion,0);
  ADD_WX_ENUMVAL(wxRegionContain,wxInRegion,2);
  ADD_WX_ENUMVAL(wxRegionContain,wxPartRegion,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxRegionContain->GetName().c_str(),obj_wxRegionContain,context);
  context->AddDefault(obj_wxRegionContain->GetContext());

  // New enumeration wxMutexError
  AMIObject::ptr obj_wxMutexError(new AMIObject);
  obj_wxMutexError->SetName("wxMutexError");

  ADD_WX_ENUMVAL(wxMutexError,wxMUTEX_BUSY,3);
  ADD_WX_ENUMVAL(wxMutexError,wxMUTEX_MISC_ERROR,5);
  ADD_WX_ENUMVAL(wxMutexError,wxMUTEX_INVALID,1);
  ADD_WX_ENUMVAL(wxMutexError,wxMUTEX_DEAD_LOCK,2);
  ADD_WX_ENUMVAL(wxMutexError,wxMUTEX_UNLOCKED,4);
  ADD_WX_ENUMVAL(wxMutexError,wxMUTEX_NO_ERROR,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxMutexError->GetName().c_str(),obj_wxMutexError,context);
  context->AddDefault(obj_wxMutexError->GetContext());

  // New enumeration enum_14
  AMIObject::ptr obj_enum_14(new AMIObject);
  obj_enum_14->SetName("enum_14");

  ADD_WX_ENUMVAL(enum_14,wxMM_HIMETRIC,3);
  ADD_WX_ENUMVAL(enum_14,wxMM_HIENGLISH,5);
  ADD_WX_ENUMVAL(enum_14,wxMM_LOENGLISH,4);
  ADD_WX_ENUMVAL(enum_14,wxMM_ISOTROPIC,7);
  ADD_WX_ENUMVAL(enum_14,wxMM_ANISOTROPIC,8);
  ADD_WX_ENUMVAL(enum_14,wxMM_TWIPS,6);
  ADD_WX_ENUMVAL(enum_14,wxMM_METRIC,10);
  ADD_WX_ENUMVAL(enum_14,wxMM_POINTS,9);
  ADD_WX_ENUMVAL(enum_14,wxMM_TEXT,1);
  ADD_WX_ENUMVAL(enum_14,wxMM_LOMETRIC,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_14->GetName().c_str(),obj_enum_14,context);
  context->AddDefault(obj_enum_14->GetContext());

  // New enumeration wxEdge
  AMIObject::ptr obj_wxEdge(new AMIObject);
  obj_wxEdge->SetName("wxEdge");

  ADD_WX_ENUMVAL(wxEdge,wxHeight,5);
  ADD_WX_ENUMVAL(wxEdge,wxCentre,6);
  ADD_WX_ENUMVAL(wxEdge,wxCenter,6);
  ADD_WX_ENUMVAL(wxEdge,wxTop,1);
  ADD_WX_ENUMVAL(wxEdge,wxBottom,3);
  ADD_WX_ENUMVAL(wxEdge,wxWidth,4);
  ADD_WX_ENUMVAL(wxEdge,wxCentreX,7);
  ADD_WX_ENUMVAL(wxEdge,wxRight,2);
  ADD_WX_ENUMVAL(wxEdge,wxCentreY,8);
  ADD_WX_ENUMVAL(wxEdge,wxLeft,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxEdge->GetName().c_str(),obj_wxEdge,context);
  context->AddDefault(obj_wxEdge->GetContext());

  // New enumeration wxKillFlags
  AMIObject::ptr obj_wxKillFlags(new AMIObject);
  obj_wxKillFlags->SetName("wxKillFlags");

  ADD_WX_ENUMVAL(wxKillFlags,wxKILL_NOCHILDREN,0);
  ADD_WX_ENUMVAL(wxKillFlags,wxKILL_CHILDREN,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxKillFlags->GetName().c_str(),obj_wxKillFlags,context);
  context->AddDefault(obj_wxKillFlags->GetContext());

  // New enumeration enum_127
  AMIObject::ptr obj_enum_127(new AMIObject);
  obj_enum_127->SetName("enum_127");

  ADD_WX_ENUMVAL(enum_127,wxFD_FILE_MUST_EXIST,16);
  ADD_WX_ENUMVAL(enum_127,wxFD_MULTIPLE,32);
  ADD_WX_ENUMVAL(enum_127,wxFD_OVERWRITE_PROMPT,4);
  ADD_WX_ENUMVAL(enum_127,wxFD_PREVIEW,256);
  ADD_WX_ENUMVAL(enum_127,wxFD_SAVE,2);
  ADD_WX_ENUMVAL(enum_127,wxFD_OPEN,1);
  ADD_WX_ENUMVAL(enum_127,wxFD_CHANGE_DIR,128);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_127->GetName().c_str(),obj_enum_127,context);
  context->AddDefault(obj_enum_127->GetContext());

  // New enumeration form_ops_t
  AMIObject::ptr obj_form_ops_t(new AMIObject);
  obj_form_ops_t->SetName("form_ops_t");

  ADD_WX_ENUMVAL(form_ops_t,wxROP_WHITE,15);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_00DD0228,3);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_MASKNOTPEN,7);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_00AA0029,8);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_00990066,10);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_007700E6,13);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_SRCCOPY,5);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_NOTXORPEN,10);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_XORPEN,1);
  ADD_WX_ENUMVAL(form_ops_t,wxAND_INVERT,7);
  ADD_WX_ENUMVAL(form_ops_t,wxOR,14);
  ADD_WX_ENUMVAL(form_ops_t,wxNOR,9);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_MASKPEN,6);
  ADD_WX_ENUMVAL(form_ops_t,wxOR_INVERT,12);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_00220326,7);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_BLACK,0);
  ADD_WX_ENUMVAL(form_ops_t,wxXOR,1);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_DSTINVERT,2);
  ADD_WX_ENUMVAL(form_ops_t,wxINVERT,2);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_NOTSCRCOPY,11);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_SRCAND,6);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_MERGEPAINT,12);
  ADD_WX_ENUMVAL(form_ops_t,wxCOPY,5);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_NOTSRCERASE,9);
  ADD_WX_ENUMVAL(form_ops_t,wxSET,15);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_NOP,8);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_NOTMERGEPEN,9);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_NOT,2);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_COPYPEN,5);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_BLACKNESS,0);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_SRCPAINT,14);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_SRCERASE,4);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_NOTMASKPEN,13);
  ADD_WX_ENUMVAL(form_ops_t,wxSRC_INVERT,11);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_MERGENOTPEN,12);
  ADD_WX_ENUMVAL(form_ops_t,wxAND_REVERSE,4);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_WHITENESS,15);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_MERGEPENNOT,3);
  ADD_WX_ENUMVAL(form_ops_t,wxAND,6);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_NOTCOPYPEN,11);
  ADD_WX_ENUMVAL(form_ops_t,wxEQUIV,10);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_MASKPENNOT,4);
  ADD_WX_ENUMVAL(form_ops_t,wxCLEAR,0);
  ADD_WX_ENUMVAL(form_ops_t,wxOR_REVERSE,3);
  ADD_WX_ENUMVAL(form_ops_t,wxNAND,13);
  ADD_WX_ENUMVAL(form_ops_t,wxNO_OP,8);
  ADD_WX_ENUMVAL(form_ops_t,wxROP_MERGEPEN,14);
  ADD_WX_ENUMVAL(form_ops_t,wxBLIT_SRCINVERT,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_form_ops_t->GetName().c_str(),obj_form_ops_t,context);
  context->AddDefault(obj_form_ops_t->GetContext());

  // New enumeration enum_13
  AMIObject::ptr obj_enum_13(new AMIObject);
  obj_enum_13->SetName("enum_13");

  ADD_WX_ENUMVAL(enum_13,wxTOOL_LEFT,3);
  ADD_WX_ENUMVAL(enum_13,wxTOOL_RIGHT,4);
  ADD_WX_ENUMVAL(enum_13,wxTOOL_TOP,1);
  ADD_WX_ENUMVAL(enum_13,wxTOOL_BOTTOM,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_13->GetName().c_str(),obj_enum_13,context);
  context->AddDefault(obj_enum_13->GetContext());

  // New enumeration enum_109
  AMIObject::ptr obj_enum_109(new AMIObject);
  obj_enum_109->SetName("enum_109");

  ADD_WX_ENUMVAL(enum_109,wxFONTFLAG_ANTIALIASED,16);
  ADD_WX_ENUMVAL(enum_109,wxFONTFLAG_UNDERLINED,64);
  ADD_WX_ENUMVAL(enum_109,wxFONTFLAG_LIGHT,4);
  ADD_WX_ENUMVAL(enum_109,wxFONTFLAG_DEFAULT,0);
  ADD_WX_ENUMVAL(enum_109,wxFONTFLAG_SLANT,2);
  ADD_WX_ENUMVAL(enum_109,wxFONTFLAG_MASK,255);
  ADD_WX_ENUMVAL(enum_109,wxFONTFLAG_BOLD,8);
  ADD_WX_ENUMVAL(enum_109,wxFONTFLAG_ITALIC,1);
  ADD_WX_ENUMVAL(enum_109,wxFONTFLAG_STRIKETHROUGH,128);
  ADD_WX_ENUMVAL(enum_109,wxFONTFLAG_NOT_ANTIALIASED,32);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_109->GetName().c_str(),obj_enum_109,context);
  context->AddDefault(obj_enum_109->GetContext());

  // New enumeration wxGeometryCentre
  AMIObject::ptr obj_wxGeometryCentre(new AMIObject);
  obj_wxGeometryCentre->SetName("wxGeometryCentre");

  ADD_WX_ENUMVAL(wxGeometryCentre,wxCENTRE,1);
  ADD_WX_ENUMVAL(wxGeometryCentre,wxCENTER,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxGeometryCentre->GetName().c_str(),obj_wxGeometryCentre,context);
  context->AddDefault(obj_wxGeometryCentre->GetContext());

  // New enumeration wxEndianness
  AMIObject::ptr obj_wxEndianness(new AMIObject);
  obj_wxEndianness->SetName("wxEndianness");

  ADD_WX_ENUMVAL(wxEndianness,wxENDIAN_LITTLE,1);
  ADD_WX_ENUMVAL(wxEndianness,wxENDIAN_PDP,2);
  ADD_WX_ENUMVAL(wxEndianness,wxENDIAN_BIG,0);
  ADD_WX_ENUMVAL(wxEndianness,wxENDIAN_INVALID,-1);
  ADD_WX_ENUMVAL(wxEndianness,wxENDIAN_MAX,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxEndianness->GetName().c_str(),obj_wxEndianness,context);
  context->AddDefault(obj_wxEndianness->GetContext());

  // New enumeration wxStockCursor
  AMIObject::ptr obj_wxStockCursor(new AMIObject);
  obj_wxStockCursor->SetName("wxStockCursor");

  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_NONE,0);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_MAX,29);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_RIGHT_ARROW,2);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_POINT_RIGHT,15);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_MAGNIFIER,9);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_BULLSEYE,3);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_SIZING,22);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_IBEAM,7);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_PAINT_BRUSH,12);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_SIZENESW,18);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_MIDDLE_BUTTON,10);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_WATCH,25);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_SIZENWSE,20);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_WAIT,24);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_ARROWWAIT,28);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_BLANK,26);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_HAND,6);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_SIZEWE,21);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_QUESTION_ARROW,16);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_CROSS,5);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_PENCIL,13);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_POINT_LEFT,14);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_RIGHT_BUTTON,17);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_NO_ENTRY,11);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_LEFT_BUTTON,8);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_SPRAYCAN,23);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_DEFAULT,27);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_CHAR,4);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_ARROW,1);
  ADD_WX_ENUMVAL(wxStockCursor,wxCURSOR_SIZENS,19);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxStockCursor->GetName().c_str(),obj_wxStockCursor,context);
  context->AddDefault(obj_wxStockCursor->GetContext());

  // New enumeration enum_116
  AMIObject::ptr obj_enum_116(new AMIObject);
  obj_enum_116->SetName("enum_116");

  ADD_WX_ENUMVAL(enum_116,wxPNG_TYPE_GREY_RED,3);
  ADD_WX_ENUMVAL(enum_116,wxPNG_TYPE_COLOUR,0);
  ADD_WX_ENUMVAL(enum_116,wxPNG_TYPE_GREY,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_116->GetName().c_str(),obj_enum_116,context);
  context->AddDefault(obj_enum_116->GetContext());

  // New enumeration enum_106
  AMIObject::ptr obj_enum_106(new AMIObject);
  obj_enum_106->SetName("enum_106");

  ADD_WX_ENUMVAL(enum_106,wxPRINT_POSTSCRIPT,2);
  ADD_WX_ENUMVAL(enum_106,wxPRINT_WINDOWS,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_106->GetName().c_str(),obj_enum_106,context);
  context->AddDefault(obj_enum_106->GetContext());

  // New enumeration enum_102
  AMIObject::ptr obj_enum_102(new AMIObject);
  obj_enum_102->SetName("enum_102");

  ADD_WX_ENUMVAL(enum_102,wxJOYSTICK2,1);
  ADD_WX_ENUMVAL(enum_102,wxJOYSTICK1,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_102->GetName().c_str(),obj_enum_102,context);
  context->AddDefault(obj_enum_102->GetContext());

  // New enumeration enum_101
  AMIObject::ptr obj_enum_101(new AMIObject);
  obj_enum_101->SetName("enum_101");

  ADD_WX_ENUMVAL(enum_101,wxMOUSE_BTN_LEFT,1);
  ADD_WX_ENUMVAL(enum_101,wxMOUSE_BTN_MIDDLE,2);
  ADD_WX_ENUMVAL(enum_101,wxMOUSE_BTN_NONE,0);
  ADD_WX_ENUMVAL(enum_101,wxMOUSE_BTN_RIGHT,3);
  ADD_WX_ENUMVAL(enum_101,wxMOUSE_BTN_ANY,-1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_101->GetName().c_str(),obj_enum_101,context);
  context->AddDefault(obj_enum_101->GetContext());

  // New enumeration enum_7
  AMIObject::ptr obj_enum_7(new AMIObject);
  obj_enum_7->SetName("enum_7");

  ADD_WX_ENUMVAL(enum_7,wxDefaultCoord,-1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_7->GetName().c_str(),obj_enum_7,context);
  context->AddDefault(obj_enum_7->GetContext());

  // New enumeration wxBorder
  AMIObject::ptr obj_wxBorder(new AMIObject);
  obj_wxBorder->SetName("wxBorder");

  ADD_WX_ENUMVAL(wxBorder,wxBORDER_SUNKEN,134217728);
  ADD_WX_ENUMVAL(wxBorder,wxBORDER_MASK,522190848);
  ADD_WX_ENUMVAL(wxBorder,wxBORDER_STATIC,16777216);
  ADD_WX_ENUMVAL(wxBorder,wxBORDER_NONE,2097152);
  ADD_WX_ENUMVAL(wxBorder,wxBORDER_DOUBLE,268435456);
  ADD_WX_ENUMVAL(wxBorder,wxBORDER_RAISED,67108864);
  ADD_WX_ENUMVAL(wxBorder,wxBORDER_SIMPLE,33554432);
  ADD_WX_ENUMVAL(wxBorder,wxBORDER_THEME,268435456);
  ADD_WX_ENUMVAL(wxBorder,wxBORDER_DEFAULT,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxBorder->GetName().c_str(),obj_wxBorder,context);
  context->AddDefault(obj_wxBorder->GetContext());

  // New enumeration wxLanguage
  AMIObject::ptr obj_wxLanguage(new AMIObject);
  obj_wxLanguage->SetName("wxLanguage");

  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_AUSTRALIA,59);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_BOTSWANA,61);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_MEXICAN,186);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_HONDURAS,185);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_IRISH,107);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SLOVAK,172);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SLOVENIAN,173);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_YEMEN,24);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KONKANI,120);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ITALIAN_SWISS,109);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CHINESE,43);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KINYARWANDA,117);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_LIBYA,15);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_POLISH,149);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CORSICAN,50);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_PHILIPPINES,68);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_NAURU,140);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TSONGA,209);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_SYRIA,21);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CHINESE_SIMPLIFIED,44);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_INTERLINGUE,104);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SAMI,536870912);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_INTERLINGUA,103);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_INUKTITUT,105);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_INUPIAK,106);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_RUSSIAN_UKRAINE,157);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_BELIZE,60);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_HEBREW,98);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MALAY,130);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TURKMEN,211);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_VOLAPUK,222);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_QATAR,18);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FINNISH,77);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_AMHARIC,6);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FRENCH_MONACO,82);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_TRINIDAD,70);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KERNEWEK,116);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_ZIMBABWE,71);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KIRGHIZ,118);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FAEROESE,74);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_IRAQ,11);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_SUDAN,20);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_CANADA,62);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_LINGALA,126);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH,175);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_BELARUSIAN,33);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_SOUTH_AFRICA,69);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_URDU_INDIA,216);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KOREAN,121);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_EL_SALVADOR,183);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ZHUANG,228);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_NICARAGUA,188);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SHONA,168);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_SAUDI_ARABIA,19);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TONGA,208);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SANSKRIT,160);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SANGHO,159);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_AZERI_LATIN,30);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_VALENCIAN,536870911);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FRENCH_LUXEMBOURG,81);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_NORWEGIAN_BOKMAL,143);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_LATIN,124);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TAJIK,201);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_URUGUAY,193);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ORIYA,146);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GERMAN_BELGIUM,89);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CHINESE_HONGKONG,46);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_BRETON,38);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_OROMO,147);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SETSWANA,167);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_KUWAIT,13);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_ALGERIA,8);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_BIHARI,36);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_UIGHUR,213);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_UKRAINIAN,214);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MOLDAVIAN,138);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_YIDDISH,226);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_PORTUGUESE_BRAZILIAN,151);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_JAVANESE,111);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_URDU,215);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ESTONIAN,73);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_PERU,191);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_UZBEK_LATIN,220);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_NEPALI_INDIA,142);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_EGYPT,10);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_JORDAN,12);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_BASQUE,32);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FRENCH_CANADIAN,80);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_MODERN,187);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_PUERTO_RICO,192);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GERMAN_AUSTRIAN,88);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SISWATI,171);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_DENMARK,64);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_COLOMBIA,179);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_TUNISIA,22);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_UNKNOWN,1);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MONGOLIAN,139);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SUNDANESE,196);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SWEDISH_FINLAND,199);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CHINESE_TAIWAN,49);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH,56);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_VIETNAMESE,221);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SAMOAN,158);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_RHAETO_ROMANCE,154);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_UZBEK_CYRILLIC,219);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CATALAN,42);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_QUECHUA,153);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_DUTCH_BELGIAN,55);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CROATIAN,51);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ASSAMESE,26);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_DUTCH,54);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FRENCH_BELGIAN,79);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_ECUADOR,182);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ALBANIAN,5);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_HAUSA,97);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_PANAMA,189);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CHINESE_SINGAPORE,48);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_LATVIAN,125);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ABKHAZIAN,2);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SERBO_CROATIAN,165);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ZULU,229);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KASHMIRI_INDIA,114);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_COSTA_RICA,180);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_USER_DEFINED,230);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TAMIL,202);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_AFAR,3);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_AFRIKAANS,4);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_UAE,23);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GERMAN_SWISS,92);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MARATHI,137);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_GUATEMALA,184);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FIJI,76);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_BOLIVIA,177);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SERBIAN_CYRILLIC,163);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ESPERANTO,72);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TELUGU,204);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_AZERI_CYRILLIC,29);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_BULGARIAN,39);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ITALIAN,108);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_BISLAMA,37);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_NEPALI,141);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_URDU_PAKISTAN,217);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GREEK,93);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_OCCITAN,145);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_OMAN,17);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SINHALESE,170);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TWI,212);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GUJARATI,96);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GERMAN,87);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_THAI,205);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MACEDONIAN,128);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GUARANI,95);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_VENEZUELA,195);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_INDONESIAN,102);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SWAHILI,197);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FARSI,75);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_HINDI,99);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_YORUBA,227);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MALAY_BRUNEI_DARUSSALAM,132);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_DEFAULT,0);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_US,194);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_NORWEGIAN_NYNORSK,144);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CHINESE_TRADITIONAL,45);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MALAYALAM,131);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_US,58);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KASHMIRI,113);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SCOTS_GAELIC,161);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GERMAN_LUXEMBOURG,91);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TAGALOG,200);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GEORGIAN,86);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KANNADA,112);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_HUNGARIAN,100);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_NEW_ZEALAND,67);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_RUSSIAN,156);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ICELANDIC,101);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TATAR,203);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_PARAGUAY,190);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_UK,57);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_LEBANON,14);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CAMBODIAN,41);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_ARGENTINA,176);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_BURMESE,40);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FRENCH,78);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_PUNJABI,152);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_JAMAICA,66);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_CHILE,178);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SESOTHO,166);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CZECH,52);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FRENCH_SWISS,83);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_LAOTHIAN,123);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_BHUTANI,35);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MAORI,136);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_UZBEK,218);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_BAHRAIN,9);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SWEDISH,198);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KIRUNDI,119);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_DANISH,53);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MALAY_MALAYSIA,133);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MALAGASY,129);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SPANISH_DOMINICAN_REPUBLIC,181);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_AYMARA,27);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_LITHUANIAN,127);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SOMALI,174);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GERMAN_LIECHTENSTEIN,90);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GALICIAN,85);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TIBETAN,206);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC_MOROCCO,16);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KAZAKH,115);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TURKISH,210);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_FRISIAN,84);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SINDHI,169);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_GREENLANDIC,94);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_JAPANESE,110);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_CHINESE_MACAU,47);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_WELSH,223);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MALTESE,134);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_TIGRINYA,207);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SERBIAN_LATIN,164);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARABIC,7);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ROMANIAN,155);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_BENGALI,34);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_PORTUGUESE,150);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_MANIPURI,135);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_XHOSA,225);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_BASHKIR,31);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_PASHTO,148);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_KURDISH,122);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_WOLOF,224);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_SERBIAN,162);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_CARIBBEAN,63);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_AZERI,28);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ARMENIAN,25);
  ADD_WX_ENUMVAL(wxLanguage,wxLANGUAGE_ENGLISH_EIRE,65);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxLanguage->GetName().c_str(),obj_wxLanguage,context);
  context->AddDefault(obj_wxLanguage->GetContext());

  // New enumeration wxKillError
  AMIObject::ptr obj_wxKillError(new AMIObject);
  obj_wxKillError->SetName("wxKillError");

  ADD_WX_ENUMVAL(wxKillError,wxKILL_ACCESS_DENIED,2);
  ADD_WX_ENUMVAL(wxKillError,wxKILL_BAD_SIGNAL,1);
  ADD_WX_ENUMVAL(wxKillError,wxKILL_ERROR,4);
  ADD_WX_ENUMVAL(wxKillError,wxKILL_NO_PROCESS,3);
  ADD_WX_ENUMVAL(wxKillError,wxKILL_OK,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxKillError->GetName().c_str(),obj_wxKillError,context);
  context->AddDefault(obj_wxKillError->GetContext());

  // New enumeration wxFontStyle
  AMIObject::ptr obj_wxFontStyle(new AMIObject);
  obj_wxFontStyle->SetName("wxFontStyle");

  ADD_WX_ENUMVAL(wxFontStyle,wxFONTSTYLE_MAX,95);
  ADD_WX_ENUMVAL(wxFontStyle,wxFONTSTYLE_SLANT,94);
  ADD_WX_ENUMVAL(wxFontStyle,wxFONTSTYLE_ITALIC,93);
  ADD_WX_ENUMVAL(wxFontStyle,wxFONTSTYLE_NORMAL,90);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxFontStyle->GetName().c_str(),obj_wxFontStyle,context);
  context->AddDefault(obj_wxFontStyle->GetContext());

  // New enumeration wxFontWeight
  AMIObject::ptr obj_wxFontWeight(new AMIObject);
  obj_wxFontWeight->SetName("wxFontWeight");

  ADD_WX_ENUMVAL(wxFontWeight,wxFONTWEIGHT_MAX,93);
  ADD_WX_ENUMVAL(wxFontWeight,wxFONTWEIGHT_BOLD,92);
  ADD_WX_ENUMVAL(wxFontWeight,wxFONTWEIGHT_LIGHT,91);
  ADD_WX_ENUMVAL(wxFontWeight,wxFONTWEIGHT_NORMAL,90);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxFontWeight->GetName().c_str(),obj_wxFontWeight,context);
  context->AddDefault(obj_wxFontWeight->GetContext());

  // New enumeration enum_112
  AMIObject::ptr obj_enum_112(new AMIObject);
  obj_enum_112->SetName("enum_112");

  ADD_WX_ENUMVAL(enum_112,wxUSER_ATTENTION_ERROR,2);
  ADD_WX_ENUMVAL(enum_112,wxUSER_ATTENTION_INFO,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_112->GetName().c_str(),obj_enum_112,context);
  context->AddDefault(obj_enum_112->GetContext());

  // New enumeration enum_133
  AMIObject::ptr obj_enum_133(new AMIObject);
  obj_enum_133->SetName("enum_133");

  ADD_WX_ENUMVAL(enum_133,wxLIST_FIND_DOWN,1);
  ADD_WX_ENUMVAL(enum_133,wxLIST_FIND_RIGHT,3);
  ADD_WX_ENUMVAL(enum_133,wxLIST_FIND_UP,0);
  ADD_WX_ENUMVAL(enum_133,wxLIST_FIND_LEFT,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_133->GetName().c_str(),obj_enum_133,context);
  context->AddDefault(obj_enum_133->GetContext());

  // New enumeration wxRegionOp
  AMIObject::ptr obj_wxRegionOp(new AMIObject);
  obj_wxRegionOp->SetName("wxRegionOp");

  ADD_WX_ENUMVAL(wxRegionOp,wxRGN_COPY,1);
  ADD_WX_ENUMVAL(wxRegionOp,wxRGN_AND,0);
  ADD_WX_ENUMVAL(wxRegionOp,wxRGN_OR,3);
  ADD_WX_ENUMVAL(wxRegionOp,wxRGN_XOR,4);
  ADD_WX_ENUMVAL(wxRegionOp,wxRGN_DIFF,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxRegionOp->GetName().c_str(),obj_wxRegionOp,context);
  context->AddDefault(obj_wxRegionOp->GetContext());

  // New enumeration Propagation_state
  AMIObject::ptr obj_Propagation_state(new AMIObject);
  obj_Propagation_state->SetName("Propagation_state");

  ADD_WX_ENUMVAL(Propagation_state,wxEVENT_PROPAGATE_NONE,0);
  ADD_WX_ENUMVAL(Propagation_state,wxEVENT_PROPAGATE_MAX,2147483647);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_Propagation_state->GetName().c_str(),obj_Propagation_state,context);
  context->AddDefault(obj_Propagation_state->GetContext());

  // New enumeration wxNotificationOptions
  AMIObject::ptr obj_wxNotificationOptions(new AMIObject);
  obj_wxNotificationOptions->SetName("wxNotificationOptions");

  ADD_WX_ENUMVAL(wxNotificationOptions,wxNOTIFY_ONCE,1);
  ADD_WX_ENUMVAL(wxNotificationOptions,wxNOTIFY_NONE,0);
  ADD_WX_ENUMVAL(wxNotificationOptions,wxNOTIFY_REPEAT,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxNotificationOptions->GetName().c_str(),obj_wxNotificationOptions,context);
  context->AddDefault(obj_wxNotificationOptions->GetContext());

  // New enumeration enum_103
  AMIObject::ptr obj_enum_103(new AMIObject);
  obj_enum_103->SetName("enum_103");

  ADD_WX_ENUMVAL(enum_103,wxJOY_BUTTON4,8);
  ADD_WX_ENUMVAL(enum_103,wxJOY_BUTTON2,2);
  ADD_WX_ENUMVAL(enum_103,wxJOY_BUTTON1,1);
  ADD_WX_ENUMVAL(enum_103,wxJOY_BUTTON3,4);
  ADD_WX_ENUMVAL(enum_103,wxJOY_BUTTON_ANY,-1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_103->GetName().c_str(),obj_enum_103,context);
  context->AddDefault(obj_enum_103->GetContext());

  // New enumeration wxSemaError
  AMIObject::ptr obj_wxSemaError(new AMIObject);
  obj_wxSemaError->SetName("wxSemaError");

  ADD_WX_ENUMVAL(wxSemaError,wxSEMA_MISC_ERROR,5);
  ADD_WX_ENUMVAL(wxSemaError,wxSEMA_TIMEOUT,3);
  ADD_WX_ENUMVAL(wxSemaError,wxSEMA_NO_ERROR,0);
  ADD_WX_ENUMVAL(wxSemaError,wxSEMA_BUSY,2);
  ADD_WX_ENUMVAL(wxSemaError,wxSEMA_OVERFLOW,4);
  ADD_WX_ENUMVAL(wxSemaError,wxSEMA_INVALID,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxSemaError->GetName().c_str(),obj_wxSemaError,context);
  context->AddDefault(obj_wxSemaError->GetContext());

  // New enumeration enum_113
  AMIObject::ptr obj_enum_113(new AMIObject);
  obj_enum_113->SetName("enum_113");

  ADD_WX_ENUMVAL(enum_113,wxIMAGE_RESOLUTION_INCHES,1);
  ADD_WX_ENUMVAL(enum_113,wxIMAGE_RESOLUTION_CM,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_113->GetName().c_str(),obj_enum_113,context);
  context->AddDefault(obj_enum_113->GetContext());

  // New enumeration enum_97
  AMIObject::ptr obj_enum_97(new AMIObject);
  obj_enum_97->SetName("enum_97");

  ADD_WX_ENUMVAL(enum_97,wxEXEC_NODISABLE,8);
  ADD_WX_ENUMVAL(enum_97,wxEXEC_NOHIDE,2);
  ADD_WX_ENUMVAL(enum_97,wxEXEC_SYNC,1);
  ADD_WX_ENUMVAL(enum_97,wxEXEC_MAKE_GROUP_LEADER,4);
  ADD_WX_ENUMVAL(enum_97,wxEXEC_ASYNC,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_97->GetName().c_str(),obj_enum_97,context);
  context->AddDefault(obj_enum_97->GetContext());

  // New enumeration enum_92
  AMIObject::ptr obj_enum_92(new AMIObject);
  obj_enum_92->SetName("enum_92");

  ADD_WX_ENUMVAL(enum_92,wxLOG_Status,4);
  ADD_WX_ENUMVAL(enum_92,wxLOG_Max,10000);
  ADD_WX_ENUMVAL(enum_92,wxLOG_Warning,2);
  ADD_WX_ENUMVAL(enum_92,wxLOG_Message,3);
  ADD_WX_ENUMVAL(enum_92,wxLOG_Progress,8);
  ADD_WX_ENUMVAL(enum_92,wxLOG_Trace,7);
  ADD_WX_ENUMVAL(enum_92,wxLOG_Error,1);
  ADD_WX_ENUMVAL(enum_92,wxLOG_User,100);
  ADD_WX_ENUMVAL(enum_92,wxLOG_Info,5);
  ADD_WX_ENUMVAL(enum_92,wxLOG_FatalError,0);
  ADD_WX_ENUMVAL(enum_92,wxLOG_Debug,6);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_92->GetName().c_str(),obj_enum_92,context);
  context->AddDefault(obj_enum_92->GetContext());

  // New enumeration wxSystemFont
  AMIObject::ptr obj_wxSystemFont(new AMIObject);
  obj_wxSystemFont->SetName("wxSystemFont");

  ADD_WX_ENUMVAL(wxSystemFont,wxSYS_ANSI_FIXED_FONT,11);
  ADD_WX_ENUMVAL(wxSystemFont,wxSYS_DEVICE_DEFAULT_FONT,14);
  ADD_WX_ENUMVAL(wxSystemFont,wxSYS_SYSTEM_FONT,13);
  ADD_WX_ENUMVAL(wxSystemFont,wxSYS_DEFAULT_PALETTE,15);
  ADD_WX_ENUMVAL(wxSystemFont,wxSYS_ICONTITLE_FONT,17);
  ADD_WX_ENUMVAL(wxSystemFont,wxSYS_ANSI_VAR_FONT,12);
  ADD_WX_ENUMVAL(wxSystemFont,wxSYS_DEFAULT_GUI_FONT,17);
  ADD_WX_ENUMVAL(wxSystemFont,wxSYS_OEM_FIXED_FONT,10);
  ADD_WX_ENUMVAL(wxSystemFont,wxSYS_SYSTEM_FIXED_FONT,16);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxSystemFont->GetName().c_str(),obj_wxSystemFont,context);
  context->AddDefault(obj_wxSystemFont->GetContext());

  // New enumeration wxSeekMode
  AMIObject::ptr obj_wxSeekMode(new AMIObject);
  obj_wxSeekMode->SetName("wxSeekMode");

  ADD_WX_ENUMVAL(wxSeekMode,wxFromStart,0);
  ADD_WX_ENUMVAL(wxSeekMode,wxFromCurrent,1);
  ADD_WX_ENUMVAL(wxSeekMode,wxFromEnd,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxSeekMode->GetName().c_str(),obj_wxSeekMode,context);
  context->AddDefault(obj_wxSeekMode->GetContext());

  // New enumeration wxDataFormatId
  AMIObject::ptr obj_wxDataFormatId(new AMIObject);
  obj_wxDataFormatId->SetName("wxDataFormatId");

  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_HTML,30);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_MAX,31);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_DIF,5);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_BITMAP,2);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_UNICODETEXT,13);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_DIB,8);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_ENHMETAFILE,14);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_METAFILE,3);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_INVALID,0);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_WAVE,12);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_PENDATA,10);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_PRIVATE,20);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_LOCALE,16);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_TIFF,6);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_OEMTEXT,7);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_PALETTE,9);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_SYLK,4);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_RIFF,11);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_FILENAME,15);
  ADD_WX_ENUMVAL(wxDataFormatId,wxDF_TEXT,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxDataFormatId->GetName().c_str(),obj_wxDataFormatId,context);
  context->AddDefault(obj_wxDataFormatId->GetContext());

  // New enumeration wxAlignment
  AMIObject::ptr obj_wxAlignment(new AMIObject);
  obj_wxAlignment->SetName("wxAlignment");

  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_LEFT,0);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_NOT,0);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_TOP,0);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_RIGHT,512);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_CENTRE_VERTICAL,2048);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_CENTER_HORIZONTAL,256);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_MASK,3840);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_CENTRE_HORIZONTAL,256);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_CENTRE,2304);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_CENTER,2304);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_BOTTOM,1024);
  ADD_WX_ENUMVAL(wxAlignment,wxALIGN_CENTER_VERTICAL,2048);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxAlignment->GetName().c_str(),obj_wxAlignment,context);
  context->AddDefault(obj_wxAlignment->GetContext());

  // New enumeration wxTextAttrAlignment
  AMIObject::ptr obj_wxTextAttrAlignment(new AMIObject);
  obj_wxTextAttrAlignment->SetName("wxTextAttrAlignment");

  ADD_WX_ENUMVAL(wxTextAttrAlignment,wxTEXT_ALIGNMENT_JUSTIFIED,4);
  ADD_WX_ENUMVAL(wxTextAttrAlignment,wxTEXT_ALIGNMENT_LEFT,1);
  ADD_WX_ENUMVAL(wxTextAttrAlignment,wxTEXT_ALIGNMENT_CENTRE,2);
  ADD_WX_ENUMVAL(wxTextAttrAlignment,wxTEXT_ALIGNMENT_RIGHT,3);
  ADD_WX_ENUMVAL(wxTextAttrAlignment,wxTEXT_ALIGNMENT_DEFAULT,0);
  ADD_WX_ENUMVAL(wxTextAttrAlignment,wxTEXT_ALIGNMENT_CENTER,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxTextAttrAlignment->GetName().c_str(),obj_wxTextAttrAlignment,context);
  context->AddDefault(obj_wxTextAttrAlignment->GetContext());

  // New enumeration wxPrintMode
  AMIObject::ptr obj_wxPrintMode(new AMIObject);
  obj_wxPrintMode->SetName("wxPrintMode");

  ADD_WX_ENUMVAL(wxPrintMode,wxPRINT_MODE_STREAM,4);
  ADD_WX_ENUMVAL(wxPrintMode,wxPRINT_MODE_FILE,2);
  ADD_WX_ENUMVAL(wxPrintMode,wxPRINT_MODE_NONE,0);
  ADD_WX_ENUMVAL(wxPrintMode,wxPRINT_MODE_PREVIEW,1);
  ADD_WX_ENUMVAL(wxPrintMode,wxPRINT_MODE_PRINTER,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxPrintMode->GetName().c_str(),obj_wxPrintMode,context);
  context->AddDefault(obj_wxPrintMode->GetContext());

  // New enumeration wxStretch
  AMIObject::ptr obj_wxStretch(new AMIObject);
  obj_wxStretch->SetName("wxStretch");

  ADD_WX_ENUMVAL(wxStretch,wxEXPAND,8192);
  ADD_WX_ENUMVAL(wxStretch,wxSHRINK,4096);
  ADD_WX_ENUMVAL(wxStretch,wxTILE,49152);
  ADD_WX_ENUMVAL(wxStretch,wxGROW,8192);
  ADD_WX_ENUMVAL(wxStretch,wxSHAPED,16384);
  ADD_WX_ENUMVAL(wxStretch,wxRESERVE_SPACE_EVEN_IF_HIDDEN,2);
  ADD_WX_ENUMVAL(wxStretch,wxFIXED_MINSIZE,32768);
  ADD_WX_ENUMVAL(wxStretch,wxADJUST_MINSIZE,1048576);
  ADD_WX_ENUMVAL(wxStretch,wxSTRETCH_NOT,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxStretch->GetName().c_str(),obj_wxStretch,context);
  context->AddDefault(obj_wxStretch->GetContext());

  // New enumeration wxFlexSizerGrowMode
  AMIObject::ptr obj_wxFlexSizerGrowMode(new AMIObject);
  obj_wxFlexSizerGrowMode->SetName("wxFlexSizerGrowMode");

  ADD_WX_ENUMVAL(wxFlexSizerGrowMode,wxFLEX_GROWMODE_ALL,2);
  ADD_WX_ENUMVAL(wxFlexSizerGrowMode,wxFLEX_GROWMODE_NONE,0);
  ADD_WX_ENUMVAL(wxFlexSizerGrowMode,wxFLEX_GROWMODE_SPECIFIED,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxFlexSizerGrowMode->GetName().c_str(),obj_wxFlexSizerGrowMode,context);
  context->AddDefault(obj_wxFlexSizerGrowMode->GetContext());

  // New enumeration enum_98
  AMIObject::ptr obj_enum_98(new AMIObject);
  obj_enum_98->SetName("enum_98");

  ADD_WX_ENUMVAL(enum_98,wxBROWSER_NEW_WINDOW,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_98->GetName().c_str(),obj_enum_98,context);
  context->AddDefault(obj_enum_98->GetContext());

  // New enumeration wxHitTest
  AMIObject::ptr obj_wxHitTest(new AMIObject);
  obj_wxHitTest->SetName("wxHitTest");

  ADD_WX_ENUMVAL(wxHitTest,wxHT_SCROLLBAR_THUMB,5);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_SCROLLBAR_ARROW_PAGE_1,3);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_SCROLLBAR_ARROW_PAGE_2,4);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_WINDOW_OUTSIDE,9);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_SCROLLBAR_BAR_1,6);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_WINDOW_CORNER,13);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_SCROLLBAR_BAR_2,7);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_SCROLLBAR_FIRST,0);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_WINDOW_HORZ_SCROLLBAR,12);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_WINDOW_VERT_SCROLLBAR,11);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_SCROLLBAR_LAST,8);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_MAX,14);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_NOWHERE,0);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_SCROLLBAR_ARROW_LINE_2,2);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_SCROLLBAR_ARROW_LINE_1,1);
  ADD_WX_ENUMVAL(wxHitTest,wxHT_WINDOW_INSIDE,10);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxHitTest->GetName().c_str(),obj_wxHitTest,context);
  context->AddDefault(obj_wxHitTest->GetContext());

  // New enumeration wxUpdateUIMode
  AMIObject::ptr obj_wxUpdateUIMode(new AMIObject);
  obj_wxUpdateUIMode->SetName("wxUpdateUIMode");

  ADD_WX_ENUMVAL(wxUpdateUIMode,wxUPDATE_UI_PROCESS_SPECIFIED,1);
  ADD_WX_ENUMVAL(wxUpdateUIMode,wxUPDATE_UI_PROCESS_ALL,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxUpdateUIMode->GetName().c_str(),obj_wxUpdateUIMode,context);
  context->AddDefault(obj_wxUpdateUIMode->GetContext());

  // New enumeration wxWindowVariant
  AMIObject::ptr obj_wxWindowVariant(new AMIObject);
  obj_wxWindowVariant->SetName("wxWindowVariant");

  ADD_WX_ENUMVAL(wxWindowVariant,wxWINDOW_VARIANT_MAX,4);
  ADD_WX_ENUMVAL(wxWindowVariant,wxWINDOW_VARIANT_LARGE,3);
  ADD_WX_ENUMVAL(wxWindowVariant,wxWINDOW_VARIANT_MINI,2);
  ADD_WX_ENUMVAL(wxWindowVariant,wxWINDOW_VARIANT_NORMAL,0);
  ADD_WX_ENUMVAL(wxWindowVariant,wxWINDOW_VARIANT_SMALL,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxWindowVariant->GetName().c_str(),obj_wxWindowVariant,context);
  context->AddDefault(obj_wxWindowVariant->GetContext());

  // New enumeration wxLocaleInitFlags
  AMIObject::ptr obj_wxLocaleInitFlags(new AMIObject);
  obj_wxLocaleInitFlags->SetName("wxLocaleInitFlags");

  ADD_WX_ENUMVAL(wxLocaleInitFlags,wxLOCALE_LOAD_DEFAULT,1);
  ADD_WX_ENUMVAL(wxLocaleInitFlags,wxLOCALE_CONV_ENCODING,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxLocaleInitFlags->GetName().c_str(),obj_wxLocaleInitFlags,context);
  context->AddDefault(obj_wxLocaleInitFlags->GetContext());

  // New enumeration wxBitmapType
  AMIObject::ptr obj_wxBitmapType(new AMIObject);
  obj_wxBitmapType->SetName("wxBitmapType");

  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_GIF_RESOURCE,14);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_XBM_DATA,8);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_XPM_DATA,10);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_GIF,13);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_ICO_RESOURCE,4);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_PICT,23);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_TGA,29);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_PNG_RESOURCE,16);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_CUR,5);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_MACCURSOR,30);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_XPM,9);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_ICO,3);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_INVALID,0);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_PICT_RESOURCE,24);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_CUR_RESOURCE,6);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_RESOURCE,2);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_ANI,27);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_BMP,1);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_ICON_RESOURCE,26);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_XBM,7);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_ANY,50);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_JPEG_RESOURCE,18);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_PCX,21);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_BMP_RESOURCE,2);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_TIF_RESOURCE,12);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_PNG,15);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_IFF,28);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_PNM,19);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_PCX_RESOURCE,22);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_TIF,11);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_MACCURSOR_RESOURCE,31);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_JPEG,17);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_PNM_RESOURCE,20);
  ADD_WX_ENUMVAL(wxBitmapType,wxBITMAP_TYPE_ICON,25);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxBitmapType->GetName().c_str(),obj_wxBitmapType,context);
  context->AddDefault(obj_wxBitmapType->GetContext());

  // New enumeration wxLayoutDirection
  AMIObject::ptr obj_wxLayoutDirection(new AMIObject);
  obj_wxLayoutDirection->SetName("wxLayoutDirection");

  ADD_WX_ENUMVAL(wxLayoutDirection,wxLayout_LeftToRight,1);
  ADD_WX_ENUMVAL(wxLayoutDirection,wxLayout_Default,0);
  ADD_WX_ENUMVAL(wxLayoutDirection,wxLayout_RightToLeft,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxLayoutDirection->GetName().c_str(),obj_wxLayoutDirection,context);
  context->AddDefault(obj_wxLayoutDirection->GetContext());

  // New enumeration wxPrintBin
  AMIObject::ptr obj_wxPrintBin(new AMIObject);
  obj_wxPrintBin->SetName("wxPrintBin");

  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_MIDDLE,3);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_LOWER,2);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_AUTO,7);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_FORMSOURCE,13);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_DEFAULT,0);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_LARGECAPACITY,11);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_MANUAL,4);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_SMALLFMT,9);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_ENVELOPE,5);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_ONLYONE,1);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_LARGEFMT,10);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_CASSETTE,12);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_ENVMANUAL,6);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_USER,14);
  ADD_WX_ENUMVAL(wxPrintBin,wxPRINTBIN_TRACTOR,8);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxPrintBin->GetName().c_str(),obj_wxPrintBin,context);
  context->AddDefault(obj_wxPrintBin->GetContext());

  // New enumeration wxThreadError
  AMIObject::ptr obj_wxThreadError(new AMIObject);
  obj_wxThreadError->SetName("wxThreadError");

  ADD_WX_ENUMVAL(wxThreadError,wxTHREAD_MISC_ERROR,5);
  ADD_WX_ENUMVAL(wxThreadError,wxTHREAD_NO_ERROR,0);
  ADD_WX_ENUMVAL(wxThreadError,wxTHREAD_RUNNING,2);
  ADD_WX_ENUMVAL(wxThreadError,wxTHREAD_NO_RESOURCE,1);
  ADD_WX_ENUMVAL(wxThreadError,wxTHREAD_KILLED,4);
  ADD_WX_ENUMVAL(wxThreadError,wxTHREAD_NOT_RUNNING,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxThreadError->GetName().c_str(),obj_wxThreadError,context);
  context->AddDefault(obj_wxThreadError->GetContext());

  // New enumeration enum_11
  AMIObject::ptr obj_enum_11(new AMIObject);
  obj_enum_11->SetName("enum_11");

  ADD_WX_ENUMVAL(enum_11,wxFLOOD_SURFACE,1);
  ADD_WX_ENUMVAL(enum_11,wxFLOOD_BORDER,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_11->GetName().c_str(),obj_enum_11,context);
  context->AddDefault(obj_enum_11->GetContext());

  // New enumeration wxItemKind
  AMIObject::ptr obj_wxItemKind(new AMIObject);
  obj_wxItemKind->SetName("wxItemKind");

  ADD_WX_ENUMVAL(wxItemKind,wxITEM_RADIO,2);
  ADD_WX_ENUMVAL(wxItemKind,wxITEM_CHECK,1);
  ADD_WX_ENUMVAL(wxItemKind,wxITEM_NORMAL,0);
  ADD_WX_ENUMVAL(wxItemKind,wxITEM_SEPARATOR,-1);
  ADD_WX_ENUMVAL(wxItemKind,wxITEM_MAX,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxItemKind->GetName().c_str(),obj_wxItemKind,context);
  context->AddDefault(obj_wxItemKind->GetContext());

  // New enumeration enum_129
  AMIObject::ptr obj_enum_129(new AMIObject);
  obj_enum_129->SetName("enum_129");

  ADD_WX_ENUMVAL(enum_129,wxLIST_NEXT_ABOVE,0);
  ADD_WX_ENUMVAL(enum_129,wxLIST_NEXT_BELOW,2);
  ADD_WX_ENUMVAL(enum_129,wxLIST_NEXT_ALL,1);
  ADD_WX_ENUMVAL(enum_129,wxLIST_NEXT_LEFT,3);
  ADD_WX_ENUMVAL(enum_129,wxLIST_NEXT_RIGHT,4);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_129->GetName().c_str(),obj_enum_129,context);
  context->AddDefault(obj_enum_129->GetContext());

  // New enumeration enum_123
  AMIObject::ptr obj_enum_123(new AMIObject);
  obj_enum_123->SetName("enum_123");

  ADD_WX_ENUMVAL(enum_123,wxTB_DOCKABLE,64);
  ADD_WX_ENUMVAL(enum_123,wxTB_3DBUTTONS,16);
  ADD_WX_ENUMVAL(enum_123,wxTB_FLAT,32);
  ADD_WX_ENUMVAL(enum_123,wxTB_TEXT,256);
  ADD_WX_ENUMVAL(enum_123,wxTB_RIGHT,16384);
  ADD_WX_ENUMVAL(enum_123,wxTB_VERTICAL,8);
  ADD_WX_ENUMVAL(enum_123,wxTB_HORIZONTAL,4);
  ADD_WX_ENUMVAL(enum_123,wxTB_BOTTOM,8192);
  ADD_WX_ENUMVAL(enum_123,wxTB_HORZ_TEXT,2304);
  ADD_WX_ENUMVAL(enum_123,wxTB_TOP,4);
  ADD_WX_ENUMVAL(enum_123,wxTB_NODIVIDER,512);
  ADD_WX_ENUMVAL(enum_123,wxTB_LEFT,8);
  ADD_WX_ENUMVAL(enum_123,wxTB_NOALIGN,1024);
  ADD_WX_ENUMVAL(enum_123,wxTB_NOICONS,128);
  ADD_WX_ENUMVAL(enum_123,wxTB_NO_TOOLTIPS,4096);
  ADD_WX_ENUMVAL(enum_123,wxTB_HORZ_LAYOUT,2048);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_123->GetName().c_str(),obj_enum_123,context);
  context->AddDefault(obj_enum_123->GetContext());

  // New enumeration wxArchitecture
  AMIObject::ptr obj_wxArchitecture(new AMIObject);
  obj_wxArchitecture->SetName("wxArchitecture");

  ADD_WX_ENUMVAL(wxArchitecture,wxARCH_INVALID,-1);
  ADD_WX_ENUMVAL(wxArchitecture,wxARCH_MAX,2);
  ADD_WX_ENUMVAL(wxArchitecture,wxARCH_32,0);
  ADD_WX_ENUMVAL(wxArchitecture,wxARCH_64,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxArchitecture->GetName().c_str(),obj_wxArchitecture,context);
  context->AddDefault(obj_wxArchitecture->GetContext());

  // New enumeration wxUpdateUI
  AMIObject::ptr obj_wxUpdateUI(new AMIObject);
  obj_wxUpdateUI->SetName("wxUpdateUI");

  ADD_WX_ENUMVAL(wxUpdateUI,wxUPDATE_UI_NONE,0);
  ADD_WX_ENUMVAL(wxUpdateUI,wxUPDATE_UI_FROMIDLE,2);
  ADD_WX_ENUMVAL(wxUpdateUI,wxUPDATE_UI_RECURSE,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxUpdateUI->GetName().c_str(),obj_wxUpdateUI,context);
  context->AddDefault(obj_wxUpdateUI->GetContext());

  // New enumeration wxTextCtrlHitTestResult
  AMIObject::ptr obj_wxTextCtrlHitTestResult(new AMIObject);
  obj_wxTextCtrlHitTestResult->SetName("wxTextCtrlHitTestResult");

  ADD_WX_ENUMVAL(wxTextCtrlHitTestResult,wxTE_HT_ON_TEXT,0);
  ADD_WX_ENUMVAL(wxTextCtrlHitTestResult,wxTE_HT_UNKNOWN,-2);
  ADD_WX_ENUMVAL(wxTextCtrlHitTestResult,wxTE_HT_BELOW,1);
  ADD_WX_ENUMVAL(wxTextCtrlHitTestResult,wxTE_HT_BEFORE,-1);
  ADD_WX_ENUMVAL(wxTextCtrlHitTestResult,wxTE_HT_BEYOND,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxTextCtrlHitTestResult->GetName().c_str(),obj_wxTextCtrlHitTestResult,context);
  context->AddDefault(obj_wxTextCtrlHitTestResult->GetContext());

  // New enumeration wxLocaleCategory
  AMIObject::ptr obj_wxLocaleCategory(new AMIObject);
  obj_wxLocaleCategory->SetName("wxLocaleCategory");

  ADD_WX_ENUMVAL(wxLocaleCategory,wxLOCALE_CAT_MONEY,2);
  ADD_WX_ENUMVAL(wxLocaleCategory,wxLOCALE_CAT_DATE,1);
  ADD_WX_ENUMVAL(wxLocaleCategory,wxLOCALE_CAT_NUMBER,0);
  ADD_WX_ENUMVAL(wxLocaleCategory,wxLOCALE_CAT_MAX,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxLocaleCategory->GetName().c_str(),obj_wxLocaleCategory,context);
  context->AddDefault(obj_wxLocaleCategory->GetContext());

  // New enumeration enum_111
  AMIObject::ptr obj_enum_111(new AMIObject);
  obj_enum_111->SetName("enum_111");

  ADD_WX_ENUMVAL(enum_111,wxFULLSCREEN_NOSTATUSBAR,4);
  ADD_WX_ENUMVAL(enum_111,wxFULLSCREEN_ALL,31);
  ADD_WX_ENUMVAL(enum_111,wxFULLSCREEN_NOMENUBAR,1);
  ADD_WX_ENUMVAL(enum_111,wxFULLSCREEN_NOBORDER,8);
  ADD_WX_ENUMVAL(enum_111,wxFULLSCREEN_NOCAPTION,16);
  ADD_WX_ENUMVAL(enum_111,wxFULLSCREEN_NOTOOLBAR,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_111->GetName().c_str(),obj_enum_111,context);
  context->AddDefault(obj_enum_111->GetContext());

  // New enumeration enum_8
  AMIObject::ptr obj_enum_8(new AMIObject);
  obj_enum_8->SetName("enum_8");

  ADD_WX_ENUMVAL(enum_8,wxID_HOME,5122);
  ADD_WX_ENUMVAL(enum_8,wxID_PAGE_SETUP,5012);
  ADD_WX_ENUMVAL(enum_8,wxID_REMOVE,5119);
  ADD_WX_ENUMVAL(enum_8,wxID_HELP_COMMANDS,5018);
  ADD_WX_ENUMVAL(enum_8,wxID_VIEW_LARGEICONS,5043);
  ADD_WX_ENUMVAL(enum_8,wxID_CLOSE_FRAME,5201);
  ADD_WX_ENUMVAL(enum_8,wxID_ZOOM_OUT,5138);
  ADD_WX_ENUMVAL(enum_8,wxID_REPLACE_ALL,5040);
  ADD_WX_ENUMVAL(enum_8,wxID_JUSTIFY_CENTER,5128);
  ADD_WX_ENUMVAL(enum_8,wxID_HELP,5009);
  ADD_WX_ENUMVAL(enum_8,wxID_APPLY,5102);
  ADD_WX_ENUMVAL(enum_8,wxID_REVERT_TO_SAVED,5140);
  ADD_WX_ENUMVAL(enum_8,wxID_EDIT,5030);
  ADD_WX_ENUMVAL(enum_8,wxID_PASTE,5033);
  ADD_WX_ENUMVAL(enum_8,wxID_CUT,5031);
  ADD_WX_ENUMVAL(enum_8,wxID_REDO,5008);
  ADD_WX_ENUMVAL(enum_8,wxID_LOWEST,4999);
  ADD_WX_ENUMVAL(enum_8,wxID_ZOOM_IN,5137);
  ADD_WX_ENUMVAL(enum_8,wxID_ZOOM_FIT,5136);
  ADD_WX_ENUMVAL(enum_8,wxID_VIEW_LIST,5045);
  ADD_WX_ENUMVAL(enum_8,wxID_REVERT,5005);
  ADD_WX_ENUMVAL(enum_8,wxID_JUSTIFY_FILL,5129);
  ADD_WX_ENUMVAL(enum_8,wxID_STOP,5124);
  ADD_WX_ENUMVAL(enum_8,wxID_ANY,-1);
  ADD_WX_ENUMVAL(enum_8,wxID_PREVIEW,5013);
  ADD_WX_ENUMVAL(enum_8,wxID_ADD,5118);
  ADD_WX_ENUMVAL(enum_8,wxID_UNDO,5007);
  ADD_WX_ENUMVAL(enum_8,wxID_NO,5104);
  ADD_WX_ENUMVAL(enum_8,wxID_PRINT_SETUP,5011);
  ADD_WX_ENUMVAL(enum_8,wxID_CONTEXT_HELP,5112);
  ADD_WX_ENUMVAL(enum_8,wxID_JUSTIFY_RIGHT,5130);
  ADD_WX_ENUMVAL(enum_8,wxID_BACKWARD,5107);
  ADD_WX_ENUMVAL(enum_8,wxID_UNDERLINE,5132);
  ADD_WX_ENUMVAL(enum_8,wxID_IGNORE,5117);
  ADD_WX_ENUMVAL(enum_8,wxID_SEPARATOR,-2);
  ADD_WX_ENUMVAL(enum_8,wxID_NOTOALL,5114);
  ADD_WX_ENUMVAL(enum_8,wxID_SAVE,5003);
  ADD_WX_ENUMVAL(enum_8,wxID_OK,5100);
  ADD_WX_ENUMVAL(enum_8,wxID_SELECTALL,5037);
  ADD_WX_ENUMVAL(enum_8,wxID_COPY,5032);
  ADD_WX_ENUMVAL(enum_8,wxID_RESIZE_FRAME,5203);
  ADD_WX_ENUMVAL(enum_8,wxID_VIEW_SORTSIZE,5048);
  ADD_WX_ENUMVAL(enum_8,wxID_UNINDENT,5134);
  ADD_WX_ENUMVAL(enum_8,wxID_DELETE,5038);
  ADD_WX_ENUMVAL(enum_8,wxID_JUSTIFY_LEFT,5131);
  ADD_WX_ENUMVAL(enum_8,wxID_INDEX,5125);
  ADD_WX_ENUMVAL(enum_8,wxID_ABOUT,5014);
  ADD_WX_ENUMVAL(enum_8,wxID_DOWN,5121);
  ADD_WX_ENUMVAL(enum_8,wxID_PREFERENCES,5022);
  ADD_WX_ENUMVAL(enum_8,wxID_UP,5120);
  ADD_WX_ENUMVAL(enum_8,wxID_SYSTEM_MENU,5200);
  ADD_WX_ENUMVAL(enum_8,wxID_MAXIMIZE_FRAME,5204);
  ADD_WX_ENUMVAL(enum_8,wxID_REPLACE,5039);
  ADD_WX_ENUMVAL(enum_8,wxID_FIND,5035);
  ADD_WX_ENUMVAL(enum_8,wxID_ZOOM_100,5135);
  ADD_WX_ENUMVAL(enum_8,wxID_CANCEL,5101);
  ADD_WX_ENUMVAL(enum_8,wxID_YESTOALL,5113);
  ADD_WX_ENUMVAL(enum_8,wxID_INDENT,5133);
  ADD_WX_ENUMVAL(enum_8,wxID_CLOSE,5001);
  ADD_WX_ENUMVAL(enum_8,wxID_MOVE_FRAME,5202);
  ADD_WX_ENUMVAL(enum_8,wxID_ICONIZE_FRAME,5205);
  ADD_WX_ENUMVAL(enum_8,wxID_HELP_PROCEDURES,5019);
  ADD_WX_ENUMVAL(enum_8,wxID_ITALIC,5127);
  ADD_WX_ENUMVAL(enum_8,wxID_FILEDLGG,5900);
  ADD_WX_ENUMVAL(enum_8,wxID_DEFAULT,5108);
  ADD_WX_ENUMVAL(enum_8,wxID_NEW,5002);
  ADD_WX_ENUMVAL(enum_8,wxID_CLOSE_ALL,5021);
  ADD_WX_ENUMVAL(enum_8,wxID_MORE,5109);
  ADD_WX_ENUMVAL(enum_8,wxID_RESET,5111);
  ADD_WX_ENUMVAL(enum_8,wxID_STATIC,5105);
  ADD_WX_ENUMVAL(enum_8,wxID_NONE,-3);
  ADD_WX_ENUMVAL(enum_8,wxID_UNDELETE,5139);
  ADD_WX_ENUMVAL(enum_8,wxID_VIEW_SORTTYPE,5049);
  ADD_WX_ENUMVAL(enum_8,wxID_ABORT,5115);
  ADD_WX_ENUMVAL(enum_8,wxID_REFRESH,5123);
  ADD_WX_ENUMVAL(enum_8,wxID_YES,5103);
  ADD_WX_ENUMVAL(enum_8,wxID_HELP_CONTENTS,5015);
  ADD_WX_ENUMVAL(enum_8,wxID_OPEN,5000);
  ADD_WX_ENUMVAL(enum_8,wxID_VIEW_SMALLICONS,5044);
  ADD_WX_ENUMVAL(enum_8,wxID_FILE,5050);
  ADD_WX_ENUMVAL(enum_8,wxID_VIEW_SORTDATE,5046);
  ADD_WX_ENUMVAL(enum_8,wxID_SAVEAS,5004);
  ADD_WX_ENUMVAL(enum_8,wxID_HIGHEST,5999);
  ADD_WX_ENUMVAL(enum_8,wxID_VIEW_SORTNAME,5047);
  ADD_WX_ENUMVAL(enum_8,wxID_HELP_SEARCH,5017);
  ADD_WX_ENUMVAL(enum_8,wxID_FORWARD,5106);
  ADD_WX_ENUMVAL(enum_8,wxID_CLEAR,5034);
  ADD_WX_ENUMVAL(enum_8,wxID_EXIT,5006);
  ADD_WX_ENUMVAL(enum_8,wxID_VIEW_DETAILS,5042);
  ADD_WX_ENUMVAL(enum_8,wxID_PRINT,5010);
  ADD_WX_ENUMVAL(enum_8,wxID_RETRY,5116);
  ADD_WX_ENUMVAL(enum_8,wxID_FILE1,5051);
  ADD_WX_ENUMVAL(enum_8,wxID_DUPLICATE,5036);
  ADD_WX_ENUMVAL(enum_8,wxID_HELP_CONTEXT,5020);
  ADD_WX_ENUMVAL(enum_8,wxID_RESTORE_FRAME,5206);
  ADD_WX_ENUMVAL(enum_8,wxID_BOLD,5126);
  ADD_WX_ENUMVAL(enum_8,wxID_HELP_INDEX,5016);
  ADD_WX_ENUMVAL(enum_8,wxID_PROPERTIES,5041);
  ADD_WX_ENUMVAL(enum_8,wxID_FILE9,5059);
  ADD_WX_ENUMVAL(enum_8,wxID_FILE8,5058);
  ADD_WX_ENUMVAL(enum_8,wxID_FILE3,5053);
  ADD_WX_ENUMVAL(enum_8,wxID_FILE2,5052);
  ADD_WX_ENUMVAL(enum_8,wxID_SETUP,5110);
  ADD_WX_ENUMVAL(enum_8,wxID_FILE7,5057);
  ADD_WX_ENUMVAL(enum_8,wxID_FILE6,5056);
  ADD_WX_ENUMVAL(enum_8,wxID_FILE5,5055);
  ADD_WX_ENUMVAL(enum_8,wxID_FILE4,5054);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_8->GetName().c_str(),obj_enum_8,context);
  context->AddDefault(obj_enum_8->GetContext());

  // New enumeration wxSystemMetric
  AMIObject::ptr obj_wxSystemMetric(new AMIObject);
  obj_wxSystemMetric->SetName("wxSystemMetric");

  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_EDGE_Y,11);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_EDGE_X,10);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_FRAMESIZE_Y,24);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_FRAMESIZE_X,23);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_DCLICK_X,6);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_DCLICK_Y,7);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_PENWINDOWS_PRESENT,35);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_ICONSPACING_Y,18);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_ICONSPACING_X,17);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_SWAP_BUTTONS,37);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_WINDOWMIN_Y,20);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_WINDOWMIN_X,19);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_DRAG_X,8);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_SMALLICON_Y,26);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_SMALLICON_X,25);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_DRAG_Y,9);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_MOUSE_BUTTONS,1);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_SHOW_SOUNDS,36);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_CAPTION_Y,32);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_BORDER_X,2);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_BORDER_Y,3);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_HSCROLL_ARROW_X,12);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_HSCROLL_ARROW_Y,13);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_HSCROLL_Y,27);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_SCREEN_X,21);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_SCREEN_Y,22);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_VSCROLL_ARROW_X,29);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_VSCROLL_ARROW_Y,30);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_ICON_Y,16);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_ICON_X,15);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_NETWORK_PRESENT,34);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_VTHUMB_Y,31);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_MENU_Y,33);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_CURSOR_X,4);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_CURSOR_Y,5);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_HTHUMB_X,14);
  ADD_WX_ENUMVAL(wxSystemMetric,wxSYS_VSCROLL_X,28);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxSystemMetric->GetName().c_str(),obj_wxSystemMetric,context);
  context->AddDefault(obj_wxSystemMetric->GetContext());

  // New enumeration wxToolBarToolStyle
  AMIObject::ptr obj_wxToolBarToolStyle(new AMIObject);
  obj_wxToolBarToolStyle->SetName("wxToolBarToolStyle");

  ADD_WX_ENUMVAL(wxToolBarToolStyle,wxTOOL_STYLE_SEPARATOR,2);
  ADD_WX_ENUMVAL(wxToolBarToolStyle,wxTOOL_STYLE_CONTROL,3);
  ADD_WX_ENUMVAL(wxToolBarToolStyle,wxTOOL_STYLE_BUTTON,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxToolBarToolStyle->GetName().c_str(),obj_wxToolBarToolStyle,context);
  context->AddDefault(obj_wxToolBarToolStyle->GetContext());

  // New enumeration wxCheckBoxState
  AMIObject::ptr obj_wxCheckBoxState(new AMIObject);
  obj_wxCheckBoxState->SetName("wxCheckBoxState");

  ADD_WX_ENUMVAL(wxCheckBoxState,wxCHK_CHECKED,1);
  ADD_WX_ENUMVAL(wxCheckBoxState,wxCHK_UNDETERMINED,2);
  ADD_WX_ENUMVAL(wxCheckBoxState,wxCHK_UNCHECKED,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxCheckBoxState->GetName().c_str(),obj_wxCheckBoxState,context);
  context->AddDefault(obj_wxCheckBoxState->GetContext());

  // New enumeration wxDuplexMode
  AMIObject::ptr obj_wxDuplexMode(new AMIObject);
  obj_wxDuplexMode->SetName("wxDuplexMode");

  ADD_WX_ENUMVAL(wxDuplexMode,wxDUPLEX_SIMPLEX,0);
  ADD_WX_ENUMVAL(wxDuplexMode,wxDUPLEX_HORIZONTAL,1);
  ADD_WX_ENUMVAL(wxDuplexMode,wxDUPLEX_VERTICAL,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxDuplexMode->GetName().c_str(),obj_wxDuplexMode,context);
  context->AddDefault(obj_wxDuplexMode->GetContext());

  // New enumeration wxFileKind
  AMIObject::ptr obj_wxFileKind(new AMIObject);
  obj_wxFileKind->SetName("wxFileKind");

  ADD_WX_ENUMVAL(wxFileKind,wxFILE_KIND_DISK,1);
  ADD_WX_ENUMVAL(wxFileKind,wxFILE_KIND_TERMINAL,2);
  ADD_WX_ENUMVAL(wxFileKind,wxFILE_KIND_UNKNOWN,0);
  ADD_WX_ENUMVAL(wxFileKind,wxFILE_KIND_PIPE,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxFileKind->GetName().c_str(),obj_wxFileKind,context);
  context->AddDefault(obj_wxFileKind->GetContext());

  // New enumeration enum_128
  AMIObject::ptr obj_enum_128(new AMIObject);
  obj_enum_128->SetName("enum_128");

  ADD_WX_ENUMVAL(enum_128,wxFILE_MUST_EXIST,16);
  ADD_WX_ENUMVAL(enum_128,wxOPEN,1);
  ADD_WX_ENUMVAL(enum_128,wxSAVE,2);
  ADD_WX_ENUMVAL(enum_128,wxCHANGE_DIR,128);
  ADD_WX_ENUMVAL(enum_128,wxOVERWRITE_PROMPT,4);
  ADD_WX_ENUMVAL(enum_128,wxMULTIPLE,32);
  ADD_WX_ENUMVAL(enum_128,wxHIDE_READONLY,8);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_128->GetName().c_str(),obj_enum_128,context);
  context->AddDefault(obj_enum_128->GetContext());

  // New enumeration wxIdleMode
  AMIObject::ptr obj_wxIdleMode(new AMIObject);
  obj_wxIdleMode->SetName("wxIdleMode");

  ADD_WX_ENUMVAL(wxIdleMode,wxIDLE_PROCESS_SPECIFIED,1);
  ADD_WX_ENUMVAL(wxIdleMode,wxIDLE_PROCESS_ALL,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxIdleMode->GetName().c_str(),obj_wxIdleMode,context);
  context->AddDefault(obj_wxIdleMode->GetContext());

  // New enumeration wxStreamError
  AMIObject::ptr obj_wxStreamError(new AMIObject);
  obj_wxStreamError->SetName("wxStreamError");

  ADD_WX_ENUMVAL(wxStreamError,wxSTREAM_EOF,1);
  ADD_WX_ENUMVAL(wxStreamError,wxSTREAM_NO_ERROR,0);
  ADD_WX_ENUMVAL(wxStreamError,wxSTREAM_READ_ERROR,3);
  ADD_WX_ENUMVAL(wxStreamError,wxSTREAM_WRITE_ERROR,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxStreamError->GetName().c_str(),obj_wxStreamError,context);
  context->AddDefault(obj_wxStreamError->GetContext());

  // New enumeration enum_12
  AMIObject::ptr obj_enum_12(new AMIObject);
  obj_enum_12->SetName("enum_12");

  ADD_WX_ENUMVAL(enum_12,wxODDEVEN_RULE,1);
  ADD_WX_ENUMVAL(enum_12,wxWINDING_RULE,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_12->GetName().c_str(),obj_enum_12,context);
  context->AddDefault(obj_enum_12->GetContext());

  // New enumeration wxThreadKind
  AMIObject::ptr obj_wxThreadKind(new AMIObject);
  obj_wxThreadKind->SetName("wxThreadKind");

  ADD_WX_ENUMVAL(wxThreadKind,wxTHREAD_JOINABLE,1);
  ADD_WX_ENUMVAL(wxThreadKind,wxTHREAD_DETACHED,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxThreadKind->GetName().c_str(),obj_wxThreadKind,context);
  context->AddDefault(obj_wxThreadKind->GetContext());

  // New enumeration wxSystemColour
  AMIObject::ptr obj_wxSystemColour(new AMIObject);
  obj_wxSystemColour->SetName("wxSystemColour");

  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_INACTIVECAPTIONTEXT,19);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_BTNFACE,15);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_LISTBOX,25);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_CAPTIONTEXT,9);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_MENUHILIGHT,29);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_HIGHLIGHT,13);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_HOTLIGHT,26);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_BACKGROUND,1);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_3DHIGHLIGHT,20);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_3DFACE,15);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_3DSHADOW,16);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_MENUTEXT,7);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_3DDKSHADOW,21);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_BTNHILIGHT,20);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_GRADIENTINACTIVECAPTION,28);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_INACTIVEBORDER,11);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_INACTIVECAPTION,3);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_DESKTOP,1);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_MENU,4);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_WINDOW,5);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_3DLIGHT,22);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_BTNTEXT,18);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_BTNSHADOW,16);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_HIGHLIGHTTEXT,14);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_BTNHIGHLIGHT,20);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_MENUBAR,30);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_INFOBK,24);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_ACTIVECAPTION,2);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_LISTBOXTEXT,31);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_MAX,32);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_WINDOWFRAME,6);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_INFOTEXT,23);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_APPWORKSPACE,12);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_WINDOWTEXT,8);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_GRAYTEXT,17);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_GRADIENTACTIVECAPTION,27);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_ACTIVEBORDER,10);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_SCROLLBAR,0);
  ADD_WX_ENUMVAL(wxSystemColour,wxSYS_COLOUR_3DHILIGHT,20);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxSystemColour->GetName().c_str(),obj_wxSystemColour,context);
  context->AddDefault(obj_wxSystemColour->GetContext());

  // New enumeration wxStreamProtocolType
  AMIObject::ptr obj_wxStreamProtocolType(new AMIObject);
  obj_wxStreamProtocolType->SetName("wxStreamProtocolType");

  ADD_WX_ENUMVAL(wxStreamProtocolType,wxSTREAM_MIMETYPE,1);
  ADD_WX_ENUMVAL(wxStreamProtocolType,wxSTREAM_PROTOCOL,0);
  ADD_WX_ENUMVAL(wxStreamProtocolType,wxSTREAM_ENCODING,2);
  ADD_WX_ENUMVAL(wxStreamProtocolType,wxSTREAM_FILEEXT,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxStreamProtocolType->GetName().c_str(),obj_wxStreamProtocolType,context);
  context->AddDefault(obj_wxStreamProtocolType->GetContext());

  // New enumeration enum_114
  AMIObject::ptr obj_enum_114(new AMIObject);
  obj_enum_114->SetName("enum_114");

  ADD_WX_ENUMVAL(enum_114,wxIMAGE_QUALITY_HIGH,1);
  ADD_WX_ENUMVAL(enum_114,wxIMAGE_QUALITY_NORMAL,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_114->GetName().c_str(),obj_enum_114,context);
  context->AddDefault(obj_enum_114->GetContext());

  // New enumeration wxKeyType
  AMIObject::ptr obj_wxKeyType(new AMIObject);
  obj_wxKeyType->SetName("wxKeyType");

  ADD_WX_ENUMVAL(wxKeyType,wxKEY_INTEGER,1);
  ADD_WX_ENUMVAL(wxKeyType,wxKEY_NONE,0);
  ADD_WX_ENUMVAL(wxKeyType,wxKEY_STRING,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxKeyType->GetName().c_str(),obj_wxKeyType,context);
  context->AddDefault(obj_wxKeyType->GetContext());

  // New enumeration wxListColumnFormat
  AMIObject::ptr obj_wxListColumnFormat(new AMIObject);
  obj_wxListColumnFormat->SetName("wxListColumnFormat");

  ADD_WX_ENUMVAL(wxListColumnFormat,wxLIST_FORMAT_RIGHT,1);
  ADD_WX_ENUMVAL(wxListColumnFormat,wxLIST_FORMAT_CENTER,2);
  ADD_WX_ENUMVAL(wxListColumnFormat,wxLIST_FORMAT_LEFT,0);
  ADD_WX_ENUMVAL(wxListColumnFormat,wxLIST_FORMAT_CENTRE,2);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxListColumnFormat->GetName().c_str(),obj_wxListColumnFormat,context);
  context->AddDefault(obj_wxListColumnFormat->GetContext());

  // New enumeration wxSignal
  AMIObject::ptr obj_wxSignal(new AMIObject);
  obj_wxSignal->SetName("wxSignal");

  ADD_WX_ENUMVAL(wxSignal,wxSIGPIPE,13);
  ADD_WX_ENUMVAL(wxSignal,wxSIGABRT,6);
  ADD_WX_ENUMVAL(wxSignal,wxSIGALRM,14);
  ADD_WX_ENUMVAL(wxSignal,wxSIGIOT,6);
  ADD_WX_ENUMVAL(wxSignal,wxSIGBUS,10);
  ADD_WX_ENUMVAL(wxSignal,wxSIGINT,2);
  ADD_WX_ENUMVAL(wxSignal,wxSIGTRAP,5);
  ADD_WX_ENUMVAL(wxSignal,wxSIGKILL,9);
  ADD_WX_ENUMVAL(wxSignal,wxSIGEMT,7);
  ADD_WX_ENUMVAL(wxSignal,wxSIGNONE,0);
  ADD_WX_ENUMVAL(wxSignal,wxSIGQUIT,3);
  ADD_WX_ENUMVAL(wxSignal,wxSIGHUP,1);
  ADD_WX_ENUMVAL(wxSignal,wxSIGILL,4);
  ADD_WX_ENUMVAL(wxSignal,wxSIGFPE,8);
  ADD_WX_ENUMVAL(wxSignal,wxSIGSYS,12);
  ADD_WX_ENUMVAL(wxSignal,wxSIGSEGV,11);
  ADD_WX_ENUMVAL(wxSignal,wxSIGTERM,15);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxSignal->GetName().c_str(),obj_wxSignal,context);
  context->AddDefault(obj_wxSignal->GetContext());

  // New enumeration wxFontEncoding
  AMIObject::ptr obj_wxFontEncoding(new AMIObject);
  obj_wxFontEncoding->SetName("wxFontEncoding");

  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACCELTIC,84);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACARABICEXT,77);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_EUC_JP,42);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACGREEK,53);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACKOREAN,50);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACTELUGU,61);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACBENGALI,59);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP950,30);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_UNICODE,46);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_KOI8_U,18);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACDINGBATS,79);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACSYMBOL,78);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACGURMUKHI,56);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP437,21);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACDEVANAGARI,55);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_UTF32BE,45);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_BIG5,30);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACBURMESE,65);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_8,8);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_9,9);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_4,4);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_5,5);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_6,6);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_7,7);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_1,1);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_2,2);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_3,3);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACGEORGIAN,69);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP932,27);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP936,28);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_UTF16,44);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACMONGOLIAN,73);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACJAPANESE,48);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_SHIFT_JIS,27);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACCHINESESIMP,71);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACKEYBOARD,86);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ALTERNATIVE,19);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_14,14);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_15,15);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_12,12);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_13,13);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_10,10);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_11,11);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACTURKISH,80);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_ISO8859_MAX,16);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_UTF32,46);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MAX,87);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_DEFAULT,0);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACROMANIAN,83);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP850,22);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP852,23);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP855,24);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACETHIOPIC,74);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_UTF7,40);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACCYRILLIC,54);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_UTF32LE,46);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_UTF8,41);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACMIN,47);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACTAMIL,60);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACICELANDIC,82);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACKHMER,66);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACLAOTIAN,68);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACTIBETAN,72);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_BULGARIAN,20);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACKANNADA,62);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACROMAN,47);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP12_MAX,39);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACGAELIC,85);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACARMENIAN,70);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACVIATNAMESE,76);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_SYSTEM,-1);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACTHAI,67);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACARABIC,51);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP874,26);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACORIYA,58);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_UTF16LE,44);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP1256,37);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP1257,38);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP1254,35);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP1255,36);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP1252,33);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP1253,34);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP1250,31);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP1251,32);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACCROATIAN,81);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACSINHALESE,64);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACCENTRALEUR,75);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACMAX,86);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_GB2312,28);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACMALAJALAM,63);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP866,25);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_UTF16BE,43);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACHEBREW,52);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_KOI8,17);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACCHINESETRAD,49);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_MACGUJARATI,57);
  ADD_WX_ENUMVAL(wxFontEncoding,wxFONTENCODING_CP949,29);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxFontEncoding->GetName().c_str(),obj_wxFontEncoding,context);
  context->AddDefault(obj_wxFontEncoding->GetContext());

  // New enumeration wxShutdownFlags
  AMIObject::ptr obj_wxShutdownFlags(new AMIObject);
  obj_wxShutdownFlags->SetName("wxShutdownFlags");

  ADD_WX_ENUMVAL(wxShutdownFlags,wxSHUTDOWN_REBOOT,1);
  ADD_WX_ENUMVAL(wxShutdownFlags,wxSHUTDOWN_POWEROFF,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxShutdownFlags->GetName().c_str(),obj_wxShutdownFlags,context);
  context->AddDefault(obj_wxShutdownFlags->GetContext());

  // New enumeration wxRelationship
  AMIObject::ptr obj_wxRelationship(new AMIObject);
  obj_wxRelationship->SetName("wxRelationship");

  ADD_WX_ENUMVAL(wxRelationship,wxRightOf,6);
  ADD_WX_ENUMVAL(wxRelationship,wxPercentOf,2);
  ADD_WX_ENUMVAL(wxRelationship,wxUnconstrained,0);
  ADD_WX_ENUMVAL(wxRelationship,wxSameAs,7);
  ADD_WX_ENUMVAL(wxRelationship,wxBelow,4);
  ADD_WX_ENUMVAL(wxRelationship,wxLeftOf,5);
  ADD_WX_ENUMVAL(wxRelationship,wxAbove,3);
  ADD_WX_ENUMVAL(wxRelationship,wxAbsolute,8);
  ADD_WX_ENUMVAL(wxRelationship,wxAsIs,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxRelationship->GetName().c_str(),obj_wxRelationship,context);
  context->AddDefault(obj_wxRelationship->GetContext());

  // New enumeration wxKeyModifier
  AMIObject::ptr obj_wxKeyModifier(new AMIObject);
  obj_wxKeyModifier->SetName("wxKeyModifier");

  ADD_WX_ENUMVAL(wxKeyModifier,wxMOD_SHIFT,4);
  ADD_WX_ENUMVAL(wxKeyModifier,wxMOD_CMD,2);
  ADD_WX_ENUMVAL(wxKeyModifier,wxMOD_ALL,65535);
  ADD_WX_ENUMVAL(wxKeyModifier,wxMOD_META,8);
  ADD_WX_ENUMVAL(wxKeyModifier,wxMOD_CONTROL,2);
  ADD_WX_ENUMVAL(wxKeyModifier,wxMOD_ALT,1);
  ADD_WX_ENUMVAL(wxKeyModifier,wxMOD_ALTGR,3);
  ADD_WX_ENUMVAL(wxKeyModifier,wxMOD_WIN,8);
  ADD_WX_ENUMVAL(wxKeyModifier,wxMOD_NONE,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxKeyModifier->GetName().c_str(),obj_wxKeyModifier,context);
  context->AddDefault(obj_wxKeyModifier->GetContext());

  // New enumeration wxSystemScreenType
  AMIObject::ptr obj_wxSystemScreenType(new AMIObject);
  obj_wxSystemScreenType->SetName("wxSystemScreenType");

  ADD_WX_ENUMVAL(wxSystemScreenType,wxSYS_SCREEN_TINY,1);
  ADD_WX_ENUMVAL(wxSystemScreenType,wxSYS_SCREEN_PDA,2);
  ADD_WX_ENUMVAL(wxSystemScreenType,wxSYS_SCREEN_NONE,0);
  ADD_WX_ENUMVAL(wxSystemScreenType,wxSYS_SCREEN_DESKTOP,4);
  ADD_WX_ENUMVAL(wxSystemScreenType,wxSYS_SCREEN_SMALL,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxSystemScreenType->GetName().c_str(),obj_wxSystemScreenType,context);
  context->AddDefault(obj_wxSystemScreenType->GetContext());

  // New enumeration wxOperatingSystemId
  AMIObject::ptr obj_wxOperatingSystemId(new AMIObject);
  obj_wxOperatingSystemId->SetName("wxOperatingSystemId");

  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_UNIX,8128);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_MAC_OS,1);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_UNKNOWN,0);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_WINDOWS_MICRO,16);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_UNIX_AIX,2048);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_UNIX_OPENBSD,256);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_MAC_OSX_DARWIN,2);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_OS2,65536);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_UNIX_SOLARIS,1024);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_UNIX_LINUX,64);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_WINDOWS_NT,8);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_UNIX_NETBSD,512);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_WINDOWS_CE,32);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_DOS,32768);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_UNIX_HPUX,4096);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_MAC,3);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_WINDOWS,60);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_WINDOWS_9X,4);
  ADD_WX_ENUMVAL(wxOperatingSystemId,wxOS_UNIX_FREEBSD,128);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxOperatingSystemId->GetName().c_str(),obj_wxOperatingSystemId,context);
  context->AddDefault(obj_wxOperatingSystemId->GetContext());

  // New enumeration wxOrientation
  AMIObject::ptr obj_wxOrientation(new AMIObject);
  obj_wxOrientation->SetName("wxOrientation");

  ADD_WX_ENUMVAL(wxOrientation,wxHORIZONTAL,4);
  ADD_WX_ENUMVAL(wxOrientation,wxBOTH,12);
  ADD_WX_ENUMVAL(wxOrientation,wxVERTICAL,8);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxOrientation->GetName().c_str(),obj_wxOrientation,context);
  context->AddDefault(obj_wxOrientation->GetContext());

  // New enumeration wxPortId
  AMIObject::ptr obj_wxPortId(new AMIObject);
  obj_wxPortId->SetName("wxPortId");

  ADD_WX_ENUMVAL(wxPortId,wxPORT_PALMOS,1024);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_X11,32);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_MGL,16);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_COCOA,256);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_GTK,8);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_WINCE,512);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_PM,64);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_MSW,2);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_UNKNOWN,0);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_OS2,64);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_MAC,128);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_BASE,1);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_MOTIF,4);
  ADD_WX_ENUMVAL(wxPortId,wxPORT_DFB,2048);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxPortId->GetName().c_str(),obj_wxPortId,context);
  context->AddDefault(obj_wxPortId->GetContext());

  // New enumeration wxBackgroundStyle
  AMIObject::ptr obj_wxBackgroundStyle(new AMIObject);
  obj_wxBackgroundStyle->SetName("wxBackgroundStyle");

  ADD_WX_ENUMVAL(wxBackgroundStyle,wxBG_STYLE_COLOUR,1);
  ADD_WX_ENUMVAL(wxBackgroundStyle,wxBG_STYLE_CUSTOM,2);
  ADD_WX_ENUMVAL(wxBackgroundStyle,wxBG_STYLE_SYSTEM,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxBackgroundStyle->GetName().c_str(),obj_wxBackgroundStyle,context);
  context->AddDefault(obj_wxBackgroundStyle->GetContext());

  // New enumeration enum_9
  AMIObject::ptr obj_enum_9(new AMIObject);
  obj_enum_9->SetName("enum_9");

  ADD_WX_ENUMVAL(enum_9,wxITALIC,93);
  ADD_WX_ENUMVAL(enum_9,wxCROSSDIAG_HATCH,112);
  ADD_WX_ENUMVAL(enum_9,wxBOLD,92);
  ADD_WX_ENUMVAL(enum_9,wxNORMAL,90);
  ADD_WX_ENUMVAL(enum_9,wxJOIN_ROUND,122);
  ADD_WX_ENUMVAL(enum_9,wxTELETYPE,76);
  ADD_WX_ENUMVAL(enum_9,wxJOIN_BEVEL,120);
  ADD_WX_ENUMVAL(enum_9,wxSOLID,100);
  ADD_WX_ENUMVAL(enum_9,wxVERTICAL_HATCH,116);
  ADD_WX_ENUMVAL(enum_9,wxFIRST_HATCH,111);
  ADD_WX_ENUMVAL(enum_9,wxLAST_HATCH,116);
  ADD_WX_ENUMVAL(enum_9,wxUSER_DASH,105);
  ADD_WX_ENUMVAL(enum_9,wxSTIPPLE,110);
  ADD_WX_ENUMVAL(enum_9,wxHORIZONTAL_HATCH,115);
  ADD_WX_ENUMVAL(enum_9,wxCAP_PROJECTING,131);
  ADD_WX_ENUMVAL(enum_9,wxSLANT,94);
  ADD_WX_ENUMVAL(enum_9,wxCAP_BUTT,132);
  ADD_WX_ENUMVAL(enum_9,wxLIGHT,91);
  ADD_WX_ENUMVAL(enum_9,wxVARIABLE,80);
  ADD_WX_ENUMVAL(enum_9,wxSWISS,74);
  ADD_WX_ENUMVAL(enum_9,wxSHORT_DASH,103);
  ADD_WX_ENUMVAL(enum_9,wxSTIPPLE_MASK_OPAQUE,107);
  ADD_WX_ENUMVAL(enum_9,wxDOT_DASH,104);
  ADD_WX_ENUMVAL(enum_9,wxFDIAGONAL_HATCH,113);
  ADD_WX_ENUMVAL(enum_9,wxDECORATIVE,71);
  ADD_WX_ENUMVAL(enum_9,wxCAP_ROUND,130);
  ADD_WX_ENUMVAL(enum_9,wxTRANSPARENT,106);
  ADD_WX_ENUMVAL(enum_9,wxMODERN,75);
  ADD_WX_ENUMVAL(enum_9,wxJOIN_MITER,121);
  ADD_WX_ENUMVAL(enum_9,wxSTIPPLE_MASK,108);
  ADD_WX_ENUMVAL(enum_9,wxDEFAULT,70);
  ADD_WX_ENUMVAL(enum_9,wxBDIAGONAL_HATCH,111);
  ADD_WX_ENUMVAL(enum_9,wxDOT,101);
  ADD_WX_ENUMVAL(enum_9,wxLONG_DASH,102);
  ADD_WX_ENUMVAL(enum_9,wxFIXED,81);
  ADD_WX_ENUMVAL(enum_9,wxSCRIPT,73);
  ADD_WX_ENUMVAL(enum_9,wxCROSS_HATCH,114);
  ADD_WX_ENUMVAL(enum_9,wxROMAN,72);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_9->GetName().c_str(),obj_enum_9,context);
  context->AddDefault(obj_enum_9->GetContext());

  // New enumeration wxMutexType
  AMIObject::ptr obj_wxMutexType(new AMIObject);
  obj_wxMutexType->SetName("wxMutexType");

  ADD_WX_ENUMVAL(wxMutexType,wxMUTEX_RECURSIVE,1);
  ADD_WX_ENUMVAL(wxMutexType,wxMUTEX_DEFAULT,0);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxMutexType->GetName().c_str(),obj_wxMutexType,context);
  context->AddDefault(obj_wxMutexType->GetContext());

  // New enumeration wxCondError
  AMIObject::ptr obj_wxCondError(new AMIObject);
  obj_wxCondError->SetName("wxCondError");

  ADD_WX_ENUMVAL(wxCondError,wxCOND_TIMEOUT,2);
  ADD_WX_ENUMVAL(wxCondError,wxCOND_NO_ERROR,0);
  ADD_WX_ENUMVAL(wxCondError,wxCOND_INVALID,1);
  ADD_WX_ENUMVAL(wxCondError,wxCOND_MISC_ERROR,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxCondError->GetName().c_str(),obj_wxCondError,context);
  context->AddDefault(obj_wxCondError->GetContext());

  // New enumeration wxClientDataType
  AMIObject::ptr obj_wxClientDataType(new AMIObject);
  obj_wxClientDataType->SetName("wxClientDataType");

  ADD_WX_ENUMVAL(wxClientDataType,wxClientData_None,0);
  ADD_WX_ENUMVAL(wxClientDataType,wxClientData_Void,2);
  ADD_WX_ENUMVAL(wxClientDataType,wxClientData_Object,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxClientDataType->GetName().c_str(),obj_wxClientDataType,context);
  context->AddDefault(obj_wxClientDataType->GetContext());

  // New enumeration wxLocaleInfo
  AMIObject::ptr obj_wxLocaleInfo(new AMIObject);
  obj_wxLocaleInfo->SetName("wxLocaleInfo");

  ADD_WX_ENUMVAL(wxLocaleInfo,wxLOCALE_THOUSANDS_SEP,0);
  ADD_WX_ENUMVAL(wxLocaleInfo,wxLOCALE_DECIMAL_POINT,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxLocaleInfo->GetName().c_str(),obj_wxLocaleInfo,context);
  context->AddDefault(obj_wxLocaleInfo->GetContext());

  // New enumeration enum_99
  AMIObject::ptr obj_enum_99(new AMIObject);
  obj_enum_99->SetName("enum_99");

  ADD_WX_ENUMVAL(enum_99,wxStrip_Mnemonics,1);
  ADD_WX_ENUMVAL(enum_99,wxStrip_Accel,2);
  ADD_WX_ENUMVAL(enum_99,wxStrip_All,3);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_enum_99->GetName().c_str(),obj_enum_99,context);
  context->AddDefault(obj_enum_99->GetContext());

  // New enumeration wxOutCode
  AMIObject::ptr obj_wxOutCode(new AMIObject);
  obj_wxOutCode->SetName("wxOutCode");

  ADD_WX_ENUMVAL(wxOutCode,wxOutTop,8);
  ADD_WX_ENUMVAL(wxOutCode,wxOutRight,2);
  ADD_WX_ENUMVAL(wxOutCode,wxInside,0);
  ADD_WX_ENUMVAL(wxOutCode,wxOutBottom,4);
  ADD_WX_ENUMVAL(wxOutCode,wxOutLeft,1);

  // Add enum to context, and add to default contexts
  context->AddVar<AMIObject>(obj_wxOutCode->GetName().c_str(),obj_wxOutCode,context);
  context->AddDefault(obj_wxOutCode->GetContext());
  #undef ADD_WX_ENUMVAL

  #define ADD_WX_VAR(type,name) \
    {\
      BasicVariable::ptr var = AMILabType<type >::CreateVar(name);\
      if (var.get()) {\
        var->Rename(#name);\
        vars_context->AddVar(var,vars_context);\
      }\
    }\


  // Variables context
  AMIObject::ptr obj_vars(new AMIObject);
  obj_vars->SetName("_wx_variables");
  Variables::ptr vars_context = obj_vars->GetContext();

  ADD_WX_VAR(int,wxEVT_ACTIVATE);
  ADD_WX_VAR(int,wxEVT_ACTIVATE_APP);
  ADD_WX_VAR(int,wxEVT_CHAR);
  ADD_WX_VAR(int,wxEVT_CHAR_HOOK);
  ADD_WX_VAR(int,wxEVT_CHILD_FOCUS);
  ADD_WX_VAR(int,wxEVT_CLOSE_WINDOW);
  ADD_WX_VAR(int,wxEVT_COMMAND_BUTTON_CLICKED);
  ADD_WX_VAR(int,wxEVT_COMMAND_CHECKBOX_CLICKED);
  ADD_WX_VAR(int,wxEVT_COMMAND_CHECKLISTBOX_TOGGLED);
  ADD_WX_VAR(int,wxEVT_COMMAND_CHOICE_SELECTED);
  ADD_WX_VAR(int,wxEVT_COMMAND_COMBOBOX_SELECTED);
  ADD_WX_VAR(int,wxEVT_COMMAND_ENTER);
  ADD_WX_VAR(int,wxEVT_COMMAND_KILL_FOCUS);
  ADD_WX_VAR(int,wxEVT_COMMAND_LEFT_CLICK);
  ADD_WX_VAR(int,wxEVT_COMMAND_LEFT_DCLICK);
  ADD_WX_VAR(int,wxEVT_COMMAND_LISTBOX_DOUBLECLICKED);
  ADD_WX_VAR(int,wxEVT_COMMAND_LISTBOX_SELECTED);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_BEGIN_DRAG);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_BEGIN_RDRAG);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_CACHE_HINT);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_COL_BEGIN_DRAG);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_COL_CLICK);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_COL_DRAGGING);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_COL_END_DRAG);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_COL_RIGHT_CLICK);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_DELETE_ITEM);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_END_LABEL_EDIT);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_GET_INFO);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_INSERT_ITEM);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_ITEM_ACTIVATED);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_ITEM_DESELECTED);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_ITEM_FOCUSED);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_ITEM_SELECTED);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_KEY_DOWN);
  ADD_WX_VAR(int,wxEVT_COMMAND_LIST_SET_INFO);
  ADD_WX_VAR(int,wxEVT_COMMAND_MENU_SELECTED);
  ADD_WX_VAR(int,wxEVT_COMMAND_RADIOBOX_SELECTED);
  ADD_WX_VAR(int,wxEVT_COMMAND_RADIOBUTTON_SELECTED);
  ADD_WX_VAR(int,wxEVT_COMMAND_RIGHT_CLICK);
  ADD_WX_VAR(int,wxEVT_COMMAND_RIGHT_DCLICK);
  ADD_WX_VAR(int,wxEVT_COMMAND_SCROLLBAR_UPDATED);
  ADD_WX_VAR(int,wxEVT_COMMAND_SET_FOCUS);
  ADD_WX_VAR(int,wxEVT_COMMAND_SLIDER_UPDATED);
  ADD_WX_VAR(int,wxEVT_COMMAND_SPINCTRL_UPDATED);
  ADD_WX_VAR(int,wxEVT_COMMAND_TEXT_COPY);
  ADD_WX_VAR(int,wxEVT_COMMAND_TEXT_CUT);
  ADD_WX_VAR(int,wxEVT_COMMAND_TEXT_ENTER);
  ADD_WX_VAR(int,wxEVT_COMMAND_TEXT_MAXLEN);
  ADD_WX_VAR(int,wxEVT_COMMAND_TEXT_PASTE);
  ADD_WX_VAR(int,wxEVT_COMMAND_TEXT_UPDATED);
  ADD_WX_VAR(int,wxEVT_COMMAND_TEXT_URL);
  ADD_WX_VAR(int,wxEVT_COMMAND_TOOL_ENTER);
  ADD_WX_VAR(int,wxEVT_COMMAND_TOOL_RCLICKED);
  ADD_WX_VAR(int,wxEVT_COMMAND_VLBOX_SELECTED);
  ADD_WX_VAR(int,wxEVT_COMPARE_ITEM);
  ADD_WX_VAR(int,wxEVT_CONTEXT_MENU);
  ADD_WX_VAR(int,wxEVT_CREATE);
  ADD_WX_VAR(int,wxEVT_DESTROY);
  ADD_WX_VAR(int,wxEVT_DETAILED_HELP);
  ADD_WX_VAR(int,wxEVT_DISPLAY_CHANGED);
  ADD_WX_VAR(int,wxEVT_DRAW_ITEM);
  ADD_WX_VAR(int,wxEVT_DROP_FILES);
  ADD_WX_VAR(int,wxEVT_END_SESSION);
  ADD_WX_VAR(int,wxEVT_ENTER_WINDOW);
  ADD_WX_VAR(int,wxEVT_ERASE_BACKGROUND);
  ADD_WX_VAR(int,wxEVT_FIRST);
  ADD_WX_VAR(int,wxEVT_HELP);
  ADD_WX_VAR(int,wxEVT_HIBERNATE);
  ADD_WX_VAR(int,wxEVT_ICONIZE);
  ADD_WX_VAR(int,wxEVT_IDLE);
  ADD_WX_VAR(int,wxEVT_INIT_DIALOG);
  ADD_WX_VAR(int,wxEVT_JOY_BUTTON_DOWN);
  ADD_WX_VAR(int,wxEVT_JOY_BUTTON_UP);
  ADD_WX_VAR(int,wxEVT_JOY_MOVE);
  ADD_WX_VAR(int,wxEVT_JOY_ZMOVE);
  ADD_WX_VAR(int,wxEVT_KEY_DOWN);
  ADD_WX_VAR(int,wxEVT_KEY_UP);
  ADD_WX_VAR(int,wxEVT_KILL_FOCUS);
  ADD_WX_VAR(int,wxEVT_LEAVE_WINDOW);
  ADD_WX_VAR(int,wxEVT_LEFT_DCLICK);
  ADD_WX_VAR(int,wxEVT_LEFT_DOWN);
  ADD_WX_VAR(int,wxEVT_LEFT_UP);
  ADD_WX_VAR(int,wxEVT_MAXIMIZE);
  ADD_WX_VAR(int,wxEVT_MEASURE_ITEM);
  ADD_WX_VAR(int,wxEVT_MENU_CLOSE);
  ADD_WX_VAR(int,wxEVT_MENU_HIGHLIGHT);
  ADD_WX_VAR(int,wxEVT_MENU_OPEN);
  ADD_WX_VAR(int,wxEVT_MIDDLE_DCLICK);
  ADD_WX_VAR(int,wxEVT_MIDDLE_DOWN);
  ADD_WX_VAR(int,wxEVT_MIDDLE_UP);
  ADD_WX_VAR(int,wxEVT_MOTION);
  ADD_WX_VAR(int,wxEVT_MOUSEWHEEL);
  ADD_WX_VAR(int,wxEVT_MOUSE_CAPTURE_CHANGED);
  ADD_WX_VAR(int,wxEVT_MOUSE_CAPTURE_LOST);
  ADD_WX_VAR(int,wxEVT_MOVE);
  ADD_WX_VAR(int,wxEVT_MOVING);
  ADD_WX_VAR(int,wxEVT_NAVIGATION_KEY);
  ADD_WX_VAR(int,wxEVT_NC_ENTER_WINDOW);
  ADD_WX_VAR(int,wxEVT_NC_LEAVE_WINDOW);
  ADD_WX_VAR(int,wxEVT_NC_LEFT_DCLICK);
  ADD_WX_VAR(int,wxEVT_NC_LEFT_DOWN);
  ADD_WX_VAR(int,wxEVT_NC_LEFT_UP);
  ADD_WX_VAR(int,wxEVT_NC_MIDDLE_DCLICK);
  ADD_WX_VAR(int,wxEVT_NC_MIDDLE_DOWN);
  ADD_WX_VAR(int,wxEVT_NC_MIDDLE_UP);
  ADD_WX_VAR(int,wxEVT_NC_MOTION);
  ADD_WX_VAR(int,wxEVT_NC_PAINT);
  ADD_WX_VAR(int,wxEVT_NC_RIGHT_DCLICK);
  ADD_WX_VAR(int,wxEVT_NC_RIGHT_DOWN);
  ADD_WX_VAR(int,wxEVT_NC_RIGHT_UP);
  ADD_WX_VAR(int,wxEVT_NULL);
  ADD_WX_VAR(int,wxEVT_PAINT);
  ADD_WX_VAR(int,wxEVT_PAINT_ICON);
  ADD_WX_VAR(int,wxEVT_PALETTE_CHANGED);
  ADD_WX_VAR(int,wxEVT_QUERY_END_SESSION);
  ADD_WX_VAR(int,wxEVT_QUERY_NEW_PALETTE);
  ADD_WX_VAR(int,wxEVT_RIGHT_DCLICK);
  ADD_WX_VAR(int,wxEVT_RIGHT_DOWN);
  ADD_WX_VAR(int,wxEVT_RIGHT_UP);
  ADD_WX_VAR(int,wxEVT_SCROLLWIN_BOTTOM);
  ADD_WX_VAR(int,wxEVT_SCROLLWIN_LINEDOWN);
  ADD_WX_VAR(int,wxEVT_SCROLLWIN_LINEUP);
  ADD_WX_VAR(int,wxEVT_SCROLLWIN_PAGEDOWN);
  ADD_WX_VAR(int,wxEVT_SCROLLWIN_PAGEUP);
  ADD_WX_VAR(int,wxEVT_SCROLLWIN_THUMBRELEASE);
  ADD_WX_VAR(int,wxEVT_SCROLLWIN_THUMBTRACK);
  ADD_WX_VAR(int,wxEVT_SCROLLWIN_TOP);
  ADD_WX_VAR(int,wxEVT_SCROLL_BOTTOM);
  ADD_WX_VAR(int,wxEVT_SCROLL_CHANGED);
  ADD_WX_VAR(int,wxEVT_SCROLL_LINEDOWN);
  ADD_WX_VAR(int,wxEVT_SCROLL_LINEUP);
  ADD_WX_VAR(int,wxEVT_SCROLL_PAGEDOWN);
  ADD_WX_VAR(int,wxEVT_SCROLL_PAGEUP);
  ADD_WX_VAR(int,wxEVT_SCROLL_THUMBRELEASE);
  ADD_WX_VAR(int,wxEVT_SCROLL_THUMBTRACK);
  ADD_WX_VAR(int,wxEVT_SCROLL_TOP);
  ADD_WX_VAR(int,wxEVT_SETTING_CHANGED);
  ADD_WX_VAR(int,wxEVT_SET_CURSOR);
  ADD_WX_VAR(int,wxEVT_SET_FOCUS);
  ADD_WX_VAR(int,wxEVT_SHOW);
  ADD_WX_VAR(int,wxEVT_SIZE);
  ADD_WX_VAR(int,wxEVT_SIZING);
  ADD_WX_VAR(int,wxEVT_SOCKET);
  ADD_WX_VAR(int,wxEVT_SYS_COLOUR_CHANGED);
  ADD_WX_VAR(int,wxEVT_TIMER);
  ADD_WX_VAR(int,wxEVT_UPDATE_UI);
  ADD_WX_VAR(int,wxEVT_USER_FIRST);

  // Add variables to context, and add to default contexts
  context->AddVar<AMIObject>(obj_vars->GetName().c_str(),obj_vars,context);
  context->AddDefault(vars_context);
  #undef ADD_WX_VAR

  #define ADD_WX_MACRO(name) \
    {\
      BasicVariable::ptr var = AMILabType<int >::CreateVar(name);\
      if (var.get()) {\
        var->Rename(#name);\
        macros_context->AddVar(var,macros_context);\
      }\
    }\


  // Macros context
  AMIObject::ptr obj_macros(new AMIObject);
  obj_macros->SetName("_wx_macros");
  Variables::ptr macros_context = obj_macros->GetContext();

  // MACROS from file toplevel.h
  #ifdef wxSTAY_ON_TOP
    ADD_WX_MACRO(wxSTAY_ON_TOP);
  #endif
  #ifdef wxICONIZE
    ADD_WX_MACRO(wxICONIZE);
  #endif
  #ifdef wxMAXIMIZE
    ADD_WX_MACRO(wxMAXIMIZE);
  #endif
  #ifdef wxCLOSE_BOX
    ADD_WX_MACRO(wxCLOSE_BOX);
  #endif
  #ifdef wxSYSTEM_MENU
    ADD_WX_MACRO(wxSYSTEM_MENU);
  #endif
  #ifdef wxMINIMIZE_BOX
    ADD_WX_MACRO(wxMINIMIZE_BOX);
  #endif
  #ifdef wxMAXIMIZE_BOX
    ADD_WX_MACRO(wxMAXIMIZE_BOX);
  #endif
  #ifdef wxTINY_CAPTION_HORIZ
    ADD_WX_MACRO(wxTINY_CAPTION_HORIZ);
  #endif
  #ifdef wxTINY_CAPTION_VERT
    ADD_WX_MACRO(wxTINY_CAPTION_VERT);
  #endif
  #ifdef wxRESIZE_BORDER
    ADD_WX_MACRO(wxRESIZE_BORDER);
  #endif
  #ifdef wxDIALOG_MODAL
    ADD_WX_MACRO(wxDIALOG_MODAL);
  #endif
  #ifdef wxDIALOG_MODELESS
    ADD_WX_MACRO(wxDIALOG_MODELESS);
  #endif
  #ifdef wxNO_3D
    ADD_WX_MACRO(wxNO_3D);
  #endif
  #ifdef wxUSER_COLOURS
    ADD_WX_MACRO(wxUSER_COLOURS);
  #endif
  #ifdef wxTOPLEVEL_EX_DIALOG
    ADD_WX_MACRO(wxTOPLEVEL_EX_DIALOG);
  #endif


  // MACROS from file valtext.h
  #ifdef wxFILTER_NONE
    ADD_WX_MACRO(wxFILTER_NONE);
  #endif
  #ifdef wxFILTER_ASCII
    ADD_WX_MACRO(wxFILTER_ASCII);
  #endif
  #ifdef wxFILTER_ALPHA
    ADD_WX_MACRO(wxFILTER_ALPHA);
  #endif
  #ifdef wxFILTER_ALPHANUMERIC
    ADD_WX_MACRO(wxFILTER_ALPHANUMERIC);
  #endif
  #ifdef wxFILTER_NUMERIC
    ADD_WX_MACRO(wxFILTER_NUMERIC);
  #endif
  #ifdef wxFILTER_INCLUDE_LIST
    ADD_WX_MACRO(wxFILTER_INCLUDE_LIST);
  #endif
  #ifdef wxFILTER_EXCLUDE_LIST
    ADD_WX_MACRO(wxFILTER_EXCLUDE_LIST);
  #endif
  #ifdef wxFILTER_INCLUDE_CHAR_LIST
    ADD_WX_MACRO(wxFILTER_INCLUDE_CHAR_LIST);
  #endif
  #ifdef wxFILTER_EXCLUDE_CHAR_LIST
    ADD_WX_MACRO(wxFILTER_EXCLUDE_CHAR_LIST);
  #endif


  // MACROS from file textctrl.h
  #ifdef wxHAS_TEXT_WINDOW_STREAM
    ADD_WX_MACRO(wxHAS_TEXT_WINDOW_STREAM);
  #endif
  #ifdef wxHAS_TEXT_WINDOW_STREAM
    ADD_WX_MACRO(wxHAS_TEXT_WINDOW_STREAM);
  #endif
  #ifdef wxHAS_TEXT_WINDOW_STREAM
    ADD_WX_MACRO(wxHAS_TEXT_WINDOW_STREAM);
  #endif
  #ifdef wxTE_NO_VSCROLL
    ADD_WX_MACRO(wxTE_NO_VSCROLL);
  #endif
  #ifdef wxTE_AUTO_SCROLL
    ADD_WX_MACRO(wxTE_AUTO_SCROLL);
  #endif
  #ifdef wxTE_READONLY
    ADD_WX_MACRO(wxTE_READONLY);
  #endif
  #ifdef wxTE_MULTILINE
    ADD_WX_MACRO(wxTE_MULTILINE);
  #endif
  #ifdef wxTE_PROCESS_TAB
    ADD_WX_MACRO(wxTE_PROCESS_TAB);
  #endif
  #ifdef wxTE_RICH
    ADD_WX_MACRO(wxTE_RICH);
  #endif
  #ifdef wxTE_PROCESS_ENTER
    ADD_WX_MACRO(wxTE_PROCESS_ENTER);
  #endif
  #ifdef wxTE_PASSWORD
    ADD_WX_MACRO(wxTE_PASSWORD);
  #endif
  #ifdef wxTE_AUTO_URL
    ADD_WX_MACRO(wxTE_AUTO_URL);
  #endif
  #ifdef wxTE_NOHIDESEL
    ADD_WX_MACRO(wxTE_NOHIDESEL);
  #endif
  #ifdef wxTE_RICH2
    ADD_WX_MACRO(wxTE_RICH2);
  #endif
  #ifdef wxTE_CAPITALIZE
    ADD_WX_MACRO(wxTE_CAPITALIZE);
  #endif
  #ifdef wxTEXT_TYPE_ANY
    ADD_WX_MACRO(wxTEXT_TYPE_ANY);
  #endif
  #ifdef wxTEXT_ATTR_TEXT_COLOUR
    ADD_WX_MACRO(wxTEXT_ATTR_TEXT_COLOUR);
  #endif
  #ifdef wxTEXT_ATTR_BACKGROUND_COLOUR
    ADD_WX_MACRO(wxTEXT_ATTR_BACKGROUND_COLOUR);
  #endif
  #ifdef wxTEXT_ATTR_FONT_FACE
    ADD_WX_MACRO(wxTEXT_ATTR_FONT_FACE);
  #endif
  #ifdef wxTEXT_ATTR_FONT_SIZE
    ADD_WX_MACRO(wxTEXT_ATTR_FONT_SIZE);
  #endif
  #ifdef wxTEXT_ATTR_FONT_WEIGHT
    ADD_WX_MACRO(wxTEXT_ATTR_FONT_WEIGHT);
  #endif
  #ifdef wxTEXT_ATTR_FONT_ITALIC
    ADD_WX_MACRO(wxTEXT_ATTR_FONT_ITALIC);
  #endif
  #ifdef wxTEXT_ATTR_FONT_UNDERLINE
    ADD_WX_MACRO(wxTEXT_ATTR_FONT_UNDERLINE);
  #endif
  #ifdef wxTEXT_ATTR_ALIGNMENT
    ADD_WX_MACRO(wxTEXT_ATTR_ALIGNMENT);
  #endif
  #ifdef wxTEXT_ATTR_LEFT_INDENT
    ADD_WX_MACRO(wxTEXT_ATTR_LEFT_INDENT);
  #endif
  #ifdef wxTEXT_ATTR_RIGHT_INDENT
    ADD_WX_MACRO(wxTEXT_ATTR_RIGHT_INDENT);
  #endif
  #ifdef wxTEXT_ATTR_TABS
    ADD_WX_MACRO(wxTEXT_ATTR_TABS);
  #endif


  // MACROS from file statusbr.h
  #ifdef wxSB_NORMAL
    ADD_WX_MACRO(wxSB_NORMAL);
  #endif
  #ifdef wxSB_FLAT
    ADD_WX_MACRO(wxSB_FLAT);
  #endif
  #ifdef wxSB_RAISED
    ADD_WX_MACRO(wxSB_RAISED);
  #endif

  // Add macros to context, and add to default contexts
  context->AddVar<AMIObject>(obj_macros->GetName().c_str(),obj_macros,context);
  context->AddDefault(macros_context);
  #undef ADD_WX_MACRO
}

