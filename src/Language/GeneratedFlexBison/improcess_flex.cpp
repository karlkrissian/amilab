#line 2 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/GeneratedFlexBison/improcess_flex.cpp"

#line 4 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/GeneratedFlexBison/improcess_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyipFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyipalloc (yy_size_t  );
void *yyiprealloc (void *,yy_size_t  );
void yyipfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 401
#define YY_END_OF_BUFFER 402
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2041] =
    {   0,
      396,  396,    0,    0,    0,    0,    0,    0,  402,  400,
      397,  399,  399,   28,  368,  386,  400,   31,   37,   21,
       33,   34,   25,   29,   40,   30,   39,   27,  367,  367,
       42,   43,   24,   32,   23,   41,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,   35,
      400,   36,   22,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  381,   38,  378,  370,  369,  377,
      401,  385,  382,  382,  383,  384,  389,  388,  388,  399,

       20,  379,  380,    7,   15,    8,    5,   12,    3,   13,
        4,   14,   26,  387,    6,    0,    0,  367,  396,  396,
      393,    0,   17,   19,   18,   11,  396,  396,  396,  396,
      396,  221,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,   88,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  398,  398,    9,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  122,  396,  114,  396,
      396,  396,   96,  396,  150,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  124,
      396,  396,  396,  396,  396,  396,  396,  396,  115,  396,
      158,  159,  160,  396,  396,  396,  396,  164,  165,  166,
      396,  396,   10,   16,  378,  376,    0,  374,  375,  371,
      373,  372,  382,  388,  395,  395,  366,  396,    0,  393,

        2,    1,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,   65,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,   77,  396,  396,  396,  396,  396,  396,  207,  396,
      396,  396,  396,  396,   70,  396,  396,  396,  396,  396,
      270,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  101,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,   90,  396,  396,  245,
      396,  396,  396,  396,  396,  258,  396,  396,   95,  396,
      396,  113,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  168,  396,  396,  396,  396,   56,  396,  396,   97,
      235,  396,  396,  237,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,   47,  396,   89,  396,  396,  396,  396,  396,  239,
       91,  396,  396,  161,  162,  163,  396,  169,  396,  396,
      396,  396,  396,  396,  394,  396,  396,  396,  396,  396,
      396,  396,  396,   61,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  226,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  148,
      396,  146,  396,  396,  396,  396,  396,  396,  396,  396,
       68,  396,  396,  396,  396,  396,  231,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  136,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  142,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,   66,  396,  241,

      242,  243,   93,  396,  364,  396,   92,   94,   81,  396,
      396,  396,  396,  396,   98,  396,  396,  396,  396,  396,
      396,  123,  396,  396,  157,  396,  396,  396,  156,  396,
      396,  396,  396,  149,  147,  396,  396,  240,  256,  396,
      396,  396,  396,  396,  396,  184,  396,  102,  105,  396,
      396,  110,  396,  396,  137,  108,  396,  396,  396,  396,
      396,  271,  396,  396,  396,  396,  396,  396,  396,  143,
       99,  396,  396,  100,  116,  396,  396,  396,  396,  155,
      167,  396,  396,  396,  396,  396,  396,  396,  396,  396,
       86,  396,  396,  394,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  111,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,   67,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,   75,
      138,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  297,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,   63,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,   62,  396,  396,  396,  396,
      396,  121,  106,  396,  396,  234,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  104,  396,  396,  396,
      396,  332,  396,  396,  396,  396,  396,  396,  396,   85,
      396,  396,  396,  396,  151,  396,  396,  396,  396,  182,
      396,  103,  396,  396,  396,  396,  396,  396,  396,  396,
      363,  396,  396,    0,  396,  120,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  119,
      293,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  305,  396,  396,  396,

      396,  396,  396,  396,  396,   69,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  337,  396,  396,  396,
      396,  396,  396,  336,  396,  396,  396,   80,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      144,  396,  224,  396,  396,   78,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,   64,  396,  396,  236,

      396,  396,  396,  396,  396,  396,  396,  396,  296,  396,
      396,  117,  360,  170,  396,   82,  396,  396,  396,  396,
      396,  396,  396,  396,  396,    0,  396,  396,  396,  238,
      396,  396,  396,  152,  112,  396,  118,  109,  183,  396,
      396,  396,  396,   48,  396,  396,  396,  154,  396,  392,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      260,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      249,  208,  209,  230,  396,  396,  396,  335,  396,  396,
      396,  396,   58,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  178,  396,  396,  396,  291,  396,  396,  396,
      396,  396,  225,  396,  396,  396,  396,  396,  396,   74,
      396,  396,  396,  396,  396,  396,  396,  396,   60,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  283,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,   51,  396,  396,  246,  396,  396,  396,
      396,  396,    0,  396,  331,  396,  396,  396,  396,  288,

      279,  257,  396,  390,  187,  396,  396,  396,  396,  276,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  392,
      396,  396,  396,  396,  396,  289,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,   73,  396,  396,  205,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  250,  396,
      248,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  228,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  349,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  298,  396,  396,  396,  396,  396,  396,  396,  396,
      312,  396,  244,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  180,  396,  396,  333,  396,  396,  396,
      396,  273,  391,  396,  174,  396,  396,  396,  396,  396,
      396,  396,  390,  188,  396,  396,  396,  172,  181,  396,
       87,  396,  396,  396,  396,  396,  179,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  307,  396,  290,  264,  396,  266,  396,

      262,  396,  396,  396,  396,  396,  396,  210,  326,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  247,  396,  396,  396,  396,   45,   72,
      396,  396,  396,  396,  396,  396,  396,   76,  396,  396,
      396,  396,  196,  396,  396,  396,  396,  396,  396,  304,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,   79,
      396,  229,  396,  396,  141,  396,  396,  396,  295,  396,

      396,  396,  365,  391,  396,  396,  396,  396,   50,  275,
      396,  396,   49,   84,  185,   53,  396,  396,  396,  396,
       52,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  286,  396,  396,  396,  396,  265,
      396,  396,  263,  396,  396,  396,  396,  396,  396,  211,
      396,  396,  396,  396,  222,  396,  396,  396,  396,  396,
      194,  396,  396,  396,  396,  396,  396,  361,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  362,  396,  396,
      396,   46,  325,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  125,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  357,  396,  396,  396,  396,   83,  396,  353,  354,
      396,  396,  396,  186,  107,  175,  396,  396,  396,  200,
      254,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      212,  396,  139,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  193,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  192,  396,   55,  311,  396,

      202,  396,  396,  396,  314,  316,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  277,  396,  396,  227,
      261,  396,  396,  396,  396,  396,  126,  396,  396,  396,
      299,  396,  134,  396,  396,  396,  396,  396,   54,  396,
      396,  319,  396,  145,  396,  396,  396,  356,  396,  396,
      396,  396,  396,  281,  280,  282,  176,  396,  396,  396,
      396,  284,  396,  396,  396,  359,  396,  171,  396,  396,
      396,  396,  396,  396,  396,  267,  396,  396,  396,  213,
      396,  327,  396,  396,  396,  206,  396,  396,  396,  340,
      396,  396,  334,  396,   71,  396,  396,  396,  396,  396,

      309,  396,  396,  330,  223,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,   44,  396,  396,  396,  396,  396,  396,  310,
      396,  129,  396,  321,  313,  396,  189,  396,  128,  396,
      153,  173,  396,  272,  396,  396,  396,  197,  396,  358,
      396,  396,  396,  396,  396,  396,  396,  269,  133,  396,
      396,  255,  259,  396,  396,  396,  396,  396,  396,  346,
      396,  396,  396,  253,  396,  274,   59,  132,  191,  396,
      396,  396,  396,  292,  323,  396,  306,  233,  396,  396,
      396,  396,  140,  320,  396,  396,  303,  308,  396,  396,

      396,  396,  135,  130,  204,  396,  396,  190,  396,  127,
      396,  396,  199,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  268,  396,  328,  396,  396,  396,  339,
      396,  396,  396,  351,  344,  396,  396,  317,  396,  396,
      232,  218,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  318,  343,  177,  355,  198,  396,  396,  396,  396,
      220,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  315,  396,  396,  131,  396,  396,  216,  396,  396,
      345,  350,  300,  301,  396,  396,  396,  251,  396,  396,
      396,  396,  215,  287,  396,  396,  396,  348,  352,  396,

      396,  201,  294,  396,  217,  278,  396,  302,  396,  396,
      396,  396,  285,  396,  396,  342,   57,  329,  396,  195,
      324,  396,  322,  341,  396,  203,  219,  396,  396,  338,
      396,  214,  396,  396,  396,  396,  396,  252,  347,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   21,
       22,   20,   20,   20,   20,   20,   20,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,    1,   60,   61,   62,   63,

       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   85,   86,   87,   88,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[89] =
    {   0,
        1,    1,    2,    2,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,    1,    5,
        5,    5,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    2,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2053] =
    {   0,
        0,    0,   86,   91,   96,   99,  101,  103,  306, 6822,
     6822, 6822,  298,  269, 6822, 6822,   89,  264,   91, 6822,
     6822, 6822,  247,   93, 6822,   95,  254,   94,  106,  112,
      242, 6822,   89,  221,  109, 6822,  120,  122,  134,  136,
      139,  149,  128,  142,  198,  131,  201,  163,  160,  156,
      204,  144,  220,  268,  228,  211,  151,  232,  234, 6822,
      160, 6822,  217,  280,  158,  249,  262,  282,  301,  260,
      328,  344,  353,  350,  239,  236,  356,  242,  360,  377,
      387,  276,  383,  365, 6822,  204,    0, 6822, 6822,    0,
      404, 6822, 6822,  238, 6822, 6822, 6822, 6822,  222, 6822,

     6822, 6822, 6822, 6822, 6822, 6822, 6822, 6822, 6822, 6822,
     6822,    0, 6822, 6822, 6822,  176,  267,  367,  245,  381,
      180,  169, 6822, 6822, 6822,  164,  395,  285,  411,  373,
      385,  265,  458,  362,  467,  471,  473,  475,  479,  477,
      481,  402,  483,  485,  487,  489,  491,  493,  495,  497,
      499,  501,  505,  503,  507,  511,  509,  525,  527,  531,
      536,  547,  553,  560,  564,  567,  569,  571,  577,  574,
      579,  581,  585,  595,  599,  601,  604,  609,  611,  616,
      619,  637,  623,  630,  644,  653,  655,  657,  660,  662,
      667,  669,  671,  673,  675,  677,  679,  681,  685,  688,

      690,  693, 6822,  185, 6822,  695,  709,  716,  699,  718,
      725,  723,  731,  733,  735,  738,  740,  742,  751,  754,
      757,  759,  761,  763,  770,  772,  774,  776,  778,  783,
      786,  789,  803,  806,  810,  814,  816,  821,  825,  831,
      834,  836,  840,  844,  842,  850,  852,  854,  857,  861,
      867,  882,  885,  871,  877,  890,  896,  900,  903,  905,
      911,  913,  918,  923,  925,  930,  936,  940,  944,  954,
      956,  958,  968,  970,  975,  979,  981,  986,  988,  993,
      995,  997, 6822, 6822,    0, 6822,  168, 6822, 6822, 6822,
     6822, 6822, 6822, 6822,    0,    0,  998, 1004,  131,  138,

     6822, 6822, 1007, 1009, 1011, 1013, 1015, 1017, 1023, 1027,
     1036, 1038, 1040, 1042, 1044, 1049, 1053, 1055, 1062, 1065,
     1067, 1069, 1072, 1076, 1078, 1086, 1088, 1091, 1094, 1104,
     1106, 1110, 1128, 1108, 1130, 1139, 1142, 1146, 1149, 1155,
     1161, 1163, 1167, 1171, 1174, 1176, 1178, 1181, 1183, 1188,
     1194, 1196, 1199, 1201, 1203, 1205, 1207, 1220, 1226, 1228,
     1233, 1235, 1240, 1238, 1247, 1249, 1251, 1257, 1261, 1263,
     1265, 1267, 1269, 1271, 1273, 1324, 1275, 1278, 1280, 1286,
     1301, 1293, 1305, 1307, 1317, 1309, 1315, 1321, 1332, 1295,
     1359, 1327, 1330, 1363, 1368, 1370, 1372, 1374, 1378, 1380,

     1382, 1386, 1389, 1392, 1394, 1396, 1399, 1401, 1403, 1405,
     1407, 1409, 1411, 1413, 1415, 1417, 1421, 1425, 1427, 1432,
     1438, 1440, 1444, 1446, 1461, 1463, 1466, 1470, 1472, 1478,
     1480, 1482, 1484, 1487, 1490, 1492, 1498, 1502, 1500, 1506,
     1508, 1510, 1513, 1515, 1517, 1522, 1524, 1526, 1529, 1531,
     1535, 1538, 1545, 1547, 1554, 1556, 1558, 1561, 1568, 1570,
     1575, 1579, 1583, 1588, 1595, 1601, 1592, 1597, 1606, 1603,
     1609, 1611, 1615, 1618, 1622, 1627, 1629, 1631, 1633, 1635,
     1644, 1646, 1649, 1665,    0, 1669, 1675, 1681, 1683, 1685,
     1687, 1691, 1695, 1697, 1699, 1701, 1704, 1706, 1709, 1714,

     1716, 1718, 1720, 1726, 1723, 1729, 1733, 1735, 1740, 1742,
     1749, 1753, 1762, 1767, 1771, 1773, 1776, 1780, 1783, 1785,
     1787, 1791, 1797, 1801, 1805, 1808, 1810, 1812, 1814, 1816,
     1818, 1820, 1828, 1830, 1832, 1835, 1837, 1839, 1841, 1845,
     1852, 1861, 1855, 1864, 1870, 1867, 1872, 1875, 1881, 1878,
     1887, 1889, 1893, 1895, 1900, 1902, 1905, 1910, 1912, 1914,
     1926, 1919, 1922, 1928, 1931, 1937, 1933, 1941, 1948, 1950,
     1958, 1961, 1969, 1971, 1981, 1978, 1984, 1986, 1988, 1991,
     1993, 1997, 1999, 2001, 2005, 2007, 2009, 2011, 2015, 2013,
     2020, 2022, 2024, 2036, 2038, 2041, 2043, 2062, 2064, 2067,

     2069, 2073, 2075, 2077, 2079, 2081, 2083, 2086, 2088, 2090,
     2095, 2097, 2099, 2104, 2106, 2108, 2110, 2112, 2115, 2117,
     2119, 2121, 2125, 2127, 2129, 2132, 2136, 2138, 2140, 2142,
     2144, 2148, 2152, 2158, 2162, 2164, 2168, 2172, 2177, 2179,
     2181, 2185, 2188, 2190, 2195, 2199, 2204, 2207, 2209, 2211,
     2213, 2215, 2217, 2219, 2222, 2224, 2226, 2229, 2236, 2233,
     2242, 2244, 2252, 2254, 2257, 2259, 2261, 2263, 2265, 2272,
     2276, 2278, 2280, 2282, 2286, 2289, 2291, 2298, 2301, 2305,
     2307, 2309, 2313, 2316, 2319, 2326, 2328, 2330, 2333, 2338,
     2340, 2345, 2342,    0, 2349, 2351, 2353, 2356, 2368, 2381,

     2376, 2378, 2385, 2360, 2393, 2397, 2399, 2402, 2413, 2416,
     2422, 2426, 2428, 2430, 2434, 2432, 2436, 2438, 2441, 2447,
     2449, 2451, 2453, 2455, 2461, 2463, 2465, 2467, 2469, 2471,
     2478, 2485, 2491, 2493, 2495, 2497, 2501, 2506, 2509, 2514,
     2519, 2521, 2523, 2525, 2532, 2535, 2537, 2541, 2550, 2552,
     2554, 2558, 2560, 2562, 2564, 2567, 2576, 2578, 2580, 2584,
     2587, 2592, 2589, 2595, 2600, 2606, 2604, 2608, 2610, 2614,
     2619, 2621, 2626, 2628, 2630, 2636, 2632, 2641, 2644, 2657,
     2659, 2663, 2665, 2669, 2671, 2673, 2678, 2675, 2681, 2683,
     2690, 2687, 2692, 2694, 2696, 2698, 2700, 2704, 2706, 2710,

     2712, 2721, 2716, 2725, 2730, 2736, 2744, 2749, 2753, 2756,
     2759, 2761, 2764, 2767, 2769, 2771, 2776, 2779, 2783, 2785,
     2788, 2790, 2792, 2794, 2796, 2798, 2803, 2805, 2807, 2809,
     2812, 2814, 2817, 2820, 2822, 2824, 2828, 2833, 2841, 2843,
     2845, 2850, 2855, 2864, 2867, 2871, 2874, 2876, 2881, 2883,
     2886, 2889, 2891, 2893, 2899, 2896, 2905, 2907, 2909, 2912,
     2918, 2920, 2924,  127, 2928, 2930, 2934, 2936, 2943, 2945,
     2940, 2947, 2951, 2957, 2961, 2963, 2969, 2971, 2974, 2979,
     2986, 2991, 2993, 2995, 2997, 2999, 3002, 3008, 3010, 3012,
     3014, 3024, 3021, 3026, 3031, 3038, 3033, 3044, 3046, 3048,

     3054, 3059, 3061, 3064, 3071, 3073, 3075, 3085, 3087, 3089,
     3091, 3093, 3095, 3098, 3102, 3105, 3107, 3112, 3114, 3116,
     3118, 3123, 3126, 3128, 3132, 3135, 3142, 3145, 3139, 3148,
     3152, 3160, 3162, 3164, 3170, 3172, 3176, 3178, 3180, 3182,
     3193, 3196, 3198, 3200, 3202, 3209, 3214, 3211, 3216, 3218,
     3220, 3222, 3226, 3236, 3238, 3242, 3246, 3250, 3253, 3257,
     3259, 3266, 3270, 3272, 3274, 3276, 3280, 3282, 3287, 3290,
     3298, 3300, 3302, 3304, 3307, 3311, 3313, 3315, 3317, 3323,
     3325, 3327, 3329, 3332, 3335, 3338, 3340, 3344, 3348, 3350,
     3352, 3363, 3368, 3379, 3381, 3383, 3385, 3389, 3393, 3399,

     3401, 3403, 3405, 3407, 3409, 3411, 3413, 3418, 3420, 3423,
     3427, 3429, 3431, 3433, 3437, 3442, 3444, 3449, 3455, 3459,
     3461, 3464, 3466, 3468, 3474,  120, 3476, 3478, 3480, 3488,
     3492, 3494, 3498, 3500, 3502, 3507, 3509, 3516, 3518, 3522,
     3524, 3528, 3530, 3532, 3535, 3538, 3545, 3547, 3549,    0,
     3551, 3553, 3558, 3561, 3563, 3565, 3567, 3569, 3571, 3573,
     3579, 3586, 3589, 3593, 3595, 3602, 3604, 3606, 3608, 3615,
     3621, 3623, 3625, 3631, 3636, 3646, 3638, 3648, 3652, 3656,
     3659, 3664, 3661, 3669, 3666, 3673, 3677, 3683, 3680, 3687,
     3689, 3691, 3693, 3696, 3700, 3702, 3704, 3706, 3709, 3713,

     3715, 3718, 3722, 3724, 3731, 3728, 3737, 3748, 3754, 3757,
     3761, 3763, 3767, 3769, 3772, 3774, 3777, 3779, 3782, 3786,
     3790, 3795, 3797, 3802, 3805, 3807, 3811, 3815, 3818, 3820,
     3822, 3824, 3826, 3828, 3831, 3833, 3842, 3838, 3844, 3846,
     3852, 3855, 3857, 3859, 3863, 3870, 3874, 3883, 3885, 3896,
     3898, 3900, 3904, 3907, 3909, 3918, 3911, 3915, 3922, 3924,
     3926, 3929, 3931, 3934, 3936, 3938, 3940, 3943, 3945, 3947,
     3954, 3949, 3958, 3951, 3962, 3965, 3968, 3970, 3972, 3974,
     3978, 3981, 3985, 3992, 4002, 3994, 4004, 4009, 4011, 4014,
     4017, 4022,  118, 4019, 4025, 4029, 4035, 4040, 4043, 4045,

     4048, 4052, 4054,    0, 4058, 4060, 4067, 4070, 4072, 4076,
     4078, 4080, 4084, 4086, 4092, 4088, 4094, 4096, 4101,    0,
     4104, 4108, 4111, 4115, 4119, 4121, 4123, 4126, 4128, 4132,
     4141, 4139, 4143, 4152, 4155, 4162, 4158, 4166, 4168, 4175,
     4177, 4179, 4185, 4188, 4193, 4195, 4197, 4201, 4204, 4206,
     4209, 4215, 4217, 4219, 4221, 4226, 4229, 4231, 4233, 4235,
     4240, 4243, 4248, 4250, 4256, 4258, 4260, 4263, 4265, 4268,
     4270, 4276, 4273, 4281, 4288, 4291, 4293, 4299, 4302, 4304,
     4306, 4308, 4317, 4319, 4322, 4324, 4326, 4328, 4330, 4332,
     4336, 4342, 4345, 4347, 4349, 4351, 4357, 4361, 4367, 4372,

     4374, 4376, 4384, 4386, 4390, 4394, 4396, 4402, 4405, 4411,
     4415, 4418, 4422, 4427, 4430, 4434, 4436, 4438, 4444, 4450,
     4447, 4465, 4457, 4459, 4461, 4463, 4467, 4478, 4482, 4484,
     4486, 4488, 4497, 4501, 4506, 4510, 4512, 4514, 4516, 4518,
     4525, 4521, 4527, 4529, 4536, 4538, 4540, 4542, 4545, 4548,
     4550, 4554,    0, 4558, 4560, 4564, 4566, 4568, 4570, 4572,
     4578, 4582,    0, 4584, 4588, 4594, 4597, 4599, 4601, 4603,
     4606, 4608, 4612, 4620, 4622, 4624, 4626, 4630, 4634, 4632,
     4641, 4636, 4647, 4654, 4656, 4658, 4660, 4662, 4666, 4669,
     4671, 4675, 4677, 4680, 4686, 4688, 4692, 4694, 4697, 4699,

     4707, 4701, 4714, 4720, 4717, 4723, 4725, 4727, 4729, 4733,
     4741, 4743, 4746, 4748, 4751, 4757, 4760, 4764, 4768, 4770,
     4772, 4775, 4777, 4779, 4781, 4783, 4785, 4787, 4792, 4794,
     4800, 4804, 4806, 4808, 4810, 4816, 4820, 4826, 4830, 4833,
     4837, 4839, 4841, 4847, 4849, 4851, 4854, 4856, 4858, 4861,
     4863, 4868, 4872, 4875, 4880, 4883, 4885, 4887, 4889, 4891,
     4893, 4901, 4903, 4908, 4913, 4915, 4920, 4922, 4924, 4926,
     4932, 4937, 4940, 4942, 4947, 4951, 4954, 4960, 4964, 4966,
     4969, 4971, 4974, 4976, 4978, 4988, 4990, 4999, 5002, 5004,
     5006, 5009, 5013, 5018, 5024, 5026, 5028, 5031, 5035, 5038,

     5040, 5044, 5046,    0, 5048, 5050, 5052, 5055, 5057, 5065,
     5069, 5071, 5075, 5077, 5079, 5081, 5084, 5087, 5089, 5091,
     5093, 5096, 5101, 5107, 5109, 5111, 5116, 5118, 5122, 5127,
     5129, 5131, 5138, 5140, 5142, 5148, 5150, 5154, 5158, 5160,
     5164, 5166, 5168, 5171, 5175, 5180, 5182, 5186, 5188, 5191,
     5198, 5202, 5206, 5208, 5212, 5216, 5218, 5223, 5225, 5228,
     5230, 5236, 5238, 5240, 5242, 5244, 5249, 5251, 5254, 5256,
     5260, 5265, 5269, 5267, 5271, 5273, 5278, 5280, 5285, 5287,
     5290, 5292, 5294, 5302, 5306, 5309, 5312, 5315, 5318, 5320,
     5323, 5328, 5330, 5336, 5338, 5340, 5342, 5344, 5346, 5348,

     5350, 5354, 5362, 5364, 5368, 5366, 5370, 5372, 5382, 5378,
     5384, 5390, 5404, 5407, 5411, 5413, 5415, 5417, 5419, 5421,
     5423, 5431, 5435, 5437, 5439, 5441, 5443, 5446, 5449, 5455,
     5460, 5453, 5464, 5469, 5466, 5478, 5480, 5482, 5489, 5491,
     5493, 5495, 5501, 5510, 5513, 5516, 5518, 5521, 5523, 5525,
     5527, 5530, 5532, 5534, 5536, 5538, 5541, 5547, 5549, 5551,
     5553, 5556, 5560, 5566, 5568, 5570, 5572, 5574, 5585, 5588,
     5592, 5597, 5599, 5604, 5607, 5613, 5611, 5615, 5617, 5619,
     5621, 5623, 5632, 5634, 5638, 5640, 5642, 5644, 5646, 5649,
     5653, 5655, 5657, 5660, 5662, 5664, 5671, 5681, 5684, 5686,

     5688, 5690, 5692, 5694, 5696, 5707, 5713, 5718, 5720, 5723,
     5725, 5727, 5729, 5734, 5731, 5740, 5744, 5748, 5750, 5752,
     5756, 5758, 5760, 5765, 5767, 5769, 5771, 5776, 5779, 5783,
     5785, 5788, 5798, 5800, 5804, 5806, 5808, 5810, 5814, 5816,
     5819, 5822, 5824, 5826, 5834, 5836, 5838, 5840, 5842, 5844,
     5846, 5848, 5850, 5852, 5855, 5857, 5863, 5867, 5869, 5871,
     5873, 5878, 5881, 5886, 5888, 5891, 5895, 5898, 5900, 5902,
     5907, 5910, 5912, 5923, 5925, 5929, 5932, 5934, 5937, 5941,
     5943, 5945, 5948, 5952, 5954, 5956, 5965, 5960, 5967, 5969,
     5972, 5977, 5974, 5979, 5983, 5987, 5991, 5994, 5997, 6000,

     6002, 6004, 6006, 6008, 6010, 6012, 6015, 6018, 6024, 6026,
     6030, 6032, 6034, 6036, 6040, 6045, 6048, 6050, 6052, 6054,
     6058, 6062, 6064, 6067, 6071, 6073, 6075, 6077, 6081, 6085,
     6087, 6089, 6099, 6103, 6105, 6109, 6114, 6116, 6124, 6126,
     6128, 6130, 6136, 6141, 6144, 6147, 6149, 6151, 6153, 6157,
     6159, 6161, 6164, 6166, 6168, 6171, 6173, 6176, 6180, 6182,
     6184, 6186, 6188, 6190, 6192, 6194, 6196, 6198, 6200, 6202,
     6211, 6213, 6225, 6228, 6230, 6232, 6238, 6247, 6251, 6253,
     6255, 6257, 6259, 6261, 6263, 6265, 6267, 6269, 6276, 6278,
     6280, 6282, 6284, 6286, 6289, 6293, 6295, 6297, 6299, 6301,

     6305, 6307, 6310, 6313, 6317, 6319, 6322, 6324, 6326, 6329,
     6331, 6338, 6342, 6344, 6346, 6348, 6350, 6354, 6358, 6363,
     6367, 6371, 6375, 6378, 6380, 6384, 6389, 6391, 6393, 6395,
     6401, 6406, 6408, 6411, 6413, 6415, 6417, 6420, 6423, 6429,
     6431, 6433, 6435, 6440, 6444, 6446, 6448, 6450, 6452, 6455,
     6457, 6459, 6463, 6467, 6469, 6478, 6480, 6482, 6484, 6486,
     6488, 6492, 6502, 6504, 6506, 6508, 6510, 6513, 6515, 6517,
     6520, 6522, 6524, 6528, 6536, 6538, 6540, 6542, 6547, 6544,
     6554, 6556, 6558, 6560, 6562, 6568, 6570, 6572, 6574, 6580,
     6582, 6585, 6587, 6590, 6592, 6596, 6599, 6601, 6605, 6607,

     6610, 6612, 6614, 6618, 6620, 6623, 6625, 6627, 6632, 6636,
     6629, 6645, 6649, 6652, 6654, 6658, 6660, 6665, 6667, 6669,
     6673, 6677, 6680, 6682, 6687, 6689, 6691, 6693, 6695, 6697,
     6699, 6701, 6703, 6705, 6709, 6711, 6715, 6717, 6719, 6822,
     6790, 6795, 6800, 6803, 6808, 6813,  126, 6816,  120,  113,
      111,   86
    } ;

static yyconst flex_int16_t yy_def[2053] =
    {   0,
     2040,    1, 2041, 2041, 2042, 2042, 2043, 2043, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2044, 2044,
     2040, 2040, 2040, 2040, 2040, 2040, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2040,
     2040, 2040, 2040, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2040, 2040, 2045, 2040, 2040, 2045,
     2046, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,

     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2047, 2040, 2040, 2040, 2040, 2040, 2044, 2044, 2044,
     2048, 2040, 2040, 2040, 2040, 2040, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2040, 2040, 2040, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2040, 2040, 2045, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2047, 2047, 2040, 2044, 2040, 2048,

     2040, 2040, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2049, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2049, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2040, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2040, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2050,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2040, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2051, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2050,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2052, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2051, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2052, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,

     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,    0,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040
    } ;

static yyconst flex_int16_t yy_nxt[6911] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   29,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   46,
       46,   57,   58,   59,   60,   61,   62,   63,   46,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   46,   46,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   46,   46,   46,   85,   86,   10,   88,   88,
     1504,   89,   90,   88,   88,  102,   89,   90,   93,   94,

      105,   93,   94,   98,   99,   98,   99,  108,  103,  103,
      103,  110,  114,  122,  123, 1363,  106, 1220,  109,  115,
      111,  112,  116,  117,  694,  118,  118,  118,  116,  117,
      295,  118,  118,  118,  125,  126,  116, 2040,  116, 2040,
     1353,   91, 1204,  120,  116, 2040,   91,  116, 2040, 1050,
      116, 2040,  116, 2040,  299,  116, 2040,  485,  116, 2040,
      116, 2040,  203,  204,  132,  116, 2040,  116, 2040,  133,
      146,  286,  116, 2040,  116, 2040,  116, 2040,  142,  116,
     2040,   95,  127,   96,   95,  168,   96,  203,  149,  302,
      128,  152,  129,  134,  301,  130,  299,  135,  131,  143,

      136,  137,  296,  144,  138,  153,  147,  139,  166,  154,
      140,  148,  145,  141,  116, 2040,  150,  116, 2040,  151,
      116, 2040,  164,  175,  294,  200,  165,  116, 2040,  283,
      169,  213,  170,  167,  214,  171,  116, 2040,  155,  156,
      293,  197,  205,  160,  116, 2040,  124,  198,  116, 2040,
      116, 2040,  116, 2040,  176,  116, 2040,  199,  116, 2040,
      161,  116, 2040,  172,  121,  116, 2040,  113,  162,  157,
      158,  173,  107,  193,  163,  159,  116, 2040,  116, 2040,
      174,  116, 2040,  177,  116, 2040,  297,  297,  297,  104,
      284,  194,  116, 2040,  101,  195,  116, 2040,  116, 2040,

      100,  116, 2040,  178,  196, 2040,  201, 2040,  202,  179,
      250, 2040,  249,  180, 2040,  181,  182,  116, 2040,  215,
     2040,  254,  216,  231, 2040,  218, 2040,  183,  217,  219,
      232,  184,  233, 2040,  185,  186,  234,  187,  220,  188,
      206,  207,  189,  221,  116, 2040,  190,  191,  274,  192,
     2040,  208,  222,  223,  224, 2040,  209,  210,  211,  212,
      116, 2040,  225,  304,  226, 2040,  116, 2040,  227,  116,
     2040,  228,  116, 2040,  229, 2040,  116, 2040,  116, 2040,
      230,  116, 2040,  116,  117, 2040,  118,  118,  118,  116,
     2040,  235, 2040,  116, 2040,  236, 2040,  116, 2040,  116,

     2040,  116, 2040,  116, 2040, 2040,  287, 2040,  237,  246,
     2040,  116, 2040,  247,  298,  238,  239,  248,  116, 2040,
      242,  240,  241,  255,  281,  243,  244,  116, 2040,  251,
      245,  282,  252,  256,  310,  253,  257, 2040,  258, 2040,
      259, 2040,  275,  260,  261,  276,  267,  262, 2040,  307,
      319,  263,  264,  268, 2040,  265,  266,  303,  308, 2040,
      269,  277, 2040,  270,  288,  278,  279,  280,  289,  271,
      272,  273, 2040,  305,  116, 2040,  290, 2040,  306, 2040,
      291, 2040,  292,  116, 2040, 2040,  309,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,

     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040,
      312, 2040,  324, 2040,  314,  337, 2040,  327, 2040,  311,
      317,  116, 2040,  116, 2040, 2040,  323,  116, 2040,  313,
      315,  316,  116, 2040, 2040,  326,  325,  318,  338,  320,
     2040,  321,  322,  116, 2040,  336,  329,  328,  339,  116,
     2040, 2040,  345,  331,  332,  334,  116, 2040,  330,  333,
      116, 2040,  335,  116, 2040,  116, 2040,  116, 2040,  340,
      116, 2040,  341,  116, 2040,  116, 2040,  116, 2040, 2040,

      344,  116, 2040,  342, 2040,  343,  351,  352,  355,  353,
      346,  116, 2040,  356,  348,  116, 2040,  116, 2040,  347,
      116, 2040, 2040,  350, 2040,  116, 2040,  116, 2040, 2040,
      365, 2040,  116, 2040, 2040,  116, 2040, 2040,  349,  116,
     2040,  357, 2040,  359,  372,  354,  116, 2040,  360, 2040,
      366,  370, 2040,  116, 2040, 2040,  371,  358, 2040,  361,
      116, 2040,  362,  367,  373, 2040,  364, 2040,  363,  116,
     2040,  116, 2040,  116, 2040,  368,  116, 2040,  116, 2040,
     2040,  369,  374,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  385,

     2040,  116, 2040,  375,  116, 2040,  116, 2040,  376,  116,
     2040,  116, 2040, 2040,  389,  116, 2040,  377,  379,  381,
      391, 2040,  390, 2040,  378,  116, 2040, 2040,  384, 2040,
      380, 2040,  116, 2040,  116, 2040,  388, 2040,  382,  116,
     2040,  116, 2040,  383,  386, 2040,  387,  116, 2040,  116,
     2040,  116, 2040, 2040,  116, 2040,  116, 2040,  116, 2040,
     2040,  392, 2040,  393,  398, 2040,  394,  116, 2040, 2040,
      116, 2040,  395,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 2040,  396,  397,  400,  399,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  404, 2040,  401,  116,

     2040,  402,  116, 2040,  403,  116, 2040, 2040,  405,  406,
     2040,  409,  410,  412, 2040,  407, 2040,  408,  413,  116,
     2040, 2040,  116, 2040, 2040,  416,  116, 2040,  411,  417,
      116, 2040,  116, 2040, 2040,  415,  414,  116, 2040,  418,
     2040,  116, 2040, 2040,  420, 2040,  419,  116, 2040,  421,
      116, 2040,  116, 2040,  422,  423,  116, 2040,  116, 2040,
      116, 2040,  425, 2040,  424,  427,  116, 2040,  116, 2040,
      116, 2040, 2040,  116, 2040, 2040,  429,  116, 2040, 2040,
      428, 2040,  426,  116, 2040, 2040,  432,  116, 2040,  433,
     2040,  430,  434,  116, 2040,  431, 2040,  436,  116, 2040,

     2040,  116, 2040,  437,  435,  439,  116, 2040,  438,  440,
     2040,  442,  116, 2040,  443, 2040,  116, 2040, 2040,  116,
     2040,  116, 2040, 2040,  446, 2040,  444,  116, 2040,  116,
     2040, 2040,  441,  445,  116, 2040,  453, 2040,  452,  116,
     2040,  116, 2040, 2040,  447,  450,  116, 2040, 2040,  448,
     2040,  454,  116, 2040, 2040,  449,  116, 2040,  455,  459,
      116, 2040, 2040,  451,  461, 2040,  460, 2040,  456,  457,
      116, 2040,  116, 2040,  116, 2040,  458, 2040,  463, 2040,
      465,  462, 2040,  464,  116, 2040,  116, 2040,  468, 2040,
      469,  116, 2040, 2040,  466,  116, 2040,  116, 2040,  467,

     2040,  470,  116, 2040,  116, 2040, 2040,  472,  471,  116,
     2040,  116, 2040,  116, 2040, 2040,  473,  297,  297,  297,
      116, 2040, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040, 2040,  474,  475,  476,  116,
     2040,  486, 2040,  116, 2040,  478,  480,  487,  477,  488,
      481,  479,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  482, 2040,  483,  116, 2040, 2040,  494,  116,
     2040,  116, 2040, 2040,  484, 2040,  489, 2040,  116, 2040,
      492,  116, 2040,  116, 2040,  116, 2040,  490,  116, 2040,
      491,  505,  116, 2040,  116, 2040, 2040,  507,  493,  495,

     2040,  498,  116, 2040,  116, 2040, 2040,  116, 2040,  497,
      116, 2040,  503, 2040,  496,  500,  517, 2040,  501,  499,
      116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040,  502,
      508, 2040,  506,  516, 2040,  504, 2040,  511,  512,  513,
      522,  515, 2040,  509,  116, 2040,  116, 2040, 2040,  514,
     2040,  521, 2040,  510,  518,  116, 2040, 2040,  116, 2040,
      523,  524,  116, 2040,  525,  116, 2040, 2040,  519,  526,
      527,  116, 2040, 2040,  528,  529,  533,  116, 2040,  116,
     2040, 2040,  530,  116, 2040, 2040,  520,  116, 2040, 2040,
      116, 2040,  116, 2040,  116, 2040, 2040,  116, 2040,  116,

     2040, 2040,  532, 2040,  116, 2040, 2040,  531,  541, 2040,
      116, 2040,  116, 2040,  534,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040, 2040,  537, 2040,  535, 2040,
      538, 2040,  539,  547, 2040,  550,  116, 2040, 2040,  536,
      544,  543,  116, 2040,  116, 2040,  542, 2040,  540,  116,
     2040,  116, 2040,  553,  116, 2040,  116, 2040, 2040,  545,
      546, 2040,  548,  116, 2040,  116, 2040,  116, 2040, 2040,
      552, 2040,  549,  116, 2040, 2040,  551,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 2040,  116, 2040,  116, 2040,  567,  555,

      554,  557,  116, 2040,  569,  568, 2040,  556,  566,  116,
     2040,  116, 2040,  561,  558, 2040,  559,  116, 2040,  560,
      563,  116, 2040,  116, 2040,  116, 2040, 2040,  564, 2040,
      562,  116, 2040,  116, 2040, 2040,  570,  116, 2040,  565,
      116, 2040,  598,  116, 2040,  571,  116, 2040,  116, 2040,
      586,  583,  585,  572,  573,  574,  584,  575,  592,  587,
      597, 2040,  588,  576, 2040,  577, 2040,  578, 2040,  590,
      579,  580,  589,  581,  582,  116, 2040, 2040,  594,  116,
     2040,  591,  595,  593,  116, 2040,  116, 2040,  116, 2040,
      116, 2040, 2040,  596,  116, 2040,  116, 2040,  116, 2040,

     2040,  599,  116, 2040,  600,  116, 2040,  601,  116, 2040,
      116, 2040,  116, 2040,  604,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  605, 2040,  116, 2040, 2040,
      602,  116, 2040,  116, 2040,  606,  609,  603,  116, 2040,
      607,  612,  608, 2040,  116, 2040,  116, 2040, 2040,  610,
      116, 2040,  116, 2040, 2040,  615,  611, 2040,  619,  617,
      614,  613, 2040,  616,  621, 2040,  622,  116, 2040,  116,
     2040,  624,  116, 2040, 2040,  618,  116, 2040,  116, 2040,
      620,  625, 2040,  623,  116, 2040,  116, 2040,  116, 2040,

      116, 2040,  626,  116, 2040,  629,  116, 2040,  116, 2040,
      627,  628, 2040,  630,  116, 2040,  116, 2040,  116, 2040,
     2040,  631,  116, 2040,  116, 2040,  116, 2040,  633,  116,
     2040,  116, 2040,  116, 2040,  635, 2040,  632,  116, 2040,
      116, 2040,  116, 2040,  634,  116, 2040,  116, 2040,  640,
     2040,  116, 2040,  637,  116, 2040,  636,  638, 2040,  645,
      641,  116, 2040,  116, 2040,  639, 2040,  642,  643,  644,
      116, 2040,  116, 2040,  116, 2040,  659,  116, 2040, 2040,
      647, 2040,  646,  650,  116, 2040,  116, 2040,  648, 2040,
      652,  116, 2040, 2040,  649,  116, 2040, 2040,  651,  116,

     2040,  653,  654, 2040,  116, 2040, 2040,  656,  116, 2040,
      657,  116, 2040,  116, 2040,  660,  655,  116, 2040,  116,
     2040,  658,  116, 2040,  662,  116, 2040,  116, 2040, 2040,
      661,  116, 2040,  664,  116, 2040, 2040,  665,  116, 2040,
      663, 2040,  666,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  667,  671, 2040,  672,  668, 2040,  669,
      116, 2040,  116, 2040,  670,  116, 2040, 2040,  673, 2040,
      674,  675,  682,  676,  683,  684, 2040,  685,  678, 2040,
      686,  116, 2040, 2040,  687,  116, 2040,  688,  677, 2040,
      689,  116, 2040, 2040,  690, 2040,  679,  116, 2040,  116,

     2040,  116, 2040,  116, 2040, 2040,  681,  116, 2040, 2040,
      680,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  692,
      116, 2040,  116, 2040,  691,  116, 2040, 2040,  695, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  696,  116,
     2040,  697,  116, 2040,  693,  116, 2040, 2040,  699,  116,
     2040,  116, 2040, 2040,  701, 2040,  116, 2040,  116, 2040,
      700,  698,  714, 2040,  704,  116, 2040, 2040,  705,  116,
     2040, 2040,  702, 2040,  719,  717,  706,  708,  116, 2040,
     2040,  710,  703,  116, 2040,  713,  707,  116, 2040,  116,
     2040,  711,  116, 2040, 2040,  709,  116, 2040,  712,  116,

     2040,  116, 2040,  116, 2040, 2040,  716,  116, 2040,  715,
      718, 2040,  727,  116, 2040, 2040,  728,  116, 2040,  720,
      721,  116, 2040,  726,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  722, 2040,
      725,  723, 2040,  724,  116, 2040,  116, 2040,  116, 2040,
      729,  116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040,
      740,  116, 2040,  742,  730, 2040,  739,  734,  116, 2040,
      735,  116, 2040,  736,  732, 2040,  733,  116, 2040,  731,
      116, 2040,  743,  116, 2040,  738,  116, 2040,  116, 2040,
      737,  116, 2040,  741,  116, 2040,  749,  116, 2040, 2040,

      750, 2040,  753,  116, 2040,  116, 2040, 2040,  756,  116,
     2040,  116, 2040,  744,  746,  745,  116, 2040,  116, 2040,
      748,  116, 2040, 2040,  747, 2040,  116, 2040,  116, 2040,
      116, 2040, 2040,  761,  751,  116, 2040,  752,  116, 2040,
      755,  764,  116, 2040,  116, 2040,  757,  116, 2040,  116,
     2040, 2040,  754,  116, 2040, 2040,  767,  116, 2040,  768,
     2040,  758, 2040,  759,  116, 2040,  116, 2040,  763,  765,
     2040,  769, 2040,  760,  116, 2040,  777,  116, 2040, 2040,
      762,  766,  776, 2040,  774,  116, 2040,  116, 2040,  779,
      773,  775, 2040,  771,  116, 2040,  778,  116, 2040,  770,

      116, 2040,  116, 2040,  116, 2040, 2040,  116, 2040,  116,
     2040, 2040,  772,  116, 2040,  116, 2040,  116, 2040, 2040,
      780,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 2040,  783, 2040,  116, 2040,  116, 2040,
      116, 2040,  781,  786,  802,  785, 2040,  793,  782,  800,
     2040,  784,  116, 2040,  116, 2040,  790,  116, 2040,  116,
     2040, 2040,  787, 2040,  791, 2040,  788,  789,  801, 2040,
      795, 2040,  799, 2040,  797,  794,  798,  792,  116, 2040,
      116, 2040,  803,  116, 2040,  116, 2040,  796,  806,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,

     2040,  804,  116, 2040,  116, 2040,  116, 2040, 2040,  807,
      808,  116, 2040,  116, 2040,  116, 2040, 2040,  805, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040,
      809,  116, 2040,  116, 2040,  116, 2040,  821,  116, 2040,
     2040,  810,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  813,  814,  116, 2040,  812, 2040,  116, 2040,
     2040,  818, 2040,  811,  116, 2040, 2040,  817,  116, 2040,
      116, 2040, 2040,  815,  116, 2040,  816,  819,  116, 2040,
     2040,  822,  820,  116, 2040,  116, 2040,  116, 2040,  826,

      824,  116, 2040,  829,  116, 2040,  116, 2040,  823, 2040,
      825,  116, 2040,  828,  827,  116, 2040, 2040,  830,  831,
      116, 2040, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  832,  116, 2040,
      116, 2040,  116, 2040,  833,  116, 2040,  838,  836,  116,
     2040, 2040,  116, 2040, 2040,  835, 2040,  834,  116, 2040,
      116, 2040,  839,  841,  837,  840,  842,  850,  116, 2040,
      116, 2040,  843,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 2040,  846,  848, 2040,  844,  116, 2040,
      847,  845,  116, 2040,  116, 2040,  116, 2040,  116, 2040,

     2040,  849,  116, 2040,  852,  116, 2040,  116, 2040, 2040,
      853,  851, 2040,  864,  116, 2040,  854,  116, 2040, 2040,
      855,  116, 2040,  116, 2040,  116, 2040, 2040,  859,  116,
     2040,  856,  116, 2040,  857,  116, 2040, 2040,  860,  858,
     2040,  861,  116, 2040,  116, 2040,  116, 2040, 2040,  116,
     2040, 2040,  862, 2040,  116, 2040,  116, 2040,  116, 2040,
      863,  116, 2040, 2040,  873,  116, 2040,  116, 2040,  116,
     2040,  866,  116, 2040, 2040,  865,  116, 2040,  871,  869,
     2040,  867, 2040,  870,  116, 2040, 2040,  874, 2040,  868,
     2040,  875,  116, 2040,  116, 2040, 2040,  116, 2040,  886,

      877,  116, 2040,  872,  878,  879,  876, 2040,  880,  116,
     2040,  887,  888,  116, 2040,  116, 2040,  896,  116, 2040,
      889,  884,  890,  883,  881, 2040,  891,  892,  882,  116,
     2040,  893,  116, 2040, 2040,  885,  897, 2040,  116, 2040,
      894,  895,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  898,  116, 2040, 2040,
      899, 2040,  906,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 2040,  900,  916,  917,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  904,
     2040,  901,  903,  907,  116, 2040, 2040,  910,  902,  909,

      911,  116, 2040, 2040,  908, 2040,  905,  116, 2040,  116,
     2040,  116, 2040,  116, 2040, 2040,  915,  116, 2040,  913,
      912,  919,  116, 2040,  914,  116, 2040, 2040,  922, 2040,
      116, 2040,  918, 2040,  921,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 2040,  923,  933, 2040,  920,  116, 2040,
      926,  116, 2040,  116, 2040, 2040,  924,  116, 2040, 2040,
      930,  925, 2040,  928,  927,  931,  116, 2040,  116, 2040,
      116, 2040,  932,  929,  116, 2040,  116, 2040,  116, 2040,
      116, 2040, 2040,  116, 2040, 2040,  943, 2040,  934, 2040,
      935, 2040,  116, 2040,  116, 2040,  116, 2040, 2040,  936,

      116, 2040,  940,  116, 2040,  116, 2040,  938,  116, 2040,
      937,  116, 2040,  939,  948,  942,  116, 2040, 2040,  945,
      116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040,  941,
      116, 2040,  953, 2040,  947,  116, 2040,  116, 2040,  946,
      944,  949,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     2040,  958,  116, 2040,  955, 2040,  950,  116, 2040,  951,
      116, 2040,  967,  952, 2040,  956,  954,  957, 2040,  960,
      966, 2040,  969,  116, 2040,  116, 2040,  961,  959,  116,
     2040,  116, 2040, 2040,  963,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  962,  116, 2040, 2040,  116, 2040,  116,

     2040, 2040,  964,  116, 2040,  965,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  970,  968,
      116, 2040,  116, 2040, 2040,  973,  116, 2040,  116, 2040,
      971, 2040,  116, 2040,  978, 2040,  975,  116, 2040,  972,
      979,  116, 2040,  987,  976,  991,  116, 2040,  974,  992,
      982,  977,  116, 2040, 2040,  983, 2040,  984, 2040,  980,
      116, 2040,  981, 2040,  986,  116, 2040,  989,  994,  116,
     2040,  995,  116, 2040,  985,  116, 2040,  116, 2040,  998,
      116, 2040,  988,  116, 2040,  116, 2040,  116, 2040,  990,
      993,  997,  116, 2040,  996,  116, 2040, 2040,  999,  116,

     2040,  116, 2040, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040, 2040, 1002, 1009,  116,
     2040,  116, 2040,  116, 2040,  116, 2040, 2040,  116, 2040,
      116, 2040, 1001,  116, 2040, 1000,  116, 2040,  116, 2040,
      116, 2040, 2040, 1003,  116, 2040, 2040, 1004, 1008,  116,
     2040, 1011, 2040, 1005, 2040, 1006, 1007,  116, 2040,  116,
     2040,  116, 2040, 2040, 1015, 1026,  116, 2040, 1010, 2040,
     1012,  116, 2040, 1013, 1014, 1018, 2040, 1016, 2040, 1020,
      116, 2040, 1017,  116, 2040, 1021, 2040,  116, 2040, 1027,
      116, 2040,  116, 2040, 2040, 1019, 1022,  116, 2040,  116,

     2040, 1028,  116, 2040, 1023,  116, 2040,  116, 2040,  116,
     2040, 1024,  116, 2040, 1029,  116, 2040, 1030, 2040, 1025,
     1031,  116, 2040,  116, 2040,  116, 2040, 1033,  116, 2040,
     2040, 1032, 1035, 1036,  116, 2040,  116, 2040, 2040, 1034,
      116, 2040, 2040, 1038,  116, 2040,  116, 2040, 2040, 1039,
      116, 2040,  116, 2040, 1037, 1040,  116, 2040, 1043,  116,
     2040,  116, 2040,  116, 2040, 2040, 1045,  116, 2040, 2040,
     1046, 2040, 1041,  116, 2040, 1042, 2040,  116, 2040,  116,
     2040, 2040, 1044, 1049, 2040,  116, 2040,  116, 2040, 1051,
      116, 2040, 1059, 2040, 1047,  116, 2040, 2040, 1048, 1053,

     2040, 1052,  116, 2040, 1054, 2040, 1055,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040, 1057,  116, 2040,
     1058, 2040, 1056, 1061,  116, 2040,  116, 2040,  116, 2040,
      116, 2040, 2040, 1060, 1063, 2040, 1062,  116, 2040, 2040,
      116, 2040,  116, 2040, 1064, 2040, 1065,  116, 2040,  116,
     2040, 1072, 1071, 2040,  116, 2040, 2040, 1074, 1068, 1069,
      116, 2040,  116, 2040,  116, 2040, 1070, 1080, 1066, 1076,
      116, 2040, 1067, 1073, 2040,  116, 2040,  116, 2040, 2040,
      116, 2040, 1083, 2040, 1078, 2040, 1084,  116, 2040,  116,
     2040,  116, 2040, 1075, 1087, 1077, 1089, 1090, 2040, 1079,

     1081,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 1091,  116, 2040, 2040, 1086,  116, 2040,
     1082,  116, 2040,  116, 2040, 2040, 1085, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040, 1102, 2040, 1103,  116,
     2040, 1088,  116, 2040,  116, 2040, 1095, 2040,  116, 2040,
     1092,  116, 2040, 1093, 1099,  116, 2040, 1094,  116, 2040,
     1100,  116, 2040, 1105,  116, 2040, 2040, 1097,  116, 2040,
     1098, 2040, 1096, 2040, 1101, 1104,  116, 2040,  116, 2040,
      116, 2040, 1107, 1106, 2040, 1108,  116, 2040,  116, 2040,
     2040, 1110,  116, 2040,  116, 2040,  116, 2040,  116, 2040,

     1112, 2040, 1109, 1111, 2040, 1113, 1115, 1119, 1114,  116,
     2040, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     1116, 1118, 2040, 1120, 1117,  116, 2040,  116, 2040, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     2040, 1121,  116, 2040, 1124, 1122, 2040, 1131, 2040, 1125,
     2040, 1134,  116, 2040,  116, 2040, 1123, 1127,  116, 2040,
     2040, 1135,  116, 2040, 1126, 2040,  116, 2040, 1130,  116,
     2040, 2040, 1129,  116, 2040,  116, 2040, 1136, 1144, 1133,
     1128, 1132,  116, 2040, 2040, 1139,  116, 2040,  116, 2040,
      116, 2040,  116, 2040, 2040, 1138,  116, 2040,  116, 2040,

     2040, 1142, 1137,  116, 2040, 2040,  116, 2040, 2040, 1143,
     1141, 2040, 1150, 1140,  116, 2040,  116, 2040,  116, 2040,
      116, 2040, 2040,  116, 2040, 2040, 1145,  116, 2040,  116,
     2040,  116, 2040,  116, 2040, 1149, 1147, 2040, 1146,  116,
     2040,  116, 2040,  116, 2040,  116, 2040, 2040,  116, 2040,
     1148,  116, 2040, 2040,  116, 2040,  116, 2040, 1151, 1153,
      116, 2040, 2040, 1152,  116, 2040,  116, 2040,  116, 2040,
     2040, 1157, 1154, 1158, 1159, 1167, 1155, 1169, 1160,  116,
     2040, 1156, 2040, 1163,  116, 2040, 2040, 1164, 2040, 1162,
     1166, 1171, 2040, 1161, 1174,  116, 2040,  116, 2040,  116,

     2040,  116, 2040, 2040, 1165,  116, 2040, 2040, 1168,  116,
     2040, 1172, 2040, 1170, 1173,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 1176, 2040, 1175,  116, 2040,  116, 2040, 1177,  116,
     2040, 2040, 1178,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 2040, 1181,  116, 2040, 2040, 1179, 2040,  116, 2040,
      116, 2040, 1180, 2040, 1193,  116, 2040, 1183, 1184, 2040,
     1185,  116, 2040, 2040, 1182,  116, 2040,  116, 2040, 1189,
      116, 2040,  116, 2040,  116, 2040, 2040, 1186, 1187, 1188,
      116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040, 1190,

     1194, 2040, 1192, 1191,  116, 2040, 2040, 1205,  116, 2040,
      116, 2040, 2040, 1197,  116, 2040,  116, 2040,  116, 2040,
     1199, 1196, 1195,  116, 2040,  116, 2040, 1200, 2040, 1198,
     1201, 1202,  116, 2040,  116, 2040, 2040, 1203,  116, 2040,
      116, 2040, 2040, 1207,  116, 2040,  116, 2040,  116, 2040,
     1206,  116, 2040, 1209,  116, 2040, 2040, 1210, 2040, 1208,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 2040, 1211, 2040,  116, 2040, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 2040, 1212, 1214, 1213,  116, 2040, 1215, 2040, 1228,

     2040, 1229,  116, 2040, 2040,  116, 2040, 1216, 1218,  116,
     2040,  116, 2040, 2040, 1219, 2040, 1217, 1223,  116, 2040,
      116, 2040,  116, 2040,  116, 2040, 2040, 1221, 1224, 2040,
     1222,  116, 2040, 2040, 1230, 2040, 1225,  116, 2040,  116,
     2040,  116, 2040, 1226, 2040, 1227, 1231,  116, 2040, 2040,
     1237, 1241,  116, 2040,  116, 2040, 2040, 1235, 2040, 1243,
     1232, 1233,  116, 2040,  116, 2040, 1234, 1238,  116, 2040,
     2040, 1239,  116, 2040, 1245,  116, 2040,  116, 2040, 1236,
      116, 2040,  116, 2040, 1251,  116, 2040, 2040, 1242,  116,
     2040, 2040, 1240,  116, 2040, 1252,  116, 2040, 1244,  116,

     2040, 1256, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 1246,  116, 2040, 2040, 1247,  116, 2040,  116, 2040,
      116, 2040,  116, 2040, 1250,  116, 2040, 1249, 1248,  116,
     2040,  116, 2040, 1253,  116, 2040, 1254, 1267,  116, 2040,
      116, 2040, 2040, 1255,  116, 2040, 1258,  116, 2040, 2040,
     1259, 2040, 1261,  116, 2040, 2040, 1257, 1260, 2040, 1265,
     1264, 2040, 1262, 1272,  116, 2040, 2040, 1263, 2040, 1269,
      116, 2040, 1266,  116, 2040, 2040, 1271,  116, 2040,  116,
     2040, 2040, 1268,  116, 2040,  116, 2040, 1270,  116, 2040,
      116, 2040, 2040,  116, 2040,  116, 2040, 2040,  116, 2040,

     2040, 1274,  116, 2040, 2040, 1273,  116, 2040, 2040, 1282,
     1285,  116, 2040,  116, 2040, 2040, 1275, 1283,  116, 2040,
     1277,  116, 2040,  116, 2040, 2040, 1278,  116, 2040, 1276,
     1279,  116, 2040, 1290,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040, 1280,  116, 2040,  116,
     2040, 1281, 2040, 1287,  116, 2040, 1286, 1284,  116, 2040,
      116, 2040,  116, 2040, 1291, 1288, 2040, 1292,  116, 2040,
     1289,  116, 2040,  116, 2040,  116, 2040, 2040, 1305,  116,
     2040, 2040, 1295, 2040, 1293, 1296,  116, 2040, 1302, 1297,
      116, 2040, 2040, 1294, 2040, 1299, 2040, 1306, 1309,  116,

     2040,  116, 2040, 2040, 1300, 2040, 1311, 2040, 1298, 1303,
     2040, 1301,  116, 2040,  116, 2040,  116, 2040, 2040, 1307,
      116, 2040, 1304,  116, 2040,  116, 2040,  116, 2040, 2040,
     1313,  116, 2040, 1308,  116, 2040, 2040, 1312,  116, 2040,
      116, 2040,  116, 2040, 1310,  116, 2040,  116, 2040, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040, 1314,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040, 1317,
      116, 2040, 1319, 1321,  116, 2040, 1316, 1315,  116, 2040,
     1318,  116, 2040, 1320,  116, 2040,  116, 2040,  116, 2040,
      116, 2040, 2040, 1322,  116, 2040, 1336,  116, 2040, 2040,

     1323,  116, 2040, 2040, 1326, 1324, 1325, 1327,  116, 2040,
      116, 2040, 1332, 1330, 1328, 1331, 1329, 1334,  116, 2040,
      116, 2040, 1335, 2040, 1333,  116, 2040,  116, 2040, 1340,
      116, 2040, 1346,  116, 2040,  116, 2040, 1338,  116, 2040,
     1337,  116, 2040, 2040, 1339,  116, 2040, 2040, 1341, 2040,
     1342,  116, 2040, 2040, 1343, 1344,  116, 2040, 1345,  116,
     2040,  116, 2040, 1360,  116, 2040, 2040, 1347,  116, 2040,
      116, 2040, 2040, 1349,  116, 2040,  116, 2040, 1364, 2040,
     1348, 1350, 1351,  116, 2040, 1352,  116, 2040,  116, 2040,
     2040, 1354,  116, 2040,  116, 2040,  116, 2040, 2040, 1356,

      116, 2040,  116, 2040,  116, 2040, 1361, 1355,  116, 2040,
      116, 2040,  116, 2040, 2040, 1357, 1358,  116, 2040, 1359,
      116, 2040, 2040, 1365,  116, 2040, 1366,  116, 2040, 2040,
     1362,  116, 2040, 2040, 1368,  116, 2040,  116, 2040,  116,
     2040, 1369,  116, 2040,  116, 2040, 2040, 1371,  116, 2040,
     2040, 1373, 2040, 1370, 1367,  116, 2040,  116, 2040,  116,
     2040, 2040, 1372, 1383, 1377, 1374, 1376, 1375,  116, 2040,
     1388,  116, 2040, 1385,  116, 2040, 2040, 1378,  116, 2040,
     2040, 1379,  116, 2040,  116, 2040, 1381, 2040, 1395, 1380,
     1382,  116, 2040,  116, 2040,  116, 2040, 2040, 1386, 1384,

     1387,  116, 2040, 1392,  116, 2040, 1389, 1398, 1397,  116,
     2040,  116, 2040,  116, 2040, 2040, 1399,  116, 2040, 1393,
      116, 2040,  116, 2040, 1401,  116, 2040, 2040, 1391, 2040,
     1390,  116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040,
     1407, 2040,  116, 2040, 1394,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 1396, 2040, 1400,  116, 2040, 1403,  116,
     2040, 2040, 1408, 1405,  116, 2040,  116, 2040, 1402, 1406,
     2040, 1413,  116, 2040,  116, 2040,  116, 2040, 1404,  116,
     2040,  116, 2040, 2040,  116, 2040,  116, 2040, 1421,  116,
     2040, 1410,  116, 2040, 1415, 1409, 1411,  116, 2040, 1412,

     2040, 1416, 2040, 1414,  116, 2040, 1425,  116, 2040,  116,
     2040, 1418, 2040, 1417, 2040,  116, 2040, 1420,  116, 2040,
      116, 2040,  116, 2040,  116, 2040, 2040, 1422, 2040, 1423,
     1419, 1424, 1431,  116, 2040,  116, 2040, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     2040, 1426,  116, 2040, 2040, 1428, 2040, 1435,  116, 2040,
     1427,  116, 2040,  116, 2040,  116, 2040,  116, 2040, 1429,
     1434, 1430, 1438,  116, 2040, 2040, 1436,  116, 2040, 2040,
     1432, 2040, 1433,  116, 2040, 2040, 1437, 1440,  116, 2040,
      116, 2040,  116, 2040, 2040, 1447, 2040, 1439, 2040, 1442,

      116, 2040,  116, 2040, 2040, 1444,  116, 2040, 1443, 1441,
      116, 2040,  116, 2040, 1448, 1455, 2040, 1445,  116, 2040,
     1449,  116, 2040, 1446, 1450, 2040, 1459,  116, 2040, 2040,
     1451,  116, 2040, 1456,  116, 2040, 2040, 1454,  116, 2040,
     2040, 1453, 2040,  116, 2040, 2040,  116, 2040, 2040, 1452,
      116, 2040,  116, 2040,  116, 2040, 2040, 1464, 2040, 1460,
      116, 2040, 1457,  116, 2040, 2040,  116, 2040, 2040, 1461,
     1458, 2040, 1462,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040, 2040, 1463, 2040, 1473, 1465,
     1466, 1467, 1472, 1474,  116, 2040, 1475, 2040,  116, 2040,

      116, 2040,  116, 2040,  116, 2040, 1486, 1468, 1476, 2040,
     1470, 1477, 1469,  116, 2040, 2040, 1471,  116, 2040, 2040,
     1478, 1483,  116, 2040, 2040, 1480,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040, 1479,  116, 2040, 2040,
     1481,  116, 2040,  116, 2040,  116, 2040, 1497, 1482, 1484,
     1490, 1485,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     1487,  116, 2040, 2040,  116, 2040,  116, 2040, 1499, 1489,
      116, 2040, 2040, 1488,  116, 2040,  116, 2040, 2040, 1491,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     1494, 2040, 1492, 1493,  116, 2040, 1495, 1496,  116, 2040,

      116, 2040, 2040, 1510,  116, 2040, 2040, 1500, 1501, 1502,
      116, 2040, 1498,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 1505,  116, 2040,  116, 2040, 2040, 1503,  116, 2040,
     2040, 1506, 2040, 1509, 2040, 1508,  116, 2040,  116, 2040,
      116, 2040,  116, 2040, 1507, 1511,  116, 2040,  116, 2040,
      116, 2040,  116, 2040, 1512, 2040, 1513,  116, 2040, 2040,
     1516, 2040, 1517,  116, 2040, 2040, 1515, 1518, 1524, 1514,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     2040, 1527,  116, 2040, 1519,  116, 2040,  116, 2040, 2040,
     1520,  116, 2040,  116, 2040, 1525,  116, 2040, 1521, 2040,

     1526, 1522,  116, 2040,  116, 2040, 1528, 1523,  116, 2040,
      116, 2040, 1540,  116, 2040,  116, 2040,  116, 2040, 1530,
     2040, 1533, 2040,  116, 2040, 1531, 1529, 1543, 1534, 1539,
      116, 2040, 1532,  116, 2040, 1535,  116, 2040, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040, 2040, 1537,  116,
     2040, 1546, 1536, 1538, 1549, 2040, 1541,  116, 2040,  116,
     2040, 1551,  116, 2040,  116, 2040, 1547,  116, 2040, 1553,
     2040, 1542, 1550,  116, 2040, 1552,  116, 2040, 2040, 1544,
      116, 2040, 1548, 1545,  116, 2040,  116, 2040,  116, 2040,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,

     2040,  116, 2040,  116, 2040, 1556, 2040, 1566,  116, 2040,
      116, 2040, 2040, 1555, 2040, 1557,  116, 2040, 2040, 1554,
      116, 2040,  116, 2040,  116, 2040,  116, 2040, 1567, 1558,
     2040, 1562,  116, 2040, 2040, 1559,  116, 2040, 2040, 1560,
     2040, 1561,  116, 2040, 2040, 1572,  116, 2040, 1563,  116,
     2040, 1564, 1565,  116, 2040,  116, 2040,  116, 2040, 1570,
     1568, 2040, 1569,  116, 2040,  116, 2040,  116, 2040, 1575,
      116, 2040,  116, 2040,  116, 2040, 1571,  116, 2040,  116,
     2040, 1574, 2040, 1573,  116, 2040, 2040, 1586,  116, 2040,
     2040,  116, 2040, 1577, 1576, 1578,  116, 2040, 2040,  116,

     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 1579, 2040, 1580, 1584, 2040, 1581,  116, 2040,  116,
     2040, 1585, 2040, 1582,  116, 2040, 1583, 2040, 1587,  116,
     2040,  116, 2040, 1588, 1591, 1589,  116, 2040,  116, 2040,
      116, 2040,  116, 2040, 2040, 1590, 1593, 1592,  116, 2040,
     1595, 2040, 1594,  116, 2040, 2040,  116, 2040,  116, 2040,
     2040, 1597, 1600,  116, 2040, 2040, 1598,  116, 2040, 1596,
      116, 2040, 2040, 1599, 2040, 1601,  116, 2040, 2040, 1603,
      116, 2040,  116, 2040, 1602,  116, 2040,  116, 2040, 1607,
      116, 2040,  116, 2040,  116, 2040, 2040, 1606, 1604, 1611,

     2040, 1609, 2040, 1605,  116, 2040,  116, 2040, 2040, 1610,
     1608, 1617, 2040, 1612, 1613,  116, 2040, 1620,  116, 2040,
      116, 2040,  116, 2040, 1614,  116, 2040, 2040, 1615,  116,
     2040, 2040, 1619, 1621,  116, 2040, 2040, 1616, 2040, 1618,
      116, 2040,  116, 2040,  116, 2040, 1631,  116, 2040, 1622,
     1623,  116, 2040, 1625,  116, 2040,  116, 2040, 1624, 1632,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     2040,  116, 2040,  116, 2040, 2040, 1626, 2040, 1627, 2040,
     1629,  116, 2040, 2040, 1628,  116, 2040,  116, 2040, 2040,
     1630,  116, 2040,  116, 2040,  116, 2040,  116, 2040, 1644,

      116, 2040, 1633,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 1636,  116, 2040, 1634, 2040, 1635,  116, 2040, 2040,
     1638, 1639, 1640,  116, 2040,  116, 2040,  116, 2040, 1637,
     1643, 2040,  116, 2040,  116, 2040, 2040, 1641,  116, 2040,
     2040, 1642, 1652,  116, 2040,  116, 2040,  116, 2040, 1646,
     1648, 2040, 1659, 1651,  116, 2040,  116, 2040,  116, 2040,
     2040, 1647, 1645, 1649,  116, 2040,  116, 2040, 2040, 1661,
      116, 2040, 2040, 1662,  116, 2040,  116, 2040, 1650, 1654,
      116, 2040,  116, 2040,  116, 2040, 1657,  116, 2040, 1653,
     2040,  116, 2040, 2040, 1655, 2040,  116, 2040,  116, 2040,

     1656, 1658,  116, 2040,  116, 2040, 1668,  116, 2040, 2040,
     1660, 1663, 2040, 1672,  116, 2040, 2040, 1664,  116, 2040,
     2040, 1665,  116, 2040,  116, 2040, 1667, 1671,  116, 2040,
     2040, 1666,  116, 2040,  116, 2040, 2040, 1669, 1670,  116,
     2040,  116, 2040, 2040,  116, 2040,  116, 2040, 2040, 1673,
     2040, 1674,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040, 2040, 1681, 1676,  116, 2040,  116, 2040, 2040,
      116, 2040,  116, 2040, 2040, 1678,  116, 2040, 1677, 2040,
     1675,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 1689, 1680, 1679,  116, 2040,  116, 2040, 1682, 1683,

     1694,  116, 2040,  116, 2040, 1685,  116, 2040,  116, 2040,
      116, 2040, 2040, 1684, 2040, 1691, 1686, 1688,  116, 2040,
     1687, 1690,  116, 2040, 1693,  116, 2040, 2040,  116, 2040,
     1700,  116, 2040, 1692,  116, 2040,  116, 2040, 2040,  116,
     2040, 1696, 2040, 1695,  116, 2040,  116, 2040, 1699, 1697,
     1698, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040, 1701, 2040,
      116, 2040, 2040, 1702, 1705, 2040, 1704, 1706,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     1703, 1711, 1708, 1709,  116, 2040, 1707, 1712,  116, 2040,

      116, 2040, 2040, 1714, 2040, 1710,  116, 2040, 2040, 1717,
     1713, 1723, 2040, 1718, 1726, 2040, 1716, 1720, 2040, 1715,
      116, 2040, 1719,  116, 2040, 2040, 1721,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 2040, 1725, 1722, 2040, 1724, 1727,  116, 2040, 2040,
     1729,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 1736,  116, 2040, 1728,  116, 2040, 2040, 1730,  116,
     2040,  116, 2040, 2040, 1732, 2040,  116, 2040, 1734, 2040,
      116, 2040,  116, 2040, 1731,  116, 2040, 2040, 1737, 2040,
     1733, 1748, 2040, 1735,  116, 2040,  116, 2040,  116, 2040,

     2040, 1738, 2040, 1739, 1741,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 1740, 1743, 2040, 1742,  116, 2040, 2040,
     1744, 1746, 1747, 1749, 2040, 1745,  116, 2040, 1750,  116,
     2040, 1751,  116, 2040,  116, 2040, 1757,  116, 2040,  116,
     2040,  116, 2040,  116, 2040, 2040,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040, 1752,  116, 2040, 2040,
     1753, 2040, 1754,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 2040,  116, 2040, 2040, 1755,  116, 2040, 1756, 2040,
     1768, 1758,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040, 1776, 1763, 2040, 1762, 1771, 1764, 2040, 1759,

     1761,  116, 2040, 1766,  116, 2040, 2040, 1760,  116, 2040,
     2040, 1765, 1767,  116, 2040,  116, 2040, 2040, 1769, 1778,
      116, 2040, 1772,  116, 2040, 2040, 1770,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 2040, 1774, 1773, 1780, 1783, 2040, 1775,  116, 2040,
      116, 2040, 2040, 1777,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  116, 2040, 1779,  116, 2040, 2040, 1782,  116,
     2040,  116, 2040,  116, 2040, 2040,  116, 2040,  116, 2040,
      116, 2040, 1781, 2040, 1788, 2040, 1786,  116, 2040, 1784,
     2040, 1795, 2040, 1785, 2040, 1790, 1787,  116, 2040, 1789,

      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  116, 2040, 2040, 1793, 2040, 1794, 1791, 2040,
     1792, 2040, 1796,  116, 2040, 2040, 1798, 1800, 1799,  116,
     2040, 1797, 2040, 1801,  116, 2040,  116, 2040, 1802,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040, 1804,
      116, 2040, 2040, 1806, 2040, 1805,  116, 2040, 2040, 1803,
      116, 2040, 2040, 1808,  116, 2040,  116, 2040,  116, 2040,
     2040, 1816,  116, 2040,  116, 2040,  116, 2040, 2040, 1809,
     1807,  116, 2040,  116, 2040,  116, 2040,  116, 2040, 1817,
     1812, 2040,  116, 2040, 2040,  116, 2040, 1810, 2040,  116,

     2040,  116, 2040, 1811,  116, 2040, 1814, 1813, 1815, 1825,
     2040, 1818, 2040, 1819,  116, 2040,  116, 2040, 2040, 1821,
      116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040, 1824,
      116, 2040,  116, 2040, 1820,  116, 2040, 1822,  116, 2040,
      116, 2040,  116, 2040, 2040, 1823, 1826, 1827, 2040, 1828,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     1831,  116, 2040,  116, 2040, 1830, 1834, 2040, 1832,  116,
     2040, 2040, 1829,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 1836, 1833, 1835,  116, 2040, 1838,  116, 2040, 2040,

     1837, 1839,  116, 2040,  116, 2040, 1842,  116, 2040, 2040,
     1840,  116, 2040, 1845,  116, 2040,  116, 2040,  116, 2040,
     1841, 2040, 1843,  116, 2040, 1853,  116, 2040,  116, 2040,
     2040, 1844, 1849, 2040, 1848, 2040, 1847, 2040, 1856,  116,
     2040,  116, 2040, 1850, 1846,  116, 2040, 2040,  116, 2040,
      116, 2040, 1851,  116, 2040, 2040, 1857,  116, 2040,  116,
     2040,  116, 2040, 1854,  116, 2040, 2040, 1852,  116, 2040,
      116, 2040,  116, 2040, 2040, 1858,  116, 2040, 1855, 2040,
     1862,  116, 2040,  116, 2040,  116, 2040, 2040,  116, 2040,
      116, 2040, 1860,  116, 2040,  116, 2040, 2040, 1866,  116,

     2040, 1859, 1861,  116, 2040, 2040, 1864,  116, 2040, 2040,
      116, 2040, 2040,  116, 2040, 1863,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     1865,  116, 2040, 1867,  116, 2040, 1872, 1869, 1868, 1871,
      116, 2040,  116, 2040, 1870, 1876,  116, 2040,  116, 2040,
      116, 2040,  116, 2040, 1875, 1873,  116, 2040, 2040, 1874,
     1877,  116, 2040, 1886,  116, 2040,  116, 2040,  116, 2040,
      116, 2040, 2040, 1880,  116, 2040, 1878, 1883,  116, 2040,
      116, 2040, 1881,  116, 2040, 2040, 1879,  116, 2040,  116,
     2040,  116, 2040,  116, 2040, 1882, 1885,  116, 2040, 2040,

     1884,  116, 2040,  116, 2040,  116, 2040, 1892, 2040, 1887,
     2040, 1888, 1891, 1890, 1889,  116, 2040, 1895, 2040,  116,
     2040,  116, 2040, 2040, 1897,  116, 2040, 1893, 2040, 1894,
      116, 2040,  116, 2040, 1896, 1898, 1900, 2040, 1899, 1906,
      116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040, 1908,
     2040, 1904,  116, 2040, 1901, 2040, 1902,  116, 2040, 1903,
      116, 2040, 1905,  116, 2040,  116, 2040,  116, 2040,  116,
     2040, 2040, 1907,  116, 2040,  116, 2040,  116, 2040, 1909,
      116, 2040,  116, 2040,  116, 2040, 2040,  116, 2040,  116,
     2040, 1910,  116, 2040, 2040, 1911,  116, 2040,  116, 2040,

      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     1912, 2040, 1914, 2040, 1913, 2040, 1916,  116, 2040,  116,
     2040, 1915, 2040, 1920, 2040, 1931, 1919, 1917, 1921, 2040,
     1922,  116, 2040, 1918,  116, 2040,  116, 2040,  116, 2040,
     2040, 1925, 2040, 1926,  116, 2040, 1927, 2040, 1928, 2040,
     1923, 2040, 1924,  116, 2040, 1929, 1930,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040, 1934, 2040, 1932,
     2040, 1933,  116, 2040,  116, 2040,  116, 2040,  116, 2040,

      116, 2040,  116, 2040, 2040,  116, 2040, 1935, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040,
     1938,  116, 2040,  116, 2040, 1936,  116, 2040, 1937,  116,
     2040, 2040, 1940,  116, 2040,  116, 2040, 1939,  116, 2040,
      116, 2040,  116, 2040, 1944,  116, 2040,  116, 2040, 2040,
     1942, 1945, 1946, 1941,  116, 2040, 2040, 1943,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040, 2040, 1947,
      116, 2040, 2040, 1948,  116, 2040, 2040, 1950, 1961,  116,
     2040, 1959, 1949,  116, 2040, 2040, 1957,  116, 2040, 2040,
     1951,  116, 2040, 1954,  116, 2040,  116, 2040, 2040, 1952,

      116, 2040, 2040, 1953, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 2040, 1960, 1955, 1956,  116, 2040, 2040,
     1958, 1968,  116, 2040,  116, 2040, 1963,  116, 2040,  116,
     2040,  116, 2040,  116, 2040, 1962,  116, 2040, 2040,  116,
     2040, 2040, 1966, 1965, 1964,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 2040, 1969, 1970,  116, 2040, 1967, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     2040,  116, 2040,  116, 2040,  116, 2040, 1971, 1980,  116,
     2040, 2040, 1975,  116, 2040,  116, 2040, 1973, 2040, 1972,
     1976, 2040, 1977, 1974,  116, 2040,  116, 2040,  116, 2040,

      116, 2040,  116, 2040,  116, 2040, 2040, 1979,  116, 2040,
     2040, 1982, 2040, 1978, 1985, 1984, 1986, 1981,  116, 2040,
      116, 2040,  116, 2040,  116, 2040,  116, 2040, 1983,  116,
     2040,  116, 2040,  116, 2040, 2040,  116, 2040,  116, 2040,
      116, 2040, 2040, 1987,  116, 2040, 2040, 1988, 2040, 1990,
     2040, 1989,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
      116, 2040, 2005,  116, 2040, 2040, 1992, 1994, 2040, 1991,
      116, 2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,
     2040, 1995, 1993, 1996,  116, 2040,  116, 2040,  116, 2040,
      116, 2040, 1998, 2000, 1999, 1997,  116, 2040,  116, 2040,

     2001,  116, 2040,  116, 2040, 2002,  116, 2040,  116, 2040,
     2004, 2003,  116, 2040, 2006,  116, 2040,  116, 2040, 2011,
     2007,  116, 2040,  116, 2040, 2040,  116, 2040,  116, 2040,
      116, 2040, 2040, 2009,  116, 2040,  116, 2040, 2008,  116,
     2040,  116, 2040,  116, 2040,  116, 2040, 2010,  116, 2040,
     2040, 2012,  116, 2040, 2040, 2014, 2040, 2013, 2015, 2040,
     2018,  116, 2040, 2040, 2016,  116, 2040, 2040,  116, 2040,
      116, 2040, 2017, 2020,  116, 2040,  116, 2040, 2019, 2040,
     2021,  116, 2040,  116, 2040,  116, 2040, 2040, 2025,  116,
     2040, 2040, 2022,  116, 2040, 2023,  116, 2040,  116, 2040,

     2029, 2040, 2024,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040,  116, 2040,  116, 2040,  116, 2040,  116,
     2040,  116, 2040, 2026, 2027,  116, 2040,  116, 2040, 2040,
     2028,  116, 2040,  116, 2040,  116, 2040, 2040, 2040, 2030,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2033, 2031, 2034, 2040, 2035, 2040, 2036, 2040,
     2032, 2040, 2040, 2040, 2040, 2040, 2040, 2039, 2040, 2037,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2038,
       87,   87,   87,   87,   87,   92,   92,   92,   92,   92,

       97,   97,   97,   97,   97,  119,  119,  119,  285, 2040,
      285,  285,  285,  286,  286,  286,  286,  286,  300, 2040,
      300,    9, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,

     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040
    } ;

static yyconst flex_int16_t yy_chk[6911] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
     2052,    3,    3,    4,    4,   17,    4,    4,    5,    5,

       19,    6,    6,    7,    7,    8,    8,   24,   17,   17,
       17,   26,   28,   33,   33, 2051,   19, 2050,   24,   28,
       26,   26,   29,   29, 2049,   29,   29,   29,   30,   30,
     2047,   30,   30,   30,   35,   35,   37,   37,   38,   38,
     1193,    3, 1026,   30,   43,   43,    4,   46,   46,  864,
       39,   39,   40,   40,  300,   41,   41,  299,   44,   44,
       52,   52,   61,   61,   39,   42,   42,   57,   57,   39,
       41,  287,   50,   50,   65,   65,   49,   49,   40,   48,
       48,    5,   37,    5,    6,   50,    6,  204,   42,  126,
       37,   43,   37,   39,  122,   38,  121,   39,   38,   40,

       39,   39,  116,   40,   39,   44,   41,   39,   49,   44,
       39,   41,   40,   39,   45,   45,   42,   47,   47,   42,
       51,   51,   48,   52,   99,   57,   48,   56,   56,   86,
       50,   65,   50,   49,   65,   50,   53,   53,   45,   45,
       94,   56,   63,   47,   55,   55,   34,   56,   58,   58,
       59,   59,   76,   76,   53,   75,   75,   56,   78,   78,
       47,  119,  119,   51,   31,   66,   66,   27,   47,   45,
       45,   51,   23,   55,   47,   45,   70,   70,   67,   67,
       51,  132,  132,   53,   54,   54,  117,  117,  117,   18,
       86,   55,   82,   82,   14,   55,   64,   64,   68,   68,

       13,  128,  128,   54,   55,    9,   58,    0,   59,   54,
       76,    0,   75,   54,    0,   54,   54,   69,   69,   66,
        0,   78,   66,   70,    0,   67,    0,   54,   66,   67,
       70,   54,   70,    0,   54,   54,   70,   54,   67,   54,
       64,   64,   54,   68,   71,   71,   54,   54,   82,   54,
        0,   64,   68,   68,   68,    0,   64,   64,   64,   64,
       72,   72,   68,  128,   68,    0,   74,   74,   69,   73,
       73,   69,   77,   77,   69,    0,   79,   79,  134,  134,
       69,   84,   84,  118,  118,    0,  118,  118,  118,  130,
      130,   71,    0,   80,   80,   71,    0,  120,  120,   83,

       83,  131,  131,   81,   81,    0,   91,    0,   72,   74,
        0,  127,  127,   74,  120,   72,   72,   74,  142,  142,
       73,   72,   72,   79,   84,   73,   73,  129,  129,   77,
       73,   84,   77,   79,  134,   77,   80,    0,   80,    0,
       80,    0,   83,   80,   80,   83,   81,   80,    0,  130,
      142,   80,   80,   81,    0,   80,   80,  127,  131,    0,
       81,   83,    0,   81,   91,   83,   83,   83,   91,   81,
       81,   81,    0,  129,  133,  133,   91,    0,  129,    0,
       91,    0,   91,  135,  135,    0,  133,  136,  136,  137,
      137,  138,  138,  140,  140,  139,  139,  141,  141,  143,

      143,  144,  144,  145,  145,  146,  146,  147,  147,  148,
      148,  149,  149,  150,  150,  151,  151,  152,  152,  154,
      154,  153,  153,  155,  155,  157,  157,  156,  156,    0,
      136,    0,  146,    0,  138,  155,    0,  149,    0,  135,
      140,  158,  158,  159,  159,    0,  145,  160,  160,  137,
      139,  139,  161,  161,    0,  148,  147,  141,  156,  143,
        0,  144,  144,  162,  162,  154,  151,  150,  157,  163,
      163,    0,  160,  152,  152,  153,  164,  164,  151,  152,
      165,  165,  153,  166,  166,  167,  167,  168,  168,  158,
      170,  170,  158,  169,  169,  171,  171,  172,  172,    0,

      159,  173,  173,  158,    0,  158,  166,  166,  168,  167,
      161,  174,  174,  169,  163,  175,  175,  176,  176,  162,
      177,  177,    0,  165,    0,  178,  178,  179,  179,    0,
      176,    0,  180,  180,    0,  181,  181,    0,  164,  183,
      183,  170,    0,  172,  180,  167,  184,  184,  172,    0,
      177,  178,    0,  182,  182,    0,  179,  171,    0,  172,
      185,  185,  174,  177,  181,    0,  175,    0,  174,  186,
      186,  187,  187,  188,  188,  177,  189,  189,  190,  190,
        0,  177,  182,  191,  191,  192,  192,  193,  193,  194,
      194,  195,  195,  196,  196,  197,  197,  198,  198,  193,

        0,  199,  199,  183,  200,  200,  201,  201,  184,  202,
      202,  206,  206,    0,  197,  209,  209,  185,  187,  189,
      199,    0,  198,    0,  186,  207,  207,    0,  192,    0,
      188,    0,  208,  208,  210,  210,  196,    0,  190,  212,
      212,  211,  211,  191,  194,    0,  195,  213,  213,  214,
      214,  215,  215,    0,  216,  216,  217,  217,  218,  218,
        0,  200,    0,  201,  209,    0,  202,  219,  219,    0,
      220,  220,  206,  221,  221,  222,  222,  223,  223,  224,
      224,    0,  207,  208,  211,  210,  225,  225,  226,  226,
      227,  227,  228,  228,  229,  229,  214,    0,  211,  230,

      230,  212,  231,  231,  213,  232,  232,    0,  215,  216,
        0,  217,  218,  220,    0,  216,    0,  216,  221,  233,
      233,    0,  234,  234,    0,  224,  235,  235,  219,  225,
      236,  236,  237,  237,    0,  223,  222,  238,  238,  226,
        0,  239,  239,    0,  227,    0,  226,  240,  240,  228,
      241,  241,  242,  242,  229,  230,  243,  243,  245,  245,
      244,  244,  232,    0,  231,  234,  246,  246,  247,  247,
      248,  248,    0,  249,  249,    0,  236,  250,  250,    0,
      235,    0,  233,  251,  251,    0,  239,  254,  254,  239,
        0,  236,  239,  255,  255,  238,    0,  241,  252,  252,

        0,  253,  253,  241,  240,  244,  256,  256,  242,  244,
        0,  247,  257,  257,  247,    0,  258,  258,    0,  259,
      259,  260,  260,    0,  250,    0,  248,  261,  261,  262,
      262,    0,  246,  249,  263,  263,  255,    0,  254,  264,
      264,  265,  265,    0,  251,  253,  266,  266,    0,  252,
        0,  255,  267,  267,    0,  252,  268,  268,  255,  258,
      269,  269,    0,  253,  259,    0,  258,    0,  256,  256,
      270,  270,  271,  271,  272,  272,  257,    0,  260,    0,
      262,  259,    0,  261,  273,  273,  274,  274,  265,    0,
      266,  275,  275,    0,  263,  276,  276,  277,  277,  264,

        0,  266,  278,  278,  279,  279,    0,  268,  267,  280,
      280,  281,  281,  282,  282,    0,  268,  297,  297,  297,
      298,  298,    0,  303,  303,  304,  304,  305,  305,  306,
      306,  307,  307,  308,  308,    0,  270,  270,  270,  309,
      309,  303,    0,  310,  310,  275,  276,  303,  274,  303,
      277,  275,  311,  311,  312,  312,  313,  313,  314,  314,
      315,  315,  281,    0,  282,  316,  316,    0,  309,  317,
      317,  318,  318,    0,  298,    0,  304,    0,  319,  319,
      307,  320,  320,  321,  321,  322,  322,  305,  323,  323,
      306,  319,  324,  324,  325,  325,    0,  321,  308,  310,

        0,  313,  326,  326,  327,  327,    0,  328,  328,  312,
      329,  329,  317,    0,  311,  315,  327,    0,  315,  314,
      330,  330,  331,  331,  334,  334,  332,  332,    0,  316,
      322,    0,  320,  326,    0,  318,    0,  324,  324,  324,
      332,  325,    0,  322,  333,  333,  335,  335,    0,  324,
        0,  331,    0,  323,  328,  336,  336,    0,  337,  337,
      333,  333,  338,  338,  333,  339,  339,    0,  329,  333,
      333,  340,  340,    0,  333,  333,  337,  341,  341,  342,
      342,    0,  334,  343,  343,    0,  330,  344,  344,    0,
      345,  345,  346,  346,  347,  347,    0,  348,  348,  349,

      349,    0,  336,    0,  350,  350,    0,  335,  345,    0,
      351,  351,  352,  352,  339,  353,  353,  354,  354,  355,
      355,  356,  356,  357,  357,    0,  342,    0,  340,    0,
      343,    0,  344,  351,    0,  355,  358,  358,    0,  341,
      348,  347,  359,  359,  360,  360,  346,    0,  344,  361,
      361,  362,  362,  358,  364,  364,  363,  363,    0,  349,
      350,    0,  353,  365,  365,  366,  366,  367,  367,    0,
      357,    0,  354,  368,  368,    0,  356,  369,  369,  370,
      370,  371,  371,  372,  372,  373,  373,  374,  374,  375,
      375,  377,  377,    0,  378,  378,  379,  379,  372,  361,

      360,  363,  380,  380,  374,  373,    0,  362,  370,  382,
      382,  390,  390,  367,  363,    0,  364,  381,  381,  366,
      369,  383,  383,  384,  384,  386,  386,    0,  369,    0,
      368,  387,  387,  385,  385,    0,  375,  388,  388,  369,
      376,  376,  390,  392,  392,  376,  393,  393,  389,  389,
      379,  377,  378,  376,  376,  376,  377,  376,  385,  380,
      389,    0,  381,  376,    0,  376,    0,  376,    0,  383,
      376,  376,  382,  376,  376,  391,  391,    0,  387,  394,
      394,  384,  388,  386,  395,  395,  396,  396,  397,  397,
      398,  398,    0,  388,  399,  399,  400,  400,  401,  401,

        0,  391,  402,  402,  392,  403,  403,  393,  404,  404,
      405,  405,  406,  406,  397,  407,  407,  408,  408,  409,
      409,  410,  410,  411,  411,  412,  412,  413,  413,  414,
      414,  415,  415,  416,  416,  398,    0,  417,  417,    0,
      394,  418,  418,  419,  419,  398,  401,  396,  420,  420,
      399,  404,  400,    0,  421,  421,  422,  422,    0,  402,
      423,  423,  424,  424,    0,  407,  403,    0,  411,  409,
      406,  405,    0,  408,  413,    0,  414,  425,  425,  426,
      426,  416,  427,  427,    0,  410,  428,  428,  429,  429,
      412,  417,    0,  415,  430,  430,  431,  431,  432,  432,

      433,  433,  418,  434,  434,  423,  435,  435,  436,  436,
      420,  421,    0,  424,  437,  437,  439,  439,  438,  438,
        0,  425,  440,  440,  441,  441,  442,  442,  427,  443,
      443,  444,  444,  445,  445,  429,    0,  426,  446,  446,
      447,  447,  448,  448,  428,  449,  449,  450,  450,  435,
        0,  451,  451,  431,  452,  452,  430,  433,    0,  439,
      435,  453,  453,  454,  454,  434,    0,  435,  436,  438,
      455,  455,  456,  456,  457,  457,  456,  458,  458,    0,
      443,    0,  442,  447,  459,  459,  460,  460,  445,    0,
      449,  461,  461,    0,  446,  462,  462,    0,  448,  463,

      463,  450,  451,    0,  464,  464,    0,  453,  467,  467,
      454,  465,  465,  468,  468,  456,  452,  466,  466,  470,
      470,  455,  469,  469,  458,  471,  471,  472,  472,    0,
      457,  473,  473,  460,  474,  474,    0,  461,  475,  475,
      459,    0,  462,  476,  476,  477,  477,  478,  478,  479,
      479,  480,  480,  462,  464,    0,  465,  462,    0,  462,
      481,  481,  482,  482,  463,  483,  483,    0,  466,    0,
      467,  468,  481,  469,  481,  481,    0,  481,  473,    0,
      481,  484,  484,    0,  481,  486,  486,  481,  472,    0,
      481,  487,  487,    0,  481,    0,  477,  488,  488,  489,

      489,  490,  490,  491,  491,    0,  480,  492,  492,    0,
      479,  493,  493,  494,  494,  495,  495,  496,  496,  483,
      497,  497,  498,  498,  482,  499,  499,    0,  486,    0,
      500,  500,  501,  501,  502,  502,  503,  503,  487,  505,
      505,  488,  504,  504,  484,  506,  506,    0,  490,  507,
      507,  508,  508,    0,  492,    0,  509,  509,  510,  510,
      491,  489,  505,    0,  496,  511,  511,    0,  497,  512,
      512,    0,  493,    0,  510,  508,  498,  500,  513,  513,
        0,  502,  495,  514,  514,  504,  499,  515,  515,  516,
      516,  502,  517,  517,    0,  501,  518,  518,  503,  519,

      519,  520,  520,  521,  521,    0,  507,  522,  522,  506,
      509,    0,  518,  523,  523,    0,  520,  524,  524,  511,
      512,  525,  525,  517,  526,  526,  527,  527,  528,  528,
      529,  529,  530,  530,  531,  531,  532,  532,  513,    0,
      516,  514,    0,  515,  533,  533,  534,  534,  535,  535,
      521,  536,  536,  537,  537,  538,  538,  539,  539,    0,
      533,  540,  540,  535,  522,    0,  532,  526,  541,  541,
      527,  543,  543,  528,  524,    0,  525,  542,  542,  523,
      544,  544,  536,  546,  546,  531,  545,  545,  547,  547,
      529,  548,  548,  534,  550,  550,  543,  549,  549,    0,

      543,    0,  546,  551,  551,  552,  552,    0,  550,  553,
      553,  554,  554,  537,  539,  538,  555,  555,  556,  556,
      542,  557,  557,    0,  540,    0,  558,  558,  559,  559,
      560,  560,    0,  555,  544,  562,  562,  545,  563,  563,
      549,  558,  561,  561,  564,  564,  551,  565,  565,  567,
      567,    0,  548,  566,  566,    0,  561,  568,  568,  561,
        0,  552,    0,  553,  569,  569,  570,  570,  557,  558,
        0,  561,    0,  554,  571,  571,  569,  572,  572,    0,
      556,  560,  568,    0,  566,  573,  573,  574,  574,  571,
      565,  567,    0,  563,  576,  576,  570,  575,  575,  562,

      577,  577,  578,  578,  579,  579,    0,  580,  580,  581,
      581,    0,  564,  582,  582,  583,  583,  584,  584,    0,
      572,  585,  585,  586,  586,  587,  587,  588,  588,  590,
      590,  589,  589,    0,  574,    0,  591,  591,  592,  592,
      593,  593,  573,  577,  593,  576,    0,  584,  573,  591,
        0,  575,  594,  594,  595,  595,  581,  596,  596,  597,
      597,    0,  578,    0,  582,    0,  579,  580,  592,    0,
      586,    0,  590,    0,  588,  585,  589,  583,  598,  598,
      599,  599,  594,  600,  600,  601,  601,  587,  597,  602,
      602,  603,  603,  604,  604,  605,  605,  606,  606,  607,

      607,  595,  608,  608,  609,  609,  610,  610,    0,  599,
      604,  611,  611,  612,  612,  613,  613,    0,  596,    0,
      614,  614,  615,  615,  616,  616,  617,  617,  618,  618,
        0,  619,  619,  620,  620,  621,  621,  622,  622,    0,
      606,  623,  623,  624,  624,  625,  625,  620,  626,  626,
        0,  610,  627,  627,  628,  628,  629,  629,  630,  630,
      631,  631,  613,  614,  632,  632,  612,    0,  633,  633,
        0,  618,    0,  611,  634,  634,    0,  617,  635,  635,
      636,  636,    0,  614,  637,  637,  616,  619,  638,  638,
        0,  621,  619,  639,  639,  640,  640,  641,  641,  627,

      624,  642,  642,  631,  643,  643,  644,  644,  623,    0,
      626,  645,  645,  630,  628,  646,  646,    0,  632,  633,
      647,  647,    0,  648,  648,  649,  649,  650,  650,  651,
      651,  652,  652,  653,  653,  654,  654,  636,  655,  655,
      656,  656,  657,  657,  637,  658,  658,  643,  641,  660,
      660,    0,  659,  659,    0,  640,    0,  639,  661,  661,
      662,  662,  644,  647,  642,  645,  648,  659,  663,  663,
      664,  664,  648,  665,  665,  666,  666,  667,  667,  668,
      668,  669,  669,    0,  653,  657,    0,  650,  670,  670,
      654,  651,  671,  671,  672,  672,  673,  673,  674,  674,

        0,  658,  675,  675,  661,  676,  676,  677,  677,    0,
      663,  660,    0,  677,  678,  678,  664,  679,  679,    0,
      665,  680,  680,  681,  681,  682,  682,    0,  669,  683,
      683,  666,  684,  684,  667,  685,  685,    0,  669,  668,
        0,  672,  686,  686,  687,  687,  688,  688,    0,  689,
      689,    0,  673,    0,  690,  690,  691,  691,  693,  693,
      676,  692,  692,    0,  687,  695,  695,  696,  696,  697,
      697,  679,  698,  698,    0,  678,  704,  704,  685,  684,
        0,  682,    0,  684,  699,  699,    0,  687,    0,  683,
        0,  687,  701,  701,  702,  702,    0,  700,  700,  699,

      689,  703,  703,  686,  689,  690,  688,    0,  692,  705,
      705,  700,  700,  706,  706,  707,  707,  703,  708,  708,
      700,  697,  700,  696,  693,    0,  700,  700,  695,  709,
      709,  700,  710,  710,    0,  698,  704,    0,  711,  711,
      701,  702,  712,  712,  713,  713,  714,  714,  716,  716,
      715,  715,  717,  717,  718,  718,  705,  719,  719,    0,
      706,    0,  714,  720,  720,  721,  721,  722,  722,  723,
      723,  724,  724,    0,  708,  724,  724,  725,  725,  726,
      726,  727,  727,  728,  728,  729,  729,  730,  730,  712,
        0,  709,  711,  715,  731,  731,    0,  718,  710,  717,

      719,  732,  732,    0,  716,    0,  713,  733,  733,  734,
      734,  735,  735,  736,  736,    0,  723,  737,  737,  721,
      720,  726,  738,  738,  722,  739,  739,    0,  729,    0,
      740,  740,  725,    0,  728,  741,  741,  742,  742,  743,
      743,  744,  744,    0,  730,  740,    0,  727,  745,  745,
      733,  746,  746,  747,  747,    0,  731,  748,  748,    0,
      737,  732,    0,  735,  734,  738,  749,  749,  750,  750,
      751,  751,  739,  736,  752,  752,  753,  753,  754,  754,
      755,  755,    0,  756,  756,    0,  751,    0,  742,    0,
      743,    0,  757,  757,  758,  758,  759,  759,    0,  744,

      760,  760,  748,  761,  761,  763,  763,  746,  762,  762,
      745,  764,  764,  747,  756,  750,  765,  765,    0,  753,
      767,  767,  766,  766,  768,  768,  769,  769,    0,  749,
      770,  770,  762,    0,  755,  771,  771,  772,  772,  754,
      752,  757,  773,  773,  774,  774,  775,  775,  777,  777,
        0,  767,  776,  776,  764,    0,  758,  778,  778,  759,
      779,  779,  777,  761,    0,  765,  763,  766,    0,  769,
      776,    0,  779,  780,  780,  781,  781,  770,  768,  782,
      782,  783,  783,    0,  772,  784,  784,  785,  785,  786,
      786,  788,  788,  771,  787,  787,    0,  789,  789,  790,

      790,    0,  773,  792,  792,  775,  791,  791,  793,  793,
      794,  794,  795,  795,  796,  796,  797,  797,  780,  778,
      798,  798,  799,  799,    0,  783,  800,  800,  801,  801,
      781,    0,  803,  803,  788,    0,  785,  802,  802,  782,
      789,  804,  804,  797,  786,  801,  805,  805,  784,  802,
      792,  787,  806,  806,    0,  793,    0,  794,    0,  790,
      807,  807,  791,    0,  796,  808,  808,  799,  804,  809,
      809,  804,  810,  810,  795,  811,  811,  812,  812,  808,
      813,  813,  798,  814,  814,  815,  815,  816,  816,  800,
      803,  807,  817,  817,  805,  818,  818,    0,  808,  819,

      819,  820,  820,    0,  821,  821,  822,  822,  823,  823,
      824,  824,  825,  825,  826,  826,    0,  811,  821,  827,
      827,  828,  828,  829,  829,  830,  830,    0,  831,  831,
      832,  832,  810,  833,  833,  809,  834,  834,  835,  835,
      836,  836,    0,  814,  837,  837,    0,  815,  820,  838,
      838,  823,    0,  817,    0,  818,  819,  839,  839,  840,
      840,  841,  841,    0,  828,  840,  842,  842,  822,    0,
      824,  843,  843,  825,  826,  831,    0,  829,    0,  834,
      844,  844,  830,  845,  845,  835,    0,  846,  846,  840,
      847,  847,  848,  848,    0,  833,  836,  849,  849,  850,

      850,  840,  851,  851,  837,  852,  852,  853,  853,  854,
      854,  838,  856,  856,  840,  855,  855,  841,    0,  839,
      842,  857,  857,  858,  858,  859,  859,  844,  860,  860,
        0,  843,  846,  847,  861,  861,  862,  862,    0,  845,
      863,  863,    0,  849,  865,  865,  866,  866,    0,  851,
      867,  867,  868,  868,  848,  853,  871,  871,  856,  869,
      869,  870,  870,  872,  872,    0,  858,  873,  873,    0,
      859,    0,  854,  874,  874,  855,    0,  875,  875,  876,
      876,    0,  857,  863,    0,  877,  877,  878,  878,  865,
      879,  879,  873,    0,  860,  880,  880,    0,  862,  868,

        0,  867,  881,  881,  869,    0,  870,  882,  882,  883,
      883,  884,  884,  885,  885,  886,  886,  871,  887,  887,
      872,    0,  870,  875,  888,  888,  889,  889,  890,  890,
      891,  891,    0,  874,  877,    0,  876,  893,  893,    0,
      892,  892,  894,  894,  878,    0,  879,  895,  895,  897,
      897,  888,  887,    0,  896,  896,    0,  890,  884,  885,
      898,  898,  899,  899,  900,  900,  886,  895,  882,  892,
      901,  901,  883,  889,    0,  902,  902,  903,  903,    0,
      904,  904,  899,    0,  893,    0,  899,  905,  905,  906,
      906,  907,  907,  891,  902,  892,  904,  904,    0,  894,

      896,  908,  908,  909,  909,  910,  910,  911,  911,  912,
      912,  913,  913,  904,  914,  914,    0,  901,  915,  915,
      898,  916,  916,  917,  917,    0,  900,    0,  918,  918,
      919,  919,  920,  920,  921,  921,  916,    0,  917,  922,
      922,  903,  923,  923,  924,  924,  909,    0,  925,  925,
      905,  926,  926,  907,  913,  929,  929,  908,  927,  927,
      914,  928,  928,  919,  930,  930,    0,  911,  931,  931,
      912,    0,  910,    0,  915,  918,  932,  932,  933,  933,
      934,  934,  921,  920,    0,  922,  935,  935,  936,  936,
        0,  924,  937,  937,  938,  938,  939,  939,  940,  940,

      926,    0,  923,  925,    0,  927,  929,  933,  928,  941,
      941,    0,  942,  942,  943,  943,  944,  944,  945,  945,
      930,  932,    0,  934,  931,  946,  946,  948,  948,    0,
      947,  947,  949,  949,  950,  950,  951,  951,  952,  952,
        0,  935,  953,  953,  939,  936,    0,  947,    0,  940,
        0,  950,  954,  954,  955,  955,  938,  942,  956,  956,
        0,  950,  957,  957,  941,    0,  958,  958,  946,  959,
      959,    0,  945,  960,  960,  961,  961,  950,  958,  949,
      943,  947,  962,  962,    0,  953,  963,  963,  964,  964,
      965,  965,  966,  966,    0,  952,  967,  967,  968,  968,

        0,  956,  951,  969,  969,    0,  970,  970,    0,  957,
      955,    0,  967,  954,  971,  971,  972,  972,  973,  973,
      974,  974,    0,  975,  975,    0,  959,  976,  976,  977,
      977,  978,  978,  979,  979,  965,  962,    0,  960,  980,
      980,  981,  981,  982,  982,  983,  983,    0,  984,  984,
      964,  985,  985,    0,  986,  986,  987,  987,  968,  970,
      988,  988,    0,  969,  989,  989,  990,  990,  991,  991,
        0,  974,  971,  975,  976,  984,  972,  986,  977,  992,
      992,  973,    0,  980,  993,  993,    0,  981,    0,  979,
      983,  988,    0,  978,  991,  994,  994,  995,  995,  996,

      996,  997,  997,    0,  982,  998,  998,    0,  985,  999,
      999,  989,    0,  987,  990, 1000, 1000, 1001, 1001, 1002,
     1002, 1003, 1003, 1004, 1004, 1005, 1005, 1006, 1006, 1007,
     1007,  993,    0,  992, 1008, 1008, 1009, 1009,  994, 1010,
     1010,    0,  995, 1011, 1011, 1012, 1012, 1013, 1013, 1014,
     1014,    0,  999, 1015, 1015,    0,  996,    0, 1016, 1016,
     1017, 1017,  998,    0, 1016, 1018, 1018, 1002, 1003,    0,
     1004, 1019, 1019,    0, 1001, 1020, 1020, 1021, 1021, 1008,
     1022, 1022, 1023, 1023, 1024, 1024,    0, 1005, 1006, 1007,
     1025, 1025, 1027, 1027, 1028, 1028, 1029, 1029,    0, 1010,

     1016,    0, 1015, 1011, 1030, 1030,    0, 1027, 1031, 1031,
     1032, 1032,    0, 1019, 1033, 1033, 1034, 1034, 1035, 1035,
     1021, 1018, 1017, 1036, 1036, 1037, 1037, 1022,    0, 1020,
     1023, 1024, 1038, 1038, 1039, 1039,    0, 1025, 1040, 1040,
     1041, 1041,    0, 1029, 1042, 1042, 1043, 1043, 1044, 1044,
     1028, 1045, 1045, 1032, 1046, 1046,    0, 1033,    0, 1031,
        0, 1047, 1047, 1048, 1048, 1049, 1049, 1051, 1051, 1052,
     1052,    0, 1036,    0, 1053, 1053,    0, 1054, 1054, 1055,
     1055, 1056, 1056, 1057, 1057, 1058, 1058, 1059, 1059, 1060,
     1060,    0, 1040, 1042, 1041, 1061, 1061, 1043,    0, 1058,

        0, 1059, 1062, 1062,    0, 1063, 1063, 1045, 1047, 1064,
     1064, 1065, 1065,    0, 1049,    0, 1046, 1053, 1066, 1066,
     1067, 1067, 1068, 1068, 1069, 1069,    0, 1051, 1054,    0,
     1052, 1070, 1070,    0, 1060,    0, 1055, 1071, 1071, 1072,
     1072, 1073, 1073, 1056,    0, 1057, 1061, 1074, 1074,    0,
     1067, 1072, 1075, 1075, 1077, 1077,    0, 1065,    0, 1074,
     1062, 1063, 1076, 1076, 1078, 1078, 1064, 1068, 1079, 1079,
        0, 1069, 1080, 1080, 1076, 1081, 1081, 1083, 1083, 1066,
     1082, 1082, 1085, 1085, 1082, 1084, 1084,    0, 1073, 1086,
     1086,    0, 1070, 1087, 1087, 1082, 1089, 1089, 1075, 1088,

     1088, 1086,    0, 1090, 1090, 1091, 1091, 1092, 1092, 1093,
     1093, 1077, 1094, 1094,    0, 1078, 1095, 1095, 1096, 1096,
     1097, 1097, 1098, 1098, 1081, 1099, 1099, 1080, 1079, 1100,
     1100, 1101, 1101, 1083, 1102, 1102, 1084, 1096, 1103, 1103,
     1104, 1104,    0, 1085, 1106, 1106, 1088, 1105, 1105,    0,
     1089,    0, 1091, 1107, 1107,    0, 1087, 1090,    0, 1094,
     1093,    0, 1091, 1105, 1108, 1108,    0, 1092,    0, 1098,
     1109, 1109, 1095, 1110, 1110,    0, 1100, 1111, 1111, 1112,
     1112,    0, 1097, 1113, 1113, 1114, 1114, 1099, 1115, 1115,
     1116, 1116,    0, 1117, 1117, 1118, 1118,    0, 1119, 1119,

        0, 1107, 1120, 1120,    0, 1106, 1121, 1121,    0, 1117,
     1119, 1122, 1122, 1123, 1123,    0, 1109, 1117, 1124, 1124,
     1111, 1125, 1125, 1126, 1126,    0, 1112, 1127, 1127, 1110,
     1114, 1128, 1128, 1124, 1129, 1129, 1130, 1130, 1131, 1131,
     1132, 1132, 1133, 1133, 1134, 1134, 1115, 1135, 1135, 1136,
     1136, 1116,    0, 1121, 1138, 1138, 1120, 1118, 1137, 1137,
     1139, 1139, 1140, 1140, 1125, 1122,    0, 1126, 1141, 1141,
     1123, 1142, 1142, 1143, 1143, 1144, 1144,    0, 1140, 1145,
     1145,    0, 1129,    0, 1127, 1130, 1146, 1146, 1137, 1131,
     1147, 1147,    0, 1128,    0, 1134,    0, 1140, 1144, 1148,

     1148, 1149, 1149,    0, 1135,    0, 1146,    0, 1132, 1138,
        0, 1136, 1150, 1150, 1151, 1151, 1152, 1152,    0, 1141,
     1153, 1153, 1139, 1154, 1154, 1155, 1155, 1157, 1157,    0,
     1148, 1158, 1158, 1142, 1156, 1156,    0, 1147, 1159, 1159,
     1160, 1160, 1161, 1161, 1145, 1162, 1162, 1163, 1163,    0,
     1164, 1164, 1165, 1165, 1166, 1166, 1167, 1167, 1149, 1168,
     1168, 1169, 1169, 1170, 1170, 1172, 1172, 1174, 1174, 1153,
     1171, 1171, 1155, 1157, 1173, 1173, 1152, 1151, 1175, 1175,
     1154, 1176, 1176, 1156, 1177, 1177, 1178, 1178, 1179, 1179,
     1180, 1180,    0, 1158, 1181, 1181, 1174, 1182, 1182,    0,

     1160, 1183, 1183,    0, 1163, 1161, 1162, 1164, 1184, 1184,
     1186, 1186, 1169, 1167, 1165, 1168, 1166, 1171, 1185, 1185,
     1187, 1187, 1173,    0, 1170, 1188, 1188, 1189, 1189, 1178,
     1190, 1190, 1185, 1191, 1191, 1194, 1194, 1176, 1192, 1192,
     1175, 1195, 1195,    0, 1177, 1196, 1196,    0, 1179,    0,
     1180, 1197, 1197,    0, 1181, 1182, 1198, 1198, 1183, 1199,
     1199, 1200, 1200, 1199, 1201, 1201,    0, 1186, 1202, 1202,
     1203, 1203,    0, 1189, 1205, 1205, 1206, 1206, 1205,    0,
     1188, 1190, 1191, 1207, 1207, 1192, 1208, 1208, 1209, 1209,
        0, 1194, 1210, 1210, 1211, 1211, 1212, 1212,    0, 1197,

     1213, 1213, 1214, 1214, 1216, 1216, 1201, 1196, 1215, 1215,
     1217, 1217, 1218, 1218,    0, 1197, 1197, 1219, 1219, 1198,
     1221, 1221,    0, 1206, 1222, 1222, 1207, 1223, 1223,    0,
     1203, 1224, 1224,    0, 1209, 1225, 1225, 1226, 1226, 1227,
     1227, 1211, 1228, 1228, 1229, 1229,    0, 1213, 1230, 1230,
        0, 1215,    0, 1212, 1208, 1232, 1232, 1231, 1231, 1233,
     1233,    0, 1214, 1227, 1219, 1216, 1218, 1217, 1234, 1234,
     1232, 1235, 1235, 1229, 1237, 1237,    0, 1221, 1236, 1236,
        0, 1222, 1238, 1238, 1239, 1239, 1224,    0, 1239, 1223,
     1225, 1240, 1240, 1241, 1241, 1242, 1242,    0, 1230, 1228,

     1231, 1243, 1243, 1236, 1244, 1244, 1233, 1242, 1241, 1245,
     1245, 1246, 1246, 1247, 1247,    0, 1243, 1248, 1248, 1237,
     1249, 1249, 1250, 1250, 1245, 1251, 1251,    0, 1235,    0,
     1234, 1252, 1252, 1253, 1253, 1254, 1254, 1255, 1255,    0,
     1251,    0, 1256, 1256, 1238, 1257, 1257, 1258, 1258, 1259,
     1259, 1260, 1260, 1240,    0, 1244, 1261, 1261, 1247, 1262,
     1262,    0, 1252, 1249, 1263, 1263, 1264, 1264, 1246, 1250,
        0, 1258, 1265, 1265, 1266, 1266, 1267, 1267, 1248, 1268,
     1268, 1269, 1269,    0, 1270, 1270, 1271, 1271, 1266, 1273,
     1273, 1254, 1272, 1272, 1260, 1253, 1256, 1274, 1274, 1257,

        0, 1261,    0, 1259, 1275, 1275, 1272, 1276, 1276, 1277,
     1277, 1263,    0, 1262,    0, 1278, 1278, 1265, 1279, 1279,
     1280, 1280, 1281, 1281, 1282, 1282,    0, 1267,    0, 1268,
     1264, 1270, 1278, 1283, 1283, 1284, 1284,    0, 1285, 1285,
     1286, 1286, 1287, 1287, 1288, 1288, 1289, 1289, 1290, 1290,
        0, 1273, 1291, 1291,    0, 1275,    0, 1282, 1292, 1292,
     1274, 1293, 1293, 1294, 1294, 1295, 1295, 1296, 1296, 1276,
     1281, 1277, 1285, 1297, 1297,    0, 1283, 1298, 1298,    0,
     1279,    0, 1280, 1299, 1299,    0, 1284, 1288, 1300, 1300,
     1301, 1301, 1302, 1302,    0, 1295,    0, 1286,    0, 1290,

     1303, 1303, 1304, 1304,    0, 1292, 1305, 1305, 1291, 1289,
     1306, 1306, 1307, 1307, 1296, 1303,    0, 1293, 1308, 1308,
     1297, 1309, 1309, 1294, 1298,    0, 1306, 1310, 1310,    0,
     1299, 1311, 1311, 1303, 1312, 1312,    0, 1302, 1313, 1313,
        0, 1301,    0, 1314, 1314,    0, 1315, 1315,    0, 1300,
     1316, 1316, 1317, 1317, 1318, 1318,    0, 1312,    0, 1307,
     1319, 1319, 1304, 1321, 1321,    0, 1320, 1320,    0, 1308,
     1305,    0, 1309, 1323, 1323, 1324, 1324, 1325, 1325, 1326,
     1326, 1322, 1322, 1327, 1327,    0, 1311,    0, 1321, 1313,
     1314, 1315, 1320, 1322, 1328, 1328, 1322,    0, 1329, 1329,

     1330, 1330, 1331, 1331, 1332, 1332, 1331, 1316, 1322,    0,
     1318, 1322, 1317, 1333, 1333,    0, 1319, 1334, 1334,    0,
     1323, 1328, 1335, 1335,    0, 1325, 1336, 1336, 1337, 1337,
     1338, 1338, 1339, 1339, 1340, 1340, 1324, 1342, 1342,    0,
     1326, 1341, 1341, 1343, 1343, 1344, 1344, 1343, 1327, 1329,
     1336, 1330, 1345, 1345, 1346, 1346, 1347, 1347, 1348, 1348,
     1332, 1349, 1349,    0, 1350, 1350, 1351, 1351, 1346, 1335,
     1352, 1352,    0, 1334, 1354, 1354, 1355, 1355,    0, 1337,
     1356, 1356, 1357, 1357, 1358, 1358, 1359, 1359, 1360, 1360,
     1340,    0, 1338, 1339, 1361, 1361, 1341, 1342, 1362, 1362,

     1364, 1364,    0, 1360, 1365, 1365,    0, 1348, 1349, 1350,
     1366, 1366, 1345, 1367, 1367, 1368, 1368, 1369, 1369, 1370,
     1370, 1354, 1371, 1371, 1372, 1372,    0, 1351, 1373, 1373,
        0, 1356,    0, 1359,    0, 1358, 1374, 1374, 1375, 1375,
     1376, 1376, 1377, 1377, 1357, 1361, 1378, 1378, 1380, 1380,
     1379, 1379, 1382, 1382, 1361,    0, 1362, 1381, 1381,    0,
     1367,    0, 1370, 1383, 1383,    0, 1366, 1372, 1379, 1365,
     1384, 1384, 1385, 1385, 1386, 1386, 1387, 1387, 1388, 1388,
        0, 1382, 1389, 1389, 1373, 1390, 1390, 1391, 1391,    0,
     1374, 1392, 1392, 1393, 1393, 1380, 1394, 1394, 1375,    0,

     1381, 1376, 1395, 1395, 1396, 1396, 1383, 1378, 1397, 1397,
     1398, 1398, 1397, 1399, 1399, 1400, 1400, 1402, 1402, 1385,
        0, 1388,    0, 1401, 1401, 1386, 1384, 1401, 1389, 1395,
     1403, 1403, 1387, 1405, 1405, 1390, 1404, 1404,    0, 1406,
     1406, 1407, 1407, 1408, 1408, 1409, 1409,    0, 1392, 1410,
     1410, 1404, 1391, 1393, 1406,    0, 1398, 1411, 1411, 1412,
     1412, 1409, 1413, 1413, 1414, 1414, 1404, 1415, 1415, 1410,
        0, 1400, 1407, 1416, 1416, 1409, 1417, 1417,    0, 1402,
     1418, 1418, 1405, 1403, 1419, 1419, 1420, 1420, 1421, 1421,
        0, 1422, 1422, 1423, 1423, 1424, 1424, 1425, 1425, 1426,

     1426, 1427, 1427, 1428, 1428, 1413,    0, 1423, 1429, 1429,
     1430, 1430,    0, 1412,    0, 1414, 1431, 1431,    0, 1411,
     1432, 1432, 1433, 1433, 1434, 1434, 1435, 1435, 1425, 1415,
        0, 1419, 1436, 1436,    0, 1416, 1437, 1437,    0, 1417,
        0, 1418, 1438, 1438,    0, 1432, 1439, 1439, 1420, 1440,
     1440, 1421, 1422, 1441, 1441, 1442, 1442, 1443, 1443, 1428,
     1426,    0, 1427, 1444, 1444, 1445, 1445, 1446, 1446, 1435,
     1447, 1447, 1448, 1448, 1449, 1449, 1431, 1450, 1450, 1451,
     1451, 1434,    0, 1433, 1452, 1452,    0, 1448, 1453, 1453,
        0, 1454, 1454, 1437, 1436, 1439, 1455, 1455,    0, 1456,

     1456, 1457, 1457, 1458, 1458, 1459, 1459, 1460, 1460, 1461,
     1461, 1440,    0, 1441, 1446,    0, 1442, 1462, 1462, 1463,
     1463, 1447,    0, 1444, 1464, 1464, 1445,    0, 1449, 1465,
     1465, 1466, 1466, 1451, 1454, 1452, 1467, 1467, 1468, 1468,
     1469, 1469, 1470, 1470,    0, 1453, 1456, 1455, 1471, 1471,
     1458,    0, 1457, 1472, 1472,    0, 1473, 1473, 1474, 1474,
        0, 1460, 1463, 1475, 1475,    0, 1461, 1476, 1476, 1459,
     1477, 1477,    0, 1462,    0, 1464, 1478, 1478,    0, 1466,
     1479, 1479, 1480, 1480, 1465, 1481, 1481, 1482, 1482, 1470,
     1483, 1483, 1484, 1484, 1485, 1485,    0, 1469, 1467, 1473,

        0, 1472,    0, 1468, 1486, 1486, 1487, 1487,    0, 1472,
     1471, 1479,    0, 1474, 1475, 1488, 1488, 1482, 1489, 1489,
     1490, 1490, 1491, 1491, 1476, 1492, 1492,    0, 1477, 1493,
     1493,    0, 1481, 1483, 1494, 1494,    0, 1478,    0, 1480,
     1495, 1495, 1496, 1496, 1497, 1497, 1496, 1498, 1498, 1484,
     1485, 1499, 1499, 1487, 1500, 1500, 1501, 1501, 1486, 1497,
     1502, 1502, 1503, 1503, 1505, 1505, 1506, 1506, 1507, 1507,
        0, 1508, 1508, 1509, 1509,    0, 1488,    0, 1489,    0,
     1493, 1510, 1510,    0, 1491, 1511, 1511, 1512, 1512,    0,
     1494, 1513, 1513, 1514, 1514, 1515, 1515, 1516, 1516, 1515,

     1517, 1517, 1498, 1518, 1518, 1519, 1519, 1520, 1520, 1521,
     1521, 1502, 1522, 1522, 1500,    0, 1501, 1523, 1523,    0,
     1506, 1507, 1508, 1524, 1524, 1525, 1525, 1526, 1526, 1505,
     1512,    0, 1527, 1527, 1528, 1528,    0, 1511, 1529, 1529,
        0, 1511, 1525, 1530, 1530, 1531, 1531, 1532, 1532, 1518,
     1520,    0, 1532, 1524, 1533, 1533, 1534, 1534, 1535, 1535,
        0, 1519, 1517, 1522, 1536, 1536, 1537, 1537,    0, 1534,
     1538, 1538,    0, 1534, 1539, 1539, 1540, 1540, 1523, 1527,
     1541, 1541, 1542, 1542, 1543, 1543, 1530, 1544, 1544, 1526,
        0, 1545, 1545,    0, 1528,    0, 1546, 1546, 1547, 1547,

     1529, 1531, 1548, 1548, 1549, 1549, 1542, 1550, 1550,    0,
     1533, 1536,    0, 1547, 1551, 1551,    0, 1537, 1552, 1552,
        0, 1538, 1553, 1553, 1554, 1554, 1541, 1546, 1555, 1555,
        0, 1539, 1556, 1556, 1557, 1557,    0, 1544, 1545, 1558,
     1558, 1559, 1559,    0, 1560, 1560, 1561, 1561,    0, 1548,
        0, 1549, 1562, 1562, 1563, 1563, 1564, 1564, 1565, 1565,
     1566, 1566,    0, 1558, 1552, 1567, 1567, 1568, 1568,    0,
     1569, 1569, 1570, 1570,    0, 1554, 1571, 1571, 1553,    0,
     1551, 1572, 1572, 1574, 1574, 1573, 1573, 1575, 1575, 1576,
     1576, 1567, 1557, 1556, 1577, 1577, 1578, 1578, 1559, 1560,

     1573, 1579, 1579, 1580, 1580, 1563, 1581, 1581, 1582, 1582,
     1583, 1583,    0, 1562,    0, 1570, 1564, 1566, 1584, 1584,
     1565, 1569, 1585, 1585, 1572, 1586, 1586,    0, 1587, 1587,
     1580, 1588, 1588, 1571, 1589, 1589, 1590, 1590,    0, 1591,
     1591, 1575,    0, 1574, 1592, 1592, 1593, 1593, 1579, 1576,
     1577,    0, 1594, 1594, 1595, 1595, 1596, 1596, 1597, 1597,
     1598, 1598, 1599, 1599, 1600, 1600, 1601, 1601, 1581,    0,
     1602, 1602,    0, 1584, 1587,    0, 1586, 1588, 1603, 1603,
     1604, 1604, 1606, 1606, 1605, 1605, 1607, 1607, 1608, 1608,
     1585, 1593, 1590, 1591, 1610, 1610, 1589, 1594, 1609, 1609,

     1611, 1611,    0, 1596,    0, 1592, 1612, 1612,    0, 1599,
     1595, 1605,    0, 1600, 1608,    0, 1598, 1602,    0, 1597,
     1613, 1613, 1601, 1614, 1614,    0, 1603, 1615, 1615, 1616,
     1616, 1617, 1617, 1618, 1618, 1619, 1619, 1620, 1620, 1621,
     1621,    0, 1607, 1604,    0, 1606, 1609, 1622, 1622,    0,
     1612, 1623, 1623, 1624, 1624, 1625, 1625, 1626, 1626, 1627,
     1627, 1619, 1628, 1628, 1611, 1629, 1629,    0, 1613, 1632,
     1632, 1630, 1630,    0, 1615,    0, 1631, 1631, 1617,    0,
     1633, 1633, 1635, 1635, 1614, 1634, 1634,    0, 1620,    0,
     1616, 1631,    0, 1618, 1636, 1636, 1637, 1637, 1638, 1638,

        0, 1621,    0, 1622, 1624, 1639, 1639, 1640, 1640, 1641,
     1641, 1642, 1642, 1623, 1626,    0, 1625, 1643, 1643,    0,
     1627, 1629, 1630, 1633,    0, 1628, 1644, 1644, 1634, 1645,
     1645, 1635, 1646, 1646, 1647, 1647, 1646, 1648, 1648, 1649,
     1649, 1650, 1650, 1651, 1651,    0, 1652, 1652, 1653, 1653,
     1654, 1654, 1655, 1655, 1656, 1656, 1636, 1657, 1657,    0,
     1638,    0, 1641, 1658, 1658, 1659, 1659, 1660, 1660, 1661,
     1661,    0, 1662, 1662,    0, 1642, 1663, 1663, 1643,    0,
     1659, 1647, 1664, 1664, 1665, 1665, 1666, 1666, 1667, 1667,
     1668, 1668, 1667, 1654,    0, 1653, 1662, 1655,    0, 1648,

     1652, 1669, 1669, 1657, 1670, 1670,    0, 1649, 1671, 1671,
        0, 1656, 1658, 1672, 1672, 1673, 1673,    0, 1660, 1669,
     1674, 1674, 1663, 1675, 1675,    0, 1661, 1677, 1677, 1676,
     1676, 1678, 1678, 1679, 1679, 1680, 1680, 1681, 1681, 1682,
     1682,    0, 1665, 1664, 1672, 1676,    0, 1666, 1683, 1683,
     1684, 1684,    0, 1668, 1685, 1685, 1686, 1686, 1687, 1687,
     1688, 1688, 1689, 1689, 1670, 1690, 1690,    0, 1675, 1691,
     1691, 1692, 1692, 1693, 1693,    0, 1694, 1694, 1695, 1695,
     1696, 1696, 1674,    0, 1681,    0, 1679, 1697, 1697, 1677,
        0, 1689,    0, 1678,    0, 1683, 1680, 1698, 1698, 1682,

     1699, 1699, 1700, 1700, 1701, 1701, 1702, 1702, 1703, 1703,
     1704, 1704, 1705, 1705,    0, 1687,    0, 1688, 1685,    0,
     1686,    0, 1690, 1706, 1706,    0, 1692, 1694, 1693, 1707,
     1707, 1691,    0, 1695, 1708, 1708, 1709, 1709, 1697, 1710,
     1710, 1711, 1711, 1712, 1712, 1713, 1713, 1715, 1715, 1702,
     1714, 1714,    0, 1704,    0, 1703, 1716, 1716,    0, 1700,
     1717, 1717,    0, 1708, 1718, 1718, 1719, 1719, 1720, 1720,
        0, 1716, 1721, 1721, 1722, 1722, 1723, 1723,    0, 1709,
     1707, 1724, 1724, 1725, 1725, 1726, 1726, 1727, 1727, 1717,
     1712,    0, 1728, 1728,    0, 1729, 1729, 1710,    0, 1730,

     1730, 1731, 1731, 1711, 1732, 1732, 1714, 1713, 1715, 1728,
        0, 1718,    0, 1719, 1733, 1733, 1734, 1734,    0, 1723,
     1735, 1735, 1736, 1736, 1737, 1737, 1738, 1738,    0, 1726,
     1739, 1739, 1740, 1740, 1722, 1741, 1741, 1724, 1742, 1742,
     1743, 1743, 1744, 1744,    0, 1725, 1729, 1730,    0, 1732,
     1745, 1745, 1746, 1746, 1747, 1747, 1748, 1748, 1749, 1749,
     1750, 1750, 1751, 1751, 1752, 1752, 1753, 1753, 1754, 1754,
     1736, 1755, 1755, 1756, 1756, 1735, 1738,    0, 1736, 1757,
     1757,    0, 1734, 1758, 1758, 1759, 1759, 1760, 1760, 1761,
     1761, 1741, 1737, 1740, 1762, 1762, 1745, 1763, 1763,    0,

     1743, 1746, 1764, 1764, 1765, 1765, 1750, 1766, 1766,    0,
     1747, 1767, 1767, 1753, 1768, 1768, 1769, 1769, 1770, 1770,
     1749,    0, 1751, 1771, 1771, 1767, 1772, 1772, 1773, 1773,
        0, 1752, 1761,    0, 1760,    0, 1759,    0, 1771, 1774,
     1774, 1775, 1775, 1763, 1758, 1776, 1776,    0, 1777, 1777,
     1778, 1778, 1764, 1779, 1779,    0, 1772, 1780, 1780, 1781,
     1781, 1782, 1782, 1769, 1783, 1783,    0, 1765, 1784, 1784,
     1785, 1785, 1786, 1786,    0, 1773, 1788, 1788, 1770,    0,
     1778, 1787, 1787, 1789, 1789, 1790, 1790,    0, 1791, 1791,
     1793, 1793, 1775, 1792, 1792, 1794, 1794,    0, 1784, 1795,

     1795, 1774, 1777, 1796, 1796,    0, 1781, 1797, 1797,    0,
     1798, 1798,    0, 1799, 1799, 1779, 1800, 1800, 1801, 1801,
     1802, 1802, 1803, 1803, 1804, 1804, 1805, 1805, 1806, 1806,
     1783, 1807, 1807, 1785, 1808, 1808, 1792, 1788, 1787, 1791,
     1809, 1809, 1810, 1810, 1789, 1798, 1811, 1811, 1812, 1812,
     1813, 1813, 1814, 1814, 1797, 1794, 1815, 1815,    0, 1796,
     1799, 1816, 1816, 1811, 1817, 1817, 1818, 1818, 1819, 1819,
     1820, 1820,    0, 1803, 1821, 1821, 1800, 1808, 1822, 1822,
     1823, 1823, 1806, 1824, 1824,    0, 1802, 1825, 1825, 1826,
     1826, 1827, 1827, 1828, 1828, 1807, 1810, 1829, 1829,    0,

     1809, 1830, 1830, 1831, 1831, 1832, 1832, 1817,    0, 1812,
        0, 1813, 1816, 1815, 1814, 1833, 1833, 1820,    0, 1834,
     1834, 1835, 1835,    0, 1822, 1836, 1836, 1818,    0, 1819,
     1837, 1837, 1838, 1838, 1821, 1824, 1826,    0, 1825, 1834,
     1839, 1839, 1840, 1840, 1841, 1841, 1842, 1842,    0, 1837,
        0, 1831, 1843, 1843, 1827,    0, 1828, 1844, 1844, 1829,
     1845, 1845, 1833, 1846, 1846, 1847, 1847, 1848, 1848, 1849,
     1849,    0, 1836, 1850, 1850, 1851, 1851, 1852, 1852, 1838,
     1853, 1853, 1854, 1854, 1855, 1855,    0, 1856, 1856, 1857,
     1857, 1840, 1858, 1858,    0, 1843, 1859, 1859, 1860, 1860,

     1861, 1861, 1862, 1862, 1863, 1863, 1864, 1864, 1865, 1865,
     1866, 1866, 1867, 1867, 1868, 1868, 1869, 1869, 1870, 1870,
     1845,    0, 1847,    0, 1846,    0, 1851, 1871, 1871, 1872,
     1872, 1849,    0, 1855,    0, 1870, 1854, 1852, 1856,    0,
     1857, 1873, 1873, 1853, 1874, 1874, 1875, 1875, 1876, 1876,
        0, 1864,    0, 1865, 1877, 1877, 1866,    0, 1867,    0,
     1860,    0, 1861, 1878, 1878, 1868, 1869, 1879, 1879, 1880,
     1880, 1881, 1881, 1882, 1882, 1883, 1883, 1884, 1884, 1885,
     1885, 1886, 1886, 1887, 1887, 1888, 1888, 1873,    0, 1871,
        0, 1872, 1889, 1889, 1890, 1890, 1891, 1891, 1892, 1892,

     1893, 1893, 1894, 1894,    0, 1895, 1895, 1875,    0, 1896,
     1896, 1897, 1897, 1898, 1898, 1899, 1899, 1900, 1900,    0,
     1882, 1901, 1901, 1902, 1902, 1880, 1903, 1903, 1881, 1904,
     1904,    0, 1886, 1905, 1905, 1906, 1906, 1883, 1907, 1907,
     1908, 1908, 1909, 1909, 1892, 1910, 1910, 1911, 1911,    0,
     1890, 1895, 1896, 1889, 1912, 1912,    0, 1891, 1913, 1913,
     1914, 1914, 1915, 1915, 1916, 1916, 1917, 1917,    0, 1899,
     1918, 1918,    0, 1900, 1919, 1919,    0, 1902, 1919, 1920,
     1920, 1917, 1901, 1921, 1921,    0, 1915, 1922, 1922,    0,
     1906, 1923, 1923, 1911, 1924, 1924, 1925, 1925,    0, 1907,

     1926, 1926,    0, 1909,    0, 1927, 1927, 1928, 1928, 1929,
     1929, 1930, 1930,    0, 1918, 1912, 1914, 1931, 1931,    0,
     1916, 1927, 1932, 1932, 1933, 1933, 1920, 1934, 1934, 1935,
     1935, 1936, 1936, 1937, 1937, 1919, 1938, 1938,    0, 1939,
     1939,    0, 1923, 1922, 1921, 1940, 1940, 1941, 1941, 1942,
     1942, 1943, 1943,    0, 1928, 1929, 1944, 1944, 1925,    0,
     1945, 1945, 1946, 1946, 1947, 1947, 1948, 1948, 1949, 1949,
        0, 1950, 1950, 1951, 1951, 1952, 1952, 1931, 1945, 1953,
     1953,    0, 1937, 1954, 1954, 1955, 1955, 1933,    0, 1932,
     1939,    0, 1940, 1936, 1956, 1956, 1957, 1957, 1958, 1958,

     1959, 1959, 1960, 1960, 1961, 1961,    0, 1944, 1962, 1962,
        0, 1947,    0, 1943, 1950, 1949, 1951, 1946, 1963, 1963,
     1964, 1964, 1965, 1965, 1966, 1966, 1967, 1967, 1948, 1968,
     1968, 1969, 1969, 1970, 1970,    0, 1971, 1971, 1972, 1972,
     1973, 1973,    0, 1957, 1974, 1974,    0, 1958,    0, 1960,
        0, 1959, 1975, 1975, 1976, 1976, 1977, 1977, 1978, 1978,
     1980, 1980, 1978, 1979, 1979,    0, 1963, 1965,    0, 1962,
     1981, 1981, 1982, 1982, 1983, 1983, 1984, 1984, 1985, 1985,
        0, 1966, 1964, 1967, 1986, 1986, 1987, 1987, 1988, 1988,
     1989, 1989, 1969, 1971, 1970, 1968, 1990, 1990, 1991, 1991,

     1973, 1992, 1992, 1993, 1993, 1974, 1994, 1994, 1995, 1995,
     1977, 1976, 1996, 1996, 1979, 1997, 1997, 1998, 1998, 1988,
     1980, 1999, 1999, 2000, 2000,    0, 2001, 2001, 2002, 2002,
     2003, 2003,    0, 1986, 2004, 2004, 2005, 2005, 1985, 2006,
     2006, 2007, 2007, 2008, 2008, 2011, 2011, 1987, 2009, 2009,
        0, 1989, 2010, 2010,    0, 1991,    0, 1990, 1992,    0,
     1997, 2012, 2012,    0, 1995, 2013, 2013,    0, 2014, 2014,
     2015, 2015, 1996, 2001, 2016, 2016, 2017, 2017, 2000,    0,
     2004, 2018, 2018, 2019, 2019, 2020, 2020,    0, 2011, 2021,
     2021,    0, 2007, 2022, 2022, 2009, 2023, 2023, 2024, 2024,

     2019,    0, 2010, 2025, 2025, 2026, 2026, 2027, 2027, 2028,
     2028, 2029, 2029, 2030, 2030, 2031, 2031, 2032, 2032, 2033,
     2033, 2034, 2034, 2012, 2014, 2035, 2035, 2036, 2036,    0,
     2015, 2037, 2037, 2038, 2038, 2039, 2039,    0,    0, 2022,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 2029, 2025, 2031,    0, 2033,    0, 2034,    0,
     2028,    0,    0,    0,    0,    0,    0, 2037,    0, 2035,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 2036,
     2041, 2041, 2041, 2041, 2041, 2042, 2042, 2042, 2042, 2042,

     2043, 2043, 2043, 2043, 2043, 2044, 2044, 2044, 2045,    0,
     2045, 2045, 2045, 2046, 2046, 2046, 2046, 2046, 2048,    0,
     2048, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,

     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
#line 2 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"

// use NOMINMAX to avoid conflicts between windows.h min,max and std::min std::max ...
#define NOMINMAX

#include "IdentifierInfo.h"
#include "Variable.hpp"
#include "imageextent.h"
#include "AmiInstructionBlock.h"
#include "driver.h"

#include "scanner.h"

extern yyip::Driver GB_driver;

/* import the parser's token type into a local typedef */
typedef yyip::Parser::token token;
typedef yyip::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H


#include <boost/format.hpp>
#include <boost/shared_ptr.hpp>

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <locale.h>
#include "messages.h"
#include "fonctions.h"

#include "IdentifierInfo.h"
#include "Variable.hpp"
#include "imageextent.h"
#include "AmiInstructionBlock.h"

#include "improcess_bison.tab.hpp"
#include "VarContexts.hpp"
#include "ami_function.h"
#include "VarArray.h"
#include <string>

#define LEX_DEBUG(expr) if (GB_debug) {expr}


//int          yyiplineno = 0;
//std::string  GB_current_file;

int yycharno = 0;
bool LexError = 0;

//extern  void yyiperror(const char*);
extern  VarContexts  Vars;

yyip::Parser::token::yytokentype checkvar(
      yyip::Parser::semantic_type* yylval,
      const char* varname, int context=-1);

BasicVariable::ptr IsObject(  const char* varname, int context=-1);

using namespace std;


string* cpp_string;
//char string_buf[256];
//char *string_buf_ptr;

//#define MAXSIZE_BLOCK 10000
//char block_buf[MAXSIZE_BLOCK];
//char *block_buf_ptr;


AmiInstructionBlock* ami_block;

int  block_level = 0;
int comment_caller;



extern int       GB_argc;
extern wxChar**  GB_argv;
extern int       GB_num_arg_parsed;


/* enable c++ scanner class generation */



/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 110 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 2706 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/GeneratedFlexBison/improcess_flex.cpp"

#define INITIAL 0
#define str 1
#define block 2
#define comment 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 113 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


#line 2818 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/GeneratedFlexBison/improcess_flex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2041 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6822 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 121 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::RIGHT_ASSIGN);   /*{>>=,RIGHT_ASSIGN}*/
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 122 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::LEFT_ASSIGN);    /*{<<=,LEFT_ASSIGN}*/
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 123 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::ADD_ASSIGN);     /*{+=,ADD_ASSIGN}*/
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 124 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SUB_ASSIGN);     /*{-=,SUB_ASSIGN}*/
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 125 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::MUL_ASSIGN);     /*{*=,MUL_ASSIGN}*/
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 126 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::DIV_ASSIGN); } /*{/=,DIV_ASSIGN}*/
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 127 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::MOD_ASSIGN); } /*{%=,MOD_ASSIGN}*/
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 128 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::AND_ASSIGN); } /*{&=,AND_ASSIGN}*/
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 129 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::XOR_ASSIGN); } /*{ ^=,XOR_ASSIGN}*/
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 130 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::OR_ASSIGN); } /*{|=,OR_ASSIGN}*/
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 131 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::RIGHT_OP); } /*{>>,RIGHT_OP}*/
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 132 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::INC_OP); } /*{++,INC_OP}*/
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 133 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::DEC_OP); } /*{--,DEC_OP}*/
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 134 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::PTR_OP); } /*{->,PTR_OP}*/
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 135 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::AND_OP); } /*{&&,AND_OP}*/
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::OR_OP); } /*{||,OR_OP}*/
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 137 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::LE_OP); } /*{<=,LE_OP}*/
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 138 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::GE_OP); } /*{>=,GE_OP}*/
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 139 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::EQ_OP); } /*{==,EQ_OP}*/
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 140 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{  return(token::NE_OP); } /*{!=,NE_OP}*/
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 143 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::TRANSPOSE_OP); /*{',TRANSPOSE_OP}*/
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 144 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_EXP);  /*{^,T_EXP}*/
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 145 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_GT);   /*{>,T_GT}*/
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 146 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_LT);   /*{<,T_LT}*/
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 147 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_MULT); /*{*,T_MULT}*/
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 148 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::POINTWISE_MULT);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 149 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_DIV);  /*{/,T_DIV}*/
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 150 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_NOT); /*{!,T_NOT}*/
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 151 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ADD); /*{+,T_ADD}*/
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 152 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SUB); /*{-,T_SUB}*/
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 153 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_MOD); /*{%,T_MOD}*/
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 155 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::ASSIGN_OP); /*{=,ASSIGN_OP}*/
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 156 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_OP_PAR); /*{(,T_OP_PAR}*/
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 157 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CL_PAR); /*{),T_CL_PAR}*/
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 158 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_OP_BR);  /*{[,T_OP_BR}*/
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 159 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CL_BR);  /*{],T_CL_BR}*/
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 160 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AND);    /*{&,T_AND}*/
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 161 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_OR);     /*{|,T_OR}*/
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 163 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_POINT); /*{.,T_POINT}*/
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 164 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_COMMA); /*{,,T_COMMA}*/
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_QUEST);  /*{?,T_QUEST}*/
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 166 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_COLON); /*{:,T_COLON}*/
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SEMICOLON);  /*{;,T_SEMICOLON}*/
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 171 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetComponent); /*{SetComponent,T_SetComponent}*/
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 172 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_GetExtent); /*{GetExtent,T_GetExtent}*/
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 174 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_LineNumber); /*{LineNumber,T_LineNumber}*/
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 176 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SET);               /*{set,SET}*/
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 177 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SETPOS);            /*{setpos,SETPOS}*/
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 178 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_lininterp);      /*{lininterp,T_lininterp}*/
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 179 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_initvalue);       /*{initvalue,T_initvalue}*/
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 181 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::COMPARE);           /*{compare,COMPARE}*/
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 183 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SETVECTOR);         /*{setvector,SETVECTOR}*/
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 184 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_normalize); /*{normalize,T_normalize}*/
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 185 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ShowSection); /*{ShowSection,T_ShowSection}*/
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 186 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_HideSection); /*{HideSection,T_HideSection}*/
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 189 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_itk); /*{itk,T_itk}*/
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 190 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CannyEdgeDetector); /*{CannyEdgeDetector,T_CannyEdgeDetector}*/
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 192 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_GetName); /*{GetName,T_GetName}*/
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 193 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_GetObjectName); /*{GetObjectName,T_GetObjectName}*/
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 194 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetName); /*{SetName,T_SetName}*/
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CHAR); /*{CHAR,T_CHAR}*/
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_UCHAR); /*{UCHAR,T_UCHAR}*/
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SHORT); /*{SHORT,T_SHORT}*/
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_USHORT); /*{USHORT,T_USHORT}*/
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_INT); /*{INT,T_INT}*/
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_UINT); /*{UINT,T_UINT}*/
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_FLOAT); /*{FLOAT,T_FLOAT}*/
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_LONG); /*{LONG,T_LONG}*/ /// New (added: 27/05/2010)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_DOUBLE); /*{DOUBLE,T_DOUBLE}*/
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_RGB); /*{RGB,T_RGB}*/
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_FLOAT_VECTOR); /*{FLOAT_VECTOR,T_FLOAT_VECTOR}*/
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_GetFormat); /*{GetFormat,T_GetFormat}*/
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Comments); /*{Comments,T_Comments}*/
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 211 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SURFACE); /*{SURFACE,T_SURFACE}*/
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 212 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_IMAGE); /*{IMAGE,T_IMAGE}*/
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 213 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_IMAGEDRAW); /*{IMAGEDRAW,T_IMAGEDRAW}*/
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 214 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_NUM); /*{NUM,T_NUM}*/
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 215 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_STRING); /*{STRING,T_STRING}*/
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 216 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_TRANSFORM); /*{TRANSFORM,T_TRANSFORM}*/
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 217 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_OBJECT); /*{OBJECT,T_OBJECT}*/
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 219 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_atof); /*{atof,T_atof}*/
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 221 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_global);     /*{global,T_global}*/
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 222 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_global_new); /*{global_new,T_global_new}*/
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 223 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_local_new); /*{local_new,T_local_new}*/
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 224 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_local);      /*{local,T_local}*/
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 225 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_wait);       /*{wait,T_wait}*/
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 226 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_schedule);   /*{schedule,T_schedule}*/
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 228 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse constants ====================
//
 return(token::CONST_PI);
} /*{Pi,CONST_P}*/
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 236 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse Math functions ====================
//
return(token::SIN);
} /*{sin,SIN}*/
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 242 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::COS); /*{cos,COS}*/
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 243 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::TAN); /*{tan,TAN}*/
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 244 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::ASIN); /*{asin,ASIN}*/
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 245 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::ACOS); /*{acos,ACOS}*/
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 246 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::ATAN); /*{atan,ATAN}*/
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 247 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::EXP); /*{exp,EXP}*/
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 248 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::LN); /*{ln,LN}*/
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 249 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::LOG); /*{log,LOG}*/
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 250 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::COSH); /*{cosh,COSH}*/
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 251 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SINH); /*{sinh,SINH}*/
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 252 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SQRT); /*{sqrt,SQRT}*/
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 253 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::ABS); /*{abs,ABS}*/
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 254 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::NORM); /*{norm,NORM}*/
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 255 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::ROUND); /*{round,ROUND}*/
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 256 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::FLOOR); /*{floor,FLOOR}*/
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 258 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_OPEN); /*{open,T_OPEN}*/
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 259 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CLOSE); /*{close,T_CLOSE}*/
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 260 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_scan_float); /*{scan_float,T_scan_float}*/
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 261 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_read); /*{read,T_read}*/
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 262 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_rewind); /*{rewind,T_rewind}*/
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 264 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_PROC);   /*{proc,T_PROC}*/
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 265 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Class);  /*{Class,T_Class}*/
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 266 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_public);  /*{public,T_public}*/
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 268 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse Loops and Conditions ===============
//
return(token::FOR);
} /*{for,FOR}*/
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 274 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_IN); /*{in,T_IN}*/
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 275 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::TO); /*{to,TO}*/
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 276 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::STEP); /*{step,STEP}*/
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 277 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::ENDFOR); /*{endfor,ENDFOR}*/
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 279 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_REPEAT); /*{repeat,T_REPEAT}*/
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 280 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_WHILE); /*{while,T_WHILE}*/
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 281 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_UNTIL); /*{until,T_UNTIL}*/
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 282 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_BREAK); /*{break,T_BREAK}*/
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 284 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::IF); /*{if,IF}*/
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 285 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::ELSE); /*{else,ELSE}*/
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 287 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse Commands ===============
//
return(token::ASHELL);
} /*{sh,ASHELL}*/
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 294 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetDebugOn); /*{SetDebugOn,T_SetDebugOn}*/
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 295 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetDebugOff); /*{SetDebugOff,T_SetDebugOff}*/
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 296 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_TraceScanning); /*{TraceScanning,T_TraceScanning}*/
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 297 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_TraceParsing); /*{TraceParsing,T_TraceParsing}*/
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 298 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetVerboseOn); /*{SetVerboseOn,T_SetVerboseOn}*/
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 299 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetVerboseOff); /*{SetVerboseOff,T_SetVerboseOff}*/
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 300 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_NoMessageDialog); /*{NoMessageDialog,T_NoMessageDialog}*/
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 302 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_GetScriptsDir); /*{GetScriptDir,T_GetScriptDir}*/
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 303 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AddMenuScript); /*{AddMenuScript,T_AddMenuScript}*/
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 304 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetProgress); /*{SetProgress,T_SetProgress}*/
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 305 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetStatusText); /*{SetStatusText,T_SetStatusText}*/
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 306 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::QUIT); /*{Quit,QUIT}*/
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 307 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::QUIT);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 309 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Image); /*{Image,T_Image}*/
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 310 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_BrowseImage); /*{BrowseImage,T_BrowseImage}*/
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 312 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ReadRawImages); /*{ReadRawImages,T_ReadRawImages}*/
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 313 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Transform); /*{Transform,T_Transform}*/
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 314 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SHOW); /*{Show,SHOW}*/
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 315 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SHOW);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 316 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Remove); /*{Remove,T_Remove}*/
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 317 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SwapBuffers); /*{SwapBuffers, T_SwapBuffers}*/
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 318 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_HIDE); /*{Hide,T_HIDE}*/
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 319 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_HIDE);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 320 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::HELP); /*{Help,HELP}*/
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 321 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::HELP);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 322 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::LS); /*{ls,LS}*/
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 323 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::PRINT); /*{print,PRINT}*/
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 324 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::PRINTN); /*{printn,PRINTN}*/
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 325 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_boost_format); /*{boost_format,T_boost_format}*/
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 326 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SPRINT); /*{sprint,T_SPRINT}*/
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 327 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::VARIABLES); /*{vars,VARIABLES}*/
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 328 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::FUNCTION); /*{func,FUNCTION}*/
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 329 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_eval); /*{eval,T_eval}*/
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 331 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_tx); /*{tx,T_tx}*/
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 332 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ty); /*{ty,T_ty}*/
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 333 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_tz); /*{tz,T_tz}*/
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 334 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_trx); /*{trx,T_trx}*/
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 335 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_try); /*{try,T_try}*/
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 336 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_trz); /*{trz,T_trz}*/
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 337 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vx); /*{vx,T_vx}*/
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 338 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vy); /*{vy,T_vy}*/
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 339 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vz); /*{vz,T_vz}*/
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 340 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vdim); /*{vdim,T_vdim}*/
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 341 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_inc); /*{inc,T_inc}*/
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 342 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_val); /*{val,T_val}*/
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 344 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::FILTER); /*{filter,FILTER}*/
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 345 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkMedian3D); /*{vtkMedian3D,T_vtkMedian3D}*/
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 346 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::NormGrad); /*{normgrad,NormGrad}*/
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 347 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_DiscNormGrad); /*{discnormgrad,T_DiscNormGrad}*/
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 348 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_gradient); /*{gradient,T_gradient}*/
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 349 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SecDerGrad); /*{secdergrad,SecDerGrad}*/
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 350 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SecDerGrad2); /*{secdergrad2,SecDerGrad2}*/
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 351 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_DiscSecDerGrad); /*{discsecdergrad,T_DiscSecDerGrad}*/
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 352 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::OpImage); /*{OpImage,OpImage}*/
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 353 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::SubImage); /*{subimage,SubImage}*/
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 354 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AutoCrop); /*{autocrop,T_AutoCrop}*/
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 355 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::PutImage); /*{putimage,PutImage}*/
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 356 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_rot2D); /*{rot2D,T_rot2D}*/
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 357 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_rotate); /*{rotate,T_rotate}*/
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 358 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_mean); /*{mean,T_mean}*/
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 359 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_localmean); /*{localmean,T_localmean}*/
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 360 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_localmean2); /*{localmean2,T_localmean2}*/
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 361 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_localSD); /*{localSD,T_localSD}*/
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 362 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_localSD2); /*{localSD2,T_localSD2}*/
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 363 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_struct_tensor); /*{StructTensor,T_struct_tensor}*/
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 364 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_StructTensorH); /*{StructTensorH,T_StructTensorH}*/
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 365 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_HessianMatrix); /*{HessianMatrix,T_HessianMatrix}*/
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 366 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_HessianEVal); /*{HessianEVal,T_HessianEVal}*/
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 367 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Derivatives); /*{Derivatives,T_Derivatives}*/
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 368 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_curvatures); /*{Curvatures,T_curvatures}*/
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 369 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_DiscMeanCurvature); /*{DiscMeanCurvature,T_DiscMeanCurvature}*/
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 370 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Laplacian); /*{Laplacian,T_Laplacian}*/
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 371 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_setvoxelsize); /*{setvoxelsize,T_setvoxelsize}*/
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 372 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_settranslation); /*{settranslation,T_settranslation}*/
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 373 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_setendianness);  /*{setendianness,T_setendianness}*/
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 375 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_threscross); /*{threscross,T_threscross}*/
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 376 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_IsocontourPoints); /*{IsocontourPoints,T_IsocontourPoints}*/
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 377 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_IsosurfDist); /*{IsosurfDist,T_IsosurfDist}*/
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 378 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkIsoContourDist); /*{vtkIsoContourDist,T_vtkIsoContourDist}*/
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 380 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetWindowSize); /*{SetWindowSize,T_SetWindowSize}*/
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 382 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Convolve); /*{Convolve,T_Convolve}*/
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 383 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ConvolveMask); /*{ConvolveMask,T_ConvolveMask}*/
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 384 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Pad); /*{Pad,T_Pad}*/
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 385 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Eigen2D); /*{Eigen2D,T_Eigen2D}*/
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 386 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Eigen3D); /*{Eigen3D,T_Eigen3D}*/
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 387 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ChamferDT); /*{ChamferDT,T_ChamferDT}*/
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 388 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Chamfer2DT); /*{Chamfer2DT,T_Chamfer2DT}*/
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 389 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_BorgeforsDT); /*{BorgeforsDT,T_BorgeforsDT}*/
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 390 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_BorgeforsSDT); /*{BorgeforsSDT,T_BorgeforsSDT}*/
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 391 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkSignedBorgefors); /*{vtkSignedBorgefors,T_vtkSignedBorgefors}*/
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 392 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkSignedFMDist); /*{vtkSignedFMDist,T_vtkSignedFMDist}*/
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 393 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_PropagationDist); /*{PropagationDist,T_PropagationDist}*/
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 394 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_PropagationDist2); /*{PropagationDist2,T_PropagationDist2}*/
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 395 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_PropDanielsson); /*{PropDanielsson,T_PropDanielsson}*/
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 396 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkPropDanielsson); /*{vtkPropDanielsson,T_vtkPropDanielsson}*/
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 397 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkPropDaniel2); /*{vtkPropDaniel2,T_vtkPropDaniel2}*/
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 398 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CC); /*{CC,T_CC}*/
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 400 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ConvexHull); /*{ConvexHull,T_ConvexHull}*/
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 402 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_MeanHalfSize); /*{MeanHalfSize,T_MeanHalfSize}*/
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 403 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Resize); /*{Resize,T_Resize}*/
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 404 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ReSlice); /*{ReSlice,T_ReSlice}*/
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 405 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Flip);  /*{Flip,T_Flip}*/// flips image in one of the main axis direction
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 408 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_RestartTime); /*{RestartTime,T_RestartTime}*/
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 409 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_InitTime); /*{InitTime,T_InitTime}*/
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 410 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_TimeSpent); /*{TimeSpent,T_TimeSpent}*/
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 411 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_EndTime); /*{EndTime,T_EndTime}*/
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 413 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_NULL); /*{NULL,T_NULL}*/
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 416 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ProcessXEvents); /*{ProcessXEvents,T_ProcessXEvents}*/
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 417 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ProcessEvents); /*{ProcessEvents,T_ProcessEvents}*/
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 419 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_COUNT); /*{count,T_COUNT}*/
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 420 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_MAX); /*{max,T_MAX}*/
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 421 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_argmax); /*{argmax,T_argmax}*/
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 422 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_MIN); /*{min,T_MIN}*/
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 423 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_MEDIAN); /*{median,T_MEDIAN}*/
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 424 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SUM); /*{sum,T_SUM}*/
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 426 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_info); /*{info,T_info}*/
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 429 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Xpos); /*{Xpos,T_Xpos}*/
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 430 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Ypos); /*{Ypos,T_Ypos}*/
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 431 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Zpos); /*{Zpos,T_Zpos}*/
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 432 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SpacePos); /*{SpacePos,T_SpacePos}*/
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 434 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_del); /*{del,T_del}*/
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 435 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_delvars); /*{delvars,T_delvars}*/
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 437 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_EDPdilate); /*{EDPdilate,T_EDPdilate}*/
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 438 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_EDPerode); /*{EDPerode,T_EDPerode}*/
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 439 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_EDPopen); /*{EDPopen,T_EDPopen}*/
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 440 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_EDPclose); /*{EDPclose,T_EDPclose}*/
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 443 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkFastMarching); /*{vtkFastMarching,T_vtkFastMarching}*/
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 444 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkFastMarchingTarget); /*{vtkFastMarchingTarget,T_vtkFastMarchingTarget}*/
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 447 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_FluxDiffusion); /*{FluxDiffusion,T_FluxDiffusion}*/
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 448 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkAnisoGS); /*{vtkAnisoGS,T_vtkAnisoGS}*/
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 449 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::AnisoSmoothGS); /*{AnisoSmoothGS,AnisoSmoothGS}*/
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 450 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::TInit); /*{init,TInit}*/
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 451 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::TIterate); /*{iterate,TIterate}*/
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 452 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::TEnd); /*{end,TEnd}*/
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 454 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AnisoWeickert); /*{AnisoWeickert,T_AnisoWeickert}*/
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 455 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AnisoCW); /*{AnisoCW,T_AnisoCW}*/
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 457 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SRAD_qcoeff); /*{SRAD_qcoeff,T_SRAD_qcoeff}*/
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 458 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AnisoSRAD); /*{AnisoSRAD,T_AnisoSRAD}*/
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 459 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AnisoSRAD2); /*{AnisoSRAD2,T_AnisoSRAD2}*/
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 460 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AnisoDPAD); /*{AnisoDPAD,T_AnisoDPAD}*/
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 461 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AnisoDPAD2); /*{AnisoDPAD2,T_AnisoDPAD2}*/
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 462 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AnisoNRAD); /*{AnisoNRAD,T_AnisoNRAD}*/
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 463 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AnisoLeeAdd2); /*{AnisoLeeAdd2,T_AnisoLeeAdd2}*/
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 465 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AnisoRudinMult); /*{AnisoRudinMult,T_AnisoRudinMult}*/
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 467 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::TAddGaussNoise); /*{AddGaussNoise,TAddGaussNoise}*/
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 469 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SNR); /*{SNR,T_SNR}*/
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 471 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_save); /*{save,T_save}*/
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 473 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_eccentricity); /*{eccentricity,T_eccentricity}*/
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 475 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_getimage); /*{getimage,T_getimage}*/
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 476 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_GetImageFromX); /*{GetImageFromX,T_GetImageFromX}*/
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 478 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_isoarea2D); /*{isoarea2D,T_isoarea2D}*/
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 479 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_posarea); /*{posarea,T_posarea}*/
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 481 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ReadCTALine); /*{ReadCTALine,T_ReadCTALine}*/
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 482 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ReadCTALineRadii); /*{ReadCTALineRadii,T_ReadCTALineRadii}*/
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 484 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_isosurf); /*{isosurf,T_isosurf}*/
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 485 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_isosurf_inv); /*{isosurf_inv,T_isosurf_inv}*/
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 486 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_isosurf_ijk); /*{isosurf_ijk,T_isosurf_ijk}*/
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 487 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_isosurf_ras); /*{isosurf_ras,T_isosurf_ras}*/
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 488 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Surface); /*{Surface,T_Surface}*/
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 489 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkDecimate); /*{vtkDecimate,T_vtkDecimate}*/
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 490 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkMarchingCubes); /*{vtkMarchingCubes,T_vtkMarchingCubes}*/
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 491 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkSmooth); /*{vtkSmooth,T_vtkSmooth}*/
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 492 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkWindowedSinc); /*{vtkWindowedSinc,T_vtkWindowedSinc}*/
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 494 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_isoline); /*{isoline,T_isoline}*/
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 496 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkDist); /*{vtkDist,T_vtkDist}*/
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 497 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_AndreDist); /*{AndreDist,T_AndreDist}*/
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 499 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_OutFlux); /*{OutFlux,T_OutFlux}*/
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 500 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_OutFluxScalar); /*{OutFluxScalar,T_OutFluxScalar}*/
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 501 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_2DFlux); /*{2DFlux,T_2DFlux}*/
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 502 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_OrientationRatio); /*{OrientationRatio,T_OrientationRatio}*/
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 504 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_computeCC); /*{computeCC,T_computeCC}*/
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 505 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_drawCC); /*{drawCC,T_drawCC}*/
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 506 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Paint); /*{Paint,T_Paint}*/
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 507 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetLight); /*{SetLight,T_SetLight}*/
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 508 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetLightPos); /*{SetLightPos,T_SetLightPos}*/
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 509 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetLightAmbient); /*{SetLightAmbient,T_SetLightAmbient}*/
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 510 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetLightDiffuse); /*{SetLightDiffuse,T_SetLightDiffuse}*/
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 511 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetLightSpecular); /*{SetLightSpecular,T_SetLightSpecular}*/
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 512 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetBackground); /*{SetBackground,T_SetBackground}*/
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 514 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Normalize); /*{Normalize,T_Normalize}*/
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 515 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Center);    /*{Center,T_Center}*/
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 519 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_PrintMatrices); /*{PrintMatrices,T_PrintMatrices}*/ // print the matrices of Viewer3D class
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 521 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_addobj); /*{AddObject,T_addobj}*/
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 522 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_setcurrentobj); /*{SetCurrentObj,T_setcurrentobj}*/
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 525 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_GetTransform); /*{GetTransform,T_GetTransform}*/
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 526 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetTransform); /*{SetTransform,T_SetTransform}*/
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 528 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Interpolate); /*{Interpolate,T_Interpolate}*/
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 530 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Skeleton); /*{Skeleton,T_Skeleton}*/
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 531 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SimplePoints); /*{SimplePoints,T_SimplePoints}*/
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 533 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_NormalField); /*{NormalField,T_NormalField}*/
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 534 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_DirConnectivity); /*{DirConnectivity,T_DirConnectivity}*/
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 535 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_OrientField); /*{OrientField,T_OrientField}*/
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 536 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_OrientPositive); /*{OrientPositive,T_OrientPositive}*/
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 538 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Skeleton2lines); /*{Skeleton2lines,T_Skeleton2lines}*/
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 539 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SmoothLines);  /*{SmoothLines,T_SmoothLines}*/
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 540 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ResampleLines); /*{ResampleLines,T_ResampleLines}*/
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 541 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ShortestPath); /*{ShortestPath,T_ShortestPath}*/
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 542 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ShortestPathImage); /*{ShortestPathImage,T_ShortestPathImage}*/
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 543 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_PathFromDispl); /*{PathFromDispl,T_PathFromDispl}*/
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 544 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_PathFromVectField); /*{PathFromVectField,T_PathFromVectField}*/
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 545 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_LineRecons); /*{LineRecons,T_LineRecons}*/
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 547 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CircleIntegral); /*{CircleInt,T_CircleIntegral}*/
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 548 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CircleIntegralExc); /*{CircleIntExc,T_CircleIntegralExc}*/
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 549 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CircleIntSdExc); /*{CircleIntSdExc,T_CircleIntSdExc}*/
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 550 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CircleMinIntSdExc); /*{CircleMinIntSdExc,T_CircleMinIntSdExc}*/
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 551 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_LocalExtrema); /*{LocalExtrema,T_LocalExtrema}*/
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 554 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_gnuplot); /*{gnuplot,T_gnuplot}*/
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 555 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_histo); /*{histo,T_histo}*/
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 556 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_cumhisto); /*{cumhisto,T_cumhisto}*/
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 557 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_DisplayHisto); /*{DisplayHisto,T_DisplayHisto}*/
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 559 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_GenRead); /*{GenRead,T_GenRead}*/
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 562 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Matrix); /*{Matrix,T_Matrix}*/
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 563 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Invert); /*{Invert,T_Invert}*/
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 565 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{return(token::T_SaveStructuredGrid); /*{SaveStructuredGrid,T_SaveStructuredGrid}*/

//
//============================== PARAMWIN options ====================
//

//ParamWin          {
//                  return(token::T_ParamWin);

//BeginBook         return(token::T_BeginBook); // BeginBook,T_BeginBook
// EndBook           return(token::T_EndBook); //EndBook,T_EndBook
// AddPage           return(token::T_AddPage); / / AddPage,T_AddPage
// BeginPanel        return(token::T_BeginPanel); // BeginPanel,T_BeginPanel
// EndPanel          return(token::T_EndPanel); // EndPanel,T_EndPanel}
// SelectPage        return(token::T_SelectPage); // SelectPage,T_SelectPage

//BeginBoxPanel     return(token::T_BeginBoxPanel); /// BeginBoxPanel,T_BeginBoxPanel
//EndBoxPanel       return(token::T_EndBoxPanel); /// EndBoxPanel,T_EndBoxPanel

//AddFloat          return(token::T_AddFloat); // AddFloat,T_AddFloat
// AddInt            return(token::T_AddInt); // AddInt,T_AddInt
// AddButton         return(token::T_AddButton); // AddButton,T_AddButton

// AddBoolean        return(token::T_AddBoolean); /// AddBoolean,T_AddBoolean

// AddEnum           return(token::T_AddEnum); // AddEnum,T_AddEnum
// AddEnumChoice     return(token::T_AddEnumChoice); // AddEnumChoice,T_AddEnumChoice
//AddImageChoice    return(token::T_AddImageChoice); // AddImageChoice,T_AddImageChoice
// AddString         return(token::T_AddString); // AddString,T_AddString
// AddFilename       return(token::T_AddFilename); // AddFilename,T_AddFilename
//AddLabel          return(token::T_AddLabel); //AddLabel,T_AddLabel
//SetCallback       return(token::T_SetCallback); //SetCallback,T_SetCallback
//SetDragCallback   return(token::T_SetDragCallback); //SetDragCallback,T_SetDragCallback

//BeginBox          return(token::T_BeginBox); //BeginBox,T_BeginBox
//EndBox            return(token::T_EndBox); //EndBox,T_EndBox

//BeginHorizontal   return(token::T_BeginHorizontal); //BeginHorizontal,T_BeginHorizontal
//EndHorizontal     return(token::T_EndHorizontal); //EndHorizontal,T_EndHorizontal

// EnablePanel       return(token::T_EnablePanel);  //EnablePanel,T_EnablePanel

// EnableBox         return(token::T_EnableBox);  // EnableBox,T_EnableBox

// Display           return(token::T_Display); //Display,T_Display

// CreateWin         return(token::T_CreateWin); // CreateWin,T_CreateWin
// redraw            return(token::T_redraw); // redraw,T_redraw

//SetPositionProp      return(token::T_SetPositionProp); //SetPositionProp,T_SetPositionProp
// ShowSlider        return(token::T_ShowSlider); // ShowSlider,T_ShowSlider
// Enable            return(token::T_Enable);  //Enable,T_Enable

} /*{ParamWin,T_ParamWin}*/
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 622 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CreateFlatMesh);    /*{CreateFlatMesh,T_CreateFlatMesh}*/
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 623 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CreateVolume);      /*{CreateVolume,T_CreateVolume}*/
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 624 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkCreateFlatMesh); /*{vtkCreateFlatMesh,T_vtkCreateFlatMesh}*/
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 625 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Altitude2Position); /*{Altitude2Position,T_Altitude2Position}*/
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 626 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Temp2Altitudes);    /*{Temp2Altitudes,T_Temp2Altitudes}*/
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 627 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_GeoCoordinates);    /*{GeoCoordinates,T_GeoCoordinates}*/
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 628 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_Set3DArrowParam); /*{Set3DArrowParam,T_Set3DArrowParam}*/
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 630 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CreateVectors); /*{CreateVectors,T_CreateVectors}*/
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 632 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CreateVectorsFromField); /*{CreateVectorsFromField,T_CreateVectorsFromField}*/
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 634 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ComputeAltitudes); /*{ComputeAltitudes,T_ComputeAltitudes}*/
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 635 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_ReadFlow); /*{ReadFlow,T_ReadFlow}*/
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 636 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_SetFluidNavFile); /*{SetFluidNavFile,T_SetFluidNavFile}*/
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 637 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_DrawEarthCoord); /*{DrawEarthCoord,T_DrawEarthCoord}*/
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 639 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_CreateEllipsoids); /*{CreateEllipsoids,T_CreateEllipsoids}*/
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 641 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_import_vtk);     /*{import_vtk,T_import_vtk}*/
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 642 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_import_wii);     /*{import_wii,T_import_wii}*/
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 643 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_import_filters); /*{import_filters,T_import_filters}*/
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 645 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_amiOFCorr2D);  /*{amiOFCorr2D,T_amiOFCorr2D}*/
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 646 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_amiOFVar2D);   /*{amiOFVar2D,T_amiOFVar2D}*/
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 648 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkDicomRead); /*{vtkDicomRead,T_vtkDicomRead}*/
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 649 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_vtkMINCRead);  /*{vtkMINCRead,T_vtkMINCRead}*/
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 651 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_exists);       /*{exists,T_exists}*/
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 652 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_FileExists);  /*{FileExists,T_FileExists}*/
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 654 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_InfoDialog); /*{InfoDialog,T_InfoDialog}*/
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 656 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_slice);        /*{slice,T_slice}*/
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 658 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_argc);         /*{argc,T_argc}*/
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 659 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
return(token::T_emptyargs);    /*{emptyargs,T_emptyargs}*/
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 662 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse float ====================
//
//  setlocale(LC_NUMERIC,"C");
  setlocale(LC_NUMERIC, "C");
  yylval->adouble=atof(YYText());
  return(token::NUMBER);
}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 673 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse interger ====================
//
//  setlocale(LC_NUMERIC,"C");
  setlocale(LC_NUMERIC, "C");
  yylval->adouble=atof(YYText());
  return(token::NUMBER);
}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 686 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//
//============================ Parse string ====================
//
 cpp_string = new string();
 BEGIN(str);
 }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 695 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
  // end of string
  // Not thread safe ...
  BEGIN(0);
  // add the \0 character, why ???...
  cpp_string->append(1,'\0');

  if((yylval->astring = new char[cpp_string->length()+1])==NULL) {
    GB_driver.yyiperror(E_MEM);
    return token::LEX_ERROR;
  }
  // first conversion, we keep char* for astring for now
  strcpy(yylval->astring, cpp_string->c_str());
  delete cpp_string;
  cpp_string = NULL;
  return(token::ASTRING);
}
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 713 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
  GB_driver.yyiperror(E_UNTERM_STRING);
}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 717 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\n');
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 718 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\t');
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 719 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\r');
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 720 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\b');
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 721 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\f');
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 723 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
cpp_string->append(1,YYText()[1]);
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 725 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
  cpp_string->append(YYText());
}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 729 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
  cpp_string->append(YYText());
/*
  char *yptr = YYText();

  while (*yptr)
    *string_buf_ptr++ = *yptr++;
*/
}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 740 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
  yylval->adouble=GB_argc-GB_num_arg_parsed;
  return(token::NUMBER);
}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 745 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
  // TODO allow more than 10 arguments!!
  int n,pos;
  n = YYText()[1]-'0';
  // TODO: check the position, improve the code here
  pos = n+GB_num_arg_parsed-1;

  if ((pos>=GB_argc)||(pos<0)) {
    boost::format fmt =
        boost::format("improcess.l \t invalid argument number %d / %d\n");
#ifdef str
  #undef str
      GB_driver.yyiperror( str(fmt % n % (GB_argc-GB_num_arg_parsed)).c_str() );
  #define str 1
#else
      GB_driver.yyiperror( str(fmt % n % (GB_argc-GB_num_arg_parsed)).c_str() );
#endif
    return token::LEX_ERROR;
//myss1.c_str() );
  }

  // we use GB_argv[n+1] because the first two arguments are the program and the script file
  wxString argument(GB_argv[pos]);
  
  if((yylval->astring = new char[strlen(argument.mb_str(wxConvUTF8))+1])==NULL) {
    GB_driver.yyiperror(E_MEM);
    return token::LEX_ERROR;
  }

  strcpy(yylval->astring,argument.mb_str(wxConvUTF8));

  return(token::ASTRING);

}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 780 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//============================ Parse block ====================
//
  if (block_level==0) {
    ami_block = new AmiInstructionBlock();
    ami_block->SetStartingLine(GB_driver.yyiplineno);
    if (GB_debug )cerr << "Starting block at " <<  GB_driver.yyiplineno << endl;
    if (GB_debug )cerr << "Starting block at " << *yylloc << endl;
    block_level++;
    BEGIN(block);
  }

/*
<block>\# {
//============================ Parse comment ====================
//
    comment_caller = block;
    BEGIN(comment);
//    printf("begin comment in block \n");
}

<block>"//"  {
    comment_caller = block;
    BEGIN(comment);
//    printf("begin comment in block \n");
}
*/
}
	YY_BREAK
case 382:
/* rule 382 can match eol */
YY_RULE_SETUP
#line 809 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
  // dealing with windows end-of-lines ...
  yylloc->lines(1); yylloc->step();
  GB_driver.yyiplineno++;
  ami_block->GetBody().append(YYText());
}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 817 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
  block_level++;
  ami_block->GetBody().append(1,'{');
}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 822 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{

  block_level--;
  if (block_level>0)
    ami_block->GetBody().append(1,'}');
  else {
    BEGIN(0);
    ami_block->GetBody().append(3,'\0');
//    cpp_block->append(1,YY_END_OF_BUFFER_CHAR);

//     printf("block = *%s*\n",block_buf);

/*
    length=ami_block->GetBody().length();

    if((yyiplval.astring = new char[length+3])==NULL)
      yyiperror(E_MEM);
    strcpy(yyiplval.astring,
            ami_block->GetBody().c_str());
    // why add those 3 characters ...??? lex is looking ahead several characters
    // risky in memory ...
    yyiplval.astring[length  ]=YY_END_OF_BUFFER_CHAR;
    yyiplval.astring[length+1]=YY_END_OF_BUFFER_CHAR;
    yyiplval.astring[length+2]=YY_END_OF_BUFFER_CHAR;
*/
    yylval->ablock = ami_block;
    // cannot use smart pointers in union ...
    // needs to be freed after use ...

    //ami_block = AmiInstructionBlock_ptr();
    return(token::ABLOCK);
  }
}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 857 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//  char *yptr = YYText();
//  while (*yptr)
//    *block_buf_ptr++ = *yptr++;
  ami_block->GetBody().append(YYText());
}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 865 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//============================ Parse comment ====================
//
    comment_caller = INITIAL;
    BEGIN(comment);
//  printf("begin comment \n");
}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 873 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
    comment_caller = INITIAL;
    BEGIN(comment);
//  printf("begin comment \n");
}
	YY_BREAK
case 388:
/* rule 388 can match eol */
YY_RULE_SETUP
#line 880 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
  //GB_driver.yyiplineno++;
//  printf("end comment from %d \n",comment_caller);
  // use unput to accept the end of the command if any
//  cout << "<comment>\n [" << YYText() << "]" << endl;
//  cout << "length = " << strlen(YYText()) << endl;
  if (strlen(YYText())==1) {
    unput(YYText()[0]);
  }
  if (strlen(YYText())==2) {
    unput(YYText()[1]);
    unput(YYText()[0]);
  }
  BEGIN(comment_caller);
}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 896 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
  // on ecrit ce qu'on veut dans un commentaire ...
  // sauver les commentaires dans une variable du driver??
}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 901 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  int context = Vars.GetCurrentContextNumber();
  string text(YYText());
  string varname = text.substr(7);
  yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),context);
  return result;
}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 912 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(8);
  yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),0);
  return result;
}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 922 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(6);
  yyip::Parser::token::yytokentype 
      result = checkvar(yylval,varname.c_str(),
                        OBJECT_CONTEXT_NUMBER);
  return result;
}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 935 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(2);
  yyip::Parser::token::yytokentype 
      result = checkvar(yylval,varname.c_str(),
                        OBJECT_CONTEXT_NUMBER);
  return result;
}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 948 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
// TODO: can all the variable system to return only variable from lex !!!
// this rule is a hack
//
//============================ Parse variable in a given context ====================
//
  //cout << "::XX->XX variable in object ?" << endl;
  string text(YYText());
  size_t pos = text.find("->");
  string contextname = text.substr(2,pos-2);


  // check if contextname is really a context
  //cout << "looking for "<< contextname << endl;
  BasicVariable::ptr var = IsObject(contextname.c_str(),OBJECT_CONTEXT_NUMBER);
  if (var.get()) 
  {
    FILE_MESSAGE("Object found");
    string varname = text.substr(pos+2);

    Variable<AMIObject>::ptr objvar( boost::dynamic_pointer_cast<Variable<AMIObject> >(var));
    AMIObject::ptr object (objvar->Pointer());

    Variables::ptr previous_ocontext = Vars.GetObjectContext();
    Vars.SetObjectContext(object->GetContext());

    yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),OBJECT_CONTEXT_NUMBER);

    Vars.SetObjectContext(previous_ocontext);
    return result;
  } else {
    std::string error_string =" lex error \t object not found ";
    GB_driver.yyiperror(error_string.c_str());
  }
}
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 985 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable in a given context ====================
//
  //cout << "variable in object ?" << endl;
  string text(YYText());
  size_t pos = text.find("->");
  string contextname = text.substr(0,pos);


  // check if contextname is really a context
  BasicVariable::ptr var = IsObject(contextname.c_str());
  if (var.get()) 
  {
    FILE_MESSAGE("Object found");
    string varname = text.substr(pos+2);

    Variable<AMIObject>::ptr objvar( boost::dynamic_pointer_cast<Variable<AMIObject> >(var));
    AMIObject::ptr object ( objvar->Pointer());

    Variables::ptr previous_ocontext = Vars.GetObjectContext();
    Vars.SetObjectContext(object->GetContext());

    yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),OBJECT_CONTEXT_NUMBER);

    Vars.SetObjectContext(previous_ocontext);
    return result;
  } else {
    std::string error_string =" lex error \t object not found ";
    GB_driver.yyiperror(error_string.c_str());
  }
}
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 1022 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
   return checkvar(yylval,YYText());
}
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 1030 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
                    yylloc->step();
                  }
	YY_BREAK
case 398:
/* rule 398 can match eol */
YY_RULE_SETUP
#line 1034 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
      //cout << "\\NEWLINE \n" << endl;
      // allow multiline command
      GB_driver.yyiplineno++;
    }
	YY_BREAK
case 399:
/* rule 399 can match eol */
YY_RULE_SETUP
#line 1040 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{
          //cout << "NEWLINE \n" << endl;
//          if (yyleng!=1) cout << " ******* yyleng = " << yyleng << "************" << endl; 
          yylloc->lines(1); yylloc->step();
          GB_driver.yyiplineno++;
          return(token::END_INSTRUCTION);
      } /*{end-of-line,END_INSTRUCTION}*/
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 1048 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
{

    std::string error_string =" lex error \t invalid characters ";
    GB_driver.yyiperror(error_string.c_str());

  }
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 1058 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"
ECHO;
	YY_BREAK
#line 5296 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/GeneratedFlexBison/improcess_flex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(str):
case YY_STATE_EOF(block):
case YY_STATE_EOF(comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyipfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyipfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyiprealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyiprealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2041 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2041 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2040);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyipalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyipalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyipfree((void *) b->yy_ch_buf  );

	yyipfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyipalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyiprealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyipalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyiprealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyipalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyiprealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyipfree (void * ptr )
{
	free( (char *) ptr );	/* see yyiprealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1058 "/home/fsantana/proyectos/amilab/Karl_Grammar_DessinImage/src/Language/improcess_flex.lpp"





//--------------------------------------------------
//       IsObject()
//--------------------------------------------------
//
BasicVariable::ptr IsObject( const char* varname, int context)
//
{
  BasicVariable::ptr var = Vars.GetVar(varname,context);
  if (var.get())
    if ((var->Type() == type_ami_object)||
        (var->Type() == type_ami_cpp_object))
      return var;
    else 
      return BasicVariable::ptr();
  else
    return BasicVariable::ptr();
}


//--------------------------------------------------
//       checkvar()
//--------------------------------------------------
//
yyip::Parser::token::yytokentype checkvar(
  yyip::Parser::semantic_type* yylval,
  const char* varname,
  int context
)
//
{

  BasicVariable::ptr var = Vars.GetVar(varname,context);
  //cout << "res = " << res << endl;
  if  ((!GB_driver.procedure_declaration) && var.get())   {

    // add the variable to the stack
    GB_driver.var_stack.AddVar(var);

    //yylval->variable = var.get();
    switch(var->Type()) {
      case type_image:            return token::VAR_IMAGE;
        /*{$variable_image,VAR_IMAGE}*/
      case type_imagedraw:        return token::VAR_IMAGEDRAW;
        /*{$variable_imagedraw,VAR_IMAGEDRAW}*/
      case type_float:
      case type_long:
      case type_double:
      case type_int:
      case type_uchar:
        return token::PROCESSED_VAR; /*{$PROCESSED_VAR,PROCESSED_VAR}*/
      case type_surfdraw:         return token::VAR_SURFDRAW;
        /*{$variable_surfdraw,VAR_SURFDRAW}*/
      case type_file:             return token::VAR_FILE;
        /*{$variable_file,VAR_FILE}*/
      case type_c_procedure:      return token::VAR_C_PROCEDURE;
        /*{$variable_c_procedure,VAR_C_PROCEDURE}*/
      case type_class_member:      return token::VAR_CLASS_MEMBER;
        /*{$variable_class_procedure,VAR_CLASS_MEMBER}*/
      case type_c_image_function: return token::VAR_C_IMAGE_FUNCTION;
        /*{$variable_c_image_function,VAR_C_IMAGE_FUNCTION}*/
      case type_c_function: return token::VAR_C_FUNCTION;
        /*{$variable_c_function,VAR_C_FUNCTION}*/

      case type_ami_function:     return token::VAR_AMI_FUNCTION;
        /*{$variable_ami_function,VAR_AMI_FUNCTION}*/
      case type_ami_class:     return token::VAR_AMI_CLASS;
        /*{$variable_ami_class,VAR_AMI_CLASS}*/
      case type_ami_object:     return token::VAR_AMI_OBJECT;
        /*{$variable_ami_object,VAR_AMI_OBJECT}*/

      case type_string:           return token::VAR_STRING;
        /*{$variable_string,VAR_STRING}*/
      case type_matrix:           return token::VAR_MATRIX;
        /*{$variable_matrix,VAR_MATRIX}*/
      case type_gltransform:      return token::VAR_GLTRANSFORM;
        /*{$variable_gltransform,VAR_GLTRANSFORM}*/
      case type_array:       {
        Variable<VarArray>::ptr vararray( 
          boost::dynamic_pointer_cast<Variable<VarArray> >(var));
        VarArray::ptr array (vararray->Pointer());
        switch(array->Type()) {
          case type_image:      return token::VAR_ARRAY_IMAGE;
          /*{$variable_image_array,VAR_ARRAY_IMAGE}*/
          default:
            GB_driver.err_print("Array type not available \n");
        }
        break;
      }
      default:
        GB_driver.err_print("Variable type still not available \n");
        GB_driver.var_stack.GetLastBasicVar();
    }

  }

  yylval->ident = new IdentifierInfo;
  yylval->ident->SetName( varname);
  yylval->ident->SetCreationContext(context);
  return(token::IDENTIFIER);
}

/*** Additional Code ***/

namespace yyip {

Scanner::Scanner(std::istream* in,
     std::ostream* out)
    : yyipFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}


/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int yyipFlexLexer::yylex()
{
    std::cerr << "in yyipFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

/*
int yyFlexLexer::yywrap()
{
    return 1;
}
*/








