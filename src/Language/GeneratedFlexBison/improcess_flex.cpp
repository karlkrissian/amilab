#line 2 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/GeneratedFlexBison/improcess_flex.cpp"

#line 4 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/GeneratedFlexBison/improcess_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyipFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyipalloc (yy_size_t  );
void *yyiprealloc (void *,yy_size_t  );
void yyipfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 398
#define YY_END_OF_BUFFER 399
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2021] =
    {   0,
      393,  393,    0,    0,    0,    0,    0,    0,  399,  397,
      394,  396,  396,   28,  365,  383,  397,   31,   37,   21,
       33,   34,   25,   29,   40,   30,   39,   27,  364,  364,
       42,   43,   24,   32,   23,   41,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,   35,
      397,   36,   22,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  378,   38,  375,  367,  366,  374,
      398,  382,  379,  379,  380,  381,  386,  385,  385,  396,

       20,  376,  377,    7,   15,    8,    5,   12,    3,   13,
        4,   14,   26,  384,    6,    0,    0,  364,  393,  393,
      390,    0,   17,   19,   18,   11,  393,  393,  393,  393,
      393,  218,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,   86,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  395,  395,    9,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  120,  393,  112,  393,  393,
      393,   94,  393,  147,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  122,  393,
      393,  393,  393,  393,  393,  393,  393,  113,  393,  155,
      156,  157,  393,  393,  393,  393,  161,  162,  163,  393,
      393,   10,   16,  375,  373,    0,  371,  372,  368,  370,
      369,  379,  385,  392,  392,  363,  393,    0,  390,    2,

        1,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,   65,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
       75,  393,  393,  393,  393,  393,  393,  204,  393,  393,
      393,  393,  393,   70,  393,  393,  393,  393,  393,  267,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,   99,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,   88,  393,  393,  242,  393,  393,
      393,  393,  393,  255,  393,  393,   93,  393,  393,  111,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  165,
      393,  393,  393,  393,   56,  393,  393,   95,  232,  393,
      393,  234,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,   47,
      393,   87,  393,  393,  393,  393,  393,  236,   89,  393,
      393,  158,  159,  160,  393,  166,  393,  393,  393,  393,
      393,  393,  391,  393,  393,  393,  393,  393,  393,  393,
       61,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  223,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  145,  393,  143,  393,
      393,  393,  393,  393,  393,  393,  393,   68,  393,  393,
      393,  393,  393,  228,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  133,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  139,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,   66,  393,  238,  239,  240,   91,  393,

      361,  393,   90,   92,   79,  393,  393,  393,  393,  393,
       96,  393,  393,  393,  393,  393,  393,  121,  393,  393,
      154,  393,  393,  393,  153,  393,  393,  393,  393,  146,
      144,  393,  393,  237,  253,  393,  393,  393,  393,  393,
      393,  181,  393,  100,  103,  393,  393,  108,  393,  393,
      134,  106,  393,  393,  393,  393,  393,  268,  393,  393,
      393,  393,  393,  393,  393,  140,   97,  393,  393,   98,
      114,  393,  393,  393,  393,  152,  164,  393,  393,  393,
      393,  393,  393,  393,  393,  393,   84,  393,  393,  391,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  109,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
       67,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,   74,  135,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  294,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,   63,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,   62,

      393,  393,  393,  393,  393,  119,  104,  393,  393,  231,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      102,  393,  393,  393,  393,  329,  393,  393,  393,  393,
      393,  393,  393,   83,  393,  393,  393,  393,  148,  393,
      393,  393,  393,  179,  393,  101,  393,  393,  393,  393,
      393,  393,  393,  393,  360,  393,  393,    0,  393,  118,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  117,  290,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  302,
      393,  393,  393,  393,  393,  393,  393,  393,   69,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  334,  393,
      393,  393,  393,  393,  393,  333,  393,  393,  393,   78,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  141,  393,  221,  393,  393,   76,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,   64,  393,  393,
      233,  393,  393,  393,  393,  393,  393,  393,  393,  293,

      393,  393,  115,  357,  167,  393,   80,  393,  393,  393,
      393,  393,  393,  393,  393,  393,    0,  393,  393,  393,
      235,  393,  393,  393,  149,  110,  393,  116,  107,  180,
      393,  393,  393,  393,   48,  393,  393,  393,  151,  393,
      389,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      257,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      246,  205,  206,  227,  393,  393,  393,  332,  393,  393,

      393,  393,   58,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  175,  393,  393,  393,  288,  393,  393,  393,  393,
      393,  222,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,   60,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  280,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,   51,  393,  393,  243,  393,  393,  393,  393,  393,
        0,  393,  328,  393,  393,  393,  393,  285,  276,  254,
      393,  387,  184,  393,  393,  393,  393,  273,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  389,  393,  393,
      393,  393,  393,  286,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,   73,  393,  393,  202,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  247,  393,  245,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  225,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  346,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  295,  393,  393,
      393,  393,  393,  393,  393,  393,  309,  393,  241,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  177,
      393,  393,  330,  393,  393,  393,  393,  270,  388,  393,
      171,  393,  393,  393,  393,  393,  393,  393,  387,  185,
      393,  393,  393,  169,  178,  393,   85,  393,  393,  393,
      393,  393,  176,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  304,  393,
      287,  261,  393,  263,  393,  259,  393,  393,  393,  393,
      393,  393,  207,  323,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  244,  393,
      393,  393,  393,   45,   72,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  193,  393,  393,  393,
      393,  393,  393,  301,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,   77,  393,  226,  393,  393,  138,  393,
      393,  393,  292,  393,  393,  393,  362,  388,  393,  393,
      393,  393,   50,  272,  393,  393,   49,   82,  182,   53,

      393,  393,  393,  393,   52,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  283,  393,
      393,  393,  262,  393,  393,  260,  393,  393,  393,  393,
      393,  393,  208,  393,  393,  393,  393,  219,  393,  393,
      393,  393,  393,  191,  393,  393,  393,  393,  393,  393,
      358,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      359,  393,  393,  393,   46,  322,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  123,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  354,  393,  393,  393,  393,   81,
      393,  350,  351,  393,  393,  393,  183,  105,  172,  393,
      393,  393,  197,  251,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  209,  393,  136,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  190,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  189,  393,   55,
      308,  393,  199,  393,  393,  393,  311,  313,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  274,  393,

      393,  224,  258,  393,  393,  393,  393,  393,  124,  393,
      393,  393,  296,  393,  131,  393,  393,  393,  393,  393,
       54,  393,  393,  316,  393,  142,  393,  393,  393,  353,
      393,  393,  393,  393,  393,  278,  277,  279,  173,  393,
      393,  393,  393,  281,  393,  393,  393,  356,  393,  168,
      393,  393,  393,  393,  393,  393,  264,  393,  393,  393,
      210,  393,  324,  393,  393,  393,  203,  393,  393,  393,
      337,  393,  393,  331,  393,   71,  393,  393,  393,  393,
      393,  306,  393,  393,  327,  220,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,   44,  393,  393,  393,  393,  393,  393,
      307,  393,  127,  393,  318,  310,  393,  186,  393,  126,
      393,  150,  170,  393,  269,  393,  393,  393,  194,  393,
      355,  393,  393,  393,  393,  393,  393,  393,  266,  393,
      393,  252,  256,  393,  393,  393,  393,  393,  393,  343,
      393,  393,  393,  250,  393,  271,   59,  130,  188,  393,
      393,  393,  393,  289,  320,  393,  303,  230,  393,  393,
      393,  393,  137,  317,  393,  393,  300,  305,  393,  393,
      393,  393,  132,  128,  201,  393,  393,  187,  393,  125,
      393,  393,  196,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  265,  393,  325,  393,  393,  393,  336,
      393,  393,  393,  348,  341,  393,  393,  314,  393,  393,
      229,  215,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  315,  340,  174,  352,  195,  393,  393,  393,  393,
      217,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  312,  393,  393,  129,  393,  393,  213,  393,  393,
      342,  347,  297,  298,  393,  393,  393,  248,  393,  393,
      393,  393,  212,  284,  393,  393,  393,  345,  349,  393,
      393,  198,  291,  393,  214,  275,  393,  299,  393,  393,
      393,  393,  282,  393,  393,  339,   57,  326,  393,  192,

      321,  393,  319,  338,  393,  200,  216,  393,  393,  335,
      393,  211,  393,  393,  393,  393,  393,  249,  344,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   21,
       22,   20,   20,   20,   20,   20,   20,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,    1,   60,   61,   62,   63,

       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   85,   86,   87,   88,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[89] =
    {   0,
        1,    1,    2,    2,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,    1,    5,
        5,    5,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    2,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2033] =
    {   0,
        0,    0,   86,   91,   96,   99,  101,  103,  308, 6713,
     6713, 6713,  298,  267, 6713, 6713,   89,  264,   91, 6713,
     6713, 6713,  247,   93, 6713,   95,  254,   94,  106,  112,
      242, 6713,   89,  221,  109, 6713,  120,  122,  134,  136,
      139,  149,  128,  142,  198,  131,  201,  163,  160,  156,
      204,  144,  220,  268,  228,  211,  151,  232,  234, 6713,
      160, 6713,  217,  280,  158,  249,  262,  282,  300,  242,
      328,  304,  316,  344,  277,  236,  349,  245,  361,  370,
      380,  239,  388,  355, 6713,  204,    0, 6713, 6713,    0,
      334, 6713, 6713,  238, 6713, 6713, 6713, 6713,  222, 6713,

     6713, 6713, 6713, 6713, 6713, 6713, 6713, 6713, 6713, 6713,
     6713,    0, 6713, 6713, 6713,  176,  267,  399,  260,  368,
      180,  169, 6713, 6713, 6713,  164,  392,  285,  425,  383,
      410,  265,  441,  435,  444,  451,  457,  459,  463,  461,
      465,  469,  472,  474,  477,  479,  481,  483,  485,  487,
      489,  492,  496,  498,  503,  512,  521,  523,  509,  526,
      536,  545,  538,  555,  559,  567,  562,  572,  569,  575,
      577,  579,  581,  595,  597,  599,  604,  606,  608,  615,
      613,  610,  618,  620,  623,  628,  635,  643,  649,  653,
      655,  657,  660,  662,  667,  670,  672,  681,  683,  687,

      690, 6713,  185, 6713,  693,  695,  702,  706,  711,  718,
      704,  720,  722,  724,  727,  729,  731,  733,  735,  738,
      741,  745,  749,  756,  758,  763,  767,  770,  772,  779,
      786,  791,  796,  804,  800,  806,  810,  812,  814,  819,
      821,  825,  831,  833,  835,  844,  837,  847,  849,  851,
      864,  855,  869,  873,  878,  881,  883,  885,  891,  888,
      902,  894,  897,  904,  908,  910,  913,  918,  922,  924,
      927,  934,  936,  942,  949,  955,  958,  960,  967,  969,
      971, 6713, 6713,    0, 6713,  168, 6713, 6713, 6713, 6713,
     6713, 6713, 6713,    0,    0,  971,  977,  131,  138, 6713,

     6713,  979,  981,  983,  985,  991,  993, 1006, 1003, 1009,
     1011, 1015, 1013, 1017, 1023, 1025, 1027, 1029, 1033, 1036,
     1038, 1044, 1047, 1051, 1054, 1061, 1056, 1063, 1069, 1076,
     1081, 1099, 1078, 1088, 1101, 1110, 1106, 1112, 1117, 1122,
     1126, 1131, 1137, 1133, 1139, 1141, 1143, 1145, 1152, 1154,
     1156, 1159, 1162, 1164, 1166, 1168, 1170, 1175, 1189, 1191,
     1194, 1199, 1196, 1201, 1209, 1203, 1211, 1213, 1218, 1222,
     1224, 1226, 1229, 1277, 1233, 1231, 1242, 1252, 1235, 1254,
     1237, 1260, 1270, 1265, 1272, 1283, 1287, 1305, 1312, 1314,
     1320, 1324, 1326, 1329, 1331, 1333, 1340, 1342, 1344, 1346,

     1348, 1350, 1352, 1354, 1358, 1360, 1364, 1362, 1366, 1368,
     1370, 1372, 1376, 1379, 1382, 1386, 1394, 1399, 1401, 1404,
     1406, 1420, 1422, 1424, 1428, 1430, 1434, 1439, 1441, 1443,
     1445, 1448, 1452, 1454, 1456, 1464, 1462, 1459, 1467, 1469,
     1472, 1475, 1477, 1479, 1483, 1485, 1489, 1491, 1493, 1496,
     1503, 1499, 1508, 1517, 1511, 1519, 1527, 1529, 1536, 1538,
     1542, 1547, 1550, 1552, 1554, 1556, 1561, 1563, 1568, 1570,
     1572, 1574, 1577, 1579, 1586, 1588, 1590, 1592, 1608, 1598,
     1604, 1610,    0, 1626, 1617, 1629, 1633, 1639, 1643, 1645,
     1648, 1652, 1654, 1656, 1662, 1664, 1666, 1670, 1674, 1676,

     1681, 1684, 1678, 1686, 1688, 1692, 1694, 1697, 1699, 1702,
     1708, 1714, 1717, 1722, 1728, 1726, 1734, 1736, 1739, 1747,
     1754, 1757, 1759, 1763, 1771, 1773, 1775, 1777, 1779, 1781,
     1784, 1786, 1788, 1790, 1792, 1794, 1798, 1803, 1805, 1814,
     1817, 1821, 1823, 1825, 1829, 1834, 1840, 1836, 1844, 1855,
     1846, 1857, 1859, 1863, 1868, 1865, 1875, 1884, 1880, 1886,
     1888, 1891, 1893, 1895, 1902, 1905, 1914, 1916, 1918, 1922,
     1930, 1932, 1939, 1942, 1945, 1948, 1950, 1952, 1954, 1957,
     1960, 1962, 1964, 1966, 1970, 1976, 1972, 1988, 1990, 1992,
     1978, 1995, 1998, 2000, 2004, 2010, 2020, 2023, 2028, 2030,

     2034, 2036, 2038, 2040, 2042, 2044, 2048, 2050, 2052, 2054,
     2057, 2059, 2061, 2063, 2066, 2068, 2070, 2072, 2074, 2076,
     2080, 2083, 2085, 2087, 2090, 2093, 2095, 2100, 2104, 2107,
     2113, 2115, 2118, 2123, 2128, 2130, 2134, 2136, 2139, 2142,
     2149, 2151, 2157, 2159, 2161, 2163, 2165, 2167, 2169, 2173,
     2175, 2179, 2183, 2186, 2194, 2188, 2205, 2196, 2210, 2212,
     2214, 2216, 2218, 2221, 2229, 2224, 2231, 2233, 2235, 2237,
     2239, 2243, 2247, 2245, 2254, 2256, 2259, 2262, 2264, 2266,
     2268, 2270, 2273, 2277, 2283, 2288, 2294, 2296, 2299,    0,
     2301, 2303, 2309, 2314, 2327, 2321, 2332, 2335, 2325, 2344,

     2346, 2348, 2353, 2358, 2362, 2367, 2370, 2373, 2376, 2380,
     2382, 2386, 2388, 2394, 2396, 2398, 2400, 2402, 2406, 2404,
     2412, 2414, 2418, 2424, 2426, 2429, 2439, 2441, 2443, 2445,
     2447, 2450, 2460, 2455, 2462, 2464, 2470, 2472, 2474, 2476,
     2478, 2481, 2485, 2487, 2489, 2494, 2500, 2504, 2508, 2511,
     2513, 2515, 2517, 2519, 2524, 2526, 2528, 2539, 2542, 2545,
     2548, 2553, 2555, 2558, 2560, 2562, 2567, 2570, 2572, 2574,
     2577, 2580, 2587, 2589, 2591, 2596, 2603, 2605, 2610, 2612,
     2615, 2617, 2621, 2623, 2625, 2627, 2631, 2635, 2637, 2639,
     2643, 2648, 2650, 2652, 2654, 2657, 2661, 2675, 2665, 2679,

     2685, 2687, 2690, 2692, 2696, 2703, 2706, 2708, 2711, 2717,
     2721, 2723, 2727, 2725, 2729, 2731, 2733, 2735, 2739, 2741,
     2744, 2746, 2748, 2750, 2757, 2753, 2759, 2762, 2764, 2766,
     2769, 2774, 2777, 2785, 2779, 2787, 2796, 2798, 2808, 2812,
     2816, 2818, 2823, 2825, 2830, 2832, 2837, 2842, 2846, 2848,
     2850, 2852, 2854, 2860, 2862, 2865, 2867,  127, 2870, 2872,
     2874, 2881, 2878, 2886, 2883, 2888, 2891, 2896, 2900, 2902,
     2908, 2912, 2917, 2919, 2921, 2929, 2932, 2934, 2936, 2938,
     2940, 2942, 2948, 2950, 2952, 2954, 2960, 2962, 2964, 2970,
     2974, 2984, 2991, 2993, 2995, 2997, 2999, 3002, 3005, 3011,

     3018, 3020, 3022, 3024, 3026, 3028, 3030, 3035, 3037, 3041,
     3043, 3045, 3047, 3049, 3054, 3057, 3059, 3066, 3069, 3079,
     3081, 3085, 3092, 3094, 3101, 3104, 3107, 3109, 3111, 3113,
     3115, 3119, 3122, 3124, 3129, 3131, 3133, 3137, 3139, 3141,
     3144, 3151, 3153, 3157, 3159, 3164, 3171, 3173, 3181, 3184,
     3188, 3192, 3197, 3199, 3203, 3205, 3207, 3209, 3211, 3217,
     3220, 3222, 3229, 3231, 3233, 3235, 3239, 3241, 3237, 3246,
     3243, 3249, 3254, 3258, 3261, 3263, 3268, 3265, 3274, 3278,
     3281, 3292, 3296, 3300, 3306, 3308, 3310, 3312, 3316, 3323,
     3326, 3330, 3332, 3334, 3336, 3338, 3340, 3342, 3344, 3351,

     3354, 3356, 3358, 3360, 3362, 3364, 3368, 3370, 3375, 3377,
     3384, 3390, 3392, 3394, 3396, 3398,  120, 3403, 3405, 3407,
     3411, 3420, 3422, 3424, 3426, 3428, 3434, 3436, 3440, 3446,
     3448, 3450, 3452, 3455, 3457, 3459, 3462, 3469, 3472, 3474,
        0, 3476, 3478, 3484, 3480, 3486, 3488, 3490, 3493, 3495,
     3497, 3510, 3499, 3512, 3517, 3519, 3521, 3525, 3528, 3532,
     3534, 3537, 3540, 3544, 3546, 3554, 3558, 3562, 3571, 3577,
     3579, 3584, 3589, 3595, 3597, 3600, 3602, 3604, 3606, 3608,
     3610, 3616, 3618, 3621, 3623, 3625, 3629, 3633, 3635, 3637,
     3639, 3641, 3647, 3649, 3654, 3652, 3663, 3671, 3673, 3677,

     3681, 3685, 3687, 3689, 3692, 3694, 3698, 3700, 3702, 3704,
     3706, 3708, 3715, 3720, 3717, 3725, 3727, 3735, 3737, 3739,
     3741, 3743, 3745, 3747, 3752, 3757, 3766, 3768, 3772, 3774,
     3770, 3776, 3778, 3780, 3791, 3784, 3793, 3797, 3799, 3805,
     3802, 3812, 3816, 3818, 3822, 3826, 3828, 3833, 3835, 3838,
     3840, 3843, 3846, 3848, 3852, 3855, 3870, 3857, 3859, 3872,
     3874, 3876, 3878, 3880, 3882, 3884, 3886, 3889, 3891, 3894,
     3901, 3903, 3912, 3914, 3916, 3919, 3923, 3928, 3931, 3934,
      118, 3937, 3943, 3947, 3953, 3956, 3959, 3961, 3964, 3966,
     3972,    0, 3982, 3975, 3977, 3984, 3987, 3989, 3991, 3994,

     3996, 3998, 4002, 4004, 4007, 4012, 4010,    0, 4014, 4023,
     4025, 4027, 4029, 4034, 4036, 4039, 4041, 4047, 4049, 4053,
     4055, 4061, 4072, 4074, 4076, 4085, 4078, 4090, 4094, 4100,
     4103, 4107, 4109, 4111, 4113, 4116, 4118, 4120, 4124, 4126,
     4130, 4132, 4136, 4141, 4143, 4145, 4148, 4151, 4157, 4160,
     4162, 4168, 4170, 4172, 4175, 4177, 4180, 4182, 4192, 4197,
     4200, 4202, 4204, 4208, 4214, 4216, 4218, 4220, 4228, 4232,
     4234, 4236, 4238, 4240, 4242, 4244, 4246, 4249, 4251, 4254,
     4256, 4264, 4271, 4273, 4276, 4281, 4287, 4289, 4291, 4297,
     4299, 4303, 4308, 4315, 4321, 4312, 4325, 4327, 4330, 4332,

     4339, 4335, 4343, 4345, 4348, 4351, 4353, 4358, 4360, 4364,
     4367, 4374, 4382, 4386, 4389, 4393, 4395, 4397, 4405, 4408,
     4410, 4417, 4419, 4421, 4423, 4426, 4430, 4428, 4432, 4437,
     4442, 4445, 4448, 4450, 4454, 4460, 4462, 4465,    0, 4467,
     4471, 4473, 4475, 4477, 4479, 4489, 4491, 4486,    0, 4493,
     4495, 4497, 4507, 4509, 4511, 4515, 4517, 4519, 4521, 4529,
     4531, 4533, 4535, 4538, 4545, 4540, 4547, 4549, 4555, 4564,
     4566, 4568, 4570, 4572, 4575, 4579, 4581, 4584, 4588, 4595,
     4592, 4600, 4602, 4605, 4607, 4610, 4616, 4623, 4627, 4630,
     4632, 4634, 4636, 4638, 4644, 4649, 4651, 4655, 4658, 4660,

     4666, 4669, 4672, 4674, 4680, 4682, 4685, 4687, 4689, 4692,
     4694, 4696, 4702, 4699, 4706, 4712, 4714, 4716, 4718, 4724,
     4726, 4729, 4734, 4736, 4740, 4743, 4747, 4749, 4751, 4759,
     4762, 4753, 4764, 4769, 4773, 4778, 4780, 4789, 4784, 4791,
     4793, 4795, 4801, 4807, 4810, 4814, 4816, 4820, 4822, 4824,
     4830, 4833, 4839, 4846, 4848, 4851, 4854, 4856, 4862, 4868,
     4873, 4875, 4878, 4880, 4882, 4884, 4887, 4889, 4894, 4900,
     4902, 4904, 4915, 4917, 4919, 4921, 4923, 4926, 4932, 4934,
     4940, 4942, 4944, 4947, 4951, 4957, 4959,    0, 4961, 4963,
     4966, 4969, 4971, 4976, 4978, 4984, 4986, 4988, 4990, 4992,

     4995, 4998, 5000, 5002, 5004, 5009, 5012, 5021, 5014, 5023,
     5028, 5032, 5035, 5037, 5039, 5041, 5047, 5049, 5052, 5054,
     5058, 5063, 5067, 5069, 5076, 5071, 5078, 5082, 5086, 5089,
     5093, 5098, 5105, 5107, 5110, 5112, 5118, 5121, 5123, 5125,
     5130, 5132, 5135, 5137, 5141, 5143, 5146, 5148, 5150, 5152,
     5157, 5160, 5162, 5164, 5166, 5170, 5174, 5176, 5179, 5181,
     5186, 5191, 5195, 5197, 5199, 5203, 5212, 5214, 5217, 5219,
     5223, 5225, 5227, 5231, 5235, 5241, 5243, 5245, 5247, 5249,
     5251, 5253, 5255, 5257, 5261, 5263, 5270, 5272, 5274, 5276,
     5279, 5290, 5292, 5297, 5302, 5314, 5316, 5318, 5320, 5322,

     5324, 5326, 5328, 5330, 5334, 5339, 5342, 5344, 5347, 5349,
     5353, 5355, 5357, 5359, 5363, 5366, 5370, 5372, 5375, 5382,
     5385, 5387, 5394, 5396, 5398, 5402, 5406, 5414, 5418, 5423,
     5425, 5427, 5429, 5431, 5434, 5438, 5440, 5444, 5442, 5450,
     5452, 5454, 5456, 5458, 5460, 5464, 5466, 5471, 5473, 5475,
     5479, 5481, 5490, 5492, 5502, 5504, 5508, 5512, 5516, 5518,
     5520, 5524, 5529, 5533, 5535, 5539, 5542, 5544, 5546, 5548,
     5550, 5554, 5556, 5558, 5560, 5563, 5567, 5569, 5574, 5571,
     5583, 5586, 5588, 5590, 5594, 5596, 5598, 5600, 5609, 5616,
     5619, 5623, 5626, 5628, 5630, 5634, 5636, 5646, 5648, 5651,

     5653, 5655, 5657, 5663, 5665, 5668, 5670, 5672, 5678, 5682,
     5684, 5686, 5693, 5695, 5701, 5703, 5705, 5709, 5711, 5713,
     5717, 5719, 5721, 5725, 5727, 5729, 5736, 5741, 5738, 5743,
     5745, 5747, 5749, 5751, 5753, 5755, 5758, 5761, 5766, 5770,
     5772, 5774, 5783, 5785, 5788, 5791, 5795, 5797, 5801, 5803,
     5805, 5810, 5812, 5816, 5819, 5824, 5828, 5832, 5835, 5837,
     5839, 5842, 5844, 5847, 5849, 5853, 5855, 5860, 5862, 5867,
     5871, 5873, 5876, 5880, 5882, 5884, 5887, 5890, 5892, 5894,
     5896, 5900, 5902, 5904, 5906, 5908, 5910, 5914, 5920, 5925,
     5929, 5931, 5933, 5935, 5938, 5944, 5946, 5949, 5951, 5953,

     5957, 5959, 5961, 5965, 5969, 5971, 5973, 5975, 5979, 5981,
     5986, 5988, 5990, 5998, 6005, 6002, 6008, 6010, 6015, 6017,
     6023, 6026, 6030, 6032, 6034, 6039, 6046, 6048, 6050, 6052,
     6056, 6058, 6060, 6063, 6065, 6067, 6070, 6073, 6076, 6078,
     6080, 6082, 6084, 6086, 6088, 6090, 6092, 6094, 6096, 6100,
     6102, 6110, 6112, 6122, 6127, 6129, 6134, 6143, 6147, 6149,
     6151, 6153, 6155, 6159, 6161, 6165, 6167, 6169, 6173, 6175,
     6177, 6179, 6181, 6183, 6186, 6190, 6192, 6194, 6196, 6198,
     6201, 6203, 6206, 6209, 6211, 6213, 6218, 6220, 6222, 6226,
     6228, 6235, 6239, 6241, 6243, 6245, 6248, 6251, 6255, 6260,

     6264, 6270, 6272, 6275, 6277, 6280, 6284, 6286, 6288, 6290,
     6292, 6298, 6303, 6305, 6308, 6310, 6312, 6314, 6317, 6320,
     6327, 6329, 6331, 6335, 6337, 6340, 6342, 6344, 6347, 6349,
     6353, 6356, 6358, 6362, 6369, 6373, 6375, 6377, 6379, 6381,
     6383, 6387, 6390, 6397, 6399, 6401, 6403, 6407, 6409, 6411,
     6414, 6416, 6418, 6420, 6423, 6431, 6433, 6435, 6440, 6442,
     6445, 6449, 6451, 6453, 6455, 6461, 6463, 6465, 6467, 6474,
     6476, 6479, 6482, 6484, 6489, 6492, 6494, 6497, 6499, 6503,
     6506, 6508, 6511, 6513, 6516, 6518, 6520, 6522, 6525, 6529,
     6531, 6537, 6540, 6542, 6546, 6548, 6550, 6554, 6556, 6560,

     6562, 6564, 6566, 6568, 6575, 6577, 6580, 6582, 6585, 6587,
     6589, 6591, 6593, 6595, 6600, 6602, 6604, 6607, 6611, 6713,
     6681, 6686, 6691, 6694, 6699, 6704,  126, 6707,  120,  113,
      111,   86
    } ;

static yyconst flex_int16_t yy_def[2033] =
    {   0,
     2020,    1, 2021, 2021, 2022, 2022, 2023, 2023, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2024, 2024,
     2020, 2020, 2020, 2020, 2020, 2020, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2020,
     2020, 2020, 2020, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2020, 2020, 2025, 2020, 2020, 2025,
     2026, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,

     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2027, 2020, 2020, 2020, 2020, 2020, 2024, 2024, 2024,
     2028, 2020, 2020, 2020, 2020, 2020, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2020, 2020, 2020, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2020, 2020, 2025, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2027, 2027, 2020, 2024, 2020, 2028, 2020,

     2020, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2029, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2029,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2020, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2020, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2030, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2020, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2031, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2030, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2032, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2031, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2032, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,

     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
     2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,    0,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020
    } ;

static yyconst flex_int16_t yy_nxt[6802] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   29,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   46,
       46,   57,   58,   59,   60,   61,   62,   63,   46,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   46,   46,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   46,   46,   46,   85,   86,   10,   88,   88,
     1488,   89,   90,   88,   88,  102,   89,   90,   93,   94,

      105,   93,   94,   98,   99,   98,   99,  108,  103,  103,
      103,  110,  114,  122,  123, 1349,  106, 1208,  109,  115,
      111,  112,  116,  117,  690,  118,  118,  118,  116,  117,
      294,  118,  118,  118,  125,  126,  116, 2020,  116, 2020,
     1339,   91, 1192,  120,  116, 2020,   91,  116, 2020, 1041,
      116, 2020,  116, 2020,  298,  116, 2020,  483,  116, 2020,
      116, 2020,  202,  203,  132,  116, 2020,  116, 2020,  133,
      146,  285,  116, 2020,  116, 2020,  116, 2020,  142,  116,
     2020,   95,  127,   96,   95,  168,   96,  202,  149,  301,
      128,  152,  129,  134,  300,  130,  298,  135,  131,  143,

      136,  137,  295,  144,  138,  153,  147,  139,  166,  154,
      140,  148,  145,  141,  116, 2020,  150,  116, 2020,  151,
      116, 2020,  164,  175,  293,  199,  165,  116, 2020,  282,
      169,  212,  170,  167,  213,  171,  116, 2020,  155,  156,
      292,  196,  204,  160,  116, 2020,  124,  197,  116, 2020,
      116, 2020,  116, 2020,  176,  116, 2020,  198,  116, 2020,
      161,  116, 2020,  172,  121,  116, 2020,  113,  162,  157,
      158,  173,  107,  192,  163,  159,  116, 2020,  116, 2020,
      174,  116, 2020,  177,  116, 2020,  296,  296,  296,  104,
      283,  193,  101,  116, 2020,  194,  116, 2020,  116, 2020,

      100,  116, 2020,  178,  195,  230,  200, 2020,  201,  179,
      249,  273,  231,  180,  232,  181,  116, 2020,  233,  214,
      116, 2020,  215, 2020,  253,  217, 2020,  182,  216,  218,
     2020,  183,  116, 2020,  184,  185,  286,  186,  219,  187,
      205,  206,  188,  220,  116, 2020,  189,  190, 2020,  191,
      248,  207,  221,  222,  223, 2020,  208,  209,  210,  211,
      116, 2020,  224,  303,  225,  116, 2020,  226,  236, 2020,
      227,  116, 2020,  228, 2020,  237,  238,  116, 2020,  229,
     2020,  239,  240,  241,  116, 2020,  116, 2020,  242,  243,
     2020,  234, 2020,  244,  287,  235,  116, 2020,  288,  116,

     2020,  297, 2020,  245,  116, 2020,  289,  246,  116, 2020,
      290,  247,  291, 2020,  280,  116,  117, 2020,  118,  118,
      118,  281,  250, 2020,  254,  251,  116, 2020,  252,  256,
     2020,  257, 2020,  258,  255, 2020,  259,  260, 2020,  266,
      261,  116, 2020, 2020,  262,  263,  267,  274,  264,  265,
      275,  116, 2020,  268,  302, 2020,  269,  116, 2020,  306,
      116, 2020,  270,  271,  272, 2020,  276,  116, 2020,  308,
      277,  278,  279,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  307, 2020,  116, 2020,  304,  116, 2020,
      116, 2020,  305,  116, 2020,  116, 2020,  116, 2020,  116,

     2020,  116, 2020,  116, 2020,  116, 2020,  309,  116, 2020,
      311, 2020,  116, 2020,  116, 2020,  310,  318,  313,  116,
     2020, 2020,  323, 2020,  316,  116, 2020,  326,  116, 2020,
     2020,  336, 2020,  312,  314,  315,  322,  116, 2020,  116,
     2020,  317,  116, 2020, 2020,  325,  324, 2020,  319, 2020,
      320,  321,  116, 2020,  116, 2020,  328,  327, 2020,  337,
      335,  116, 2020, 2020,  330,  331,  333,  344,  329, 2020,
      332,  116, 2020,  334, 2020,  116, 2020, 2020,  116, 2020,
      338, 2020,  343,  116, 2020,  116, 2020,  339,  116, 2020,
      340,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  347,

     2020,  341,  352,  342, 2020,  355,  350,  351, 2020,  354,
      345,  116, 2020,  116, 2020,  116, 2020,  346,  349, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  364,  116,
     2020,  116, 2020,  348,  116, 2020,  116, 2020,  353,  116,
     2020,  358,  356,  371,  116, 2020,  359, 2020,  369, 2020,
      365,  116, 2020,  370, 2020,  357, 2020,  360,  372,  116,
     2020, 2020,  361,  366,  363,  116, 2020, 2020,  362,  116,
     2020,  116, 2020,  116, 2020,  367,  116, 2020,  116, 2020,
     2020,  368, 2020,  116, 2020,  383,  116, 2020,  116, 2020,
      373,  377, 2020,  375,  376, 2020,  374,  116, 2020,  116,

     2020, 2020,  379,  116, 2020,  387,  116, 2020,  378,  116,
     2020,  116, 2020,  388,  382, 2020,  389, 2020,  116, 2020,
      116, 2020,  116, 2020, 2020,  380,  386,  116, 2020,  381,
     2020,  384, 2020,  385,  116, 2020,  116, 2020,  116, 2020,
      116, 2020, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020,  116, 2020,  390,  116, 2020, 2020,
      391,  116, 2020,  392, 2020,  116, 2020, 2020,  394,  395,
      393,  396,  116, 2020,  116, 2020, 2020,  398,  397,  116,
     2020, 2020,  400,  116, 2020,  402,  116, 2020,  116, 2020,
     2020,  399, 2020,  401,  410,  116, 2020,  403,  404,  411,

      407,  408,  116, 2020,  405, 2020,  406,  116, 2020, 2020,
      409,  414,  116, 2020, 2020,  415,  116, 2020,  412,  413,
      116, 2020,  116, 2020, 2020,  416,  116, 2020,  116, 2020,
      116, 2020,  417,  418, 2020,  116, 2020,  116, 2020, 2020,
      419,  116, 2020, 2020,  421, 2020,  420,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  425, 2020,  422, 2020,  423,
      116, 2020,  427,  116, 2020,  116, 2020,  116, 2020, 2020,
      424,  116, 2020,  430,  426, 2020,  431,  428, 2020,  432,
      116, 2020,  434, 2020,  429,  116, 2020,  433,  435,  116,
     2020, 2020,  437,  436,  116, 2020,  438,  116, 2020,  116,

     2020,  116, 2020,  440,  116, 2020,  441,  116, 2020,  442,
      116, 2020,  444,  116, 2020,  448, 2020,  439,  116, 2020,
      116, 2020, 2020,  443,  116, 2020,  116, 2020,  445,  116,
     2020,  446,  451,  449,  116, 2020,  450,  447,  116, 2020,
      116, 2020,  457,  116, 2020, 2020,  459,  452, 2020,  458,
      116, 2020,  116, 2020,  453, 2020,  454,  455,  116, 2020,
      462,  456, 2020,  460,  461,  116, 2020,  466,  467,  463,
      464,  116, 2020,  465,  116, 2020,  116, 2020, 2020,  468,
      470, 2020,  469,  116, 2020,  116, 2020,  116, 2020,  471,
      296,  296,  296,  116, 2020,  116, 2020,  116, 2020,  116,

     2020,  116, 2020, 2020,  472,  473,  474,  116, 2020,  116,
     2020, 2020,  476,  484,  475, 2020,  478, 2020,  477,  116,
     2020,  485,  116, 2020,  479,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020, 2020,  480, 2020,  481,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  482,  486,  116,
     2020,  491,  116, 2020,  116, 2020,  489, 2020,  502,  487,
      116, 2020,  488,  116, 2020, 2020,  504,  116, 2020, 2020,
      116, 2020,  116, 2020,  490,  492,  495,  116, 2020,  116,
     2020, 2020,  494, 2020,  500,  116, 2020,  493,  497,  514,
      496,  498,  116, 2020,  116, 2020, 2020,  116, 2020,  505,

      503,  513, 2020,  499,  116, 2020, 2020,  501,  508,  509,
      510,  519,  506, 2020,  512,  116, 2020,  116, 2020,  515,
      511,  518,  116, 2020, 2020,  507,  116, 2020,  116, 2020,
     2020,  520,  521,  116, 2020,  522, 2020,  516,  116, 2020,
      523,  524,  116, 2020,  530,  525,  526,  116, 2020,  116,
     2020,  517,  527,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020,  529,  528, 2020,  538,  116, 2020,
      116, 2020,  116, 2020, 2020,  116, 2020,  531,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020,  534,
      532,  116, 2020,  544,  535, 2020,  547, 2020,  536, 2020,

      533, 2020,  541,  550,  540,  116, 2020,  116, 2020,  539,
      116, 2020,  116, 2020,  537,  116, 2020,  116, 2020,  116,
     2020,  542,  545, 2020,  543,  116, 2020,  116, 2020,  116,
     2020,  549, 2020,  546,  116, 2020, 2020,  548,  116, 2020,
      116, 2020,  116, 2020, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  564, 2020,  552,  116, 2020,
      554,  551,  565,  563, 2020,  558,  553, 2020,  116, 2020,
      116, 2020,  560,  555,  556, 2020,  116, 2020, 2020,  557,
      561,  116, 2020, 2020,  559, 2020,  116, 2020,  116, 2020,
     2020,  562,  566,  116, 2020, 2020,  584, 2020,  567,  116,

     2020,  586, 2020,  116, 2020,  581,  568,  569,  570,  579,
      571,  588,  582, 2020,  580,  593,  572, 2020,  573, 2020,
      574,  116, 2020,  575,  576,  583,  577,  578,  116, 2020,
      116, 2020, 2020,  585,  587,  590,  116, 2020, 2020,  589,
      116, 2020,  116, 2020,  591,  116, 2020,  116, 2020,  116,
     2020, 2020,  594, 2020,  595,  592,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020, 2020,  600,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     2020,  596,  116, 2020,  601,  116, 2020,  597,  116, 2020,

     2020,  598,  116, 2020,  602, 2020,  599, 2020,  605,  608,
      116, 2020,  603, 2020,  604,  116, 2020,  116, 2020,  606,
      116, 2020,  116, 2020,  611,  607, 2020,  615,  610,  609,
      613, 2020,  612,  617, 2020,  618,  116, 2020,  116, 2020,
      116, 2020,  614,  620,  116, 2020,  116, 2020, 2020,  616,
      116, 2020,  621, 2020,  619,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  622,  116, 2020, 2020,  625,  116, 2020,
      116, 2020,  116, 2020,  624,  116, 2020,  623,  116, 2020,
      116, 2020,  627,  116, 2020,  116, 2020,  626,  116, 2020,
      629,  116, 2020,  116, 2020,  116, 2020,  631,  628,  116,

     2020,  116, 2020, 2020,  630,  116, 2020,  116, 2020,  116,
     2020,  636,  116, 2020,  633,  116, 2020,  632,  634,  116,
     2020,  641,  637, 2020,  116, 2020,  635,  116, 2020,  638,
      639,  640, 2020,  116, 2020,  116, 2020,  655, 2020,  643,
     2020,  642,  646,  116, 2020,  116, 2020, 2020,  644, 2020,
      648,  645,  116, 2020,  116, 2020, 2020,  647,  116, 2020,
      650,  649,  653,  116, 2020,  652,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  651,  654,  656,  116, 2020,  116,
     2020, 2020,  658,  657,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  660,  116, 2020,  116, 2020, 2020,  661,  659,

     2020,  662,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     2020,  668,  663,  667,  116, 2020,  664, 2020,  665,  669,
      116, 2020, 2020,  666,  116, 2020,  116, 2020,  672, 2020,
      671, 2020,  670,  116, 2020,  674,  678, 2020,  679,  680,
     2020,  681,  116, 2020,  682,  116, 2020,  673,  683,  116,
     2020,  684, 2020,  675,  685,  116, 2020, 2020,  686,  116,
     2020,  116, 2020,  677,  116, 2020, 2020,  676,  116, 2020,
      116, 2020,  116, 2020,  688, 2020,  687,  692,  116, 2020,
      116, 2020,  116, 2020, 2020,  691,  116, 2020, 2020,  689,
      116, 2020,  116, 2020,  116, 2020,  694,  116, 2020, 2020,

      116, 2020,  116, 2020,  116, 2020,  696,  693,  116, 2020,
      116, 2020,  695,  116, 2020,  116, 2020,  699,  116, 2020,
      700, 2020,  697,  709,  116, 2020,  714, 2020,  712,  703,
      116, 2020,  701,  116, 2020,  698, 2020,  705,  116, 2020,
      708,  702,  116, 2020,  116, 2020, 2020,  706, 2020,  704,
      116, 2020,  116, 2020,  707,  116, 2020, 2020,  710,  711,
      722, 2020,  713,  116, 2020,  723,  716,  715, 2020,  721,
      116, 2020, 2020,  116, 2020,  116, 2020, 2020,  717,  116,
     2020, 2020,  718, 2020,  720, 2020,  719,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  724,

      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  725,  735,  116, 2020, 2020,  737,  729,  116,
     2020,  116, 2020,  730, 2020,  734, 2020,  727,  728,  726,
      116, 2020,  731,  116, 2020,  738, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020,  733,  116, 2020,  736, 2020,  732,
      116, 2020,  116, 2020, 2020,  744,  116, 2020,  748,  745,
      116, 2020,  116, 2020,  743, 2020,  739,  741,  740, 2020,
      751,  116, 2020,  116, 2020,  116, 2020,  742, 2020,  116,
     2020,  116, 2020, 2020,  116, 2020, 2020,  746,  747, 2020,
      756,  116, 2020,  750, 2020,  752,  116, 2020, 2020,  759,

      116, 2020,  116, 2020,  116, 2020,  749,  116, 2020,  116,
     2020,  116, 2020, 2020,  762, 2020,  753,  763,  116, 2020,
     2020,  116, 2020, 2020,  755,  754,  758,  760, 2020,  764,
      116, 2020,  116, 2020,  116, 2020, 2020,  757,  116, 2020,
      769, 2020,  761,  771, 2020,  773,  116, 2020,  116, 2020,
      768,  772, 2020,  770, 2020,  116, 2020,  766,  116, 2020,
      765,  116, 2020, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  767,  116, 2020,  774,  116, 2020,  116, 2020,
      116, 2020,  116, 2020, 2020,  777,  116, 2020,  116, 2020,
     2020,  775,  116, 2020,  116, 2020, 2020,  776,  780,  779,

      778,  794, 2020,  787,  116, 2020,  116, 2020,  116, 2020,
      796,  116, 2020,  784,  116, 2020,  116, 2020,  781,  785,
      116, 2020, 2020,  782,  783,  789,  116, 2020, 2020,  791,
      788,  792,  786, 2020,  795,  793,  116, 2020,  797,  116,
     2020,  798,  790,  800,  116, 2020,  116, 2020, 2020,  801,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020, 2020,  802,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  799,  116, 2020,  116, 2020,  116, 2020,  116,
     2020, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020, 2020,  803,  116, 2020,  815,  116,

     2020,  116, 2020,  116, 2020,  804,  116, 2020, 2020,  116,
     2020,  116, 2020,  808, 2020,  807,  116, 2020, 2020,  806,
      116, 2020,  812,  116, 2020, 2020,  805, 2020,  811,  116,
     2020,  116, 2020,  809,  116, 2020, 2020,  810,  813,  116,
     2020, 2020,  816,  814,  116, 2020,  116, 2020,  820,  818,
      116, 2020,  116, 2020,  823,  116, 2020,  817,  116, 2020,
     2020,  819, 2020,  821,  822,  116, 2020,  116, 2020, 2020,
      824,  825, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020, 2020,  826,  116,
     2020,  116, 2020, 2020,  827,  116, 2020, 2020,  832,  116,

     2020,  830,  116, 2020,  116, 2020,  829, 2020,  828, 2020,
      116, 2020,  116, 2020,  833,  831,  835, 2020,  836,  834,
     2020,  116, 2020, 2020,  837,  844,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  840,  116, 2020,  838,
      116, 2020,  842,  839,  841,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020, 2020,  843,  116,
     2020,  116, 2020,  116, 2020, 2020,  845,  846,  847,  858,
      116, 2020,  116, 2020,  848,  116, 2020,  849,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  850,  116,
     2020,  851,  853,  116, 2020, 2020,  855,  852, 2020,  116,

     2020, 2020,  854, 2020,  116, 2020, 2020,  856, 2020,  867,
      116, 2020,  116, 2020,  857,  116, 2020,  116, 2020,  116,
     2020, 2020,  859, 2020,  860,  116, 2020,  865, 2020,  863,
      116, 2020,  868,  864,  861, 2020,  869,  116, 2020, 2020,
      862,  116, 2020,  116, 2020,  879, 2020,  866,  116, 2020,
      871,  116, 2020,  870,  872,  873, 2020,  880,  881,  874,
      116, 2020,  116, 2020,  116, 2020,  882,  889,  883,  116,
     2020,  877,  884,  885,  116, 2020, 2020,  886,  116, 2020,
      876,  875, 2020,  116, 2020,  887,  116, 2020,  878,  116,
     2020, 2020,  116, 2020, 2020,  888,  116, 2020,  116, 2020,

     2020,  890,  116, 2020,  116, 2020, 2020,  891,  899,  892,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020, 2020,  893,  909,  910,  116, 2020,
      116, 2020, 2020,  897,  116, 2020,  894,  896, 2020,  900,
      116, 2020,  116, 2020,  895,  116, 2020,  903, 2020,  902,
     2020,  898, 2020,  904,  901,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  908,  116, 2020,  906,  905,
      912,  116, 2020,  907, 2020,  911,  116, 2020,  116, 2020,
      116, 2020, 2020,  915, 2020,  914,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  913,  116, 2020,  916,

      919,  116, 2020,  116, 2020,  116, 2020,  917, 2020,  923,
      116, 2020, 2020,  921,  920,  918,  116, 2020,  925,  924,
      116, 2020, 2020,  922,  116, 2020,  935,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  926, 2020,  927,
      116, 2020,  116, 2020,  116, 2020,  932, 2020,  928, 2020,
      930, 2020,  934, 2020,  929,  116, 2020,  931,  116, 2020,
      940,  116, 2020,  937,  116, 2020,  933, 2020,  945,  116,
     2020,  116, 2020, 2020,  116, 2020,  116, 2020,  116, 2020,
      941,  939,  936,  116, 2020,  938,  116, 2020,  116, 2020,
      116, 2020, 2020,  116, 2020,  942,  116, 2020,  943, 2020,

      950,  947,  944,  116, 2020,  116, 2020,  116, 2020,  949,
      948,  958,  116, 2020, 2020,  960,  946,  952, 2020,  116,
     2020,  116, 2020,  953, 2020,  951,  116, 2020,  116, 2020,
      955,  116, 2020,  116, 2020, 2020,  954,  116, 2020,  116,
     2020,  116, 2020,  116, 2020, 2020,  956,  116, 2020,  957,
      961,  116, 2020,  116, 2020,  116, 2020, 2020,  959,  116,
     2020, 2020,  962,  964,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  963,  116, 2020,  966,  969,  116, 2020, 2020,
      970,  116, 2020,  967,  965,  983,  978,  982,  968, 2020,
      973,  116, 2020, 2020,  974,  116, 2020,  972,  975,  971,

     2020,  116, 2020,  116, 2020,  977,  116, 2020,  116, 2020,
     2020,  980,  116, 2020, 2020,  976, 2020,  989,  985,  116,
     2020,  986,  116, 2020,  116, 2020,  979,  116, 2020,  987,
     2020,  981,  988,  116, 2020,  984,  990,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020,  993,  116, 2020,  116, 2020, 1000,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  992,  116,
     2020, 2020,  991,  116, 2020,  116, 2020, 2020,  116, 2020,
      116, 2020,  116, 2020,  994,  116, 2020, 2020,  999,  995,
      116, 2020, 1002,  116, 2020,  116, 2020, 2020,  996,  997,

      998,  116, 2020,  116, 2020, 1006, 2020, 1017, 2020, 1001,
     2020, 1003,  116, 2020,  116, 2020, 1004, 1005, 1007, 2020,
     1009, 1011, 2020, 1008,  116, 2020, 2020, 1012,  116, 2020,
     2020, 1018,  116, 2020,  116, 2020, 2020, 1010, 1013,  116,
     2020,  116, 2020, 1019, 2020, 1014,  116, 2020,  116, 2020,
     2020, 1021, 1015,  116, 2020, 1016, 1020, 1022,  116, 2020,
     2020, 1024,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020, 1023, 1026, 2020, 1027,  116, 2020,  116, 2020,
     1025,  116, 2020,  116, 2020, 1029,  116, 2020,  116, 2020,
      116, 2020, 2020, 1030,  116, 2020, 1028,  116, 2020,  116,

     2020, 1031,  116, 2020,  116, 2020, 2020,  116, 2020, 2020,
     1034, 1036,  116, 2020, 2020, 1037,  116, 2020,  116, 2020,
     2020, 1032, 1033, 2020,  116, 2020, 1040, 1035,  116, 2020,
     2020, 1042, 1050,  116, 2020,  116, 2020,  116, 2020, 1045,
     2020, 1043, 1038, 1039, 1044,  116, 2020, 1046,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     1048, 1049, 1052, 1047,  116, 2020,  116, 2020,  116, 2020,
      116, 2020, 1051, 1054, 2020, 1053,  116, 2020,  116, 2020,
      116, 2020, 2020, 1062, 2020, 1055,  116, 2020, 1061, 1056,
      116, 2020, 2020, 1064, 2020, 1058, 1059, 1066, 1070, 2020,

      116, 2020, 2020, 1060, 2020, 1063, 1057,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020, 1068,  116, 2020,
     1073,  116, 2020, 1067, 1074, 2020, 1071,  116, 2020, 1065,
     1077, 1079, 1080, 1069,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 1081, 2020,
     1072,  116, 2020,  116, 2020, 2020, 1076,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020, 2020, 1092, 1075,
      116, 2020, 1093,  116, 2020,  116, 2020, 1078, 2020, 1085,
     2020, 1082,  116, 2020, 2020,  116, 2020, 1089, 2020, 1083,
     1084, 2020, 1090, 2020, 1095,  116, 2020,  116, 2020, 2020,

     1087,  116, 2020, 1088, 2020, 1086, 1094, 1091,  116, 2020,
      116, 2020, 2020, 1097, 1096, 2020, 1098,  116, 2020, 2020,
      116, 2020, 1100,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 1099, 1102,  116, 2020, 1101,  116, 2020,
      116, 2020, 1103, 2020, 1104,  116, 2020,  116, 2020,  116,
     2020, 2020, 1105,  116, 2020,  116, 2020,  116, 2020, 2020,
      116, 2020, 1108, 1109, 1106, 2020, 1107,  116, 2020,  116,
     2020, 2020, 1120,  116, 2020,  116, 2020, 2020, 1110, 1113,
      116, 2020, 1111, 2020, 1123, 1116, 1114,  116, 2020,  116,
     2020, 1112, 2020, 1115, 1124, 2020, 1119,  116, 2020, 2020,

      116, 2020, 2020, 1118,  116, 2020, 1121, 1122,  116, 2020,
     1125, 1117, 1133,  116, 2020,  116, 2020, 2020, 1128,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020,
     1127, 2020, 1131,  116, 2020, 1126,  116, 2020,  116, 2020,
     2020, 1129, 2020, 1130, 1132,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020, 1134,  116, 2020, 2020,  116, 2020, 2020, 1138, 1136,
      116, 2020, 2020, 1135,  116, 2020, 2020,  116, 2020,  116,
     2020,  116, 2020, 1137,  116, 2020, 2020, 1139, 2020, 1141,
      116, 2020, 2020, 1140,  116, 2020, 1142,  116, 2020, 2020,

     1145, 1146, 1147, 1151, 1155, 1143, 1148, 1157,  116, 2020,
     1144, 1152,  116, 2020, 2020, 1149,  116, 2020, 1150, 1154,
     2020, 1159,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     2020, 1153,  116, 2020, 1162, 2020, 1156, 2020, 1158,  116,
     2020, 1160,  116, 2020, 2020, 1161,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020, 2020, 1164, 2020, 1165, 1163,  116, 2020, 1166,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020, 1169, 1167,  116, 2020,  116, 2020, 2020, 1168,
     1181,  116, 2020,  116, 2020, 2020, 1171, 1172, 2020, 1173,

      116, 2020, 2020, 1170, 2020, 1177,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020, 1174, 1175, 1176,  116,
     2020,  116, 2020,  116, 2020, 2020, 1182,  116, 2020, 1180,
     1178, 2020, 1179, 2020, 1193, 1185,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020, 2020, 1184, 1183, 1187,
      116, 2020,  116, 2020, 1186, 1188,  116, 2020, 1189, 1190,
     2020, 1191,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     1195,  116, 2020,  116, 2020,  116, 2020, 1194,  116, 2020,
     2020, 1197, 2020, 1198, 2020,  116, 2020, 1196,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020, 1199,

      116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020, 1202, 1200, 2020,
     1201, 2020, 1203, 1216, 2020, 1217,  116, 2020,  116, 2020,
     2020, 1204, 1206,  116, 2020,  116, 2020,  116, 2020, 1207,
     1205,  116, 2020, 1211,  116, 2020, 2020, 1212,  116, 2020,
      116, 2020, 1209,  116, 2020, 1210,  116, 2020, 1218, 1213,
      116, 2020,  116, 2020, 2020, 1228, 1214, 2020, 1215, 2020,
      116, 2020, 1230, 1220,  116, 2020, 2020, 1219,  116, 2020,
     2020, 1223, 1232, 2020, 1221, 2020, 1225,  116, 2020, 2020,
     1222, 1226, 2020,  116, 2020,  116, 2020, 2020, 1224, 2020,

      116, 2020, 2020, 1229, 1238,  116, 2020, 2020, 1231, 1227,
     2020,  116, 2020,  116, 2020, 1239,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 1243, 1234,
     2020, 1233,  116, 2020,  116, 2020, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020, 1237,  116, 2020, 1235, 1236,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020,
     1254, 1240, 1241,  116, 2020,  116, 2020, 1245,  116, 2020,
      116, 2020, 2020, 1248, 1242, 2020, 1246, 2020, 1247,  116,
     2020, 1244, 2020, 1249, 1252, 1251, 1259,  116, 2020,  116,
     2020, 2020, 1250,  116, 2020, 1253, 1256,  116, 2020, 2020,

     1258,  116, 2020,  116, 2020,  116, 2020, 1255,  116, 2020,
      116, 2020, 2020, 1257,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020, 2020, 1261, 2020, 1260,
     1269,  116, 2020,  116, 2020, 1262,  116, 2020, 1270, 2020,
     1264,  116, 2020,  116, 2020, 2020, 1276, 2020, 1265, 1263,
     1266,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020, 2020, 1267, 1273,  116, 2020,
     2020, 1268, 1272,  116, 2020, 2020, 1274, 1278, 1271, 1277,
     2020, 1275,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 1279, 1281,

      116, 2020, 1282, 1288, 1291, 1280, 1283,  116, 2020,  116,
     2020, 2020, 1285,  116, 2020,  116, 2020, 1295,  116, 2020,
     1286,  116, 2020, 1292, 2020, 1284, 2020, 1297,  116, 2020,
     1287, 2020,  116, 2020,  116, 2020, 2020, 1289,  116, 2020,
     1299, 1293,  116, 2020,  116, 2020, 1290, 1298, 1294,  116,
     2020,  116, 2020, 2020,  116, 2020,  116, 2020, 2020,  116,
     2020, 1296,  116, 2020,  116, 2020, 2020, 1303,  116, 2020,
     1300,  116, 2020,  116, 2020,  116, 2020, 2020, 1301, 1305,
     2020, 1302, 2020, 1306, 1307, 1304,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,

      116, 2020,  116, 2020, 1308,  116, 2020,  116, 2020, 1309,
      116, 2020, 2020, 1312, 1310, 1311, 1313,  116, 2020,  116,
     2020, 1322, 1320, 2020, 1314, 1316, 1315, 1317,  116, 2020,
      116, 2020,  116, 2020, 1319,  116, 2020, 1318, 1321,  116,
     2020, 2020, 1332, 1326,  116, 2020, 2020,  116, 2020, 2020,
      116, 2020, 1324,  116, 2020, 2020, 1323, 2020, 1325,  116,
     2020, 2020, 1327,  116, 2020, 1328, 2020, 1329, 1330,  116,
     2020, 2020,  116, 2020, 1331,  116, 2020,  116, 2020, 1346,
      116, 2020,  116, 2020, 2020, 1335, 2020, 1333,  116, 2020,
     1334,  116, 2020,  116, 2020, 1336, 1337, 1338,  116, 2020,

      116, 2020, 1350,  116, 2020,  116, 2020,  116, 2020, 1340,
      116, 2020,  116, 2020,  116, 2020, 2020, 1342,  116, 2020,
      116, 2020, 1347,  116, 2020, 1341,  116, 2020,  116, 2020,
      116, 2020, 2020, 1343, 1344, 1345, 1352, 2020, 1351,  116,
     2020,  116, 2020,  116, 2020,  116, 2020, 2020, 1348, 1354,
      116, 2020,  116, 2020, 1355,  116, 2020,  116, 2020, 1357,
     2020, 1359, 2020,  116, 2020,  116, 2020, 1356, 1353,  116,
     2020,  116, 2020, 1363, 1358, 2020, 1369,  116, 2020, 2020,
     1361, 1360, 1362, 2020, 1374, 2020, 1371, 1364,  116, 2020,
      116, 2020,  116, 2020,  116, 2020, 1365, 2020, 1367, 2020,

     1368,  116, 2020, 1366, 2020, 1380,  116, 2020, 1373, 2020,
      116, 2020, 1370, 1372, 2020, 1378,  116, 2020, 1375,  116,
     2020, 1382, 1383,  116, 2020,  116, 2020,  116, 2020,  116,
     2020, 1384,  116, 2020,  116, 2020,  116, 2020, 1386, 1376,
      116, 2020,  116, 2020, 2020, 1377,  116, 2020,  116, 2020,
     2020, 1392,  116, 2020, 1379, 2020, 1381,  116, 2020,  116,
     2020,  116, 2020, 2020,  116, 2020, 2020,  116, 2020, 2020,
     1385, 1393, 1388,  116, 2020, 1390,  116, 2020,  116, 2020,
     2020, 1391, 1387, 1398,  116, 2020,  116, 2020,  116, 2020,
     1389,  116, 2020,  116, 2020, 2020,  116, 2020,  116, 2020,

     1406, 2020, 1395, 2020, 1394, 2020, 1396, 1400,  116, 2020,
     2020, 1397, 1401,  116, 2020, 1399,  116, 2020,  116, 2020,
      116, 2020, 1410, 1403,  116, 2020, 2020, 1402, 2020, 1405,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020, 1407,
     2020, 1408, 1404, 1409,  116, 2020, 2020, 1416,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020, 2020,  116, 2020,  116, 2020, 1413,
      116, 2020,  116, 2020, 2020, 1411, 2020, 1420, 2020, 1412,
      116, 2020, 1414, 2020, 1419, 2020, 1415,  116, 2020,  116,
     2020, 1421,  116, 2020, 1417, 2020, 1418,  116, 2020, 1424,

     2020, 1422, 1431,  116, 2020,  116, 2020,  116, 2020, 1423,
     2020, 1426, 1428,  116, 2020,  116, 2020, 2020, 1427,  116,
     2020, 1425, 1439, 1429,  116, 2020, 2020, 1432,  116, 2020,
     1430,  116, 2020, 2020, 1433, 1443, 1434,  116, 2020, 1435,
     1440,  116, 2020,  116, 2020, 2020,  116, 2020,  116, 2020,
     1438,  116, 2020, 2020, 1437,  116, 2020, 2020, 1436,  116,
     2020,  116, 2020, 2020,  116, 2020, 1448,  116, 2020,  116,
     2020, 1444, 2020, 1441,  116, 2020,  116, 2020, 2020, 1442,
      116, 2020, 1445,  116, 2020, 2020, 1458, 2020, 1446, 1459,
      116, 2020, 2020, 1456, 1457, 1450, 1447, 1449,  116, 2020,

     1451, 1460,  116, 2020, 1461,  116, 2020, 2020, 1452,  116,
     2020,  116, 2020,  116, 2020, 1470, 2020, 1454, 2020, 1453,
     1455,  116, 2020, 1462,  116, 2020,  116, 2020, 2020, 1467,
     2020, 1464, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020, 1463,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     2020, 1465, 1481,  116, 2020, 2020, 1468, 1474,  116, 2020,
     1469,  116, 2020, 1466,  116, 2020,  116, 2020, 2020, 1471,
      116, 2020, 2020, 1473, 2020, 1483,  116, 2020,  116, 2020,
     1472,  116, 2020,  116, 2020, 2020, 1475,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020, 2020, 1478, 1476,

     1477, 1479,  116, 2020, 1480,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020, 1484, 2020, 1485, 1482, 2020,
     1494, 1486, 2020,  116, 2020,  116, 2020,  116, 2020, 2020,
     1489,  116, 2020,  116, 2020,  116, 2020,  116, 2020, 1487,
     1490, 2020, 1493, 2020, 1492,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 1491,  116, 2020,  116, 2020, 1495, 2020,
     1497,  116, 2020,  116, 2020,  116, 2020, 1496, 2020, 1499,
     1500,  116, 2020, 2020, 1501, 2020, 1498, 2020, 1502, 1508,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     2020,  116, 2020, 1503, 1511,  116, 2020,  116, 2020, 1504,

      116, 2020, 2020, 1509,  116, 2020, 1510, 1505,  116, 2020,
     1506,  116, 2020, 2020, 1512, 1507,  116, 2020,  116, 2020,
     1523,  116, 2020,  116, 2020, 2020,  116, 2020, 2020, 1514,
     1526, 1517,  116, 2020, 2020, 1515, 1513, 1518, 1522,  116,
     2020, 2020, 1516,  116, 2020, 1519,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020, 2020, 1521, 1529, 2020,
      116, 2020, 1520, 1532, 1524,  116, 2020,  116, 2020, 2020,
     1534,  116, 2020, 1530,  116, 2020,  116, 2020, 2020, 1525,
     1536, 1533,  116, 2020, 1535,  116, 2020, 2020,  116, 2020,
      116, 2020, 1528, 2020, 1527, 1531,  116, 2020,  116, 2020,

     2020,  116, 2020,  116, 2020,  116, 2020, 2020,  116, 2020,
      116, 2020,  116, 2020, 1539,  116, 2020, 1549,  116, 2020,
     2020, 1538,  116, 2020, 2020, 1540, 2020, 1537,  116, 2020,
      116, 2020,  116, 2020,  116, 2020, 2020, 1545, 1541, 1550,
      116, 2020,  116, 2020, 1542,  116, 2020, 2020, 1543, 1544,
      116, 2020,  116, 2020, 2020, 1555,  116, 2020, 1546,  116,
     2020, 1547, 1548,  116, 2020,  116, 2020,  116, 2020,  116,
     2020, 1551, 2020, 1552, 1553,  116, 2020, 2020,  116, 2020,
      116, 2020, 2020, 1558, 1569,  116, 2020, 2020, 1554,  116,
     2020, 1557, 2020, 1556,  116, 2020,  116, 2020, 2020, 1561,

      116, 2020, 1560, 2020, 1559,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020, 1562, 2020, 1563,  116, 2020, 2020,
     1564, 2020, 1567,  116, 2020, 1565,  116, 2020, 1566, 1568,
      116, 2020,  116, 2020, 1570, 2020,  116, 2020,  116, 2020,
      116, 2020, 2020, 1571, 2020, 1572,  116, 2020, 1574,  116,
     2020, 1575, 2020, 1573, 1576,  116, 2020, 2020, 1578, 2020,
     1577, 2020,  116, 2020,  116, 2020, 2020,  116, 2020, 2020,
      116, 2020,  116, 2020, 2020, 1583, 2020, 1580,  116, 2020,
     2020, 1579, 2020, 1581,  116, 2020, 1582, 1584, 1586,  116,
     2020,  116, 2020, 1585,  116, 2020,  116, 2020,  116, 2020,

      116, 2020, 2020,  116, 2020,  116, 2020, 2020, 1587, 1590,
      116, 2020, 1589, 1594, 1588, 1592,  116, 2020,  116, 2020,
      116, 2020, 2020, 1593, 2020, 1600, 1591, 1595, 2020, 1596,
     1603,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020, 1597,  116, 2020, 2020, 1602, 1604, 1598,  116, 2020,
      116, 2020, 1599, 1601, 1614, 2020,  116, 2020,  116, 2020,
      116, 2020, 1605,  116, 2020, 1608, 1606,  116, 2020, 2020,
     1607, 1615, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020, 1609,  116, 2020, 2020,  116, 2020,  116, 2020, 2020,
     1612, 1610,  116, 2020,  116, 2020, 2020, 1611, 1613, 2020,

      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     1627,  116, 2020, 1616,  116, 2020,  116, 2020,  116, 2020,
      116, 2020, 2020, 1617, 1619,  116, 2020, 1618,  116, 2020,
      116, 2020, 2020, 1621, 2020, 1622, 1623,  116, 2020,  116,
     2020, 2020, 1620, 1626,  116, 2020, 1624, 1635,  116, 2020,
     1625,  116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020,
     1629, 1631, 1642,  116, 2020,  116, 2020, 1634,  116, 2020,
      116, 2020, 1630, 1628,  116, 2020, 1632, 2020, 1644,  116,
     2020, 2020, 1645,  116, 2020,  116, 2020,  116, 2020, 1633,
     2020, 1637,  116, 2020,  116, 2020, 1640, 2020,  116, 2020,

     2020, 1636,  116, 2020, 2020,  116, 2020, 2020, 1638,  116,
     2020, 1641, 2020, 1639,  116, 2020, 1650, 1646, 2020, 1643,
     1654,  116, 2020,  116, 2020, 1647,  116, 2020,  116, 2020,
     2020, 1649, 2020, 1653,  116, 2020, 1648,  116, 2020,  116,
     2020,  116, 2020, 2020, 1651, 1652,  116, 2020,  116, 2020,
     2020,  116, 2020,  116, 2020, 2020, 1655,  116, 2020,  116,
     2020, 1656,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     1663, 2020, 1658,  116, 2020, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020, 1659, 1660,  116, 2020, 2020, 1657,
      116, 2020,  116, 2020, 1671,  116, 2020,  116, 2020, 1662,

     1661, 1676,  116, 2020, 2020, 1664, 1665,  116, 2020, 2020,
     1667,  116, 2020,  116, 2020,  116, 2020, 2020, 1666,  116,
     2020, 1673, 1668, 1670, 2020, 1675, 1669, 1672,  116, 2020,
      116, 2020, 2020,  116, 2020,  116, 2020, 1674, 1682,  116,
     2020,  116, 2020,  116, 2020, 2020, 1678,  116, 2020, 2020,
     1677,  116, 2020, 1680, 1681, 1679, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020, 1683, 2020,  116, 2020,  116,
     2020, 1687, 2020, 1684, 1686, 1688,  116, 2020,  116, 2020,
      116, 2020,  116, 2020, 2020,  116, 2020, 2020, 1685, 1690,

     2020, 1691, 1693, 1689, 1694, 2020,  116, 2020,  116, 2020,
     1696, 2020, 1692,  116, 2020, 1705, 1699, 1695,  116, 2020,
     1700, 1708, 2020, 1698, 1702, 2020, 1697, 1703, 2020, 1701,
      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 1707, 1704,
      116, 2020, 2020, 1706, 1709,  116, 2020, 2020,  116, 2020,
      116, 2020, 1711,  116, 2020,  116, 2020, 2020, 1718,  116,
     2020,  116, 2020,  116, 2020,  116, 2020, 1710, 1712,  116,
     2020, 1714,  116, 2020, 2020, 1716,  116, 2020,  116, 2020,
     1730,  116, 2020, 1713, 2020, 1719, 2020, 1715,  116, 2020,

     1717,  116, 2020,  116, 2020, 2020, 1721, 2020, 1720, 1723,
      116, 2020,  116, 2020,  116, 2020, 2020, 1722,  116, 2020,
     1725, 1724,  116, 2020, 1729, 1731, 1726, 1728, 2020, 1732,
      116, 2020, 1727, 2020,  116, 2020, 2020, 1733, 1739,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020,
      116, 2020, 2020, 1734,  116, 2020,  116, 2020,  116, 2020,
      116, 2020, 2020, 1735, 2020, 1736,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 1737, 1738,
      116, 2020,  116, 2020, 2020, 1750, 1740,  116, 2020,  116,
     2020,  116, 2020, 1757, 2020,  116, 2020,  116, 2020, 1745,

     1753, 1744, 2020, 1741, 1743, 1746,  116, 2020,  116, 2020,
     2020, 1742, 1748, 1759, 2020, 1747, 2020, 1749,  116, 2020,
      116, 2020, 2020, 1751,  116, 2020, 1754, 2020,  116, 2020,
     2020, 1752,  116, 2020,  116, 2020,  116, 2020, 2020, 1761,
      116, 2020, 2020, 1755, 1764,  116, 2020, 2020, 1756,  116,
     2020,  116, 2020, 2020, 1758,  116, 2020, 1760,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020, 1763,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020,  116,
     2020, 2020, 1762,  116, 2020,  116, 2020,  116, 2020, 1767,
      116, 2020, 1769, 2020, 1765, 1776, 1766, 2020, 1771,  116,

     2020, 1768,  116, 2020,  116, 2020,  116, 2020, 2020, 1770,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020, 1774,
     2020, 1775, 1772, 2020, 1773,  116, 2020, 1777, 2020, 1779,
     1781, 1780,  116, 2020, 1778,  116, 2020, 2020, 1782,  116,
     2020, 1783,  116, 2020,  116, 2020,  116, 2020, 2020, 1785,
      116, 2020,  116, 2020, 2020, 1787, 2020, 1786, 2020, 1784,
     2020, 1789,  116, 2020,  116, 2020, 2020,  116, 2020,  116,
     2020,  116, 2020,  116, 2020, 2020, 1788, 1797, 1790,  116,
     2020,  116, 2020, 2020,  116, 2020,  116, 2020,  116, 2020,
     2020, 1793, 2020, 1798,  116, 2020, 2020, 1791,  116, 2020,

      116, 2020,  116, 2020, 1792, 2020, 1795, 2020, 1794,  116,
     2020,  116, 2020, 1796, 1799, 1806, 1800,  116, 2020,  116,
     2020,  116, 2020, 2020, 1802,  116, 2020,  116, 2020,  116,
     2020, 2020, 1805,  116, 2020,  116, 2020,  116, 2020, 1801,
     1803,  116, 2020,  116, 2020,  116, 2020, 2020, 1804, 2020,
     1808, 1807,  116, 2020,  116, 2020, 1809,  116, 2020,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 1812,  116, 2020, 1811,  116, 2020, 1815,
     2020, 1813,  116, 2020, 2020, 1810,  116, 2020,  116, 2020,
      116, 2020, 2020, 1817, 2020, 1814, 1816, 2020, 1819,  116,

     2020,  116, 2020, 1818,  116, 2020, 1820,  116, 2020, 1823,
     1821,  116, 2020,  116, 2020, 2020, 1826,  116, 2020,  116,
     2020,  116, 2020, 1822, 2020, 1824,  116, 2020,  116, 2020,
     2020, 1834,  116, 2020, 1825,  116, 2020, 1829, 2020, 1828,
      116, 2020, 1830, 1837,  116, 2020, 2020, 1827,  116, 2020,
     1831,  116, 2020,  116, 2020,  116, 2020, 1832,  116, 2020,
      116, 2020, 1838,  116, 2020,  116, 2020, 2020, 1835,  116,
     2020,  116, 2020, 2020, 1833, 2020,  116, 2020,  116, 2020,
     2020, 1842, 1839,  116, 2020, 2020, 1836,  116, 2020,  116,
     2020, 1840,  116, 2020, 2020, 1846,  116, 2020,  116, 2020,

      116, 2020, 1841,  116, 2020, 1844,  116, 2020,  116, 2020,
      116, 2020,  116, 2020, 2020, 1843,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 2020, 1845,
      116, 2020, 1847, 1848, 2020, 1852,  116, 2020, 2020, 1849,
     1851,  116, 2020, 1856, 1850,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 1855,  116, 2020, 2020, 1857, 1853, 1854,
      116, 2020,  116, 2020, 1866,  116, 2020,  116, 2020,  116,
     2020, 1860, 1858,  116, 2020,  116, 2020,  116, 2020, 1863,
     1861,  116, 2020, 2020, 1859,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020, 1862,  116, 2020,  116, 2020, 1865,

     2020, 1864,  116, 2020,  116, 2020,  116, 2020, 1872, 2020,
     1867, 2020, 1868, 1871,  116, 2020, 1869, 1870,  116, 2020,
     1875,  116, 2020, 1877,  116, 2020,  116, 2020, 1873, 2020,
     1874,  116, 2020,  116, 2020, 1876, 1880, 1878, 1879,  116,
     2020, 1886,  116, 2020, 2020, 1888,  116, 2020,  116, 2020,
      116, 2020, 1884, 2020, 1881,  116, 2020, 2020, 1882, 1883,
     2020, 1885,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     2020, 1887,  116, 2020,  116, 2020,  116, 2020, 1889,  116,
     2020,  116, 2020,  116, 2020, 2020,  116, 2020, 1890,  116,
     2020, 1891,  116, 2020,  116, 2020,  116, 2020,  116, 2020,

      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020, 2020, 1892,  116, 2020,  116, 2020,
     2020, 1894, 2020, 1893, 2020, 1896,  116, 2020,  116, 2020,
     1895, 2020, 1900, 1911, 2020, 1899, 1897, 1901,  116, 2020,
     1902, 2020, 1898,  116, 2020,  116, 2020, 1905, 2020, 1906,
      116, 2020, 1907, 2020, 1908, 2020, 1903, 2020, 1904,  116,
     2020, 1909, 1910,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020, 1914,  116, 2020,  116, 2020, 2020,
     1912,  116, 2020,  116, 2020,  116, 2020, 2020, 1913,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  116,

     2020, 2020,  116, 2020, 1915, 2020,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020, 1918,  116, 2020,  116,
     2020, 1916,  116, 2020, 1917,  116, 2020,  116, 2020,  116,
     2020, 2020, 1920, 1919,  116, 2020,  116, 2020,  116, 2020,
     2020, 1924,  116, 2020,  116, 2020, 2020, 1922, 1925, 1926,
     1921,  116, 2020, 2020, 1923,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020,  116, 2020, 1927,  116, 2020, 2020,
     1928,  116, 2020, 1930, 2020, 1941,  116, 2020, 1929, 1939,
      116, 2020, 2020, 1937, 1931, 2020,  116, 2020,  116, 2020,
     1934,  116, 2020,  116, 2020, 1932,  116, 2020, 2020, 1933,

      116, 2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     2020, 1940, 1935, 1936,  116, 2020, 1948, 1938, 2020,  116,
     2020,  116, 2020, 1943,  116, 2020,  116, 2020,  116, 2020,
      116, 2020, 1942,  116, 2020, 2020,  116, 2020, 2020, 1946,
     2020, 1944, 1945,  116, 2020,  116, 2020,  116, 2020, 1949,
     1950,  116, 2020,  116, 2020, 1947,  116, 2020,  116, 2020,
      116, 2020, 2020,  116, 2020,  116, 2020, 2020, 1951,  116,
     2020, 1960,  116, 2020,  116, 2020, 2020, 1955,  116, 2020,
     2020, 1952, 1953, 1957, 1956,  116, 2020, 2020, 1954,  116,
     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  116,

     2020, 2020, 1959,  116, 2020, 1962,  116, 2020, 1965, 1958,
     1964, 1961, 1966,  116, 2020,  116, 2020,  116, 2020,  116,
     2020, 2020, 1963,  116, 2020,  116, 2020,  116, 2020, 2020,
      116, 2020,  116, 2020,  116, 2020,  116, 2020, 1967,  116,
     2020, 2020, 1968, 2020, 1970, 2020, 1969,  116, 2020,  116,
     2020,  116, 2020, 2020, 1972, 1985,  116, 2020,  116, 2020,
     1974,  116, 2020, 2020, 1971,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020, 1975, 1973, 1976,  116, 2020,  116,
     2020,  116, 2020,  116, 2020, 2020, 1978, 1980, 1979, 1977,
      116, 2020,  116, 2020, 1981,  116, 2020, 1982,  116, 2020,

      116, 2020, 2020, 1984, 1983,  116, 2020, 1986,  116, 2020,
      116, 2020, 1991,  116, 2020,  116, 2020, 2020, 1987,  116,
     2020, 2020,  116, 2020,  116, 2020, 1989,  116, 2020,  116,
     2020, 1988,  116, 2020,  116, 2020,  116, 2020,  116, 2020,
     1990,  116, 2020, 2020, 1992,  116, 2020,  116, 2020, 1994,
     2020, 1993, 1995,  116, 2020, 1998,  116, 2020,  116, 2020,
     2020, 1996,  116, 2020,  116, 2020,  116, 2020, 1997, 2000,
      116, 2020,  116, 2020, 1999, 2001,  116, 2020,  116, 2020,
      116, 2020,  116, 2020,  116, 2020, 2020, 2002, 2003, 2009,
     2005,  116, 2020,  116, 2020, 2004,  116, 2020,  116, 2020,

     2020,  116, 2020,  116, 2020,  116, 2020,  116, 2020,  116,
     2020,  116, 2020, 2020, 2007, 2006,  116, 2020,  116, 2020,
      116, 2020, 2008,  116, 2020, 2020, 2010,  116, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2011, 2013, 2020, 2014, 2020, 2015, 2020, 2016, 2012,
     2020, 2020, 2020, 2020, 2020, 2020, 2019, 2020, 2020, 2020,
     2017, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2018,   87,   87,   87,   87,   87,   92,   92,   92,   92,
       92,   97,   97,   97,   97,   97,  119,  119,  119,  284,

     2020,  284,  284,  284,  285,  285,  285,  285,  285,  299,
     2020,  299,    9, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,

     2020
    } ;

static yyconst flex_int16_t yy_chk[6802] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
     2032,    3,    3,    4,    4,   17,    4,    4,    5,    5,

       19,    6,    6,    7,    7,    8,    8,   24,   17,   17,
       17,   26,   28,   33,   33, 2031,   19, 2030,   24,   28,
       26,   26,   29,   29, 2029,   29,   29,   29,   30,   30,
     2027,   30,   30,   30,   35,   35,   37,   37,   38,   38,
     1181,    3, 1017,   30,   43,   43,    4,   46,   46,  858,
       39,   39,   40,   40,  299,   41,   41,  298,   44,   44,
       52,   52,   61,   61,   39,   42,   42,   57,   57,   39,
       41,  286,   50,   50,   65,   65,   49,   49,   40,   48,
       48,    5,   37,    5,    6,   50,    6,  203,   42,  126,
       37,   43,   37,   39,  122,   38,  121,   39,   38,   40,

       39,   39,  116,   40,   39,   44,   41,   39,   49,   44,
       39,   41,   40,   39,   45,   45,   42,   47,   47,   42,
       51,   51,   48,   52,   99,   57,   48,   56,   56,   86,
       50,   65,   50,   49,   65,   50,   53,   53,   45,   45,
       94,   56,   63,   47,   55,   55,   34,   56,   58,   58,
       59,   59,   76,   76,   53,   82,   82,   56,   70,   70,
       47,   78,   78,   51,   31,   66,   66,   27,   47,   45,
       45,   51,   23,   55,   47,   45,  119,  119,   67,   67,
       51,  132,  132,   53,   54,   54,  117,  117,  117,   18,
       86,   55,   14,   75,   75,   55,   64,   64,   68,   68,

       13,  128,  128,   54,   55,   70,   58,    9,   59,   54,
       76,   82,   70,   54,   70,   54,   69,   69,   70,   66,
       72,   72,   66,    0,   78,   67,    0,   54,   66,   67,
        0,   54,   73,   73,   54,   54,   91,   54,   67,   54,
       64,   64,   54,   68,   71,   71,   54,   54,    0,   54,
       75,   64,   68,   68,   68,    0,   64,   64,   64,   64,
       74,   74,   68,  128,   68,   77,   77,   69,   72,    0,
       69,   84,   84,   69,    0,   72,   72,   79,   79,   69,
        0,   72,   72,   73,  120,  120,   80,   80,   73,   73,
        0,   71,    0,   73,   91,   71,   81,   81,   91,  130,

      130,  120,    0,   74,   83,   83,   91,   74,  127,  127,
       91,   74,   91,    0,   84,  118,  118,    0,  118,  118,
      118,   84,   77,    0,   79,   77,  131,  131,   77,   80,
        0,   80,    0,   80,   79,    0,   80,   80,    0,   81,
       80,  129,  129,    0,   80,   80,   81,   83,   80,   80,
       83,  134,  134,   81,  127,    0,   81,  133,  133,  130,
      135,  135,   81,   81,   81,    0,   83,  136,  136,  133,
       83,   83,   83,  137,  137,  138,  138,  140,  140,  139,
      139,  141,  141,  131,    0,  142,  142,  129,  143,  143,
      144,  144,  129,  145,  145,  146,  146,  147,  147,  148,

      148,  149,  149,  150,  150,  151,  151,  134,  152,  152,
      136,    0,  153,  153,  154,  154,  135,  142,  138,  155,
      155,    0,  146,    0,  140,  159,  159,  149,  156,  156,
        0,  155,    0,  137,  139,  139,  145,  157,  157,  158,
      158,  141,  160,  160,    0,  148,  147,    0,  143,    0,
      144,  144,  161,  161,  163,  163,  151,  150,    0,  156,
      154,  162,  162,    0,  152,  152,  153,  160,  151,    0,
      152,  164,  164,  153,    0,  165,  165,    0,  167,  167,
      157,    0,  159,  166,  166,  169,  169,  158,  168,  168,
      158,  170,  170,  171,  171,  172,  172,  173,  173,  163,

        0,  158,  167,  158,    0,  169,  166,  166,    0,  168,
      161,  174,  174,  175,  175,  176,  176,  162,  165,    0,
      177,  177,  178,  178,  179,  179,  182,  182,  176,  181,
      181,  180,  180,  164,  183,  183,  184,  184,  167,  185,
      185,  172,  170,  180,  186,  186,  172,    0,  178,    0,
      177,  187,  187,  179,    0,  171,    0,  172,  181,  188,
      188,    0,  174,  177,  175,  189,  189,    0,  174,  190,
      190,  191,  191,  192,  192,  177,  193,  193,  194,  194,
        0,  177,    0,  195,  195,  192,  196,  196,  197,  197,
      182,  186,    0,  184,  185,    0,  183,  198,  198,  199,

      199,    0,  188,  200,  200,  196,  201,  201,  187,  205,
      205,  206,  206,  197,  191,    0,  198,    0,  207,  207,
      211,  211,  208,  208,    0,  189,  195,  209,  209,  190,
        0,  193,    0,  194,  210,  210,  212,  212,  213,  213,
      214,  214,    0,  215,  215,  216,  216,  217,  217,  218,
      218,  219,  219,    0,  220,  220,  199,  221,  221,    0,
      200,  222,  222,  201,    0,  223,  223,    0,  206,  207,
      205,  208,  224,  224,  225,  225,    0,  210,  209,  226,
      226,    0,  211,  227,  227,  213,  228,  228,  229,  229,
        0,  210,    0,  212,  219,  230,  230,  214,  215,  220,

      216,  217,  231,  231,  215,    0,  215,  232,  232,    0,
      218,  223,  233,  233,    0,  224,  235,  235,  221,  222,
      234,  234,  236,  236,    0,  225,  237,  237,  238,  238,
      239,  239,  225,  226,    0,  240,  240,  241,  241,    0,
      227,  242,  242,    0,  229,    0,  228,  243,  243,  244,
      244,  245,  245,  247,  247,  233,    0,  230,    0,  231,
      246,  246,  235,  248,  248,  249,  249,  250,  250,    0,
      232,  252,  252,  238,  234,    0,  238,  235,    0,  238,
      251,  251,  240,    0,  237,  253,  253,  239,  240,  254,
      254,    0,  243,  241,  255,  255,  243,  256,  256,  257,

      257,  258,  258,  246,  260,  260,  246,  259,  259,  247,
      262,  262,  249,  263,  263,  252,    0,  245,  261,  261,
      264,  264,    0,  248,  265,  265,  266,  266,  250,  267,
      267,  251,  254,  252,  268,  268,  253,  251,  269,  269,
      270,  270,  257,  271,  271,    0,  258,  254,    0,  257,
      272,  272,  273,  273,  254,    0,  255,  255,  274,  274,
      260,  256,    0,  258,  259,  275,  275,  264,  265,  261,
      262,  276,  276,  263,  277,  277,  278,  278,    0,  265,
      267,    0,  266,  279,  279,  280,  280,  281,  281,  267,
      296,  296,  296,  297,  297,  302,  302,  303,  303,  304,

      304,  305,  305,    0,  269,  269,  269,  306,  306,  307,
      307,    0,  274,  302,  273,    0,  275,    0,  274,  309,
      309,  302,  308,  308,  276,  310,  310,  311,  311,  313,
      313,  312,  312,  314,  314,    0,  280,    0,  281,  315,
      315,  316,  316,  317,  317,  318,  318,  297,  303,  319,
      319,  308,  320,  320,  321,  321,  306,    0,  318,  304,
      322,  322,  305,  323,  323,    0,  320,  324,  324,    0,
      325,  325,  327,  327,  307,  309,  312,  326,  326,  328,
      328,    0,  311,    0,  316,  329,  329,  310,  314,  326,
      313,  314,  330,  330,  333,  333,    0,  331,  331,  321,

      319,  325,    0,  315,  334,  334,    0,  317,  323,  323,
      323,  331,  321,    0,  324,  332,  332,  335,  335,  327,
      323,  330,  337,  337,    0,  322,  336,  336,  338,  338,
        0,  332,  332,  339,  339,  332,    0,  328,  340,  340,
      332,  332,  341,  341,  336,  332,  332,  342,  342,  344,
      344,  329,  333,  343,  343,  345,  345,  346,  346,  347,
      347,  348,  348,    0,  335,  334,    0,  344,  349,  349,
      350,  350,  351,  351,    0,  352,  352,  338,  353,  353,
      354,  354,  355,  355,  356,  356,  357,  357,    0,  341,
      339,  358,  358,  350,  342,    0,  354,    0,  343,    0,

      340,    0,  347,  357,  346,  359,  359,  360,  360,  345,
      361,  361,  363,  363,  343,  362,  362,  364,  364,  366,
      366,  348,  352,    0,  349,  365,  365,  367,  367,  368,
      368,  356,    0,  353,  369,  369,    0,  355,  370,  370,
      371,  371,  372,  372,    0,  373,  373,  376,  376,  375,
      375,  379,  379,  381,  381,  371,    0,  360,  377,  377,
      362,  359,  372,  369,    0,  366,  361,    0,  378,  378,
      380,  380,  368,  362,  363,    0,  382,  382,    0,  365,
      368,  384,  384,    0,  367,    0,  383,  383,  385,  385,
        0,  368,  373,  374,  374,    0,  379,    0,  374,  386,

      386,  381,    0,  387,  387,  376,  374,  374,  374,  375,
      374,  383,  377,    0,  375,  387,  374,    0,  374,    0,
      374,  388,  388,  374,  374,  378,  374,  374,  389,  389,
      390,  390,    0,  380,  382,  385,  391,  391,    0,  384,
      392,  392,  393,  393,  386,  394,  394,  395,  395,  396,
      396,    0,  388,    0,  389,  386,  397,  397,  398,  398,
      399,  399,  400,  400,  401,  401,  402,  402,  403,  403,
      404,  404,    0,  395,  405,  405,  406,  406,  408,  408,
      407,  407,  409,  409,  410,  410,  411,  411,  412,  412,
        0,  390,  413,  413,  396,  414,  414,  391,  415,  415,

        0,  392,  416,  416,  396,    0,  394,    0,  399,  402,
      417,  417,  397,    0,  398,  418,  418,  419,  419,  400,
      420,  420,  421,  421,  405,  401,    0,  409,  404,  403,
      407,    0,  406,  411,    0,  412,  422,  422,  423,  423,
      424,  424,  408,  414,  425,  425,  426,  426,    0,  410,
      427,  427,  415,    0,  413,  428,  428,  429,  429,  430,
      430,  431,  431,  416,  432,  432,    0,  421,  433,  433,
      434,  434,  435,  435,  419,  438,  438,  418,  437,  437,
      436,  436,  423,  439,  439,  440,  440,  422,  441,  441,
      425,  442,  442,  443,  443,  444,  444,  427,  424,  445,

      445,  446,  446,    0,  426,  447,  447,  448,  448,  449,
      449,  433,  450,  450,  429,  452,  452,  428,  431,  451,
      451,  437,  433,    0,  453,  453,  432,  455,  455,  433,
      434,  436,    0,  454,  454,  456,  456,  454,    0,  441,
        0,  440,  445,  457,  457,  458,  458,    0,  443,    0,
      447,  444,  459,  459,  460,  460,    0,  446,  461,  461,
      449,  448,  452,  462,  462,  451,  463,  463,  464,  464,
      465,  465,  466,  466,  450,  453,  454,  467,  467,  468,
      468,    0,  456,  455,  469,  469,  470,  470,  471,  471,
      472,  472,  458,  473,  473,  474,  474,    0,  459,  457,

        0,  460,  475,  475,  476,  476,  477,  477,  478,  478,
        0,  463,  460,  462,  480,  480,  460,    0,  460,  464,
      481,  481,    0,  461,  479,  479,  482,  482,  467,    0,
      466,    0,  465,  485,  485,  471,  479,    0,  479,  479,
        0,  479,  484,  484,  479,  486,  486,  470,  479,  487,
      487,  479,    0,  475,  479,  488,  488,    0,  479,  489,
      489,  490,  490,  478,  491,  491,    0,  477,  492,  492,
      493,  493,  494,  494,  481,    0,  480,  485,  495,  495,
      496,  496,  497,  497,    0,  484,  498,  498,    0,  482,
      499,  499,  500,  500,  503,  503,  487,  501,  501,    0,

      502,  502,  504,  504,  505,  505,  489,  486,  506,  506,
      507,  507,  488,  508,  508,  509,  509,  493,  510,  510,
      494,    0,  490,  502,  511,  511,  507,    0,  505,  497,
      512,  512,  495,  513,  513,  492,    0,  499,  514,  514,
      501,  496,  516,  516,  515,  515,    0,  499,    0,  498,
      517,  517,  518,  518,  500,  519,  519,    0,  503,  504,
      515,    0,  506,  520,  520,  517,  509,  508,    0,  514,
      521,  521,    0,  522,  522,  523,  523,    0,  510,  524,
      524,    0,  511,    0,  513,    0,  512,  525,  525,  526,
      526,  527,  527,  528,  528,  529,  529,  530,  530,  518,

      531,  531,  532,  532,  533,  533,  534,  534,  535,  535,
      536,  536,  519,  530,  537,  537,    0,  532,  523,  538,
      538,  539,  539,  524,    0,  529,    0,  521,  522,  520,
      540,  540,  525,  541,  541,  533,    0,  542,  542,  543,
      543,  544,  544,    0,  528,  545,  545,  531,    0,  526,
      546,  546,  548,  548,    0,  540,  547,  547,  543,  540,
      549,  549,  551,  551,  539,    0,  534,  536,  535,    0,
      547,  550,  550,  552,  552,  553,  553,  537,    0,  554,
      554,  556,  556,    0,  555,  555,    0,  541,  542,    0,
      552,  557,  557,  546,    0,  548,  559,  559,    0,  555,

      558,  558,  560,  560,  561,  561,  545,  562,  562,  563,
      563,  564,  564,    0,  558,    0,  549,  558,  565,  565,
        0,  566,  566,    0,  551,  550,  554,  555,    0,  558,
      567,  567,  568,  568,  569,  569,    0,  553,  570,  570,
      563,    0,  557,  565,    0,  567,  571,  571,  572,  572,
      562,  566,    0,  564,    0,  573,  573,  560,  574,  574,
      559,  575,  575,    0,  576,  576,  577,  577,  578,  578,
      579,  579,  561,  580,  580,  568,  581,  581,  582,  582,
      583,  583,  584,  584,    0,  570,  585,  585,  587,  587,
        0,  569,  586,  586,  591,  591,    0,  569,  573,  572,

      571,  587,    0,  580,  588,  588,  589,  589,  590,  590,
      589,  592,  592,  577,  593,  593,  594,  594,  574,  578,
      595,  595,    0,  575,  576,  582,  596,  596,    0,  584,
      581,  585,  579,    0,  588,  586,  597,  597,  590,  598,
      598,  591,  583,  593,  599,  599,  600,  600,    0,  595,
      601,  601,  602,  602,  603,  603,  604,  604,  605,  605,
      606,  606,    0,  600,  607,  607,  608,  608,  609,  609,
      610,  610,  592,  611,  611,  612,  612,  613,  613,  614,
      614,    0,  615,  615,  616,  616,  617,  617,  618,  618,
      619,  619,  620,  620,    0,  602,  621,  621,  616,  622,

      622,  623,  623,  624,  624,  606,  625,  625,    0,  626,
      626,  627,  627,  610,    0,  609,  628,  628,    0,  608,
      629,  629,  614,  630,  630,    0,  607,    0,  613,  631,
      631,  632,  632,  610,  633,  633,    0,  612,  615,  634,
      634,    0,  617,  615,  635,  635,  636,  636,  623,  620,
      637,  637,  638,  638,  627,  639,  639,  619,  640,  640,
        0,  622,    0,  624,  626,  641,  641,  642,  642,    0,
      628,  629,    0,  643,  643,  644,  644,  645,  645,  646,
      646,  647,  647,  648,  648,  649,  649,    0,  632,  650,
      650,  651,  651,    0,  633,  652,  652,    0,  639,  653,

      653,  637,  654,  654,  656,  656,  636,    0,  635,    0,
      655,  655,  658,  658,  640,  638,  643,    0,  644,  641,
        0,  657,  657,    0,  644,  655,  659,  659,  660,  660,
      661,  661,  662,  662,  663,  663,  649,  664,  664,  646,
      666,  666,  653,  647,  650,  665,  665,  667,  667,  668,
      668,  669,  669,  670,  670,  671,  671,    0,  654,  672,
      672,  674,  674,  673,  673,    0,  656,  657,  659,  673,
      675,  675,  676,  676,  660,  677,  677,  661,  678,  678,
      679,  679,  680,  680,  681,  681,  682,  682,  662,  683,
      683,  663,  665,  684,  684,    0,  668,  664,    0,  685,

      685,    0,  665,    0,  686,  686,    0,  669,    0,  683,
      687,  687,  688,  688,  672,  689,  689,  691,  691,  692,
      692,    0,  674,    0,  675,  693,  693,  681,    0,  680,
      694,  694,  683,  680,  678,    0,  683,  696,  696,    0,
      679,  699,  699,  695,  695,  694,    0,  682,  697,  697,
      685,  698,  698,  684,  685,  686,    0,  695,  695,  688,
      700,  700,  701,  701,  702,  702,  695,  698,  695,  703,
      703,  692,  695,  695,  704,  704,    0,  695,  705,  705,
      691,  689,    0,  706,  706,  696,  707,  707,  693,  708,
      708,    0,  709,  709,    0,  697,  710,  710,  711,  711,

        0,  699,  712,  712,  713,  713,    0,  700,  709,  701,
      714,  714,  715,  715,  716,  716,  717,  717,  718,  718,
      720,  720,  719,  719,    0,  703,  719,  719,  721,  721,
      722,  722,    0,  707,  723,  723,  704,  706,    0,  710,
      724,  724,  725,  725,  705,  726,  726,  713,    0,  712,
        0,  708,    0,  714,  711,  727,  727,  728,  728,  729,
      729,  730,  730,  731,  731,  718,  732,  732,  716,  715,
      721,  734,  734,  717,    0,  720,  733,  733,  735,  735,
      736,  736,    0,  724,    0,  723,  737,  737,  738,  738,
      739,  739,  740,  740,  741,  741,  722,  742,  742,  725,

      728,  743,  743,  744,  744,  745,  745,  726,    0,  732,
      746,  746,    0,  730,  729,  727,  747,  747,  734,  733,
      748,  748,    0,  731,  749,  749,  746,  750,  750,  751,
      751,  752,  752,  753,  753,  754,  754,  737,    0,  738,
      755,  755,  756,  756,  757,  757,  743,    0,  739,    0,
      741,    0,  745,    0,  740,  758,  758,  742,  759,  759,
      751,  760,  760,  748,  761,  761,  744,    0,  757,  762,
      762,  763,  763,    0,  764,  764,  765,  765,  766,  766,
      752,  750,  747,  767,  767,  749,  768,  768,  769,  769,
      770,  770,    0,  771,  771,  753,  772,  772,  754,    0,

      762,  759,  756,  773,  773,  774,  774,  775,  775,  761,
      760,  771,  776,  776,    0,  773,  758,  764,    0,  777,
      777,  778,  778,  765,    0,  763,  779,  779,  780,  780,
      767,  781,  781,  782,  782,    0,  766,  783,  783,  784,
      784,  785,  785,  786,  786,    0,  768,  787,  787,  770,
      774,  788,  788,  789,  789,  790,  790,    0,  772,  791,
      791,    0,  775,  777,  792,  792,  793,  793,  794,  794,
      795,  795,  776,  796,  796,  779,  782,  797,  797,    0,
      783,  799,  799,  780,  778,  796,  791,  795,  781,    0,
      786,  798,  798,    0,  787,  800,  800,  785,  788,  784,

        0,  801,  801,  802,  802,  790,  803,  803,  804,  804,
        0,  793,  805,  805,    0,  789,    0,  802,  798,  806,
      806,  798,  807,  807,  808,  808,  792,  809,  809,  799,
        0,  794,  801,  810,  810,  797,  802,  811,  811,  812,
      812,  814,  814,  813,  813,  815,  815,  816,  816,  817,
      817,  818,  818,    0,  805,  819,  819,  820,  820,  815,
      821,  821,  822,  822,  823,  823,  824,  824,  804,  826,
      826,    0,  803,  825,  825,  827,  827,    0,  828,  828,
      829,  829,  830,  830,  808,  831,  831,    0,  814,  809,
      832,  832,  817,  833,  833,  835,  835,    0,  811,  812,

      813,  834,  834,  836,  836,  822,    0,  834,    0,  816,
        0,  818,  837,  837,  838,  838,  819,  820,  823,    0,
      825,  828,    0,  824,  839,  839,    0,  829,  840,  840,
        0,  834,  841,  841,  842,  842,    0,  827,  830,  843,
      843,  844,  844,  834,    0,  831,  845,  845,  846,  846,
        0,  835,  832,  847,  847,  833,  834,  836,  848,  848,
        0,  838,  849,  849,  850,  850,  851,  851,  852,  852,
      853,  853,  837,  840,    0,  841,  854,  854,  855,  855,
      839,  856,  856,  857,  857,  843,  859,  859,  860,  860,
      861,  861,    0,  845,  863,  863,  842,  862,  862,  865,

      865,  847,  864,  864,  866,  866,    0,  867,  867,    0,
      850,  852,  868,  868,    0,  853,  869,  869,  870,  870,
        0,  848,  849,    0,  871,  871,  857,  851,  872,  872,
        0,  859,  867,  873,  873,  874,  874,  875,  875,  863,
        0,  861,  854,  856,  862,  876,  876,  864,  877,  877,
      878,  878,  879,  879,  880,  880,  881,  881,  882,  882,
      865,  866,  869,  864,  883,  883,  884,  884,  885,  885,
      886,  886,  868,  871,    0,  870,  887,  887,  888,  888,
      889,  889,    0,  881,    0,  872,  890,  890,  880,  873,
      891,  891,    0,  883,    0,  877,  878,  885,  888,    0,

      892,  892,    0,  879,    0,  882,  876,  893,  893,  894,
      894,  895,  895,  896,  896,  897,  897,  886,  898,  898,
      892,  899,  899,  885,  892,    0,  889,  900,  900,  884,
      895,  897,  897,  887,  901,  901,  902,  902,  903,  903,
      904,  904,  905,  905,  906,  906,  907,  907,  897,    0,
      891,  908,  908,  909,  909,    0,  894,  910,  910,  911,
      911,  912,  912,  913,  913,  914,  914,    0,  909,  893,
      915,  915,  910,  916,  916,  917,  917,  896,    0,  902,
        0,  898,  918,  918,    0,  919,  919,  906,    0,  900,
      901,    0,  907,    0,  912,  920,  920,  921,  921,    0,

      904,  922,  922,  905,    0,  903,  911,  908,  923,  923,
      924,  924,    0,  914,  913,    0,  915,  925,  925,    0,
      926,  926,  917,  927,  927,  928,  928,  929,  929,  930,
      930,  931,  931,  916,  919,  932,  932,  918,  933,  933,
      934,  934,  920,    0,  921,  935,  935,  936,  936,  937,
      937,    0,  922,  938,  938,  939,  939,  940,  940,    0,
      941,  941,  925,  926,  923,    0,  924,  942,  942,  943,
      943,    0,  939,  944,  944,  945,  945,    0,  927,  931,
      946,  946,  928,    0,  942,  934,  932,  947,  947,  948,
      948,  930,    0,  933,  942,    0,  938,  949,  949,    0,

      950,  950,    0,  937,  951,  951,  939,  941,  952,  952,
      942,  935,  950,  953,  953,  954,  954,    0,  945,  955,
      955,  956,  956,  957,  957,  958,  958,  959,  959,    0,
      944,    0,  948,  960,  960,  943,  961,  961,  962,  962,
        0,  946,    0,  947,  949,  963,  963,  964,  964,  965,
      965,  966,  966,  969,  969,  967,  967,  968,  968,  971,
      971,  951,  970,  970,    0,  972,  972,    0,  957,  954,
      973,  973,    0,  952,  974,  974,    0,  975,  975,  976,
      976,  978,  978,  956,  977,  977,    0,  959,    0,  961,
      979,  979,    0,  960,  980,  980,  962,  981,  981,    0,

      965,  966,  967,  971,  975,  963,  968,  977,  982,  982,
      964,  972,  983,  983,    0,  969,  984,  984,  970,  974,
        0,  979,  985,  985,  986,  986,  987,  987,  988,  988,
        0,  973,  989,  989,  982,    0,  976,    0,  978,  990,
      990,  980,  991,  991,    0,  981,  992,  992,  993,  993,
      994,  994,  995,  995,  996,  996,  997,  997,  998,  998,
      999,  999,    0,  984,    0,  985,  983, 1000, 1000,  986,
     1001, 1001, 1002, 1002, 1003, 1003, 1004, 1004, 1005, 1005,
     1006, 1006,  990,  987, 1007, 1007, 1008, 1008,    0,  989,
     1007, 1009, 1009, 1010, 1010,    0,  993,  994,    0,  995,

     1011, 1011,    0,  992,    0,  999, 1012, 1012, 1013, 1013,
     1014, 1014, 1015, 1015, 1016, 1016,  996,  997,  998, 1018,
     1018, 1019, 1019, 1020, 1020,    0, 1007, 1021, 1021, 1006,
     1001,    0, 1002,    0, 1018, 1010, 1022, 1022, 1023, 1023,
     1024, 1024, 1025, 1025, 1026, 1026,    0, 1009, 1008, 1012,
     1027, 1027, 1028, 1028, 1011, 1013, 1029, 1029, 1014, 1015,
        0, 1016, 1030, 1030, 1031, 1031, 1032, 1032, 1033, 1033,
     1020, 1034, 1034, 1035, 1035, 1036, 1036, 1019, 1037, 1037,
        0, 1023,    0, 1024,    0, 1038, 1038, 1022, 1039, 1039,
     1040, 1040, 1042, 1042, 1043, 1043, 1045, 1045,    0, 1027,

     1044, 1044, 1046, 1046, 1047, 1047, 1048, 1048,    0, 1049,
     1049, 1050, 1050, 1051, 1051, 1053, 1053, 1033, 1031,    0,
     1032,    0, 1034, 1049,    0, 1050, 1052, 1052, 1054, 1054,
        0, 1036, 1038, 1055, 1055, 1056, 1056, 1057, 1057, 1040,
     1037, 1058, 1058, 1044, 1059, 1059,    0, 1045, 1060, 1060,
     1061, 1061, 1042, 1062, 1062, 1043, 1063, 1063, 1051, 1046,
     1064, 1064, 1065, 1065,    0, 1062, 1047,    0, 1048,    0,
     1066, 1066, 1064, 1053, 1067, 1067,    0, 1052, 1068, 1068,
        0, 1056, 1066,    0, 1054,    0, 1058, 1069, 1069,    0,
     1055, 1059,    0, 1070, 1070, 1071, 1071,    0, 1057,    0,

     1072, 1072,    0, 1063, 1072, 1073, 1073,    0, 1065, 1060,
        0, 1074, 1074, 1075, 1075, 1072, 1076, 1076, 1077, 1077,
     1078, 1078, 1079, 1079, 1080, 1080, 1081, 1081, 1076, 1068,
        0, 1067, 1082, 1082, 1083, 1083,    0, 1084, 1084, 1085,
     1085, 1086, 1086,    0, 1071, 1087, 1087, 1069, 1070, 1088,
     1088, 1089, 1089, 1090, 1090, 1091, 1091, 1092, 1092,    0,
     1086, 1073, 1074, 1093, 1093, 1094, 1094, 1078, 1096, 1096,
     1095, 1095,    0, 1081, 1075,    0, 1079,    0, 1080, 1097,
     1097, 1077,    0, 1081, 1084, 1083, 1095, 1098, 1098, 1099,
     1099,    0, 1082, 1100, 1100, 1085, 1088, 1101, 1101,    0,

     1090, 1102, 1102, 1103, 1103, 1104, 1104, 1087, 1105, 1105,
     1106, 1106,    0, 1089, 1107, 1107, 1108, 1108, 1109, 1109,
     1110, 1110, 1111, 1111, 1112, 1112,    0, 1097,    0, 1096,
     1107, 1113, 1113, 1115, 1115, 1099, 1114, 1114, 1107,    0,
     1101, 1116, 1116, 1117, 1117,    0, 1113,    0, 1102, 1100,
     1104, 1118, 1118, 1119, 1119, 1120, 1120, 1121, 1121, 1122,
     1122, 1123, 1123, 1124, 1124,    0, 1105, 1110, 1125, 1125,
        0, 1106, 1109, 1126, 1126,    0, 1111, 1115, 1108, 1114,
        0, 1112, 1127, 1127, 1128, 1128, 1131, 1131, 1129, 1129,
     1130, 1130, 1132, 1132, 1133, 1133, 1134, 1134, 1116, 1118,

     1136, 1136, 1119, 1126, 1129, 1117, 1120, 1135, 1135, 1137,
     1137,    0, 1123, 1138, 1138, 1139, 1139, 1133, 1141, 1141,
     1124, 1140, 1140, 1129,    0, 1121,    0, 1135, 1142, 1142,
     1125,    0, 1143, 1143, 1144, 1144,    0, 1127, 1145, 1145,
     1137, 1130, 1146, 1146, 1147, 1147, 1128, 1136, 1131, 1148,
     1148, 1149, 1149,    0, 1150, 1150, 1151, 1151,    0, 1152,
     1152, 1134, 1153, 1153, 1154, 1154,    0, 1141, 1155, 1155,
     1138, 1156, 1156, 1158, 1158, 1159, 1159,    0, 1139, 1143,
        0, 1140,    0, 1144, 1145, 1142, 1157, 1157, 1160, 1160,
     1161, 1161, 1162, 1162, 1163, 1163, 1164, 1164, 1165, 1165,

     1166, 1166, 1167, 1167, 1146, 1168, 1168, 1169, 1169, 1148,
     1170, 1170,    0, 1151, 1149, 1150, 1152, 1171, 1171, 1172,
     1172, 1162, 1159,    0, 1153, 1155, 1154, 1156, 1173, 1173,
     1174, 1174, 1175, 1175, 1158, 1176, 1176, 1157, 1161, 1177,
     1177,    0, 1173, 1166, 1178, 1178,    0, 1179, 1179,    0,
     1180, 1180, 1164, 1182, 1182,    0, 1163,    0, 1165, 1183,
     1183,    0, 1167, 1184, 1184, 1168,    0, 1169, 1170, 1185,
     1185,    0, 1186, 1186, 1171, 1187, 1187, 1188, 1188, 1187,
     1189, 1189, 1190, 1190,    0, 1177,    0, 1174, 1191, 1191,
     1176, 1194, 1194, 1195, 1195, 1178, 1179, 1180, 1193, 1193,

     1196, 1196, 1193, 1197, 1197, 1198, 1198, 1199, 1199, 1182,
     1200, 1200, 1201, 1201, 1202, 1202,    0, 1185, 1203, 1203,
     1204, 1204, 1189, 1205, 1205, 1184, 1207, 1207, 1206, 1206,
     1209, 1209,    0, 1185, 1185, 1186, 1195,    0, 1194, 1210,
     1210, 1211, 1211, 1212, 1212, 1213, 1213,    0, 1191, 1197,
     1214, 1214, 1215, 1215, 1199, 1216, 1216, 1217, 1217, 1201,
        0, 1203,    0, 1218, 1218, 1219, 1219, 1200, 1196, 1220,
     1220, 1221, 1221, 1207, 1202,    0, 1215, 1222, 1222,    0,
     1205, 1204, 1206,    0, 1220,    0, 1217, 1209, 1223, 1223,
     1224, 1224, 1225, 1225, 1227, 1227, 1210,    0, 1212,    0,

     1213, 1226, 1226, 1211,    0, 1226, 1228, 1228, 1219,    0,
     1229, 1229, 1216, 1218,    0, 1224, 1230, 1230, 1221, 1231,
     1231, 1228, 1229, 1232, 1232, 1233, 1233, 1234, 1234, 1235,
     1235, 1230, 1236, 1236, 1237, 1237, 1238, 1238, 1232, 1222,
     1239, 1239, 1240, 1240,    0, 1223, 1241, 1241, 1242, 1242,
        0, 1238, 1243, 1243, 1225,    0, 1227, 1244, 1244, 1245,
     1245, 1246, 1246,    0, 1247, 1247,    0, 1248, 1248,    0,
     1231, 1239, 1234, 1249, 1249, 1236, 1250, 1250, 1251, 1251,
        0, 1237, 1233, 1245, 1252, 1252, 1253, 1253, 1254, 1254,
     1235, 1255, 1255, 1256, 1256,    0, 1257, 1257, 1258, 1258,

     1253,    0, 1241,    0, 1240,    0, 1243, 1247, 1259, 1259,
        0, 1244, 1248, 1260, 1260, 1246, 1261, 1261, 1262, 1262,
     1263, 1263, 1259, 1250, 1264, 1264,    0, 1249,    0, 1252,
     1265, 1265, 1266, 1266, 1267, 1267, 1268, 1268,    0, 1254,
        0, 1255, 1251, 1257, 1269, 1269,    0, 1265, 1270, 1270,
     1271, 1271, 1272, 1272, 1273, 1273, 1274, 1274, 1275, 1275,
     1276, 1276, 1277, 1277,    0, 1278, 1278, 1279, 1279, 1262,
     1280, 1280, 1281, 1281,    0, 1260,    0, 1269,    0, 1261,
     1282, 1282, 1263,    0, 1268,    0, 1264, 1283, 1283, 1284,
     1284, 1270, 1285, 1285, 1266,    0, 1267, 1286, 1286, 1274,

        0, 1271, 1281, 1287, 1287, 1288, 1288, 1289, 1289, 1272,
        0, 1276, 1278, 1290, 1290, 1291, 1291,    0, 1277, 1292,
     1292, 1275, 1289, 1279, 1293, 1293,    0, 1282, 1296, 1296,
     1280, 1294, 1294,    0, 1283, 1292, 1284, 1295, 1295, 1285,
     1289, 1297, 1297, 1298, 1298,    0, 1299, 1299, 1300, 1300,
     1288, 1302, 1302,    0, 1287, 1301, 1301,    0, 1286, 1303,
     1303, 1304, 1304,    0, 1305, 1305, 1298, 1306, 1306, 1307,
     1307, 1293,    0, 1290, 1308, 1308, 1309, 1309,    0, 1291,
     1310, 1310, 1294, 1311, 1311,    0, 1308,    0, 1295, 1308,
     1312, 1312,    0, 1306, 1307, 1300, 1297, 1299, 1313, 1313,

     1301, 1308, 1314, 1314, 1308, 1315, 1315,    0, 1302, 1316,
     1316, 1317, 1317, 1318, 1318, 1317,    0, 1304,    0, 1303,
     1305, 1319, 1319, 1309, 1320, 1320, 1321, 1321,    0, 1314,
        0, 1311,    0, 1322, 1322, 1323, 1323, 1324, 1324, 1325,
     1325, 1310, 1326, 1326, 1328, 1328, 1327, 1327, 1329, 1329,
        0, 1312, 1329, 1330, 1330,    0, 1315, 1322, 1331, 1331,
     1316, 1332, 1332, 1313, 1333, 1333, 1334, 1334,    0, 1318,
     1335, 1335,    0, 1321,    0, 1332, 1336, 1336, 1337, 1337,
     1320, 1338, 1338, 1340, 1340,    0, 1323, 1341, 1341, 1342,
     1342, 1343, 1343, 1344, 1344, 1345, 1345,    0, 1326, 1324,

     1325, 1327, 1348, 1348, 1328, 1346, 1346, 1347, 1347, 1350,
     1350, 1351, 1351, 1352, 1352, 1334,    0, 1335, 1331,    0,
     1346, 1336,    0, 1353, 1353, 1354, 1354, 1355, 1355,    0,
     1340, 1356, 1356, 1357, 1357, 1358, 1358, 1359, 1359, 1337,
     1342,    0, 1345,    0, 1344, 1360, 1360, 1361, 1361, 1362,
     1362, 1363, 1363, 1343, 1364, 1364, 1366, 1366, 1347,    0,
     1348, 1365, 1365, 1367, 1367, 1368, 1368, 1347,    0, 1352,
     1353, 1369, 1369,    0, 1356,    0, 1351,    0, 1358, 1365,
     1370, 1370, 1371, 1371, 1372, 1372, 1373, 1373, 1374, 1374,
        0, 1375, 1375, 1359, 1368, 1376, 1376, 1377, 1377, 1360,

     1378, 1378,    0, 1366, 1379, 1379, 1367, 1361, 1381, 1381,
     1362, 1380, 1380,    0, 1369, 1364, 1382, 1382, 1383, 1383,
     1382, 1384, 1384, 1385, 1385,    0, 1386, 1386,    0, 1371,
     1386, 1374, 1387, 1387,    0, 1372, 1370, 1375, 1380, 1388,
     1388,    0, 1373, 1389, 1389, 1376, 1390, 1390, 1391, 1391,
     1392, 1392, 1393, 1393, 1394, 1394,    0, 1378, 1389,    0,
     1395, 1395, 1377, 1391, 1383, 1396, 1396, 1397, 1397,    0,
     1394, 1398, 1398, 1389, 1399, 1399, 1400, 1400,    0, 1385,
     1395, 1392, 1401, 1401, 1394, 1402, 1402,    0, 1403, 1403,
     1404, 1404, 1388,    0, 1387, 1390, 1405, 1405, 1406, 1406,

        0, 1407, 1407, 1408, 1408, 1409, 1409,    0, 1410, 1410,
     1411, 1411, 1412, 1412, 1398, 1414, 1414, 1408, 1413, 1413,
        0, 1397, 1415, 1415,    0, 1399,    0, 1396, 1416, 1416,
     1417, 1417, 1418, 1418, 1419, 1419,    0, 1404, 1400, 1410,
     1420, 1420, 1421, 1421, 1401, 1422, 1422,    0, 1402, 1403,
     1423, 1423, 1424, 1424,    0, 1417, 1425, 1425, 1405, 1426,
     1426, 1406, 1407, 1427, 1427, 1428, 1428, 1429, 1429, 1432,
     1432, 1411,    0, 1412, 1413, 1430, 1430,    0, 1431, 1431,
     1433, 1433,    0, 1420, 1432, 1434, 1434,    0, 1416, 1435,
     1435, 1419,    0, 1418, 1436, 1436, 1437, 1437,    0, 1423,

     1439, 1439, 1422,    0, 1421, 1438, 1438, 1440, 1440, 1441,
     1441, 1442, 1442,    0, 1424,    0, 1425, 1443, 1443,    0,
     1426,    0, 1430, 1444, 1444, 1428, 1445, 1445, 1429, 1431,
     1446, 1446, 1447, 1447, 1433,    0, 1448, 1448, 1449, 1449,
     1450, 1450,    0, 1435,    0, 1436, 1451, 1451, 1438, 1452,
     1452, 1439,    0, 1437, 1440, 1453, 1453,    0, 1442,    0,
     1441,    0, 1454, 1454, 1455, 1455,    0, 1456, 1456,    0,
     1457, 1457, 1458, 1458,    0, 1447,    0, 1444, 1459, 1459,
        0, 1443,    0, 1445, 1460, 1460, 1446, 1448, 1450, 1461,
     1461, 1462, 1462, 1449, 1463, 1463, 1464, 1464, 1465, 1465,

     1466, 1466,    0, 1467, 1467, 1468, 1468,    0, 1451, 1454,
     1469, 1469, 1453, 1457, 1452, 1456, 1470, 1470, 1471, 1471,
     1472, 1472,    0, 1456,    0, 1463, 1455, 1458,    0, 1459,
     1466, 1473, 1473, 1474, 1474, 1475, 1475, 1476, 1476, 1477,
     1477, 1460, 1478, 1478,    0, 1465, 1467, 1461, 1479, 1479,
     1480, 1480, 1462, 1464, 1480,    0, 1481, 1481, 1482, 1482,
     1483, 1483, 1468, 1484, 1484, 1471, 1469, 1485, 1485,    0,
     1470, 1481,    0, 1486, 1486, 1487, 1487, 1489, 1489, 1490,
     1490, 1472, 1491, 1491,    0, 1492, 1492, 1493, 1493,    0,
     1477, 1473, 1494, 1494, 1495, 1495,    0, 1475, 1478,    0,

     1496, 1496, 1497, 1497, 1498, 1498, 1499, 1499, 1500, 1500,
     1499, 1501, 1501, 1482, 1502, 1502, 1503, 1503, 1504, 1504,
     1505, 1505,    0, 1484, 1486, 1506, 1506, 1485, 1507, 1507,
     1509, 1509,    0, 1490,    0, 1491, 1492, 1508, 1508, 1510,
     1510,    0, 1489, 1496, 1511, 1511, 1495, 1509, 1512, 1512,
     1495, 1513, 1513, 1514, 1514, 1515, 1515, 1516, 1516,    0,
     1502, 1504, 1516, 1517, 1517, 1518, 1518, 1508, 1519, 1519,
     1520, 1520, 1503, 1501, 1521, 1521, 1506,    0, 1518, 1522,
     1522,    0, 1518, 1523, 1523, 1524, 1524, 1526, 1526, 1507,
        0, 1511, 1525, 1525, 1527, 1527, 1514,    0, 1528, 1528,

        0, 1510, 1529, 1529,    0, 1530, 1530,    0, 1512, 1531,
     1531, 1515,    0, 1513, 1532, 1532, 1525, 1520,    0, 1517,
     1530, 1533, 1533, 1534, 1534, 1521, 1535, 1535, 1536, 1536,
        0, 1524,    0, 1529, 1537, 1537, 1522, 1538, 1538, 1539,
     1539, 1540, 1540,    0, 1527, 1528, 1541, 1541, 1542, 1542,
        0, 1543, 1543, 1544, 1544,    0, 1531, 1545, 1545, 1546,
     1546, 1532, 1547, 1547, 1548, 1548, 1549, 1549, 1550, 1550,
     1541,    0, 1535, 1551, 1551,    0, 1552, 1552, 1553, 1553,
     1554, 1554, 1555, 1555, 1536, 1537, 1556, 1556,    0, 1534,
     1557, 1557, 1558, 1558, 1550, 1559, 1559, 1560, 1560, 1540,

     1539, 1556, 1561, 1561,    0, 1542, 1543, 1562, 1562,    0,
     1546, 1563, 1563, 1564, 1564, 1565, 1565,    0, 1545, 1566,
     1566, 1553, 1547, 1549,    0, 1555, 1548, 1552, 1567, 1567,
     1568, 1568,    0, 1569, 1569, 1570, 1570, 1554, 1563, 1571,
     1571, 1572, 1572, 1573, 1573,    0, 1558, 1574, 1574,    0,
     1557, 1575, 1575, 1560, 1562, 1559,    0, 1576, 1576, 1577,
     1577, 1578, 1578, 1579, 1579, 1580, 1580, 1581, 1581, 1582,
     1582, 1583, 1583, 1584, 1584, 1564,    0, 1585, 1585, 1586,
     1586, 1570,    0, 1567, 1569, 1571, 1587, 1587, 1588, 1588,
     1589, 1589, 1590, 1590,    0, 1591, 1591,    0, 1568, 1573,

        0, 1574, 1576, 1572, 1577,    0, 1592, 1592, 1593, 1593,
     1579,    0, 1575, 1594, 1594, 1588, 1582, 1578, 1595, 1595,
     1583, 1591,    0, 1581, 1585,    0, 1580, 1586,    0, 1584,
     1596, 1596, 1597, 1597, 1598, 1598, 1599, 1599, 1600, 1600,
     1601, 1601, 1602, 1602, 1603, 1603, 1604, 1604, 1590, 1587,
     1605, 1605,    0, 1589, 1592, 1606, 1606,    0, 1607, 1607,
     1608, 1608, 1595, 1609, 1609, 1610, 1610,    0, 1602, 1611,
     1611, 1612, 1612, 1613, 1613, 1614, 1614, 1594, 1596, 1615,
     1615, 1598, 1616, 1616,    0, 1600, 1617, 1617, 1618, 1618,
     1614, 1619, 1619, 1597,    0, 1603,    0, 1599, 1620, 1620,

     1601, 1621, 1621, 1622, 1622,    0, 1605,    0, 1604, 1607,
     1623, 1623, 1624, 1624, 1625, 1625,    0, 1606, 1626, 1626,
     1609, 1608, 1627, 1627, 1613, 1616, 1610, 1612,    0, 1617,
     1628, 1628, 1611,    0, 1629, 1629,    0, 1618, 1629, 1630,
     1630, 1631, 1631, 1632, 1632, 1633, 1633, 1634, 1634,    0,
     1635, 1635,    0, 1619, 1636, 1636, 1637, 1637, 1639, 1639,
     1638, 1638,    0, 1621,    0, 1624, 1640, 1640, 1641, 1641,
     1642, 1642, 1643, 1643, 1644, 1644, 1645, 1645, 1625, 1626,
     1646, 1646, 1647, 1647,    0, 1642, 1630, 1648, 1648, 1649,
     1649, 1650, 1650, 1649,    0, 1651, 1651, 1652, 1652, 1637,

     1645, 1636,    0, 1631, 1635, 1638, 1653, 1653, 1654, 1654,
        0, 1632, 1640, 1651,    0, 1639,    0, 1641, 1655, 1655,
     1656, 1656,    0, 1643, 1657, 1657, 1646,    0, 1658, 1658,
        0, 1644, 1659, 1659, 1660, 1660, 1661, 1661,    0, 1654,
     1662, 1662,    0, 1647, 1658, 1663, 1663,    0, 1648, 1664,
     1664, 1665, 1665,    0, 1650, 1666, 1666, 1652, 1667, 1667,
     1668, 1668, 1669, 1669, 1670, 1670, 1671, 1671,    0, 1657,
     1672, 1672, 1673, 1673, 1674, 1674, 1675, 1675,    0, 1676,
     1676,    0, 1656, 1677, 1677, 1678, 1678, 1680, 1680, 1661,
     1679, 1679, 1663,    0, 1659, 1671, 1660,    0, 1665, 1681,

     1681, 1662, 1682, 1682, 1683, 1683, 1684, 1684,    0, 1664,
     1685, 1685, 1686, 1686, 1687, 1687, 1688, 1688,    0, 1669,
        0, 1670, 1667,    0, 1668, 1689, 1689, 1672,    0, 1674,
     1676, 1675, 1690, 1690, 1673, 1691, 1691,    0, 1677, 1692,
     1692, 1679, 1693, 1693, 1694, 1694, 1695, 1695,    0, 1684,
     1696, 1696, 1697, 1697,    0, 1686,    0, 1685,    0, 1682,
        0, 1690, 1698, 1698, 1699, 1699,    0, 1700, 1700, 1701,
     1701, 1702, 1702, 1703, 1703,    0, 1689, 1698, 1691, 1704,
     1704, 1705, 1705,    0, 1706, 1706, 1707, 1707, 1708, 1708,
        0, 1694,    0, 1699, 1709, 1709,    0, 1692, 1710, 1710,

     1711, 1711, 1712, 1712, 1693,    0, 1696,    0, 1695, 1713,
     1713, 1714, 1714, 1697, 1700, 1710, 1701, 1715, 1715, 1716,
     1716, 1717, 1717,    0, 1705, 1718, 1718, 1719, 1719, 1720,
     1720,    0, 1708, 1721, 1721, 1722, 1722, 1723, 1723, 1704,
     1706, 1724, 1724, 1725, 1725, 1726, 1726,    0, 1707,    0,
     1712, 1711, 1727, 1727, 1729, 1729, 1714, 1728, 1728, 1730,
     1730, 1731, 1731, 1732, 1732, 1733, 1733, 1734, 1734, 1735,
     1735, 1736, 1736, 1718, 1737, 1737, 1717, 1738, 1738, 1720,
        0, 1718, 1739, 1739,    0, 1716, 1740, 1740, 1741, 1741,
     1742, 1742,    0, 1723,    0, 1719, 1722,    0, 1727, 1743,

     1743, 1744, 1744, 1725, 1745, 1745, 1728, 1746, 1746, 1732,
     1729, 1747, 1747, 1748, 1748,    0, 1735, 1749, 1749, 1750,
     1750, 1751, 1751, 1731,    0, 1733, 1752, 1752, 1753, 1753,
        0, 1749, 1754, 1754, 1734, 1755, 1755, 1742,    0, 1741,
     1756, 1756, 1743, 1753, 1757, 1757,    0, 1740, 1758, 1758,
     1745, 1759, 1759, 1760, 1760, 1761, 1761, 1746, 1762, 1762,
     1763, 1763, 1754, 1764, 1764, 1765, 1765,    0, 1751, 1766,
     1766, 1767, 1767,    0, 1747,    0, 1768, 1768, 1769, 1769,
        0, 1759, 1755, 1770, 1770,    0, 1752, 1771, 1771, 1772,
     1772, 1756, 1773, 1773,    0, 1765, 1774, 1774, 1775, 1775,

     1776, 1776, 1758, 1777, 1777, 1762, 1778, 1778, 1779, 1779,
     1780, 1780, 1781, 1781,    0, 1760, 1782, 1782, 1783, 1783,
     1784, 1784, 1785, 1785, 1786, 1786, 1787, 1787,    0, 1764,
     1788, 1788, 1766, 1768,    0, 1773, 1789, 1789,    0, 1769,
     1772, 1790, 1790, 1779, 1770, 1791, 1791, 1792, 1792, 1793,
     1793, 1794, 1794, 1778, 1795, 1795,    0, 1780, 1775, 1777,
     1796, 1796, 1797, 1797, 1792, 1798, 1798, 1799, 1799, 1800,
     1800, 1784, 1781, 1801, 1801, 1802, 1802, 1803, 1803, 1789,
     1787, 1804, 1804,    0, 1783, 1805, 1805, 1806, 1806, 1807,
     1807, 1808, 1808,    0, 1788, 1809, 1809, 1810, 1810, 1791,

        0, 1790, 1811, 1811, 1812, 1812, 1813, 1813, 1798,    0,
     1793,    0, 1794, 1797, 1814, 1814, 1795, 1796, 1816, 1816,
     1801, 1815, 1815, 1803, 1817, 1817, 1818, 1818, 1799,    0,
     1800, 1819, 1819, 1820, 1820, 1802, 1807, 1805, 1806, 1821,
     1821, 1815, 1822, 1822,    0, 1818, 1823, 1823, 1824, 1824,
     1825, 1825, 1812,    0, 1808, 1826, 1826,    0, 1809, 1810,
        0, 1814, 1827, 1827, 1828, 1828, 1829, 1829, 1830, 1830,
        0, 1817, 1831, 1831, 1832, 1832, 1833, 1833, 1819, 1834,
     1834, 1835, 1835, 1836, 1836,    0, 1837, 1837, 1821, 1838,
     1838, 1824, 1839, 1839, 1840, 1840, 1841, 1841, 1842, 1842,

     1843, 1843, 1844, 1844, 1845, 1845, 1846, 1846, 1847, 1847,
     1848, 1848, 1849, 1849,    0, 1826, 1850, 1850, 1851, 1851,
        0, 1828,    0, 1827,    0, 1832, 1852, 1852, 1853, 1853,
     1830,    0, 1836, 1850,    0, 1835, 1833, 1837, 1854, 1854,
     1838,    0, 1834, 1855, 1855, 1856, 1856, 1844,    0, 1845,
     1857, 1857, 1846,    0, 1847,    0, 1840,    0, 1841, 1858,
     1858, 1848, 1849, 1859, 1859, 1860, 1860, 1861, 1861, 1862,
     1862, 1863, 1863,    0, 1853, 1864, 1864, 1865, 1865,    0,
     1851, 1866, 1866, 1867, 1867, 1868, 1868,    0, 1852, 1869,
     1869, 1870, 1870, 1871, 1871, 1872, 1872, 1873, 1873, 1874,

     1874,    0, 1875, 1875, 1855,    0, 1876, 1876, 1877, 1877,
     1878, 1878, 1879, 1879, 1880, 1880, 1862, 1881, 1881, 1882,
     1882, 1860, 1883, 1883, 1861, 1884, 1884, 1885, 1885, 1886,
     1886,    0, 1866, 1863, 1887, 1887, 1888, 1888, 1889, 1889,
        0, 1872, 1890, 1890, 1891, 1891,    0, 1870, 1875, 1876,
     1869, 1892, 1892,    0, 1871, 1893, 1893, 1894, 1894, 1895,
     1895, 1896, 1896,    0, 1897, 1897, 1879, 1898, 1898,    0,
     1880, 1899, 1899, 1882,    0, 1899, 1900, 1900, 1881, 1897,
     1901, 1901,    0, 1895, 1886,    0, 1902, 1902, 1903, 1903,
     1891, 1904, 1904, 1905, 1905, 1887, 1906, 1906,    0, 1889,

     1907, 1907, 1908, 1908, 1909, 1909, 1910, 1910, 1911, 1911,
        0, 1898, 1892, 1894, 1912, 1912, 1907, 1896,    0, 1913,
     1913, 1914, 1914, 1900, 1915, 1915, 1916, 1916, 1917, 1917,
     1918, 1918, 1899, 1919, 1919,    0, 1920, 1920,    0, 1903,
        0, 1901, 1902, 1921, 1921, 1922, 1922, 1923, 1923, 1908,
     1909, 1924, 1924, 1925, 1925, 1905, 1926, 1926, 1927, 1927,
     1928, 1928,    0, 1929, 1929, 1930, 1930,    0, 1911, 1931,
     1931, 1925, 1932, 1932, 1933, 1933,    0, 1917, 1934, 1934,
        0, 1912, 1913, 1920, 1919, 1935, 1935,    0, 1916, 1936,
     1936, 1937, 1937, 1938, 1938, 1939, 1939, 1940, 1940, 1941,

     1941,    0, 1924, 1942, 1942, 1927, 1943, 1943, 1930, 1923,
     1929, 1926, 1931, 1944, 1944, 1945, 1945, 1946, 1946, 1947,
     1947,    0, 1928, 1948, 1948, 1949, 1949, 1950, 1950,    0,
     1951, 1951, 1952, 1952, 1953, 1953, 1954, 1954, 1937, 1955,
     1955,    0, 1938,    0, 1940,    0, 1939, 1956, 1956, 1957,
     1957, 1958, 1958,    0, 1943, 1958, 1959, 1959, 1960, 1960,
     1945, 1961, 1961,    0, 1942, 1962, 1962, 1963, 1963, 1964,
     1964, 1965, 1965,    0, 1946, 1944, 1947, 1966, 1966, 1967,
     1967, 1968, 1968, 1969, 1969,    0, 1949, 1951, 1950, 1948,
     1970, 1970, 1971, 1971, 1953, 1972, 1972, 1954, 1973, 1973,

     1974, 1974,    0, 1957, 1956, 1975, 1975, 1959, 1976, 1976,
     1977, 1977, 1968, 1978, 1978, 1979, 1979,    0, 1960, 1980,
     1980,    0, 1981, 1981, 1982, 1982, 1966, 1983, 1983, 1984,
     1984, 1965, 1985, 1985, 1986, 1986, 1987, 1987, 1988, 1988,
     1967, 1989, 1989,    0, 1969, 1990, 1990, 1991, 1991, 1971,
        0, 1970, 1972, 1992, 1992, 1977, 1993, 1993, 1994, 1994,
        0, 1975, 1995, 1995, 1996, 1996, 1997, 1997, 1976, 1981,
     1998, 1998, 1999, 1999, 1980, 1984, 2000, 2000, 2001, 2001,
     2002, 2002, 2003, 2003, 2004, 2004,    0, 1987, 1989, 1999,
     1991, 2005, 2005, 2006, 2006, 1990, 2007, 2007, 2008, 2008,

        0, 2009, 2009, 2010, 2010, 2011, 2011, 2012, 2012, 2013,
     2013, 2014, 2014,    0, 1994, 1992, 2015, 2015, 2016, 2016,
     2017, 2017, 1995, 2018, 2018,    0, 2002, 2019, 2019,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 2005, 2009,    0, 2011,    0, 2013,    0, 2014, 2008,
        0,    0,    0,    0,    0,    0, 2017,    0,    0,    0,
     2015,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     2016, 2021, 2021, 2021, 2021, 2021, 2022, 2022, 2022, 2022,
     2022, 2023, 2023, 2023, 2023, 2023, 2024, 2024, 2024, 2025,

        0, 2025, 2025, 2025, 2026, 2026, 2026, 2026, 2026, 2028,
        0, 2028, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,

     2020
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
#line 2 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"

// use NOMINMAX to avoid conflicts between windows.h min,max and std::min std::max ...
#define NOMINMAX

#include "IdentifierInfo.h"
//#include "Variable.hpp"
#include "imageextent.h"
#include "AmiInstructionBlock.h"
#include "driver.h"

#include "scanner.h"

extern yyip::Driver GB_driver;

/* import the parser's token type into a local typedef */
typedef yyip::Parser::token token;
typedef yyip::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H


#include <boost/format.hpp>
#include <boost/shared_ptr.hpp>

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <locale.h>
#include "messages.h"
#include "fonctions.h"

#include "IdentifierInfo.h"
#include "Variable.hpp"
#include "imageextent.h"
#include "AmiInstructionBlock.h"

#include "improcess_bison.tab.hpp"
#include "VarContexts.hpp"
#include "ami_function.h"
#include "VarArray.h"
#include <string>

#define LEX_DEBUG(expr) if (GB_debug) {expr}


//int          yyiplineno = 0;
//std::string  GB_current_file;

int yycharno = 0;
bool LexError = 0;

//extern  void yyiperror(const char*);
extern  VarContexts  Vars;

yyip::Parser::token::yytokentype checkvar(
      yyip::Parser::semantic_type* yylval,
      const char* varname, int context=-1);

BasicVariable::ptr IsObject(  const char* varname, int context=-1);

using namespace std;


string* cpp_string;
//char string_buf[256];
//char *string_buf_ptr;

//#define MAXSIZE_BLOCK 10000
//char block_buf[MAXSIZE_BLOCK];
//char *block_buf_ptr;


AmiInstructionBlock* ami_block;

int  block_level = 0;
int comment_caller;



extern int       GB_argc;
extern wxChar**  GB_argv;
extern int       GB_num_arg_parsed;


/* enable c++ scanner class generation */



/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 110 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 2677 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/GeneratedFlexBison/improcess_flex.cpp"

#define INITIAL 0
#define str 1
#define block 2
#define comment 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 113 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


#line 2789 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/GeneratedFlexBison/improcess_flex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2021 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6713 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 121 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::RIGHT_ASSIGN);   /*{>>=,RIGHT_ASSIGN}*/
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 122 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::LEFT_ASSIGN);    /*{<<=,LEFT_ASSIGN}*/
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 123 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ADD_ASSIGN);     /*{+=,ADD_ASSIGN}*/
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 124 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SUB_ASSIGN);     /*{-=,SUB_ASSIGN}*/
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 125 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::MUL_ASSIGN);     /*{*=,MUL_ASSIGN}*/
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 126 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::DIV_ASSIGN); } /*{/=,DIV_ASSIGN}*/
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 127 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::MOD_ASSIGN); } /*{%=,MOD_ASSIGN}*/
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 128 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::AND_ASSIGN); } /*{&=,AND_ASSIGN}*/
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 129 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::XOR_ASSIGN); } /*{ ^=,XOR_ASSIGN}*/
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 130 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::OR_ASSIGN); } /*{|=,OR_ASSIGN}*/
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 131 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::RIGHT_OP); } /*{>>,RIGHT_OP}*/
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 132 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::INC_OP); } /*{++,INC_OP}*/
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 133 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::DEC_OP); } /*{--,DEC_OP}*/
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 134 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::PTR_OP); } /*{->,PTR_OP}*/
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 135 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::AND_OP); } /*{&&,AND_OP}*/
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::OR_OP); } /*{||,OR_OP}*/
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 137 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::LE_OP); } /*{<=,LE_OP}*/
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 138 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::GE_OP); } /*{>=,GE_OP}*/
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 139 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::EQ_OP); } /*{==,EQ_OP}*/
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 140 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::NE_OP); } /*{!=,NE_OP}*/
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 143 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TRANSPOSE_OP); /*{',TRANSPOSE_OP}*/
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 144 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_EXP);  /*{^,T_EXP}*/
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 145 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GT);   /*{>,T_GT}*/
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 146 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_LT);   /*{<,T_LT}*/
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 147 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MULT); /*{*,T_MULT}*/
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 148 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::POINTWISE_MULT);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 149 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DIV);  /*{/,T_DIV}*/
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 150 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_NOT); /*{!,T_NOT}*/
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 151 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ADD); /*{+,T_ADD}*/
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 152 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SUB); /*{-,T_SUB}*/
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 153 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MOD); /*{%,T_MOD}*/
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 155 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ASSIGN_OP); /*{=,ASSIGN_OP}*/
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 156 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OP_PAR); /*{(,T_OP_PAR}*/
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 157 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CL_PAR); /*{),T_CL_PAR}*/
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 158 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OP_BR);  /*{[,T_OP_BR}*/
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 159 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CL_BR);  /*{],T_CL_BR}*/
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 160 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AND);    /*{&,T_AND}*/
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 161 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OR);     /*{|,T_OR}*/
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 163 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_POINT); /*{.,T_POINT}*/
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 164 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_COMMA); /*{,,T_COMMA}*/
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_QUEST);  /*{?,T_QUEST}*/
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 166 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_COLON); /*{:,T_COLON}*/
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SEMICOLON);  /*{;,T_SEMICOLON}*/
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 171 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetComponent); /*{SetComponent,T_SetComponent}*/
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 172 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetExtent); /*{GetExtent,T_GetExtent}*/
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 174 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_LineNumber); /*{LineNumber,T_LineNumber}*/
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 176 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SET);               /*{set,SET}*/
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 177 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SETPOS);            /*{setpos,SETPOS}*/
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 178 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_lininterp);      /*{lininterp,T_lininterp}*/
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 179 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_initvalue);       /*{initvalue,T_initvalue}*/
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 181 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::COMPARE);           /*{compare,COMPARE}*/
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 183 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SETVECTOR);         /*{setvector,SETVECTOR}*/
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 184 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_normalize); /*{normalize,T_normalize}*/
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 185 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ShowSection); /*{ShowSection,T_ShowSection}*/
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 186 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_HideSection); /*{HideSection,T_HideSection}*/
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 189 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_itk); /*{itk,T_itk}*/
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 190 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CannyEdgeDetector); /*{CannyEdgeDetector,T_CannyEdgeDetector}*/
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 192 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetName); /*{GetName,T_GetName}*/
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 193 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetObjectName); /*{GetObjectName,T_GetObjectName}*/
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 194 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetName); /*{SetName,T_SetName}*/
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CHAR); /*{CHAR,T_CHAR}*/
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_UCHAR); /*{UCHAR,T_UCHAR}*/
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SHORT); /*{SHORT,T_SHORT}*/
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_USHORT); /*{USHORT,T_USHORT}*/
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_INT); /*{INT,T_INT}*/
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_UINT); /*{UINT,T_UINT}*/
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_FLOAT); /*{FLOAT,T_FLOAT}*/
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_LONG); /*{LONG,T_LONG}*/ /// New (added: 27/05/2010)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DOUBLE); /*{DOUBLE,T_DOUBLE}*/
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_RGB); /*{RGB,T_RGB}*/
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_FLOAT_VECTOR); /*{FLOAT_VECTOR,T_FLOAT_VECTOR}*/
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetFormat); /*{GetFormat,T_GetFormat}*/
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Comments); /*{Comments,T_Comments}*/
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 211 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_IMAGE); /*{IMAGE,T_IMAGE}*/
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 212 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_NUM); /*{NUM,T_NUM}*/
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 213 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_STRING); /*{STRING,T_STRING}*/
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 214 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_TRANSFORM); /*{TRANSFORM,T_TRANSFORM}*/
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 215 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OBJECT); /*{OBJECT,T_OBJECT}*/
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 217 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_atof); /*{atof,T_atof}*/
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 219 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_global);     /*{global,T_global}*/
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 220 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_global_new); /*{global_new,T_global_new}*/
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 221 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_local_new); /*{local_new,T_local_new}*/
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 222 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_local);      /*{local,T_local}*/
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 223 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_wait);       /*{wait,T_wait}*/
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 224 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_schedule);   /*{schedule,T_schedule}*/
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 226 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse constants ====================
//
 return(token::CONST_PI);
} /*{Pi,CONST_P}*/
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 234 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse Math functions ====================
//
return(token::SIN);
} /*{sin,SIN}*/
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 240 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::COS); /*{cos,COS}*/
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 241 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TAN); /*{tan,TAN}*/
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 242 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ASIN); /*{asin,ASIN}*/
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 243 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ACOS); /*{acos,ACOS}*/
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 244 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ATAN); /*{atan,ATAN}*/
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 245 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::EXP); /*{exp,EXP}*/
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 246 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::LN); /*{ln,LN}*/
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 247 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::LOG); /*{log,LOG}*/
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 248 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::COSH); /*{cosh,COSH}*/
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 249 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SINH); /*{sinh,SINH}*/
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 250 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SQRT); /*{sqrt,SQRT}*/
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 251 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ABS); /*{abs,ABS}*/
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 252 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::NORM); /*{norm,NORM}*/
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 253 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ROUND); /*{round,ROUND}*/
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 254 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::FLOOR); /*{floor,FLOOR}*/
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 256 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OPEN); /*{open,T_OPEN}*/
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 257 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CLOSE); /*{close,T_CLOSE}*/
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 258 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_scan_float); /*{scan_float,T_scan_float}*/
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 259 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_read); /*{read,T_read}*/
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 260 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_rewind); /*{rewind,T_rewind}*/
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 262 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PROC);   /*{proc,T_PROC}*/
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 263 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Class);  /*{Class,T_Class}*/
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 264 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_public);  /*{public,T_public}*/
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 266 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse Loops and Conditions ===============
//
return(token::FOR);
} /*{for,FOR}*/
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 272 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_IN); /*{in,T_IN}*/
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 273 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TO); /*{to,TO}*/
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 274 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::STEP); /*{step,STEP}*/
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 275 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ENDFOR); /*{endfor,ENDFOR}*/
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 277 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_REPEAT); /*{repeat,T_REPEAT}*/
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 278 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_WHILE); /*{while,T_WHILE}*/
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 279 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_UNTIL); /*{until,T_UNTIL}*/
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 280 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_BREAK); /*{break,T_BREAK}*/
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 282 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::IF); /*{if,IF}*/
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 283 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ELSE); /*{else,ELSE}*/
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 285 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse Commands ===============
//
return(token::ASHELL);
} /*{sh,ASHELL}*/
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 292 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetDebugOn); /*{SetDebugOn,T_SetDebugOn}*/
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 293 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetDebugOff); /*{SetDebugOff,T_SetDebugOff}*/
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 294 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_TraceScanning); /*{TraceScanning,T_TraceScanning}*/
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 295 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_TraceParsing); /*{TraceParsing,T_TraceParsing}*/
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 296 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetVerboseOn); /*{SetVerboseOn,T_SetVerboseOn}*/
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 297 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetVerboseOff); /*{SetVerboseOff,T_SetVerboseOff}*/
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 298 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_NoMessageDialog); /*{NoMessageDialog,T_NoMessageDialog}*/
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 300 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetScriptsDir); /*{GetScriptDir,T_GetScriptDir}*/
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 301 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetProgress); /*{SetProgress,T_SetProgress}*/
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 302 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetStatusText); /*{SetStatusText,T_SetStatusText}*/
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 303 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::QUIT); /*{Quit,QUIT}*/
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 304 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::QUIT);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 306 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Image); /*{Image,T_Image}*/
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 307 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_BrowseImage); /*{BrowseImage,T_BrowseImage}*/
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 309 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ReadRawImages); /*{ReadRawImages,T_ReadRawImages}*/
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 310 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Transform); /*{Transform,T_Transform}*/
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 311 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SHOW); /*{Show,SHOW}*/
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 312 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SHOW);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 313 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Remove); /*{Remove,T_Remove}*/
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 314 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SwapBuffers); /*{SwapBuffers, T_SwapBuffers}*/
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 315 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_HIDE); /*{Hide,T_HIDE}*/
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 316 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_HIDE);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 317 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::HELP); /*{Help,HELP}*/
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 318 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::HELP);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 319 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::LS); /*{ls,LS}*/
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 320 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::PRINT); /*{print,PRINT}*/
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 321 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::PRINTN); /*{printn,PRINTN}*/
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 322 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_boost_format); /*{boost_format,T_boost_format}*/
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 323 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SPRINT); /*{sprint,T_SPRINT}*/
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 324 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::VARIABLES); /*{vars,VARIABLES}*/
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 325 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::FUNCTION); /*{func,FUNCTION}*/
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 326 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_eval); /*{eval,T_eval}*/
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 328 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_tx); /*{tx,T_tx}*/
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 329 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ty); /*{ty,T_ty}*/
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 330 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_tz); /*{tz,T_tz}*/
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 331 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_trx); /*{trx,T_trx}*/
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 332 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_try); /*{try,T_try}*/
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 333 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_trz); /*{trz,T_trz}*/
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 334 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vx); /*{vx,T_vx}*/
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 335 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vy); /*{vy,T_vy}*/
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 336 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vz); /*{vz,T_vz}*/
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 337 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vdim); /*{vdim,T_vdim}*/
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 338 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_inc); /*{inc,T_inc}*/
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 339 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_val); /*{val,T_val}*/
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 341 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::FILTER); /*{filter,FILTER}*/
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 342 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkMedian3D); /*{vtkMedian3D,T_vtkMedian3D}*/
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 343 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::NormGrad); /*{normgrad,NormGrad}*/
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 344 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DiscNormGrad); /*{discnormgrad,T_DiscNormGrad}*/
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 345 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_gradient); /*{gradient,T_gradient}*/
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 346 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SecDerGrad); /*{secdergrad,SecDerGrad}*/
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 347 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SecDerGrad2); /*{secdergrad2,SecDerGrad2}*/
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 348 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DiscSecDerGrad); /*{discsecdergrad,T_DiscSecDerGrad}*/
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 349 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::OpImage); /*{OpImage,OpImage}*/
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 350 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SubImage); /*{subimage,SubImage}*/
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 351 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AutoCrop); /*{autocrop,T_AutoCrop}*/
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 352 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::PutImage); /*{putimage,PutImage}*/
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 353 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_rot2D); /*{rot2D,T_rot2D}*/
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 354 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_rotate); /*{rotate,T_rotate}*/
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 355 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_mean); /*{mean,T_mean}*/
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 356 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_localmean); /*{localmean,T_localmean}*/
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 357 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_localmean2); /*{localmean2,T_localmean2}*/
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 358 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_localSD); /*{localSD,T_localSD}*/
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 359 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_localSD2); /*{localSD2,T_localSD2}*/
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 360 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_struct_tensor); /*{StructTensor,T_struct_tensor}*/
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 361 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_StructTensorH); /*{StructTensorH,T_StructTensorH}*/
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 362 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_HessianMatrix); /*{HessianMatrix,T_HessianMatrix}*/
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 363 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_HessianEVal); /*{HessianEVal,T_HessianEVal}*/
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 364 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Derivatives); /*{Derivatives,T_Derivatives}*/
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 365 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_curvatures); /*{Curvatures,T_curvatures}*/
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 366 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DiscMeanCurvature); /*{DiscMeanCurvature,T_DiscMeanCurvature}*/
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 367 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Laplacian); /*{Laplacian,T_Laplacian}*/
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 368 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_setvoxelsize); /*{setvoxelsize,T_setvoxelsize}*/
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 369 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_settranslation); /*{settranslation,T_settranslation}*/
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 370 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_setendianness);  /*{setendianness,T_setendianness}*/
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 372 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_threscross); /*{threscross,T_threscross}*/
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 373 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_IsocontourPoints); /*{IsocontourPoints,T_IsocontourPoints}*/
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 374 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_IsosurfDist); /*{IsosurfDist,T_IsosurfDist}*/
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 375 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkIsoContourDist); /*{vtkIsoContourDist,T_vtkIsoContourDist}*/
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 377 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetWindowSize); /*{SetWindowSize,T_SetWindowSize}*/
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 379 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Convolve); /*{Convolve,T_Convolve}*/
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 380 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ConvolveMask); /*{ConvolveMask,T_ConvolveMask}*/
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 381 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Pad); /*{Pad,T_Pad}*/
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 382 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Eigen2D); /*{Eigen2D,T_Eigen2D}*/
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 383 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Eigen3D); /*{Eigen3D,T_Eigen3D}*/
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 384 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ChamferDT); /*{ChamferDT,T_ChamferDT}*/
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 385 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Chamfer2DT); /*{Chamfer2DT,T_Chamfer2DT}*/
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 386 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_BorgeforsDT); /*{BorgeforsDT,T_BorgeforsDT}*/
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 387 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_BorgeforsSDT); /*{BorgeforsSDT,T_BorgeforsSDT}*/
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 388 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkSignedBorgefors); /*{vtkSignedBorgefors,T_vtkSignedBorgefors}*/
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 389 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkSignedFMDist); /*{vtkSignedFMDist,T_vtkSignedFMDist}*/
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 390 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PropagationDist); /*{PropagationDist,T_PropagationDist}*/
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 391 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PropagationDist2); /*{PropagationDist2,T_PropagationDist2}*/
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 392 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PropDanielsson); /*{PropDanielsson,T_PropDanielsson}*/
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 393 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkPropDanielsson); /*{vtkPropDanielsson,T_vtkPropDanielsson}*/
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 394 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkPropDaniel2); /*{vtkPropDaniel2,T_vtkPropDaniel2}*/
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 395 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CC); /*{CC,T_CC}*/
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 397 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ConvexHull); /*{ConvexHull,T_ConvexHull}*/
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 399 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MeanHalfSize); /*{MeanHalfSize,T_MeanHalfSize}*/
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 400 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Resize); /*{Resize,T_Resize}*/
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 401 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ReSlice); /*{ReSlice,T_ReSlice}*/
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 402 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Flip);  /*{Flip,T_Flip}*/// flips image in one of the main axis direction
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 405 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_RestartTime); /*{RestartTime,T_RestartTime}*/
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 406 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_InitTime); /*{InitTime,T_InitTime}*/
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 407 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_TimeSpent); /*{TimeSpent,T_TimeSpent}*/
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 408 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_EndTime); /*{EndTime,T_EndTime}*/
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 410 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_NULL); /*{NULL,T_NULL}*/
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 413 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ProcessXEvents); /*{ProcessXEvents,T_ProcessXEvents}*/
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 414 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ProcessEvents); /*{ProcessEvents,T_ProcessEvents}*/
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 416 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_COUNT); /*{count,T_COUNT}*/
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 417 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MAX); /*{max,T_MAX}*/
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 418 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_argmax); /*{argmax,T_argmax}*/
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 419 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MIN); /*{min,T_MIN}*/
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 420 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MEDIAN); /*{median,T_MEDIAN}*/
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 421 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SUM); /*{sum,T_SUM}*/
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 423 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_info); /*{info,T_info}*/
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 426 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Xpos); /*{Xpos,T_Xpos}*/
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 427 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Ypos); /*{Ypos,T_Ypos}*/
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 428 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Zpos); /*{Zpos,T_Zpos}*/
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 429 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SpacePos); /*{SpacePos,T_SpacePos}*/
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 431 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_del); /*{del,T_del}*/
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 432 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_delvars); /*{delvars,T_delvars}*/
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 434 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_EDPdilate); /*{EDPdilate,T_EDPdilate}*/
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 435 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_EDPerode); /*{EDPerode,T_EDPerode}*/
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 436 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_EDPopen); /*{EDPopen,T_EDPopen}*/
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 437 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_EDPclose); /*{EDPclose,T_EDPclose}*/
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 440 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkFastMarching); /*{vtkFastMarching,T_vtkFastMarching}*/
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 441 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkFastMarchingTarget); /*{vtkFastMarchingTarget,T_vtkFastMarchingTarget}*/
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 444 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_FluxDiffusion); /*{FluxDiffusion,T_FluxDiffusion}*/
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 445 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkAnisoGS); /*{vtkAnisoGS,T_vtkAnisoGS}*/
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 446 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::AnisoSmoothGS); /*{AnisoSmoothGS,AnisoSmoothGS}*/
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 447 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TInit); /*{init,TInit}*/
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 448 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TIterate); /*{iterate,TIterate}*/
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 449 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TEnd); /*{end,TEnd}*/
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 451 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoWeickert); /*{AnisoWeickert,T_AnisoWeickert}*/
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 452 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoCW); /*{AnisoCW,T_AnisoCW}*/
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 454 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SRAD_qcoeff); /*{SRAD_qcoeff,T_SRAD_qcoeff}*/
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 455 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoSRAD); /*{AnisoSRAD,T_AnisoSRAD}*/
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 456 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoSRAD2); /*{AnisoSRAD2,T_AnisoSRAD2}*/
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 457 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoDPAD); /*{AnisoDPAD,T_AnisoDPAD}*/
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 458 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoDPAD2); /*{AnisoDPAD2,T_AnisoDPAD2}*/
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 459 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoNRAD); /*{AnisoNRAD,T_AnisoNRAD}*/
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 460 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoLeeAdd2); /*{AnisoLeeAdd2,T_AnisoLeeAdd2}*/
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 462 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoRudinMult); /*{AnisoRudinMult,T_AnisoRudinMult}*/
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 464 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TAddGaussNoise); /*{AddGaussNoise,TAddGaussNoise}*/
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 466 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SNR); /*{SNR,T_SNR}*/
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 468 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_save); /*{save,T_save}*/
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 470 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_eccentricity); /*{eccentricity,T_eccentricity}*/
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 472 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_getimage); /*{getimage,T_getimage}*/
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 473 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetImageFromX); /*{GetImageFromX,T_GetImageFromX}*/
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 475 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isoarea2D); /*{isoarea2D,T_isoarea2D}*/
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 476 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_posarea); /*{posarea,T_posarea}*/
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 478 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ReadCTALine); /*{ReadCTALine,T_ReadCTALine}*/
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 479 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ReadCTALineRadii); /*{ReadCTALineRadii,T_ReadCTALineRadii}*/
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 481 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isosurf); /*{isosurf,T_isosurf}*/
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 482 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isosurf_inv); /*{isosurf_inv,T_isosurf_inv}*/
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 483 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isosurf_ijk); /*{isosurf_ijk,T_isosurf_ijk}*/
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 484 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isosurf_ras); /*{isosurf_ras,T_isosurf_ras}*/
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 485 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Surface); /*{Surface,T_Surface}*/
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 486 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkDecimate); /*{vtkDecimate,T_vtkDecimate}*/
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 487 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkMarchingCubes); /*{vtkMarchingCubes,T_vtkMarchingCubes}*/
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 488 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkSmooth); /*{vtkSmooth,T_vtkSmooth}*/
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 489 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkWindowedSinc); /*{vtkWindowedSinc,T_vtkWindowedSinc}*/
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 491 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isoline); /*{isoline,T_isoline}*/
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 493 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkDist); /*{vtkDist,T_vtkDist}*/
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 494 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AndreDist); /*{AndreDist,T_AndreDist}*/
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 496 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OutFlux); /*{OutFlux,T_OutFlux}*/
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 497 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OutFluxScalar); /*{OutFluxScalar,T_OutFluxScalar}*/
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 498 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_2DFlux); /*{2DFlux,T_2DFlux}*/
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 499 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OrientationRatio); /*{OrientationRatio,T_OrientationRatio}*/
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 501 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_computeCC); /*{computeCC,T_computeCC}*/
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 502 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_drawCC); /*{drawCC,T_drawCC}*/
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 503 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Paint); /*{Paint,T_Paint}*/
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 504 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetLight); /*{SetLight,T_SetLight}*/
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 505 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetLightPos); /*{SetLightPos,T_SetLightPos}*/
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 506 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetLightAmbient); /*{SetLightAmbient,T_SetLightAmbient}*/
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 507 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetLightDiffuse); /*{SetLightDiffuse,T_SetLightDiffuse}*/
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 508 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetLightSpecular); /*{SetLightSpecular,T_SetLightSpecular}*/
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 509 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetBackground); /*{SetBackground,T_SetBackground}*/
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 511 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Normalize); /*{Normalize,T_Normalize}*/
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 512 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Center);    /*{Center,T_Center}*/
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 516 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PrintMatrices); /*{PrintMatrices,T_PrintMatrices}*/ // print the matrices of Viewer3D class
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 518 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_addobj); /*{AddObject,T_addobj}*/
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 519 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_setcurrentobj); /*{SetCurrentObj,T_setcurrentobj}*/
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 522 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetTransform); /*{GetTransform,T_GetTransform}*/
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 523 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetTransform); /*{SetTransform,T_SetTransform}*/
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 525 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Interpolate); /*{Interpolate,T_Interpolate}*/
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 527 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Skeleton); /*{Skeleton,T_Skeleton}*/
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 528 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SimplePoints); /*{SimplePoints,T_SimplePoints}*/
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 530 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_NormalField); /*{NormalField,T_NormalField}*/
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 531 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DirConnectivity); /*{DirConnectivity,T_DirConnectivity}*/
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 532 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OrientField); /*{OrientField,T_OrientField}*/
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 533 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OrientPositive); /*{OrientPositive,T_OrientPositive}*/
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 535 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Skeleton2lines); /*{Skeleton2lines,T_Skeleton2lines}*/
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 536 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SmoothLines);  /*{SmoothLines,T_SmoothLines}*/
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 537 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ResampleLines); /*{ResampleLines,T_ResampleLines}*/
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 538 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ShortestPath); /*{ShortestPath,T_ShortestPath}*/
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 539 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ShortestPathImage); /*{ShortestPathImage,T_ShortestPathImage}*/
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 540 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PathFromDispl); /*{PathFromDispl,T_PathFromDispl}*/
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 541 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PathFromVectField); /*{PathFromVectField,T_PathFromVectField}*/
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 542 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_LineRecons); /*{LineRecons,T_LineRecons}*/
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 544 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CircleIntegral); /*{CircleInt,T_CircleIntegral}*/
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 545 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CircleIntegralExc); /*{CircleIntExc,T_CircleIntegralExc}*/
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 546 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CircleIntSdExc); /*{CircleIntSdExc,T_CircleIntSdExc}*/
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 547 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CircleMinIntSdExc); /*{CircleMinIntSdExc,T_CircleMinIntSdExc}*/
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 548 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_LocalExtrema); /*{LocalExtrema,T_LocalExtrema}*/
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 551 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_gnuplot); /*{gnuplot,T_gnuplot}*/
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 552 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_histo); /*{histo,T_histo}*/
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 553 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_cumhisto); /*{cumhisto,T_cumhisto}*/
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 554 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DisplayHisto); /*{DisplayHisto,T_DisplayHisto}*/
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 556 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GenRead); /*{GenRead,T_GenRead}*/
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 559 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Matrix); /*{Matrix,T_Matrix}*/
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 560 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Invert); /*{Invert,T_Invert}*/
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 562 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{return(token::T_SaveStructuredGrid); /*{SaveStructuredGrid,T_SaveStructuredGrid}*/

//
//============================== PARAMWIN options ====================
//

//ParamWin          {
//                  return(token::T_ParamWin);

//BeginBook         return(token::T_BeginBook); // BeginBook,T_BeginBook
// EndBook           return(token::T_EndBook); //EndBook,T_EndBook
// AddPage           return(token::T_AddPage); / / AddPage,T_AddPage
// BeginPanel        return(token::T_BeginPanel); // BeginPanel,T_BeginPanel
// EndPanel          return(token::T_EndPanel); // EndPanel,T_EndPanel}
// SelectPage        return(token::T_SelectPage); // SelectPage,T_SelectPage

//BeginBoxPanel     return(token::T_BeginBoxPanel); /// BeginBoxPanel,T_BeginBoxPanel
//EndBoxPanel       return(token::T_EndBoxPanel); /// EndBoxPanel,T_EndBoxPanel

//AddFloat          return(token::T_AddFloat); // AddFloat,T_AddFloat
// AddInt            return(token::T_AddInt); // AddInt,T_AddInt
// AddButton         return(token::T_AddButton); // AddButton,T_AddButton

// AddBoolean        return(token::T_AddBoolean); /// AddBoolean,T_AddBoolean

// AddEnum           return(token::T_AddEnum); // AddEnum,T_AddEnum
// AddEnumChoice     return(token::T_AddEnumChoice); // AddEnumChoice,T_AddEnumChoice
//AddImageChoice    return(token::T_AddImageChoice); // AddImageChoice,T_AddImageChoice
// AddString         return(token::T_AddString); // AddString,T_AddString
// AddFilename       return(token::T_AddFilename); // AddFilename,T_AddFilename
//AddLabel          return(token::T_AddLabel); //AddLabel,T_AddLabel
//SetCallback       return(token::T_SetCallback); //SetCallback,T_SetCallback
//SetDragCallback   return(token::T_SetDragCallback); //SetDragCallback,T_SetDragCallback

//BeginBox          return(token::T_BeginBox); //BeginBox,T_BeginBox
//EndBox            return(token::T_EndBox); //EndBox,T_EndBox

//BeginHorizontal   return(token::T_BeginHorizontal); //BeginHorizontal,T_BeginHorizontal
//EndHorizontal     return(token::T_EndHorizontal); //EndHorizontal,T_EndHorizontal

// EnablePanel       return(token::T_EnablePanel);  //EnablePanel,T_EnablePanel

// EnableBox         return(token::T_EnableBox);  // EnableBox,T_EnableBox

// Display           return(token::T_Display); //Display,T_Display

// CreateWin         return(token::T_CreateWin); // CreateWin,T_CreateWin
// redraw            return(token::T_redraw); // redraw,T_redraw

//SetPositionProp      return(token::T_SetPositionProp); //SetPositionProp,T_SetPositionProp
// ShowSlider        return(token::T_ShowSlider); // ShowSlider,T_ShowSlider
// Enable            return(token::T_Enable);  //Enable,T_Enable

} /*{ParamWin,T_ParamWin}*/
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 619 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CreateFlatMesh);    /*{CreateFlatMesh,T_CreateFlatMesh}*/
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 620 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CreateVolume);      /*{CreateVolume,T_CreateVolume}*/
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 621 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkCreateFlatMesh); /*{vtkCreateFlatMesh,T_vtkCreateFlatMesh}*/
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 622 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Altitude2Position); /*{Altitude2Position,T_Altitude2Position}*/
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 623 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Temp2Altitudes);    /*{Temp2Altitudes,T_Temp2Altitudes}*/
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 624 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GeoCoordinates);    /*{GeoCoordinates,T_GeoCoordinates}*/
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 625 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Set3DArrowParam); /*{Set3DArrowParam,T_Set3DArrowParam}*/
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 627 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CreateVectors); /*{CreateVectors,T_CreateVectors}*/
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 629 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CreateVectorsFromField); /*{CreateVectorsFromField,T_CreateVectorsFromField}*/
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 631 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ComputeAltitudes); /*{ComputeAltitudes,T_ComputeAltitudes}*/
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 632 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ReadFlow); /*{ReadFlow,T_ReadFlow}*/
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 633 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetFluidNavFile); /*{SetFluidNavFile,T_SetFluidNavFile}*/
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 634 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DrawEarthCoord); /*{DrawEarthCoord,T_DrawEarthCoord}*/
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 636 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CreateEllipsoids); /*{CreateEllipsoids,T_CreateEllipsoids}*/
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 638 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_import_vtk);     /*{import_vtk,T_import_vtk}*/
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 639 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_import_wii);     /*{import_wii,T_import_wii}*/
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 640 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_import_filters); /*{import_filters,T_import_filters}*/
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 642 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_amiOFCorr2D);  /*{amiOFCorr2D,T_amiOFCorr2D}*/
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 643 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_amiOFVar2D);   /*{amiOFVar2D,T_amiOFVar2D}*/
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 645 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkDicomRead); /*{vtkDicomRead,T_vtkDicomRead}*/
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 646 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkMINCRead);  /*{vtkMINCRead,T_vtkMINCRead}*/
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 648 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_exists);       /*{exists,T_exists}*/
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 649 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_FileExists);  /*{FileExists,T_FileExists}*/
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 651 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_InfoDialog); /*{InfoDialog,T_InfoDialog}*/
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 653 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_slice);        /*{slice,T_slice}*/
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 655 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_argc);         /*{argc,T_argc}*/
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 656 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_emptyargs);    /*{emptyargs,T_emptyargs}*/
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 659 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse float ====================
//
//  setlocale(LC_NUMERIC,"C");
  setlocale(LC_NUMERIC, "C");
  yylval->adouble=atof(YYText());
  return(token::NUMBER);
}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 670 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse interger ====================
//
//  setlocale(LC_NUMERIC,"C");
  setlocale(LC_NUMERIC, "C");
  yylval->adouble=atof(YYText());
  return(token::NUMBER);
}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 683 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//
//============================ Parse string ====================
//
 cpp_string = new string();
 BEGIN(str);
 }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 692 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  // end of string
  // Not thread safe ...
  BEGIN(0);
  // add the \0 character, why ???...
  cpp_string->append(1,'\0');

  if((yylval->astring = new char[cpp_string->length()+1])==NULL) {
    GB_driver.yyiperror(E_MEM);
    return token::LEX_ERROR;
  }
  // first conversion, we keep char* for astring for now
  strcpy(yylval->astring, cpp_string->c_str());
  delete cpp_string;
  cpp_string = NULL;
  return(token::ASTRING);
}
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 710 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  GB_driver.yyiperror(E_UNTERM_STRING);
}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 714 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\n');
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 715 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\t');
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 716 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\r');
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 717 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\b');
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 718 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\f');
	YY_BREAK
case 373:
/* rule 373 can match eol */
YY_RULE_SETUP
#line 720 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,YYText()[1]);
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 722 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  cpp_string->append(YYText());
}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 726 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  cpp_string->append(YYText());
/*
  char *yptr = YYText();

  while (*yptr)
    *string_buf_ptr++ = *yptr++;
*/
}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 737 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  yylval->adouble=GB_argc-GB_num_arg_parsed;
  return(token::NUMBER);
}
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 742 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  // TODO allow more than 10 arguments!!
  int n,pos;
  n = YYText()[1]-'0';
  // TODO: check the position, improve the code here
  pos = n+GB_num_arg_parsed-1;

  if ((pos>=GB_argc)||(pos<0)) {
    boost::format fmt =
        boost::format("improcess.l \t invalid argument number %d / %d\n");
#ifdef str
  #undef str
      GB_driver.yyiperror( str(fmt % n % (GB_argc-GB_num_arg_parsed)).c_str() );
  #define str 1
#else
      GB_driver.yyiperror( str(fmt % n % (GB_argc-GB_num_arg_parsed)).c_str() );
#endif
    return token::LEX_ERROR;
//myss1.c_str() );
  }

  // we use GB_argv[n+1] because the first two arguments are the program and the script file
  wxString argument(GB_argv[pos]);
  
  if((yylval->astring = new char[strlen(argument.mb_str(wxConvUTF8))+1])==NULL) {
    GB_driver.yyiperror(E_MEM);
    return token::LEX_ERROR;
  }

  strcpy(yylval->astring,argument.mb_str(wxConvUTF8));

  return(token::ASTRING);

}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 777 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//============================ Parse block ====================
//
  if (block_level==0) {
    ami_block = new AmiInstructionBlock();
    ami_block->SetStartingLine(GB_driver.yyiplineno);
    if (GB_debug )cerr << "Starting block at " <<  GB_driver.yyiplineno << endl;
    if (GB_debug )cerr << "Starting block at " << *yylloc << endl;
    block_level++;
    BEGIN(block);
  }

/*
<block>\# {
//============================ Parse comment ====================
//
    comment_caller = block;
    BEGIN(comment);
//    printf("begin comment in block \n");
}

<block>"//"  {
    comment_caller = block;
    BEGIN(comment);
//    printf("begin comment in block \n");
}
*/
}
	YY_BREAK
case 379:
/* rule 379 can match eol */
YY_RULE_SETUP
#line 806 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  // dealing with windows end-of-lines ...
  yylloc->lines(1); yylloc->step();
  GB_driver.yyiplineno++;
  ami_block->GetBody().append(YYText());
}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 814 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  block_level++;
  ami_block->GetBody().append(1,'{');
}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 819 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{

  block_level--;
  if (block_level>0)
    ami_block->GetBody().append(1,'}');
  else {
    BEGIN(0);
    ami_block->GetBody().append(3,'\0');
//    cpp_block->append(1,YY_END_OF_BUFFER_CHAR);

//     printf("block = *%s*\n",block_buf);

/*
    length=ami_block->GetBody().length();

    if((yyiplval.astring = new char[length+3])==NULL)
      yyiperror(E_MEM);
    strcpy(yyiplval.astring,
            ami_block->GetBody().c_str());
    // why add those 3 characters ...??? lex is looking ahead several characters
    // risky in memory ...
    yyiplval.astring[length  ]=YY_END_OF_BUFFER_CHAR;
    yyiplval.astring[length+1]=YY_END_OF_BUFFER_CHAR;
    yyiplval.astring[length+2]=YY_END_OF_BUFFER_CHAR;
*/
    yylval->ablock = ami_block;
    // cannot use smart pointers in union ...
    // needs to be freed after use ...

    //ami_block = AmiInstructionBlock_ptr();
    return(token::ABLOCK);
  }
}
	YY_BREAK
case 382:
/* rule 382 can match eol */
YY_RULE_SETUP
#line 854 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//  char *yptr = YYText();
//  while (*yptr)
//    *block_buf_ptr++ = *yptr++;
  ami_block->GetBody().append(YYText());
}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 862 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//============================ Parse comment ====================
//
    comment_caller = INITIAL;
    BEGIN(comment);
//  printf("begin comment \n");
}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 870 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
    comment_caller = INITIAL;
    BEGIN(comment);
//  printf("begin comment \n");
}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 877 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  //GB_driver.yyiplineno++;
//  printf("end comment from %d \n",comment_caller);
  // use unput to accept the end of the command if any
//  cout << "<comment>\n [" << YYText() << "]" << endl;
//  cout << "length = " << strlen(YYText()) << endl;
  if (strlen(YYText())==1) {
    unput(YYText()[0]);
  }
  if (strlen(YYText())==2) {
    unput(YYText()[1]);
    unput(YYText()[0]);
  }
  BEGIN(comment_caller);
}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 893 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  // on ecrit ce qu'on veut dans un commentaire ...
  // sauver les commentaires dans une variable du driver??
}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 898 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  int context = Vars.GetCurrentContextNumber();
  string text(YYText());
  string varname = text.substr(7);
  yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),context);
  return result;
}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 909 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(8);
  yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),0);
  return result;
}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 919 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(6);
  yyip::Parser::token::yytokentype 
      result = checkvar(yylval,varname.c_str(),
                        OBJECT_CONTEXT_NUMBER);
  return result;
}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 932 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(2);
  yyip::Parser::token::yytokentype 
      result = checkvar(yylval,varname.c_str(),
                        OBJECT_CONTEXT_NUMBER);
  return result;
}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 945 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
// TODO: can all the variable system to return only variable from lex !!!
// this rule is a hack
//
//============================ Parse variable in a given context ====================
//
  //cout << "::XX->XX variable in object ?" << endl;
  string text(YYText());
  size_t pos = text.find("->");
  string contextname = text.substr(2,pos-2);


  // check if contextname is really a context
  //cout << "looking for "<< contextname << endl;
  BasicVariable::ptr var = IsObject(contextname.c_str(),OBJECT_CONTEXT_NUMBER);
  if (var.get()) 
  {
    FILE_MESSAGE("Object found");
    string varname = text.substr(pos+2);

    Variable<AMIObject>::ptr objvar( boost::dynamic_pointer_cast<Variable<AMIObject> >(var));
    AMIObject::ptr object (objvar->Pointer());

    Variables::ptr previous_ocontext = Vars.GetObjectContext();
    Vars.SetObjectContext(object->GetContext());

    yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),OBJECT_CONTEXT_NUMBER);

    Vars.SetObjectContext(previous_ocontext);
    return result;
  } else {
    std::string error_string =" lex error \t object not found ";
    GB_driver.yyiperror(error_string.c_str());
  }
}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 982 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable in a given context ====================
//
  //cout << "variable in object ?" << endl;
  string text(YYText());
  size_t pos = text.find("->");
  string contextname = text.substr(0,pos);


  // check if contextname is really a context
  BasicVariable::ptr var = IsObject(contextname.c_str());
  if (var.get()) 
  {
    FILE_MESSAGE("Object found");
    string varname = text.substr(pos+2);

    Variable<AMIObject>::ptr objvar( boost::dynamic_pointer_cast<Variable<AMIObject> >(var));
    AMIObject::ptr object ( objvar->Pointer());

    Variables::ptr previous_ocontext = Vars.GetObjectContext();
    Vars.SetObjectContext(object->GetContext());

    yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),OBJECT_CONTEXT_NUMBER);

    Vars.SetObjectContext(previous_ocontext);
    return result;
  } else {
    std::string error_string =" lex error \t object not found ";
    GB_driver.yyiperror(error_string.c_str());
  }
}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 1019 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
   return checkvar(yylval,YYText());
}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 1027 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
                    yylloc->step();
                  }
	YY_BREAK
case 395:
/* rule 395 can match eol */
YY_RULE_SETUP
#line 1031 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
      //cout << "\\NEWLINE \n" << endl;
      // allow multiline command
      GB_driver.yyiplineno++;
    }
	YY_BREAK
case 396:
/* rule 396 can match eol */
YY_RULE_SETUP
#line 1037 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
          //cout << "NEWLINE \n" << endl;
//          if (yyleng!=1) cout << " ******* yyleng = " << yyleng << "************" << endl; 
          yylloc->lines(1); yylloc->step();
          GB_driver.yyiplineno++;
          return(token::END_INSTRUCTION);
      } /*{end-of-line,END_INSTRUCTION}*/
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 1045 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{

    std::string error_string =" lex error \t invalid characters ";
    GB_driver.yyiperror(error_string.c_str());

  }
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 1055 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
ECHO;
	YY_BREAK
#line 5252 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/GeneratedFlexBison/improcess_flex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(str):
case YY_STATE_EOF(block):
case YY_STATE_EOF(comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyipfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyipfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyiprealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyiprealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2021 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2021 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2020);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyipalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyipalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyipfree((void *) b->yy_ch_buf  );

	yyipfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyipalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyiprealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyipalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyiprealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyipalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyiprealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyipfree (void * ptr )
{
	free( (char *) ptr );	/* see yyiprealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1055 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"





//--------------------------------------------------
//       IsObject()
//--------------------------------------------------
//
BasicVariable::ptr IsObject( const char* varname, int context)
//
{
  BasicVariable::ptr var = Vars.GetVar(varname,context);
  if (var.get())
    if ((var->Type() == type_ami_object))
      return var;
    else 
      return BasicVariable::ptr();
  else
    return BasicVariable::ptr();
}


//--------------------------------------------------
//       checkvar()
//--------------------------------------------------
//
yyip::Parser::token::yytokentype checkvar(
  yyip::Parser::semantic_type* yylval,
  const char* varname,
  int context
)
//
{

  BasicVariable::ptr var = Vars.GetVar(varname,context);
  //cout << "res = " << res << endl;
  if  ((!GB_driver.procedure_declaration) && var.get())   {

    // add the variable to the stack
    GB_driver.var_stack.AddVar(var);

    //yylval->variable = var.get();
    switch(var->Type()) {
      case type_image:            return token::VAR_IMAGE;
        /*{$variable_image,VAR_IMAGE}*/
      case type_float:
      case type_long:
      case type_double:
      case type_int:
      case type_uchar:
        return token::PROCESSED_VAR; /*{$PROCESSED_VAR,PROCESSED_VAR}*/
      case type_surfdraw:         return token::VAR_SURFDRAW;
        /*{$variable_surfdraw,VAR_SURFDRAW}*/
      case type_file:             return token::VAR_FILE;
        /*{$variable_file,VAR_FILE}*/
      case type_c_procedure:      return token::VAR_C_PROCEDURE;
        /*{$variable_c_procedure,VAR_C_PROCEDURE}*/
      case type_class_member:      return token::VAR_CLASS_MEMBER;
        /*{$variable_class_procedure,VAR_CLASS_MEMBER}*/
      case type_c_image_function: return token::VAR_C_IMAGE_FUNCTION;
        /*{$variable_c_image_function,VAR_C_IMAGE_FUNCTION}*/
      case type_c_function: return token::VAR_C_FUNCTION;
        /*{$variable_c_function,VAR_C_FUNCTION}*/

      case type_ami_function:     return token::VAR_AMI_FUNCTION;
        /*{$variable_ami_function,VAR_AMI_FUNCTION}*/
      case type_ami_class:     return token::VAR_AMI_CLASS;
        /*{$variable_ami_class,VAR_AMI_CLASS}*/
      case type_ami_object:     return token::VAR_AMI_OBJECT;
        /*{$variable_ami_object,VAR_AMI_OBJECT}*/

      case type_string:           return token::VAR_STRING;
        /*{$variable_string,VAR_STRING}*/
      case type_matrix:           return token::VAR_MATRIX;
        /*{$variable_matrix,VAR_MATRIX}*/
      case type_gltransform:      return token::VAR_GLTRANSFORM;
        /*{$variable_gltransform,VAR_GLTRANSFORM}*/
      case type_array:       {
        Variable<VarArray>::ptr vararray( 
          boost::dynamic_pointer_cast<Variable<VarArray> >(var));
        VarArray::ptr array (vararray->Pointer());
        switch(array->Type()) {
          case type_image:      return token::VAR_ARRAY_IMAGE;
          /*{$variable_image_array,VAR_ARRAY_IMAGE}*/
          default:
            GB_driver.err_print("Array type not available \n");
        }
        break;
      }
      default:
        GB_driver.err_print("Variable type still not available \n");
        GB_driver.var_stack.GetLastBasicVar();
    }

  }

  yylval->ident = new IdentifierInfo;
  yylval->ident->SetName( varname);
  yylval->ident->SetCreationContext(context);
  return(token::IDENTIFIER);
}

/*** Additional Code ***/

namespace yyip {

Scanner::Scanner(std::istream* in,
     std::ostream* out)
    : yyipFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}


/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int yyipFlexLexer::yylex()
{
    std::cerr << "in yyipFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

/*
int yyFlexLexer::yywrap()
{
    return 1;
}
*/








