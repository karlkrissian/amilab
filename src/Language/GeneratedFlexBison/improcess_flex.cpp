#line 2 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/GeneratedFlexBison/improcess_flex.cpp"

#line 4 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/GeneratedFlexBison/improcess_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyipFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyipalloc (yy_size_t  );
void *yyiprealloc (void *,yy_size_t  );
void yyipfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 364
#define YY_END_OF_BUFFER 365
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1802] =
    {   0,
      359,  359,    0,    0,    0,    0,    0,    0,  365,  363,
      360,  362,  362,   28,  331,  349,  363,   31,   37,   21,
       33,   34,   25,   29,   40,   30,   39,   27,  329,  329,
      329,   42,   43,   24,   32,   23,   41,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
       35,  363,   36,   22,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  344,   38,  341,  333,  332,  340,
      364,  348,  345,  345,  346,  347,  352,  351,  351,  362,

       20,  342,  343,    7,   15,    8,    5,   12,    3,   13,
        4,   14,   26,  350,    6,    0,    0,  329,  359,  359,
      359,  356,    0,   17,   19,   18,   11,  359,  359,  359,
      359,  359,  203,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,   81,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  361,

      361,    9,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      110,  359,  102,  359,  359,  359,   89,  359,  134,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  112,  359,  359,  359,  359,  359,  359,  359,
      359,  103,  359,  142,  143,  144,  359,  359,  359,  359,
      148,  149,  150,  359,  359,   10,   16,  341,  339,    0,
      337,  338,  334,  336,  335,  345,  351,  358,  358,  328,
      330,  359,    0,  356,    2,    1,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,   60,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,   70,  359,  359,  359,  359,  359,  359,  189,
      359,  359,  359,   65,  359,  359,  359,  359,  248,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
       94,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,   83,  359,  359,  227,  359,  359,  359,  359,  236,

      359,  359,   88,  359,  359,  101,  359,  359,  359,  359,
      359,  359,  359,  359,  152,  359,  359,  359,  359,   51,
      359,  359,   90,  217,  359,  359,  219,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
       47,  359,   82,  359,  359,  359,  359,  359,  221,   84,
      359,  359,  145,  146,  147,  359,  153,  359,  359,  359,
      359,  359,  359,  357,  359,  359,  359,  359,  359,  359,
       56,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      208,  359,  359,  359,  359,  359,  359,  359,  359,  132,

      359,  130,  359,  359,  359,  359,  359,  359,  359,   63,
      359,  359,  359,  359,  359,  213,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  123,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  128,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,   61,  359,  223,
      224,  225,   86,  359,  326,  359,   85,   87,   74,  359,
      359,  359,  359,   91,  359,  359,  359,  359,  359,  111,
      359,  359,  141,  359,  359,  359,  140,  359,  359,  359,
      133,  131,  359,  359,  222,  234,  359,  359,  359,  359,

      359,  359,  167,  359,   95,  359,  359,   98,  359,  359,
      124,  359,  359,  359,  249,  359,  359,  359,  359,  359,
      359,  129,   92,  359,  359,   93,  104,  359,  359,  359,
      359,  139,  151,  359,  359,  359,  359,  359,  359,  359,
      359,  359,   79,  359,  359,  357,  359,  359,  359,  359,
      359,  359,  359,  359,  359,   99,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
       62,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,   69,  125,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,   58,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,   57,  359,  359,  359,  359,
      359,  109,  359,  216,  359,  359,  359,  359,  359,  359,
      359,  359,  359,   97,  359,  359,  359,  294,  359,  359,
      359,  359,  359,  359,  359,   78,  359,  359,  359,  135,
      359,  359,  359,  166,   96,  359,  359,  359,  359,  359,
      359,  325,  359,  359,    0,  359,  108,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      107,  269,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,   64,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  299,  359,  359,  359,  359,
      359,  359,  298,  359,  359,  359,   73,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  206,
      359,  359,   71,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,   59,  359,  359,  218,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  105,  322,
      154,   75,  359,  359,  359,  359,  359,  359,  359,  359,
      359,    0,  359,  359,  359,  220,  359,  359,  136,  100,
      359,  106,  359,  359,  359,   48,  359,  359,  138,  359,
      355,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  238,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  190,  191,  212,  359,
      359,  359,  297,  359,  359,  359,   53,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  162,  359,  359,  359,  267,  359,  359,  359,  359,
      207,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,   55,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  259,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  228,  359,  359,  359,  359,
        0,  359,  293,  359,  359,  359,  359,  264,  255,  235,
      359,  353,  170,  359,  359,  359,  252,  359,  359,  359,
      359,  359,  359,  359,  355,  359,  359,  359,  359,  359,
      265,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,   68,  359,  359,
      187,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  210,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  311,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  272,  359,  359,  359,  359,  359,  274,  359,
      226,  359,  359,  359,  359,  359,  359,  359,  359,  164,
      359,  359,  295,  359,  359,  359,  359,  354,  359,  158,

      359,  359,  359,  359,  359,  359,  359,  353,  171,  359,
      359,  156,  165,   80,  359,  359,  359,  359,  163,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  266,  242,  359,  244,  359,
      240,  359,  359,  359,  359,  359,  359,  192,  288,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,   45,   67,  359,
      359,  359,  359,  359,  359,  359,  179,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,   72,  359,  211,  359,  359,  359,  359,  359,
      271,  359,  359,  359,  327,  354,  359,  359,  359,  359,
       50,  251,  359,  359,   49,   77,  168,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  262,  359,  359,  359,  243,  359,  359,
      241,  359,  359,  359,  359,  359,  359,  193,  359,  359,
      359,  359,  204,  359,  359,  359,  359,  359,  177,  359,
      359,  359,  359,  359,  359,  323,  359,  359,  359,  359,
      359,  359,  324,  359,  359,   46,  287,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      113,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  319,  359,  359,  359,  359,
       76,  359,  315,  316,  359,  359,  359,  169,  159,  359,
      359,  359,  183,  232,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  194,  359,  126,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  176,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  175,  359,  359,  185,  359,

      359,  359,  276,  278,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  253,  359,  359,  209,  239,  359,  359,
      359,  114,  359,  273,  121,  359,  359,  359,  359,  359,
      281,  359,  359,  359,  359,  318,  359,  359,  359,  359,
      359,  257,  256,  258,  160,  359,  359,  359,  359,  260,
      359,  359,  359,  321,  359,  155,  359,  359,  359,  359,
      359,  359,  245,  359,  359,  359,  195,  359,  289,  359,
      359,  359,  188,  359,  359,  359,  302,  359,  359,  296,
      359,   66,  359,  359,  359,  359,  359,  359,  292,  205,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,   44,  359,  359,  359,  117,
      283,  275,  359,  172,  359,  116,  359,  137,  157,  359,
      250,  359,  359,  359,  180,  359,  320,  359,  359,  359,
      359,  359,  359,  359,  247,  359,  359,  233,  237,  359,
      359,  359,  359,  359,  359,  308,  359,  359,  359,  231,
      359,   54,  120,  174,  359,  359,  359,  359,  268,  285,
      359,  215,  359,  359,  359,  359,  127,  282,  359,  359,
      359,  122,  118,  359,  359,  173,  359,  115,  359,  359,
      182,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  246,  359,  290,  359,  359,  359,  301,  359,  359,

      359,  313,  306,  359,  359,  279,  359,  359,  214,  200,
      359,  359,  359,  359,  359,  359,  280,  305,  161,  317,
      181,  359,  359,  359,  359,  202,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  277,  359,  359,  119,
      359,  359,  198,  359,  359,  307,  312,  359,  359,  229,
      359,  359,  359,  359,  197,  263,  359,  359,  359,  310,
      314,  359,  359,  184,  270,  359,  199,  254,  359,  359,
      359,  359,  359,  261,  359,  359,  304,   52,  291,  359,
      178,  286,  359,  284,  303,  359,  186,  201,  359,  359,
      300,  359,  196,  359,  359,  359,  359,  359,  230,  309,

        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   21,   21,   21,   21,   21,   21,   24,   25,   26,
       27,   28,   29,    1,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,    1,   61,   62,   63,   64,

       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   87,   88,   89,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[90] =
    {   0,
        1,    1,    2,    2,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,    1,    5,
        5,    5,    5,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1,    2,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1814] =
    {   0,
        0,    0,   87,   92,   97,  100,  102,  104,  325, 5980,
     5980, 5980,  300,  273, 5980, 5980,   90,  268,   82, 5980,
     5980, 5980,  259,   87, 5980,   98,  268,   97,  110,  100,
      117,  248, 5980,  115,  243,  118, 5980,  134,  136,  141,
      152,  130,  154,  138,  159,  214,  143,  174,  164,  162,
      216,  183,  146,  224,  281,  236,  233,  228,  241,  245,
     5980,  162, 5980,  237,  260,  251,  221,  262,  292,  298,
      273,  267,  317,  326,  341,  294,  354,  256,  363,  376,
      386,  289,  394,  381, 5980,  102,    0, 5980, 5980,    0,
      353, 5980, 5980,  252, 5980, 5980, 5980, 5980,  245, 5980,

     5980, 5980, 5980, 5980, 5980, 5980, 5980, 5980, 5980, 5980,
     5980,    0, 5980, 5980, 5980,  212,  364,  400,  150,  464,
      390,  219,  193, 5980, 5980, 5980,  188,  249,  302,  396,
      433,  371,  157,  445,  360,  449,  459,  451,  471,  473,
      475,  258,  483,  485,  487,  489,  491,  496,  498,  500,
      502,  506,  504,  516,  518,  514,  524,  532,  540,  534,
      542,  548,  554,  556,  562,  570,  574,  577,  580,  582,
      591,  584,  601,  603,  605,  608,  610,  612,  614,  620,
      622,  625,  628,  633,  635,  640,  646,  643,  648,  656,
      660,  662,  664,  671,  666,  673,  675,  677,  679, 5980,

      204, 5980,  681,  684,  694,  699,  696,  701,  705,  711,
      713,  719,  721,  723,  725,  727,  729,  731,  738,  740,
      750,  752,  754,  756,  762,  764,  766,  770,  779,  788,
      792,  794,  796,  798,  803,  805,  800,  815,  810,  820,
      823,  825,  827,  831,  837,  839,  846,  854,  843,  858,
      863,  871,  868,  873,  875,  877,  879,  885,  890,  896,
      899,  903,  908,  910,  915,  918,  920,  924,  928,  936,
      931,  941,  943,  947,  949, 5980, 5980,    0, 5980,  201,
     5980, 5980, 5980, 5980, 5980, 5980, 5980,    0,    0,  951,
        0,  958,  169,  176, 5980, 5980,  962,  964,  966,  968,

      970,  972,  987,  991,  993,  995,  997, 1002, 1004, 1006,
     1008, 1010, 1014, 1018, 1021, 1025, 1028, 1031, 1034, 1036,
     1039, 1042, 1044, 1053, 1070, 1051, 1055, 1064, 1081, 1077,
     1085, 1089, 1092, 1094, 1102, 1104, 1106, 1114, 1119, 1121,
     1124, 1126, 1128, 1130, 1132, 1136, 1138, 1143, 1140, 1145,
     1151, 1159, 1156, 1165, 1167, 1169, 1171, 1173, 1175, 1179,
     1183, 1185, 1211, 1189, 1192, 1197, 1199, 1207, 1209, 1213,
     1220, 1224, 1230, 1240, 1243, 1247, 1258, 1260, 1263, 1265,
     1267, 1269, 1271, 1274, 1276, 1280, 1287, 1289, 1291, 1294,
     1296, 1299, 1301, 1303, 1305, 1310, 1312, 1314, 1308, 1316,

     1318, 1323, 1328, 1334, 1340, 1342, 1344, 1348, 1351, 1366,
     1363, 1368, 1374, 1376, 1378, 1380, 1382, 1386, 1388, 1391,
     1394, 1399, 1401, 1403, 1405, 1407, 1411, 1414, 1417, 1419,
     1423, 1425, 1427, 1431, 1435, 1439, 1450, 1452, 1454, 1456,
     1463, 1465, 1467, 1471, 1473, 1477, 1484, 1481, 1486, 1488,
     1490, 1496, 1492, 1498, 1504, 1508, 1512, 1514, 1519, 1538,
     1523, 1529, 1534,    0, 1536, 1541, 1545, 1547, 1549, 1557,
     1561, 1564, 1567, 1570, 1577, 1581, 1587, 1589, 1591, 1594,
     1599, 1601, 1606, 1608, 1610, 1613, 1617, 1620, 1626, 1635,
     1640, 1643, 1645, 1648, 1655, 1660, 1667, 1662, 1669, 1675,

     1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1694, 1696,
     1699, 1702, 1704, 1708, 1713, 1716, 1720, 1723, 1725, 1734,
     1736, 1741, 1738, 1744, 1746, 1751, 1753, 1765, 1763, 1768,
     1770, 1772, 1774, 1776, 1784, 1787, 1797, 1799, 1806, 1808,
     1810, 1812, 1820, 1822, 1824, 1826, 1829, 1831, 1833, 1838,
     1835, 1841, 1843, 1845, 1851, 1856, 1848, 1858, 1862, 1864,
     1866, 1868, 1871, 1875, 1888, 1890, 1894, 1897, 1899, 1901,
     1905, 1907, 1909, 1911, 1913, 1915, 1918, 1920, 1922, 1924,
     1926, 1928, 1930, 1932, 1935, 1937, 1939, 1941, 1944, 1948,
     1950, 1952, 1954, 1956, 1958, 1963, 1965, 1969, 1971, 1974,

     1980, 1987, 1989, 1992, 1996, 2001, 2003, 2005, 2007, 2009,
     2013, 2019, 2015, 2022, 2024, 2029, 2032, 2038, 2040, 2043,
     2047, 2049, 2051, 2053, 2055, 2057, 2060, 2067, 2070, 2072,
     2074, 2078, 2081, 2083, 2085, 2087, 2089, 2091, 2093, 2096,
     2099, 2102, 2106, 2108, 2110,    0, 2115, 2117, 2120, 2143,
     2126, 2124, 2130, 2148, 2160, 2162, 2164, 2170, 2182, 2184,
     2186, 2188, 2190, 2192, 2197, 2194, 2199, 2201, 2204, 2211,
     2213, 2215, 2217, 2219, 2222, 2224, 2227, 2229, 2231, 2237,
     2246, 2240, 2252, 2257, 2259, 2261, 2264, 2270, 2272, 2274,
     2277, 2291, 2293, 2295, 2299, 2301, 2303, 2305, 2312, 2314,

     2316, 2319, 2322, 2326, 2328, 2332, 2336, 2340, 2342, 2344,
     2346, 2348, 2350, 2352, 2357, 2367, 2362, 2369, 2372, 2382,
     2385, 2387, 2389, 2393, 2395, 2398, 2402, 2404, 2411, 2408,
     2415, 2422, 2424, 2426, 2428, 2430, 2434, 2447, 2449, 2451,
     2457, 2463, 2467, 2469, 2472, 2474, 2478, 2476, 2482, 2487,
     2489, 2491, 2493, 2495, 2497, 2501, 2503, 2505, 2507, 2513,
     2510, 2517, 2519, 2521, 2525, 2540, 2528, 2532, 2538, 2542,
     2548, 2560, 2555, 2562, 2564, 2566, 2568, 2572, 2575, 2577,
     2581, 2589, 2591, 2597,  164, 2600, 2602, 2605, 2607, 2610,
     2612, 2614, 2622, 2616, 2624, 2626, 2631, 2633, 2635, 2638,

     2643, 2649, 2651, 2659, 2662, 2664, 2666, 2668, 2670, 2677,
     2681, 2686, 2690, 2696, 2702, 2704, 2707, 2709, 2718, 2720,
     2722, 2725, 2729, 2735, 2738, 2745, 2750, 2752, 2754, 2757,
     2760, 2762, 2769, 2767, 2774, 2777, 2779, 2781, 2783, 2785,
     2788, 2790, 2795, 2797, 2799, 2804, 2806, 2808, 2811, 2816,
     2813, 2821, 2825, 2827, 2830, 2843, 2834, 2837, 2847, 2845,
     2849, 2853, 2866, 2870, 2876, 2879, 2883, 2886, 2889, 2893,
     2895, 2897, 2899, 2901, 2903, 2908, 2905, 2916, 2910, 2918,
     2920, 2925, 2927, 2929, 2931, 2934, 2936, 2938, 2945, 2947,
     2949, 2953, 2955, 2973, 2978, 2980, 2982, 2984, 2986, 2989,

     2993, 2997, 2999, 3001, 3004, 3006, 3009, 3011, 3013, 3015,
     3018, 3025, 3020, 3022, 3030, 3033, 3036, 3038, 3043, 3048,
     3050,  161, 3053, 3055, 3057, 3059, 3066, 3074, 3076, 3081,
     3084, 3089, 3093, 3099, 3101, 3103, 3106, 3108, 3113, 3115,
        0, 3119, 3121, 3123, 3125, 3127, 3129, 3131, 3135, 3137,
     3140, 3143, 3145, 3154, 3157, 3159, 3161, 3168, 3170, 3172,
     3174, 3178, 3188, 3181, 3190, 3196, 3198, 3207, 3209, 3212,
     3217, 3219, 3229, 3224, 3234, 3236, 3239, 3241, 3243, 3245,
     3248, 3252, 3257, 3255, 3259, 3263, 3266, 3269, 3271, 3273,
     3277, 3282, 3284, 3288, 3291, 3294, 3301, 3306, 3310, 3315,

     3313, 3317, 3319, 3321, 3323, 3327, 3329, 3333, 3341, 3343,
     3345, 3349, 3353, 3355, 3357, 3360, 3362, 3375, 3370, 3373,
     3378, 3380, 3382, 3385, 3394, 3398, 3388, 3400, 3402, 3407,
     3409, 3414, 3416, 3423, 3425, 3427, 3431, 3433, 3437, 3440,
     3449, 3443, 3451, 3453, 3455, 3457, 3466, 3468, 3470, 3472,
     3474, 3477, 3480, 3483, 3487, 3492, 3502, 3506, 3508, 3511,
      159, 3515, 3517, 3521, 3524, 3527, 3539, 3530, 3542, 3546,
     3548,    0, 3550, 3556, 3562, 3564, 3566, 3568, 3570, 3574,
     3576, 3578, 3581, 3586,    0, 3592, 3594, 3596, 3598, 3600,
     3602, 3607, 3612, 3614, 3621, 3623, 3625, 3627, 3629, 3637,

     3642, 3646, 3648, 3657, 3661, 3663, 3665, 3677, 3680, 3682,
     3684, 3686, 3688, 3690, 3697, 3699, 3701, 3703, 3708, 3712,
     3714, 3718, 3720, 3722, 3724, 3726, 3731, 3734, 3740, 3742,
     3744, 3750, 3747, 3752, 3756, 3759, 3769, 3771, 3775, 3777,
     3781, 3783, 3785, 3787, 3790, 3792, 3797, 3799, 3801, 3804,
     3806, 3812, 3817, 3814, 3819, 3823, 3827, 3829, 3836, 3839,
     3846, 3857, 3863, 3866, 3872, 3874, 3877, 3881, 3879, 3883,
     3885, 3888, 3890, 3899, 3892, 3901, 3903, 3905, 3910, 3907,
     3916, 3919, 3923, 3928, 3932, 3934, 3941, 3938, 3944, 3950,
     3952, 3955, 3958, 3960, 3966, 3971, 3968,    0, 3973, 3977,

     3981, 3983, 3985, 3987, 3989, 3991, 4000,    0, 3993, 4002,
     4006, 4008, 4011, 4015, 4018, 4022, 4025, 4027, 4031, 4038,
     4041, 4044, 4047, 4053, 4049, 4055, 4057, 4064, 4066, 4069,
     4071, 4073, 4075, 4077, 4081, 4084, 4094, 4086, 4096, 4101,
     4103, 4106, 4110, 4114, 4120, 4126, 4128, 4131, 4136, 4138,
     4143, 4146, 4148, 4150, 4154, 4156, 4161, 4165, 4172, 4174,
     4176, 4179, 4181, 4183, 4185, 4187, 4189, 4193, 4197, 4203,
     4199, 4207, 4209, 4212, 4221, 4223, 4230, 4232, 4234, 4238,
     4242, 4244, 4252, 4254, 4256, 4258, 4266, 4263, 4269, 4273,
     4275, 4277, 4279, 4287, 4283, 4289, 4291, 4297, 4299, 4301,

     4303, 4311, 4305, 4313, 4318, 4322, 4324, 4329, 4333, 4338,
     4335, 4342, 4352, 4355, 4357, 4363, 4365, 4369, 4375, 4377,
     4381, 4384, 4386, 4388, 4394,    0, 4396, 4398, 4400, 4405,
     4402, 4407, 4410, 4412, 4416, 4419, 4423, 4425, 4429, 4431,
     4435, 4437, 4442, 4448, 4450, 4458, 4460, 4464, 4468, 4476,
     4478, 4480, 4482, 4470, 4488, 4490, 4492, 4494, 4497, 4501,
     4503, 4507, 4509, 4514, 4516, 4518, 4522, 4524, 4528, 4530,
     4534, 4538, 4540, 4547, 4551, 4553, 4555, 4559, 4561, 4563,
     4567, 4571, 4573, 4575, 4579, 4581, 4583, 4585, 4587, 4592,
     4596, 4598, 4600, 4602, 4604, 4611, 4616, 4620, 4622, 4626,

     4637, 4639, 4641, 4643, 4646, 4648, 4652, 4654, 4657, 4660,
     4662, 4664, 4668, 4670, 4672, 4674, 4679, 4681, 4687, 4689,
     4692, 4694, 4696, 4702, 4706, 4713, 4715, 4724, 4728, 4730,
     4732, 4734, 4736, 4745, 4741, 4747, 4750, 4752, 4755, 4760,
     4762, 4765, 4767, 4769, 4771, 4773, 4775, 4781, 4783, 4785,
     4799, 4801, 4803, 4806, 4808, 4810, 4812, 4814, 4816, 4818,
     4821, 4826, 4829, 4831, 4834, 4839, 4843, 4845, 4847, 4849,
     4853, 4866, 4868, 4876, 4878, 4882, 4884, 4887, 4890, 4892,
     4894, 4896, 4898, 4900, 4902, 4909, 4911, 4914, 4916, 4919,
     4921, 4923, 4925, 4928, 4931, 4933, 4935, 4937, 4939, 4941,

     4943, 4956, 4959, 4962, 4964, 4966, 4968, 4970, 4972, 4989,
     4992, 4997, 5001, 5003, 5005, 5007, 5009, 5013, 5018, 5020,
     5022, 5024, 5026, 5030, 5036, 5038, 5040, 5042, 5045, 5047,
     5050, 5056, 5061, 5065, 5067, 5069, 5071, 5073, 5075, 5077,
     5080, 5082, 5086, 5090, 5094, 5098, 5100, 5102, 5109, 5111,
     5118, 5113, 5121, 5125, 5129, 5131, 5138, 5140, 5142, 5146,
     5148, 5154, 5156, 5161, 5166, 5168, 5170, 5172, 5174, 5178,
     5180, 5182, 5187, 5189, 5191, 5193, 5198, 5202, 5204, 5207,
     5209, 5212, 5214, 5217, 5221, 5223, 5225, 5227, 5229, 5232,
     5234, 5236, 5238, 5241, 5243, 5249, 5251, 5256, 5258, 5260,

     5262, 5272, 5274, 5276, 5280, 5285, 5287, 5290, 5293, 5295,
     5299, 5303, 5307, 5309, 5314, 5317, 5321, 5325, 5327, 5330,
     5332, 5337, 5343, 5345, 5347, 5349, 5351, 5356, 5358, 5360,
     5363, 5365, 5368, 5375, 5372, 5377, 5379, 5381, 5383, 5385,
     5387, 5389, 5391, 5393, 5395, 5399, 5401, 5406, 5409, 5413,
     5421, 5425, 5428, 5434, 5443, 5447, 5449, 5451, 5453, 5457,
     5459, 5461, 5465, 5467, 5470, 5472, 5474, 5476, 5478, 5484,
     5480, 5486, 5488, 5490, 5492, 5494, 5498, 5501, 5503, 5506,
     5508, 5512, 5515, 5517, 5520, 5522, 5529, 5537, 5541, 5543,
     5547, 5551, 5555, 5557, 5561, 5563, 5565, 5570, 5572, 5575,

     5580, 5582, 5586, 5588, 5592, 5594, 5596, 5601, 5604, 5606,
     5608, 5613, 5615, 5619, 5621, 5623, 5625, 5627, 5629, 5631,
     5635, 5637, 5639, 5645, 5652, 5654, 5656, 5658, 5660, 5662,
     5672, 5676, 5678, 5680, 5682, 5690, 5686, 5692, 5694, 5698,
     5701, 5703, 5705, 5711, 5713, 5715, 5719, 5721, 5724, 5728,
     5726, 5731, 5736, 5738, 5740, 5746, 5749, 5751, 5754, 5761,
     5764, 5766, 5768, 5772, 5775, 5777, 5779, 5781, 5783, 5789,
     5791, 5797, 5801, 5803, 5808, 5810, 5813, 5817, 5819, 5825,
     5827, 5829, 5831, 5833, 5838, 5844, 5846, 5848, 5850, 5852,
     5854, 5856, 5858, 5860, 5862, 5866, 5868, 5872, 5874, 5876,

     5980, 5948, 5953, 5958, 5961, 5966, 5971,  157, 5974,  152,
      138,  131,  114
    } ;

static yyconst flex_int16_t yy_def[1814] =
    {   0,
     1801,    1, 1802, 1802, 1803, 1803, 1804, 1804, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1805, 1805,
     1805, 1801, 1801, 1801, 1801, 1801, 1801, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1801, 1801, 1801, 1801, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1801, 1801, 1806, 1801, 1801, 1806,
     1807, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,

     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1808, 1801, 1801, 1801, 1801, 1801, 1805, 1805, 1805,
     1805, 1809, 1801, 1801, 1801, 1801, 1801, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1801,

     1801, 1801, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1801, 1801, 1806, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1808, 1808, 1801,
      120, 1805, 1801, 1809, 1801, 1801, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1810, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1810, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1801, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1801, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1811, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1801, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1812, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1811, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1813, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1812, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1813, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,

        0, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801
    } ;

static yyconst flex_int16_t yy_nxt[6070] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   30,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       47,   47,   58,   59,   60,   61,   62,   63,   64,   47,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   47,
       47,   74,   75,   76,   47,   77,   78,   79,   80,   81,
       82,   83,   84,   47,   47,   47,   85,   86,   10,   88,
       88,  105,   89,   90,   88,   88,  102,   89,   90,   93,

       94,  108,   93,   94,   98,   99,   98,   99,  106,  103,
      103,  103,  103,  109,  110,  114,  116,  117, 1326,  118,
      118,  118,  118,  115,  111,  112,  116,  117,  276,  118,
      118,  118,  118,  116,  117, 1208,  118,  118,  118,  118,
      123,  124, 1085,   91,  126,  127,  116, 1801,   91,  121,
      116, 1801,  116, 1801,  116, 1801,  646,  116, 1801,  116,
     1801,  288,  116, 1801,  200,  201,  116, 1801,  116, 1801,
      116, 1801,  133,  116, 1801,  116, 1801,  134,  116, 1801,
      116, 1801, 1198,   95, 1072,   96,   95,  941,   96,  277,
      116, 1801,  293,  120,  148,  142,  464,  128,  146,  116,

     1801,  135,  151,  147,  279,  129,  200,  130,  136,  137,
      131,  165,  138,  132,  296,  139,  143,  159,  140,  295,
      144,  141,  149,  152,  163,  150,  174,  153,  164,  145,
      116, 1801,  116, 1801,  160,  293,  166,  116, 1801,  289,
      116, 1801,  161,  171,  116, 1801,  167,  287,  162,  116,
     1801,  172,  116, 1801,  286,  154,  155,  116, 1801,  175,
      173,  116, 1801,  202,  194,  116, 1801,  116, 1801,  125,
      195,  122,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      196,  113,  190,  116, 1801,  107,  156,  157,  176,  116,
     1801,  168,  158,  169,  104,  212,  170,  116, 1801,  101,

      191,  213,  100,  197,  192,  116, 1801,  312,  116, 1801,
      116, 1801,  297,  193,  116, 1801,  198,  177,  116, 1801,
      199,  203,  204,  178, 1801,  210,  214,  179,  211,  180,
      215,  229,  205,  116, 1801,  230,  247,  206,  207,  208,
      209,  181,  116, 1801,  226,  182,  227, 1801,  183,  184,
      228,  185, 1801,  186,  216,  280,  187,  116, 1801, 1801,
      188,  189,  267,  217,  218,  219,  222, 1801,  243,  223,
      116, 1801,  224,  220, 1801,  221,  116, 1801,  225,  116,
     1801,  298,  231,  290,  290,  290,  290,  116, 1801,  232,
      233, 1801,  116, 1801,  236,  234,  235,  116, 1801,  237,

      238,  240,  116, 1801,  239,  241,  116, 1801, 1801,  242,
      116, 1801,  116, 1801,  281, 1801,  116,  117,  282,  118,
      118,  118,  118, 1801,  292, 1801,  283,  248,  244, 1801,
      284,  245,  285,  304,  246, 1801,  250,  249,  251, 1801,
      252,  274, 1801,  253,  254,  302,  260,  255,  275,  116,
     1801,  256,  257,  261,  268,  258,  259,  269, 1801,  299,
      262,  116, 1801,  263,  300,  116, 1801,  116, 1801,  264,
      265,  266, 1801,  270,  303,  116, 1801,  271,  272,  273,
      116, 1801, 1801,  291,  291,  291,  291,  116, 1801,  116,
     1801,  116, 1801,  291,  291,  291,  291,  291,  291,  116,

     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  305,
      301,  307,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  291,  291,  291,  291,  291,  291,
      116, 1801,  116, 1801,  116, 1801,  306,  310, 1801,  319,
      116, 1801, 1801,  308,  309,  329, 1801,  316,  116, 1801,
      116, 1801,  311, 1801,  318,  317,  116, 1801,  116, 1801,
      313, 1801,  314,  315,  116, 1801,  330,  328,  321,  320,
      116, 1801,  116, 1801,  331,  323,  324,  326,  116, 1801,
      322,  325,  336, 1801,  327, 1801,  116, 1801, 1801,  332,
      116, 1801,  333,  116, 1801, 1801,  116, 1801,  116, 1801,

      116, 1801,  342,  343, 1801,  334,  335,  116, 1801,  337,
      339,  344,  346, 1801,  347,  338,  341,  116, 1801,  116,
     1801,  116, 1801, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801, 1801,  340, 1801,  354,  116, 1801,  116, 1801,
     1801,  116, 1801,  360,  116, 1801, 1801,  345,  348,  116,
     1801,  116, 1801,  358,  350,  355,  116, 1801,  359,  116,
     1801,  349,  116, 1801,  116, 1801,  361, 1801,  356, 1801,
      351,  353,  116, 1801, 1801,  352,  116, 1801,  116, 1801,
      116, 1801,  116, 1801, 1801,  371,  357,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  366,

      116, 1801,  364,  362,  363,  365,  368,  375,  376,  377,
      116, 1801,  116, 1801,  367,  116, 1801,  116, 1801, 1801,
      369,  116, 1801, 1801,  374,  370, 1801,  116, 1801,  116,
     1801, 1801,  372, 1801,  373,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  378,
     1801,  379, 1801,  380,  116, 1801,  116, 1801,  382,  381,
     1801,  386,  383, 1801,  385,  384,  116, 1801,  116, 1801,
      116, 1801,  116, 1801, 1801,  387, 1801,  390,  116, 1801,
      116, 1801,  116, 1801,  388,  389,  116, 1801, 1801,  397,
     1801,  391, 1801,  394,  395,  116, 1801,  392, 1801,  393,

      401,  400, 1801,  396,  116, 1801,  399,  398,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  402,  116,
     1801,  116, 1801,  404, 1801,  403,  116, 1801,  405, 1801,
      410,  116, 1801,  406, 1801,  407,  116, 1801,  408,  116,
     1801,  116, 1801,  116, 1801, 1801,  409,  116, 1801, 1801,
      411,  412, 1801,  116, 1801,  116, 1801, 1801,  415,  116,
     1801,  416,  116, 1801,  417, 1801,  413,  419, 1801,  414,
      116, 1801,  418,  420,  116, 1801, 1801,  422,  421,  116,
     1801,  423, 1801,  425,  116, 1801,  426,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801, 1801,  427, 1801,

      432,  116, 1801,  424,  428,  430,  116, 1801, 1801,  429,
     1801,  431,  116, 1801,  434,  116, 1801, 1801,  433,  116,
     1801, 1801,  436,  437,  116, 1801,  116, 1801, 1801,  435,
      439,  116, 1801,  440,  116, 1801,  116, 1801, 1801,  438,
      116, 1801,  442,  444,  116, 1801,  443,  116, 1801,  447,
      441,  448,  116, 1801,  445, 1801,  446,  116, 1801,  116,
     1801, 1801,  449,  116, 1801,  116, 1801,  451, 1801,  450,
      290,  290,  290,  290,  116, 1801,  452, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1801,  453,  454,  455, 1801,  457,  459,  465, 1801,  456,

     1801,  458, 1801,  116, 1801, 1801,  460,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  461, 1801,  462,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801, 1801,  463,
      116, 1801,  466,  471,  116, 1801,  469,  116, 1801, 1801,
      481,  116, 1801,  467,  116, 1801,  468,  116, 1801,  483,
      116, 1801,  116, 1801,  470,  116, 1801,  474,  116, 1801,
      116, 1801, 1801,  489,  472,  473,  479,  116, 1801,  116,
     1801,  116, 1801, 1801,  476,  475, 1801,  477, 1801,  488,
      116, 1801,  482,  484,  494,  478,  116, 1801, 1801,  480,
      493, 1801,  487,  116, 1801, 1801,  485,  116, 1801, 1801,

      490,  116, 1801,  495,  496,  116, 1801,  486,  116, 1801,
      116, 1801,  497,  498,  491, 1801,  503,  499,  116, 1801,
      116, 1801,  116, 1801, 1801,  492,  500, 1801,  502, 1801,
      116, 1801, 1801,  501, 1801,  116, 1801,  116, 1801,  510,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1801,  504,  116, 1801,  116, 1801,  116, 1801,  507,  116,
     1801,  116, 1801,  505,  508, 1801,  516,  116, 1801,  519,
     1801,  506,  116, 1801,  522,  116, 1801,  511,  512,  513,
      509,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1801,  517,  116, 1801,  515,  514,  116,

     1801,  116, 1801, 1801,  518,  116, 1801,  521,  116, 1801,
      520,  533, 1801,  116, 1801,  116, 1801, 1801,  523,  532,
      534,  524, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  529,  528,  536,  525,  526,  116, 1801,  527,  530,
      116, 1801,  537,  538, 1801,  539,  116, 1801, 1801,  535,
      531,  540, 1801,  541, 1801,  542,  116, 1801,  543,  116,
     1801,  544,  553,  116, 1801, 1801,  545,  547,  548,  550,
     1801,  546,  557,  549,  116, 1801,  116, 1801,  552,  116,
     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  551,
      116, 1801,  116, 1801,  555,  558,  116, 1801, 1801,  554,

     1801,  559,  556,  116, 1801,  116, 1801,  116, 1801, 1801,
      116, 1801,  116, 1801,  564,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  565, 1801,  560,  116,
     1801,  561, 1801,  562,  116, 1801,  566,  563, 1801,  567,
      116, 1801,  569,  568,  572, 1801,  116, 1801,  116, 1801,
      116, 1801, 1801,  570,  116, 1801,  574,  116, 1801,  571,
      576,  573,  578, 1801,  575, 1801,  579, 1801,  580,  116,
     1801,  582,  116, 1801,  116, 1801,  577,  581, 1801,  583,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,

     1801,  584,  116, 1801,  116, 1801,  587,  116, 1801,  588,
      116, 1801, 1801,  585,  586,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  116, 1801, 1801,  589,  116, 1801,  590,
      116, 1801,  592,  116, 1801,  116, 1801, 1801,  591,  116,
     1801,  116, 1801,  116, 1801, 1801,  597,  116, 1801, 1801,
      594,  116, 1801,  593,  595,  116, 1801,  598, 1801,  602,
      613,  596,  601, 1801,  599,  600,  116, 1801,  116, 1801,
      116, 1801,  116, 1801, 1801,  604, 1801,  606,  603,  116,
     1801,  116, 1801,  116, 1801,  608,  605,  116, 1801,  116,
     1801, 1801,  607,  116, 1801,  610,  609,  116, 1801,  612,

      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      611, 1801,  116, 1801,  116, 1801,  615, 1801,  616,  617,
      116, 1801, 1801,  614,  116, 1801, 1801,  618,  116, 1801,
      116, 1801, 1801,  624,  623,  116, 1801, 1801,  619,  116,
     1801,  625,  620, 1801,  621,  116, 1801,  622, 1801,  628,
      116, 1801,  116, 1801,  116, 1801,  626,  116, 1801,  627,
      630,  116, 1801,  116, 1801,  116, 1801,  634,  629,  635,
      636, 1801,  637,  116, 1801,  638,  631,  116, 1801,  639,
      116, 1801,  640,  116, 1801,  641,  116, 1801, 1801,  642,
     1801,  633,  632,  116, 1801, 1801,  647,  116, 1801, 1801,

      644, 1801,  643,  116, 1801,  116, 1801,  116, 1801,  649,
      116, 1801, 1801,  651,  645,  116, 1801,  116, 1801, 1801,
      648,  650,  116, 1801,  116, 1801,  116, 1801, 1801,  116,
     1801, 1801,  654,  116, 1801,  652,  116, 1801, 1801,  663,
     1801,  655,  116, 1801, 1801,  657,  668, 1801,  653,  666,
     1801,  116, 1801,  659,  662,  656,  116, 1801, 1801,  116,
     1801,  116, 1801,  660,  116, 1801, 1801,  658,  672, 1801,
      661,  116, 1801, 1801,  671,  673,  116, 1801,  116, 1801,
      665,  667,  664,  116, 1801,  116, 1801, 1801,  670, 1801,
      669,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,

     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  674,
      116, 1801,  116, 1801,  682,  116, 1801,  684,  116, 1801,
      116, 1801,  675,  679,  116, 1801, 1801,  678, 1801,  116,
     1801,  680,  116, 1801,  677,  685,  116, 1801,  676,  116,
     1801,  116, 1801, 1801,  690,  681, 1801,  683,  691,  694,
      116, 1801,  116, 1801,  116, 1801,  697,  116, 1801,  689,
      116, 1801,  116, 1801, 1801,  687,  686,  116, 1801,  116,
     1801, 1801,  701, 1801,  688,  692,  693, 1801,  703,  116,
     1801,  116, 1801,  696,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  698, 1801,  706, 1801,  695,  707,

      116, 1801, 1801,  116, 1801, 1801,  704, 1801,  702,  699,
     1801,  708,  700,  116, 1801,  116, 1801, 1801,  714,  716,
      712,  705,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      711,  715, 1801,  713, 1801,  709,  116, 1801,  116, 1801,
      116, 1801,  116, 1801, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  710,  116, 1801, 1801,  116, 1801,  116,
     1801,  116, 1801,  718,  116, 1801,  733,  116, 1801, 1801,
      721,  717,  116, 1801,  116, 1801,  720,  719,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  724,  116, 1801,  722,
      732,  116, 1801, 1801,  736,  727, 1801,  730,  734,  723,

      726,  731,  729,  725,  116, 1801,  116, 1801,  737,  738,
      116, 1801,  728,  116, 1801,  116, 1801,  116, 1801, 1801,
      735,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      739,  116, 1801,  116, 1801,  116, 1801,  116, 1801, 1801,
      116, 1801, 1801,  740,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801, 1801,  742,  746,  116,
     1801,  116, 1801,  745,  741,  116, 1801,  116, 1801,  743,
      116, 1801,  744,  747, 1801,  749,  116, 1801,  748,  753,

     1801,  755,  751,  116, 1801,  116, 1801, 1801,  116, 1801,
      750,  752,  116, 1801,  754,  756,  757,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801, 1801,  758,  116,
     1801,  116, 1801,  759,  764,  116, 1801,  762,  116, 1801,
      116, 1801,  761, 1801,  760,  116, 1801,  774,  116, 1801,
     1801,  763,  767,  765,  116, 1801,  116, 1801,  766,  116,
     1801, 1801,  768,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  771,  116, 1801,  769,  773,
     1801,  772,  770,  116, 1801,  775,  116, 1801,  116, 1801,
      116, 1801,  776,  785,  116, 1801,  777,  116, 1801,  116,

     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  778,  116, 1801,  779,  116, 1801,  782,  116, 1801,
      780,  781,  116, 1801,  116, 1801,  116, 1801,  783, 1801,
      794,  116, 1801,  116, 1801, 1801,  116, 1801, 1801,  784,
      116, 1801,  116, 1801, 1801,  787,  116, 1801, 1801,  792,
      786,  790,  805,  795, 1801,  791,  788,  796, 1801,  116,
     1801, 1801,  789,  815,  116, 1801, 1801,  798, 1801,  793,
      800,  799,  801,  797,  806,  807,  116, 1801,  116, 1801,
      116, 1801, 1801,  808, 1801,  809,  116, 1801,  814,  810,
      811,  813, 1801,  802,  812,  803, 1801,  804,  116, 1801,

      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  816,  116, 1801,  116, 1801,  116, 1801, 1801,
      116, 1801, 1801,  824,  817,  830,  831,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801,  818,  116, 1801,
      116, 1801, 1801,  116, 1801,  116, 1801,  116, 1801,  819,
      822, 1801,  825,  116, 1801,  821,  116, 1801,  827,  828,
     1801,  829,  116, 1801, 1801,  820, 1801,  823,  116, 1801,
      826, 1801,  833,  116, 1801,  116, 1801,  116, 1801,  836,
      116, 1801, 1801,  832, 1801,  835,  116, 1801,  116, 1801,
      116, 1801, 1801,  116, 1801, 1801,  837, 1801,  834, 1801,

      841,  840, 1801,  838,  839, 1801,  843,  116, 1801,  116,
     1801,  116, 1801, 1801,  842,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1801,  852,  844, 1801,  845,  116, 1801,
      116, 1801,  116, 1801,  849,  116, 1801,  847,  116, 1801,
      846,  851,  116, 1801,  116, 1801, 1801,  848,  116, 1801,
     1801,  857,  116, 1801,  850,  854,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1801,  858,  856,  116, 1801, 1801,  853,  855,  116, 1801,
      866, 1801,  863,  116, 1801,  116, 1801,  873,  116, 1801,
      865,  859,  864,  861,  860, 1801,  875,  862,  116, 1801,

      868,  116, 1801,  116, 1801,  116, 1801,  867,  870,  116,
     1801,  116, 1801, 1801,  116, 1801, 1801,  869,  116, 1801,
      116, 1801, 1801,  871,  116, 1801,  872,  116, 1801, 1801,
      877,  116, 1801, 1801,  876, 1801,  874, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  879,  882,
      116, 1801,  878,  892, 1801,  888,  891,  880, 1801,  884,
     1801,  881,  885,  116, 1801,  116, 1801,  116, 1801, 1801,
      883,  887,  894,  116, 1801,  895, 1801,  890,  897,  116,
     1801,  886,  896,  116, 1801,  116, 1801,  889,  116, 1801,
      116, 1801,  116, 1801,  116, 1801, 1801,  898,  116, 1801,

     1801,  893, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  116, 1801, 1801,  901,  116, 1801,  116,
     1801,  116, 1801,  116, 1801, 1801,  116, 1801,  900,  116,
     1801, 1801,  899,  116, 1801,  116, 1801,  116, 1801, 1801,
      906,  116, 1801, 1801,  116, 1801,  902,  908,  116, 1801,
      903,  904,  905, 1801,  116, 1801,  116, 1801,  116, 1801,
     1801,  907, 1801,  922,  116, 1801,  909,  914,  912,  910,
      911,  116, 1801,  916,  917,  913,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  915,  923,  116, 1801,
      918,  116, 1801,  116, 1801, 1801,  919,  116, 1801,  924,

      920,  926,  928, 1801,  921,  116, 1801,  116, 1801,  927,
      930, 1801,  925,  116, 1801,  929,  116, 1801,  116, 1801,
      931,  116, 1801,  116, 1801, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  932,  935, 1801,  937,  116, 1801,
      116, 1801,  116, 1801, 1801,  934,  933,  116, 1801,  116,
     1801,  116, 1801,  936,  116, 1801, 1801,  940,  950,  116,
     1801, 1801,  942, 1801,  938,  116, 1801,  116, 1801, 1801,
      939,  944,  945,  943,  946,  116, 1801, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801, 1801,  952,
      947, 1801,  948,  116, 1801, 1801,  949,  116, 1801,  954,

     1801,  951,  116, 1801, 1801,  953,  116, 1801, 1801,  955,
      961,  956,  116, 1801, 1801,  960,  963, 1801,  116, 1801,
      116, 1801,  958,  116, 1801,  116, 1801,  965, 1801,  957,
      959, 1801,  962,  969,  116, 1801,  116, 1801,  116, 1801,
     1801,  116, 1801, 1801,  972,  116, 1801, 1801,  973, 1801,
      967,  116, 1801,  966,  116, 1801,  976,  964,  978,  979,
     1801,  116, 1801, 1801,  968,  970,  116, 1801,  116, 1801,
      116, 1801, 1801,  116, 1801,  980,  116, 1801,  116, 1801,
     1801,  971,  975,  116, 1801,  116, 1801, 1801,  974,  987,
      116, 1801,  988,  116, 1801,  116, 1801,  116, 1801,  116,

     1801,  116, 1801,  977,  116, 1801,  116, 1801, 1801,  981,
      984,  116, 1801,  116, 1801,  116, 1801,  982,  983,  990,
      116, 1801,  116, 1801,  116, 1801,  989,  116, 1801,  116,
     1801,  986,  116, 1801, 1801,  991,  985,  116, 1801,  992,
      993,  116, 1801,  116, 1801,  995,  116, 1801, 1801,  997,
      116, 1801,  998,  116, 1801,  996,  994, 1001,  999,  116,
     1801,  116, 1801,  116, 1801,  116, 1801, 1801, 1000,  116,
     1801, 1002, 1801, 1004, 1801, 1007, 1801, 1011, 1801, 1005,
     1801, 1013,  116, 1801, 1801, 1003,  116, 1801, 1006, 1801,
     1010, 1014,  116, 1801, 1801,  116, 1801, 1801, 1009,  116,

     1801, 1012,  116, 1801, 1008,  116, 1801, 1015, 1022,  116,
     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1017,  116, 1801,  116, 1801, 1016, 1801,
     1020, 1018,  116, 1801,  116, 1801,  116, 1801, 1801, 1019,
     1021,  116, 1801,  116, 1801,  116, 1801,  116, 1801, 1801,
      116, 1801,  116, 1801,  116, 1801, 1801, 1023, 1801, 1027,
     1025,  116, 1801,  116, 1801,  116, 1801, 1801, 1024,  116,
     1801,  116, 1801, 1801, 1026, 1039, 1041, 1033, 1028, 1801,
     1029, 1801, 1034, 1030, 1032, 1031, 1035, 1801, 1037,  116,
     1801, 1801, 1045, 1043,  116, 1801,  116, 1801,  116, 1801,

      116, 1801,  116, 1801, 1036,  116, 1801, 1038, 1040,  116,
     1801, 1044, 1042,  116, 1801,  116, 1801,  116, 1801, 1047,
      116, 1801,  116, 1801, 1046,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1048,  116, 1801,  116, 1801,  116, 1801,
     1049,  116, 1801, 1801, 1051, 1801,  116, 1801, 1061,  116,
     1801, 1801,  116, 1801,  116, 1801, 1050, 1801, 1053,  116,
     1801, 1054, 1801, 1052,  116, 1801,  116, 1801, 1058,  116,
     1801,  116, 1801,  116, 1801,  116, 1801, 1801, 1055, 1056,
     1801, 1057,  116, 1801, 1062, 1073, 1059, 1801, 1060, 1065,
      116, 1801,  116, 1801, 1801, 1064, 1067,  116, 1801, 1063,

      116, 1801, 1068, 1801, 1066,  116, 1801, 1801, 1069,  116,
     1801, 1801, 1070, 1801, 1071,  116, 1801,  116, 1801,  116,
     1801, 1075,  116, 1801,  116, 1801, 1076, 1801, 1074,  116,
     1801,  116, 1801, 1801, 1077,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801, 1801,
     1078,  116, 1801,  116, 1801, 1801,  116, 1801, 1801,  116,
     1801,  116, 1801, 1801, 1079, 1080, 1093, 1801, 1094, 1081,
      116, 1801, 1083,  116, 1801,  116, 1801,  116, 1801, 1082,
     1801, 1084, 1801, 1088,  116, 1801,  116, 1801,  116, 1801,
      116, 1801, 1801, 1089,  116, 1801, 1086,  116, 1801, 1087,

     1801, 1090, 1095, 1104,  116, 1801,  116, 1801, 1091, 1801,
     1092, 1096,  116, 1801,  116, 1801, 1801, 1106, 1801, 1108,
     1097, 1801, 1100,  116, 1801,  116, 1801, 1098,  116, 1801,
     1801, 1099, 1102,  116, 1801,  116, 1801, 1801, 1114, 1101,
      116, 1801, 1105, 1801, 1107,  116, 1801, 1801, 1103, 1115,
      116, 1801,  116, 1801, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1119,  116, 1801, 1110, 1801,  116, 1801,
     1109,  116, 1801,  116, 1801,  116, 1801, 1801, 1113,  116,
     1801, 1112,  116, 1801, 1111,  116, 1801,  116, 1801,  116,
     1801, 1801, 1116,  116, 1801, 1130, 1801, 1117,  116, 1801,

      116, 1801, 1118, 1121,  116, 1801, 1132,  116, 1801, 1124,
      116, 1801, 1122, 1801, 1123, 1801, 1120,  116, 1801, 1125,
     1127, 1128,  116, 1801, 1801, 1126,  116, 1801, 1129,  116,
     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801, 1801, 1131,  116, 1801,  116, 1801, 1134, 1140,  116,
     1801, 1135, 1801, 1145, 1137, 1133, 1141,  116, 1801,  116,
     1801,  116, 1801, 1801, 1136,  116, 1801, 1801, 1138,  116,
     1801,  116, 1801,  116, 1801, 1801,  116, 1801,  116, 1801,
     1801, 1143, 1801, 1146, 1142, 1139,  116, 1801, 1147,  116,
     1801,  116, 1801, 1144,  116, 1801,  116, 1801,  116, 1801,

     1801,  116, 1801, 1148,  116, 1801, 1150, 1156, 1158, 1151,
      116, 1801, 1149, 1152,  116, 1801,  116, 1801,  116, 1801,
     1162, 1153, 1164,  116, 1801,  116, 1801, 1159, 1801, 1154,
      116, 1801,  116, 1801, 1157, 1801, 1155, 1801, 1160,  116,
     1801,  116, 1801,  116, 1801, 1801, 1166,  116, 1801,  116,
     1801, 1801, 1161,  116, 1801, 1801,  116, 1801, 1165,  116,
     1801, 1801, 1167, 1801, 1163,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  116, 1801, 1171, 1801, 1172, 1801, 1169,
     1168, 1170,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801, 1801,  116, 1801, 1173,  116, 1801, 1801,  116,

     1801, 1183, 1174,  116, 1801, 1176, 1801, 1175,  116, 1801,
     1801, 1178, 1177, 1179, 1192, 1182, 1801, 1180,  116, 1801,
     1801, 1181,  116, 1801,  116, 1801, 1801,  116, 1801, 1801,
     1187,  116, 1801,  116, 1801, 1801, 1184,  116, 1801, 1185,
      116, 1801, 1801,  116, 1801, 1186,  116, 1801, 1801, 1188,
     1801, 1189, 1190, 1801, 1191,  116, 1801, 1801,  116, 1801,
     1205, 1193,  116, 1801,  116, 1801,  116, 1801, 1801, 1195,
     1801, 1209,  116, 1801, 1194, 1801, 1196, 1197,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801, 1199, 1201,
      116, 1801,  116, 1801,  116, 1801, 1801,  116, 1801, 1801,

     1200, 1206,  116, 1801, 1801, 1202, 1203, 1204,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1210, 1801, 1211,  116, 1801, 1207, 1801, 1212,  116, 1801,
      116, 1801, 1213, 1801, 1214, 1801, 1216,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801, 1801, 1225, 1801,
     1219, 1215, 1218,  116, 1801, 1801, 1217, 1230,  116, 1801,
     1227, 1801,  116, 1801,  116, 1801, 1220, 1235, 1221, 1801,
     1223, 1801, 1224,  116, 1801, 1222, 1801,  116, 1801,  116,
     1801,  116, 1801, 1229, 1234, 1801, 1226, 1801, 1228, 1237,
     1238, 1231, 1801,  116, 1801, 1239,  116, 1801,  116, 1801,

      116, 1801,  116, 1801,  116, 1801,  116, 1801, 1232, 1241,
     1801, 1233, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801, 1801, 1247, 1801,  116, 1801, 1801, 1236,  116, 1801,
      116, 1801, 1801, 1240,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801, 1243, 1248, 1245,  116, 1801, 1801,
      116, 1801, 1246, 1801, 1242, 1253,  116, 1801,  116, 1801,
      116, 1801, 1244,  116, 1801, 1801,  116, 1801,  116, 1801,
     1801, 1261,  116, 1801, 1250,  116, 1801, 1801, 1249, 1251,
     1255, 1264, 1801, 1252, 1256,  116, 1801,  116, 1801, 1254,
     1258,  116, 1801,  116, 1801, 1257, 1260,  116, 1801,  116,

     1801,  116, 1801,  116, 1801, 1801,  116, 1801,  116, 1801,
     1262, 1263, 1259,  116, 1801,  116, 1801,  116, 1801, 1801,
      116, 1801,  116, 1801, 1267, 1801, 1265, 1272,  116, 1801,
      116, 1801, 1266,  116, 1801,  116, 1801, 1801, 1268,  116,
     1801, 1273, 1801,  116, 1801,  116, 1801, 1801, 1269, 1801,
     1270, 1281,  116, 1801, 1271,  116, 1801, 1274, 1276, 1288,
     1801, 1278,  116, 1801, 1801, 1277, 1801, 1275, 1801, 1291,
     1282, 1801, 1279,  116, 1801, 1801, 1283, 1289, 1280,  116,
     1801, 1284,  116, 1801, 1801, 1287, 1801, 1286,  116, 1801,
      116, 1801, 1285,  116, 1801,  116, 1801,  116, 1801,  116,

     1801,  116, 1801, 1292,  116, 1801,  116, 1801,  116, 1801,
     1290, 1801, 1296, 1801, 1293,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  116, 1801, 1294,  116, 1801, 1302, 1801,
     1303, 1310,  116, 1801, 1304,  116, 1801, 1801, 1295,  116,
     1801, 1298, 1297, 1299,  116, 1801, 1801, 1308,  116, 1801,
      116, 1801, 1801, 1300,  116, 1801, 1301,  116, 1801, 1801,
      116, 1801, 1801, 1305, 1313, 1319,  116, 1801,  116, 1801,
     1306,  116, 1801, 1309,  116, 1801,  116, 1801, 1801, 1307,
     1311, 1801,  116, 1801,  116, 1801, 1321,  116, 1801,  116,
     1801, 1801, 1312,  116, 1801, 1801, 1314,  116, 1801,  116,

     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801, 1315, 1316, 1801, 1317, 1318,  116, 1801,  116, 1801,
     1801, 1332,  116, 1801,  116, 1801, 1322,  116, 1801, 1320,
     1323,  116, 1801, 1324,  116, 1801, 1801, 1327,  116, 1801,
     1801,  116, 1801,  116, 1801, 1801, 1325,  116, 1801, 1328,
     1801, 1331, 1801, 1330,  116, 1801, 1801,  116, 1801, 1333,
      116, 1801, 1329,  116, 1801,  116, 1801, 1801, 1334,  116,
     1801,  116, 1801,  116, 1801, 1335, 1343, 1801, 1338, 1337,
      116, 1801,  116, 1801, 1336,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  116, 1801, 1339, 1340,  116, 1801, 1346,

      116, 1801,  116, 1801, 1801, 1341, 1801, 1345, 1344, 1347,
      116, 1801,  116, 1801, 1801, 1358, 1342,  116, 1801,  116,
     1801, 1349,  116, 1801, 1361, 1357,  116, 1801, 1348, 1352,
      116, 1801, 1350, 1801, 1353, 1801,  116, 1801, 1801, 1351,
     1354, 1801,  116, 1801,  116, 1801, 1364,  116, 1801, 1359,
     1801, 1356,  116, 1801,  116, 1801, 1801, 1355, 1367,  116,
     1801, 1365,  116, 1801,  116, 1801,  116, 1801, 1801, 1369,
      116, 1801,  116, 1801, 1360, 1371, 1368,  116, 1801, 1801,
     1363,  116, 1801, 1370, 1801, 1362, 1366, 1801,  116, 1801,
      116, 1801,  116, 1801, 1801,  116, 1801,  116, 1801,  116,

     1801,  116, 1801,  116, 1801,  116, 1801, 1801, 1374,  116,
     1801, 1801, 1384,  116, 1801,  116, 1801, 1373, 1375,  116,
     1801, 1801, 1372,  116, 1801,  116, 1801, 1801,  116, 1801,
     1801, 1385, 1801, 1376, 1801, 1377, 1380,  116, 1801,  116,
     1801, 1378, 1801, 1379, 1801, 1389,  116, 1801,  116, 1801,
      116, 1801, 1801, 1381,  116, 1801, 1382, 1383,  116, 1801,
      116, 1801, 1388, 1386, 1801, 1387, 1801, 1391,  116, 1801,
      116, 1801,  116, 1801,  116, 1801, 1400, 1390, 1393,  116,
     1801, 1801,  116, 1801, 1801,  116, 1801, 1801, 1392,  116,
     1801,  116, 1801,  116, 1801,  116, 1801, 1801, 1394,  116,

     1801, 1395, 1398,  116, 1801,  116, 1801,  116, 1801, 1396,
     1399, 1801, 1397,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1401, 1403, 1402, 1405,  116, 1801,  116,
     1801, 1406, 1404, 1407,  116, 1801, 1801, 1408,  116, 1801,
      116, 1801, 1801, 1413, 1801,  116, 1801, 1801, 1410,  116,
     1801,  116, 1801, 1411,  116, 1801, 1409, 1414,  116, 1801,
     1412, 1801, 1416, 1415, 1801, 1422, 1801, 1419,  116, 1801,
     1425,  116, 1801,  116, 1801, 1801, 1420, 1801, 1417,  116,
     1801,  116, 1801, 1418, 1421,  116, 1801, 1423, 1426, 1427,
     1435,  116, 1801,  116, 1801, 1801, 1424,  116, 1801, 1430,

      116, 1801,  116, 1801,  116, 1801, 1428, 1436, 1801, 1429,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1431,  116, 1801,  116, 1801, 1801,  116, 1801,  116, 1801,
     1801, 1433,  116, 1801, 1432,  116, 1801, 1801, 1434,  116,
     1801,  116, 1801, 1801, 1448,  116, 1801,  116, 1801, 1437,
     1801,  116, 1801,  116, 1801, 1801, 1440, 1801,  116, 1801,
     1801, 1438, 1801, 1439,  116, 1801,  116, 1801, 1801, 1442,
     1443, 1801, 1447, 1444,  116, 1801,  116, 1801, 1441, 1445,
      116, 1801, 1455, 1446,  116, 1801,  116, 1801, 1449, 1454,
     1801, 1451,  116, 1801,  116, 1801,  116, 1801,  116, 1801,

     1462, 1801, 1450, 1452,  116, 1801,  116, 1801,  116, 1801,
      116, 1801, 1464,  116, 1801, 1453, 1465,  116, 1801,  116,
     1801, 1801, 1457,  116, 1801,  116, 1801, 1801, 1460, 1456,
      116, 1801,  116, 1801,  116, 1801, 1801, 1458,  116, 1801,
      116, 1801, 1470, 1459,  116, 1801,  116, 1801, 1474, 1461,
      116, 1801, 1466, 1463,  116, 1801,  116, 1801, 1467, 1801,
     1469, 1801, 1473,  116, 1801, 1801, 1468,  116, 1801,  116,
     1801,  116, 1801, 1472, 1471,  116, 1801,  116, 1801,  116,
     1801, 1801, 1475,  116, 1801, 1801, 1476,  116, 1801,  116,
     1801,  116, 1801, 1478, 1483,  116, 1801,  116, 1801,  116,

     1801,  116, 1801,  116, 1801, 1801, 1480, 1479,  116, 1801,
     1801, 1477,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801, 1491, 1801, 1495, 1481, 1482,  116, 1801, 1484,
     1801, 1485,  116, 1801, 1801, 1487,  116, 1801,  116, 1801,
     1801, 1486,  116, 1801, 1801, 1493, 1498, 1494, 1488, 1490,
     1801, 1492, 1489,  116, 1801,  116, 1801,  116, 1801,  116,
     1801, 1801,  116, 1801,  116, 1801, 1801, 1496,  116, 1801,
      116, 1801, 1801,  116, 1801, 1497,  116, 1801,  116, 1801,
      116, 1801, 1801, 1499,  116, 1801,  116, 1801,  116, 1801,
      116, 1801, 1500, 1801, 1502,  116, 1801,  116, 1801, 1801,

     1503, 1801, 1504,  116, 1801,  116, 1801, 1501,  116, 1801,
      116, 1801,  116, 1801, 1509, 1801, 1506, 1507,  116, 1801,
     1505, 1511,  116, 1801, 1801, 1520, 1508, 1510, 1514,  116,
     1801,  116, 1801, 1801, 1515, 1513, 1517, 1801, 1512, 1518,
      116, 1801, 1801, 1516,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801, 1522, 1801, 1527,  116, 1801, 1519,
     1521,  116, 1801,  116, 1801, 1801,  116, 1801,  116, 1801,
     1526,  116, 1801, 1536, 1524, 1523,  116, 1801,  116, 1801,
     1525,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1801, 1528, 1801, 1530,  116, 1801,  116,

     1801,  116, 1801, 1529, 1545, 1801, 1532, 1801, 1531, 1534,
     1537, 1801, 1538, 1535, 1533,  116, 1801,  116, 1801,  116,
     1801, 1539,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801, 1801,  116, 1801, 1540,
     1801, 1542,  116, 1801, 1541,  116, 1801,  116, 1801, 1546,
      116, 1801, 1801, 1544, 1543,  116, 1801, 1801, 1556,  116,
     1801,  116, 1801,  116, 1801,  116, 1801, 1801, 1563,  116,
     1801, 1801, 1551, 1801, 1550, 1559, 1552, 1801, 1547, 1549,
     1801, 1554,  116, 1801,  116, 1801, 1548, 1555, 1565, 1801,
     1553, 1801,  116, 1801,  116, 1801, 1801, 1557,  116, 1801,

      116, 1801, 1560,  116, 1801, 1558,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1570, 1561, 1801, 1562, 1567,  116, 1801,  116, 1801, 1564,
      116, 1801,  116, 1801, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1566,  116, 1801, 1569,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801, 1568, 1575, 1801, 1573, 1801, 1577, 1582, 1801, 1571,
     1801, 1572,  116, 1801, 1574,  116, 1801, 1576,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1580, 1801, 1578, 1581, 1801, 1579, 1801, 1583, 1801, 1586,

     1585, 1589, 1801, 1587, 1584,  116, 1801, 1590,  116, 1801,
     1801, 1588, 1593,  116, 1801, 1801, 1591,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801, 1801, 1594,  116,
     1801, 1801, 1592, 1600,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801, 1801, 1595,  116, 1801, 1801, 1601,
     1801, 1596,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1607,  116, 1801,  116, 1801, 1598,  116, 1801, 1597, 1602,
     1801, 1603,  116, 1801, 1801, 1599, 1801,  116, 1801, 1801,
     1605,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  116, 1801, 1604,  116, 1801,  116, 1801,

     1801, 1606,  116, 1801, 1801, 1609,  116, 1801, 1801, 1611,
      116, 1801, 1801, 1610,  116, 1801,  116, 1801,  116, 1801,
     1613, 1608, 1801, 1612, 1615,  116, 1801,  116, 1801,  116,
     1801, 1616, 1801, 1614,  116, 1801, 1619,  116, 1801, 1801,
     1617,  116, 1801, 1801, 1622,  116, 1801,  116, 1801, 1801,
     1618, 1801, 1620, 1801,  116, 1801,  116, 1801,  116, 1801,
     1630, 1621,  116, 1801,  116, 1801, 1625, 1801, 1624, 1626,
      116, 1801,  116, 1801, 1633, 1801, 1623,  116, 1801, 1801,
     1628, 1627,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801, 1801, 1634,  116, 1801,  116, 1801,  116, 1801,

     1801, 1629, 1631,  116, 1801,  116, 1801,  116, 1801,  116,
     1801, 1801, 1635, 1638,  116, 1801, 1801, 1632,  116, 1801,
      116, 1801, 1636,  116, 1801,  116, 1801, 1642,  116, 1801,
      116, 1801, 1637,  116, 1801, 1801, 1640,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801, 1639,  116, 1801,
      116, 1801,  116, 1801,  116, 1801, 1801,  116, 1801,  116,
     1801, 1641, 1643, 1644, 1648,  116, 1801,  116, 1801, 1645,
     1647, 1646,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1801, 1651, 1801, 1661, 1801, 1652, 1649, 1650,  116, 1801,
      116, 1801,  116, 1801, 1801, 1655,  116, 1801, 1658, 1801,

     1653,  116, 1801,  116, 1801, 1656,  116, 1801, 1654,  116,
     1801,  116, 1801, 1801, 1660,  116, 1801, 1657, 1659,  116,
     1801, 1801, 1666,  116, 1801,  116, 1801, 1801, 1665, 1662,
      116, 1801, 1664,  116, 1801, 1663, 1674,  116, 1801, 1801,
     1669,  116, 1801,  116, 1801, 1676,  116, 1801,  116, 1801,
     1667, 1801, 1668,  116, 1801, 1671, 1801, 1670, 1673,  116,
     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801, 1672,
     1801, 1675,  116, 1801,  116, 1801,  116, 1801, 1677,  116,
     1801,  116, 1801, 1801,  116, 1801, 1801, 1678,  116, 1801,
     1679,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,

     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801,  116, 1801, 1801, 1680,  116, 1801,  116, 1801, 1682,
     1801, 1681,  116, 1801, 1684,  116, 1801, 1801, 1683,  116,
     1801, 1688, 1801, 1699, 1687, 1685, 1689,  116, 1801, 1801,
     1686,  116, 1801, 1690,  116, 1801, 1801, 1693, 1801, 1694,
      116, 1801, 1695, 1801, 1696, 1801, 1691, 1801, 1692,  116,
     1801, 1697, 1698,  116, 1801,  116, 1801,  116, 1801,  116,
     1801, 1801, 1702,  116, 1801,  116, 1801,  116, 1801, 1801,
     1700,  116, 1801,  116, 1801, 1701,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801, 1801, 1703,

      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801, 1801, 1706,  116, 1801, 1704,  116, 1801,  116,
     1801, 1705,  116, 1801,  116, 1801, 1801, 1708,  116, 1801,
     1707,  116, 1801,  116, 1801, 1712,  116, 1801,  116, 1801,
     1710, 1713, 1801, 1709, 1714,  116, 1801, 1801, 1711, 1801,
     1726, 1715, 1724,  116, 1801, 1801, 1722,  116, 1801,  116,
     1801, 1801, 1716,  116, 1801, 1801, 1719,  116, 1801, 1801,
     1717,  116, 1801,  116, 1801, 1801, 1718,  116, 1801,  116,
     1801,  116, 1801, 1725, 1720, 1721,  116, 1801,  116, 1801,
     1723,  116, 1801, 1801, 1733, 1801,  116, 1801,  116, 1801,

     1801, 1728,  116, 1801,  116, 1801, 1801, 1727,  116, 1801,
      116, 1801,  116, 1801, 1801, 1731, 1730,  116, 1801, 1729,
      116, 1801,  116, 1801,  116, 1801, 1801, 1734, 1735,  116,
     1801,  116, 1801, 1801, 1732,  116, 1801,  116, 1801,  116,
     1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801, 1736,
     1745,  116, 1801,  116, 1801,  116, 1801, 1801, 1740, 1737,
     1738,  116, 1801, 1801, 1741, 1742, 1801, 1739,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1801, 1744, 1801, 1748, 1801, 1747, 1801, 1743,  116, 1801,
     1801, 1746,  116, 1801,  116, 1801,  116, 1801,  116, 1801,

     1801, 1749,  116, 1801, 1801, 1750,  116, 1801,  116, 1801,
      116, 1801, 1801, 1751,  116, 1801, 1752,  116, 1801,  116,
     1801,  116, 1801, 1754, 1756, 1801, 1767,  116, 1801,  116,
     1801,  116, 1801, 1801, 1753,  116, 1801,  116, 1801, 1755,
      116, 1801,  116, 1801,  116, 1801, 1757,  116, 1801, 1801,
     1758, 1801,  116, 1801,  116, 1801,  116, 1801, 1760, 1801,
     1761, 1759,  116, 1801, 1762,  116, 1801,  116, 1801, 1763,
      116, 1801, 1764, 1801, 1766, 1765, 1772,  116, 1801, 1768,
      116, 1801,  116, 1801,  116, 1801, 1801, 1770,  116, 1801,
     1769,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,

     1801, 1801, 1771, 1801, 1773,  116, 1801,  116, 1801, 1774,
     1775, 1801, 1776,  116, 1801, 1801, 1779,  116, 1801,  116,
     1801, 1801, 1777, 1801,  116, 1801,  116, 1801, 1778,  116,
     1801, 1801, 1781,  116, 1801,  116, 1801, 1801, 1780, 1801,
     1782,  116, 1801,  116, 1801,  116, 1801,  116, 1801,  116,
     1801, 1783, 1801, 1784,  116, 1801, 1801, 1786, 1785, 1790,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
      116, 1801,  116, 1801,  116, 1801,  116, 1801,  116, 1801,
     1787, 1788,  116, 1801,  116, 1801, 1801, 1789,  116, 1801,
      116, 1801,  116, 1801, 1791, 1801, 1801, 1801, 1801, 1801,

     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1794, 1792, 1795, 1801, 1796, 1801, 1797, 1801, 1793, 1801,
     1801, 1801, 1801, 1801, 1801, 1800, 1801, 1798, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1799,   87,   87,
       87,   87,   87,   92,   92,   92,   92,   92,   97,   97,
       97,   97,   97,  119,  119,  119,  278, 1801,  278,  278,
      278,  279,  279,  279,  279,  279,  294, 1801,  294,    9,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,

     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801
    } ;

static yyconst flex_int16_t yy_chk[6070] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,   19,    3,    3,    4,    4,   17,    4,    4,    5,

        5,   24,    6,    6,    7,    7,    8,    8,   19,   17,
       17,   17,   17,   24,   26,   28,   30,   30, 1813,   30,
       30,   30,   30,   28,   26,   26,   29,   29,   86,   29,
       29,   29,   29,   31,   31, 1812,   31,   31,   31,   31,
       34,   34, 1811,    3,   36,   36,   42,   42,    4,   31,
       38,   38,   39,   39,   44,   44, 1810,   40,   40,   47,
       47, 1808,   53,   53,   62,   62,  119,  119,   41,   41,
       43,   43,   40,  133,  133,   45,   45,   40,   50,   50,
       49,   49, 1061,    5,  922,    5,    6,  785,    6,   86,
       48,   48,  294,   29,   43,   41,  293,   38,   42,   52,

       52,   40,   44,   42,  280,   38,  201,   38,   40,   40,
       39,   50,   40,   39,  127,   40,   41,   48,   40,  123,
       41,   40,   43,   45,   49,   43,   53,   45,   49,   41,
       46,   46,   51,   51,   48,  122,   50,   67,   67,  116,
       54,   54,   48,   52,   58,   58,   51,   99,   48,   57,
       57,   52,   56,   56,   94,   46,   46,   59,   59,   54,
       52,   60,   60,   64,   57,  128,  128,   66,   66,   35,
       57,   32,   78,   78,  142,  142,   65,   65,   68,   68,
       57,   27,   56,   72,   72,   23,   46,   46,   54,   71,
       71,   51,   46,   51,   18,   67,   51,   55,   55,   14,

       56,   67,   13,   58,   56,   82,   82,  142,   69,   69,
       76,   76,  128,   56,   70,   70,   59,   55,  129,  129,
       60,   65,   65,   55,    9,   66,   68,   55,   66,   55,
       68,   72,   65,   73,   73,   72,   78,   65,   65,   65,
       65,   55,   74,   74,   71,   55,   71,    0,   55,   55,
       71,   55,    0,   55,   69,   91,   55,   75,   75,    0,
       55,   55,   82,   69,   69,   69,   70,    0,   76,   70,
       77,   77,   70,   69,    0,   69,  135,  135,   70,   79,
       79,  129,   73,  117,  117,  117,  117,  132,  132,   73,
       73,    0,   80,   80,   74,   73,   73,   84,   84,   74,

       74,   75,   81,   81,   74,   75,  121,  121,    0,   75,
       83,   83,  130,  130,   91,    0,  118,  118,   91,  118,
      118,  118,  118,    0,  121,    0,   91,   79,   77,    0,
       91,   77,   91,  135,   77,    0,   80,   79,   80,    0,
       80,   84,    0,   80,   80,  132,   81,   80,   84,  131,
      131,   80,   80,   81,   83,   80,   80,   83,    0,  130,
       81,  134,  134,   81,  130,  136,  136,  138,  138,   81,
       81,   81,    0,   83,  134,  137,  137,   83,   83,   83,
      120,  120,    0,  120,  120,  120,  120,  139,  139,  140,
      140,  141,  141,  120,  120,  120,  120,  120,  120,  143,

      143,  144,  144,  145,  145,  146,  146,  147,  147,  136,
      131,  138,  148,  148,  149,  149,  150,  150,  151,  151,
      153,  153,  152,  152,  120,  120,  120,  120,  120,  120,
      156,  156,  154,  154,  155,  155,  137,  140,    0,  148,
      157,  157,    0,  139,  139,  154,    0,  145,  158,  158,
      160,  160,  141,    0,  147,  146,  159,  159,  161,  161,
      143,    0,  144,  144,  162,  162,  155,  153,  150,  149,
      163,  163,  164,  164,  156,  151,  151,  152,  165,  165,
      150,  151,  159,    0,  152,    0,  166,  166,    0,  157,
      167,  167,  157,  168,  168,    0,  169,  169,  170,  170,

      172,  172,  165,  165,    0,  157,  158,  171,  171,  160,
      162,  166,  167,    0,  168,  161,  164,  173,  173,  174,
      174,  175,  175,    0,  176,  176,  177,  177,  178,  178,
      179,  179,    0,  163,    0,  175,  180,  180,  181,  181,
        0,  182,  182,  179,  183,  183,    0,  166,  169,  184,
      184,  185,  185,  177,  171,  176,  186,  186,  178,  188,
      188,  170,  187,  187,  189,  189,  180,    0,  176,    0,
      171,  174,  190,  190,    0,  173,  191,  191,  192,  192,
      193,  193,  195,  195,    0,  190,  176,  194,  194,  196,
      196,  197,  197,  198,  198,  199,  199,  203,  203,  185,

      204,  204,  183,  181,  182,  184,  187,  194,  195,  196,
      205,  205,  207,  207,  186,  206,  206,  208,  208,    0,
      188,  209,  209,    0,  193,  189,    0,  210,  210,  211,
      211,    0,  191,    0,  192,  212,  212,  213,  213,  214,
      214,  215,  215,  216,  216,  217,  217,  218,  218,  197,
        0,  198,    0,  199,  219,  219,  220,  220,  204,  203,
        0,  208,  205,    0,  207,  206,  221,  221,  222,  222,
      223,  223,  224,  224,    0,  208,    0,  211,  225,  225,
      226,  226,  227,  227,  209,  210,  228,  228,    0,  216,
        0,  212,    0,  213,  214,  229,  229,  212,    0,  212,

      220,  219,    0,  215,  230,  230,  218,  217,  231,  231,
      232,  232,  233,  233,  234,  234,  237,  237,  221,  235,
      235,  236,  236,  222,    0,  221,  239,  239,  223,    0,
      228,  238,  238,  224,    0,  225,  240,  240,  226,  241,
      241,  242,  242,  243,  243,    0,  227,  244,  244,    0,
      229,  230,    0,  245,  245,  246,  246,    0,  233,  249,
      249,  233,  247,  247,  233,    0,  230,  235,    0,  232,
      248,  248,  234,  235,  250,  250,    0,  238,  236,  251,
      251,  238,    0,  241,  253,  253,  241,  252,  252,  254,
      254,  255,  255,  256,  256,  257,  257,    0,  242,    0,

      246,  258,  258,  240,  243,  245,  259,  259,    0,  244,
        0,  245,  260,  260,  247,  261,  261,    0,  246,  262,
      262,    0,  249,  249,  263,  263,  264,  264,    0,  248,
      251,  265,  265,  252,  266,  266,  267,  267,    0,  250,
      268,  268,  253,  255,  269,  269,  254,  271,  271,  258,
      252,  259,  270,  270,  256,    0,  257,  272,  272,  273,
      273,    0,  259,  274,  274,  275,  275,  261,    0,  260,
      290,  290,  290,  290,  292,  292,  261,    0,  297,  297,
      298,  298,  299,  299,  300,  300,  301,  301,  302,  302,
        0,  263,  263,  263,    0,  268,  269,  297,    0,  267,

        0,  268,    0,  303,  303,    0,  270,  304,  304,  305,
      305,  306,  306,  307,  307,  274,    0,  275,  308,  308,
      309,  309,  310,  310,  311,  311,  312,  312,    0,  292,
      313,  313,  298,  303,  314,  314,  301,  315,  315,    0,
      312,  316,  316,  299,  317,  317,  300,  318,  318,  314,
      319,  319,  320,  320,  302,  321,  321,  306,  322,  322,
      323,  323,    0,  319,  304,  305,  310,  326,  326,  324,
      324,  327,  327,    0,  308,  307,    0,  308,    0,  318,
      328,  328,  313,  315,  324,  309,  325,  325,    0,  311,
      323,    0,  317,  330,  330,    0,  315,  329,  329,    0,

      320,  331,  331,  325,  325,  332,  332,  316,  333,  333,
      334,  334,  325,  325,  321,    0,  329,  325,  335,  335,
      336,  336,  337,  337,    0,  322,  326,    0,  328,    0,
      338,  338,    0,  327,    0,  339,  339,  340,  340,  336,
      341,  341,  342,  342,  343,  343,  344,  344,  345,  345,
        0,  331,  346,  346,  347,  347,  349,  349,  334,  348,
      348,  350,  350,  332,  335,    0,  342,  351,  351,  346,
        0,  333,  353,  353,  349,  352,  352,  337,  338,  339,
      335,  354,  354,  355,  355,  356,  356,  357,  357,  358,
      358,  359,  359,    0,  344,  360,  360,  341,  340,  361,

      361,  362,  362,    0,  345,  364,  364,  348,  365,  365,
      347,  360,    0,  366,  366,  367,  367,    0,  351,  358,
      361,  352,    0,  368,  368,  369,  369,  363,  363,  370,
      370,  357,  356,  363,  352,  353,  371,  371,  355,  357,
      372,  372,  363,  363,    0,  363,  373,  373,    0,  362,
      357,  363,    0,  363,    0,  363,  374,  374,  363,  375,
      375,  363,  371,  376,  376,    0,  364,  365,  366,  368,
        0,  364,  375,  367,  377,  377,  378,  378,  370,  379,
      379,  380,  380,  381,  381,  382,  382,  383,  383,  369,
      384,  384,  385,  385,  373,  376,  386,  386,    0,  372,

        0,  377,  374,  387,  387,  388,  388,  389,  389,    0,
      390,  390,  391,  391,  383,  392,  392,  393,  393,  394,
      394,  395,  395,    0,  399,  399,  396,  396,  397,  397,
      398,  398,  400,  400,  401,  401,  384,    0,  378,  402,
      402,  379,    0,  380,  403,  403,  384,  382,    0,  385,
      404,  404,  387,  386,  390,    0,  405,  405,  406,  406,
      407,  407,    0,  388,  408,  408,  392,  409,  409,  389,
      394,  391,  396,    0,  393,    0,  397,    0,  398,  411,
      411,  400,  410,  410,  412,  412,  395,  399,    0,  401,
      413,  413,  414,  414,  415,  415,  416,  416,  417,  417,

        0,  402,  418,  418,  419,  419,  407,  420,  420,  408,
      421,  421,    0,  404,  405,  422,  422,  423,  423,  424,
      424,  425,  425,  426,  426,    0,  409,  427,  427,  410,
      428,  428,  412,  429,  429,  430,  430,    0,  411,  431,
      431,  432,  432,  433,  433,    0,  418,  434,  434,    0,
      414,  435,  435,  413,  416,  436,  436,  418,    0,  422,
      436,  417,  421,    0,  418,  419,  437,  437,  438,  438,
      439,  439,  440,  440,    0,  426,    0,  429,  425,  441,
      441,  442,  442,  443,  443,  431,  428,  444,  444,  445,
      445,    0,  430,  446,  446,  433,  432,  448,  448,  435,

      447,  447,  449,  449,  450,  450,  451,  451,  453,  453,
      434,    0,  452,  452,  454,  454,  438,    0,  439,  440,
      455,  455,    0,  437,  456,  456,    0,  441,  457,  457,
      458,  458,    0,  444,  443,  459,  459,    0,  441,  461,
      461,  445,  441,    0,  441,  462,  462,  442,    0,  448,
      463,  463,  465,  465,  460,  460,  446,  466,  466,  447,
      452,  467,  467,  468,  468,  469,  469,  460,  451,  460,
      460,    0,  460,  470,  470,  460,  456,  471,  471,  460,
      472,  472,  460,  473,  473,  460,  474,  474,    0,  460,
        0,  459,  458,  475,  475,    0,  465,  476,  476,    0,

      462,    0,  461,  477,  477,  478,  478,  479,  479,  467,
      480,  480,    0,  469,  463,  481,  481,  482,  482,    0,
      466,  468,  483,  483,  484,  484,  485,  485,    0,  486,
      486,    0,  473,  487,  487,  470,  488,  488,    0,  481,
        0,  474,  489,  489,    0,  476,  486,    0,  472,  484,
        0,  490,  490,  478,  480,  475,  491,  491,    0,  492,
      492,  493,  493,  478,  494,  494,    0,  477,  490,    0,
      479,  495,  495,    0,  489,  492,  496,  496,  498,  498,
      483,  485,  482,  497,  497,  499,  499,    0,  488,    0,
      487,  500,  500,  501,  501,  502,  502,  503,  503,  504,

      504,  505,  505,  506,  506,  507,  507,  508,  508,  493,
      509,  509,  510,  510,  503,  511,  511,  505,  512,  512,
      513,  513,  494,  498,  514,  514,    0,  497,    0,  515,
      515,  499,  516,  516,  496,  506,  517,  517,  495,  518,
      518,  519,  519,    0,  512,  501,    0,  504,  512,  515,
      520,  520,  521,  521,  523,  523,  519,  522,  522,  511,
      524,  524,  525,  525,    0,  508,  507,  526,  526,  527,
      527,    0,  523,    0,  509,  513,  514,    0,  525,  529,
      529,  528,  528,  518,  530,  530,  531,  531,  532,  532,
      533,  533,  534,  534,  520,    0,  528,    0,  517,  528,

      535,  535,    0,  536,  536,    0,  525,    0,  524,  521,
        0,  528,  522,  537,  537,  538,  538,    0,  534,  536,
      532,  527,  539,  539,  540,  540,  541,  541,  542,  542,
      531,  535,    0,  533,    0,  529,  543,  543,  544,  544,
      545,  545,  546,  546,    0,  547,  547,  548,  548,  549,
      549,  551,  551,  530,  550,  550,    0,  552,  552,  553,
      553,  554,  554,  538,  557,  557,  554,  555,  555,    0,
      541,  537,  556,  556,  558,  558,  540,  539,  559,  559,
      560,  560,  561,  561,  562,  562,  544,  563,  563,  542,
      553,  564,  564,    0,  557,  548,    0,  551,  555,  543,

      547,  552,  550,  545,  565,  565,  566,  566,  559,  564,
      567,  567,  549,  568,  568,  569,  569,  570,  570,    0,
      556,  571,  571,  572,  572,  573,  573,  574,  574,  575,
      575,  576,  576,    0,  577,  577,  578,  578,  579,  579,
      580,  580,  581,  581,  582,  582,  583,  583,  584,  584,
      566,  585,  585,  586,  586,  587,  587,  588,  588,    0,
      589,  589,    0,  570,  590,  590,  591,  591,  592,  592,
      593,  593,  594,  594,  595,  595,    0,  572,  577,  596,
      596,  597,  597,  576,  571,  598,  598,  599,  599,  573,
      600,  600,  575,  578,    0,  579,  601,  601,  578,  585,

        0,  588,  582,  602,  602,  603,  603,    0,  604,  604,
      581,  584,  605,  605,  586,  589,  590,  606,  606,  607,
      607,  608,  608,  609,  609,  610,  610,    0,  593,  611,
      611,  613,  613,  594,  600,  612,  612,  598,  614,  614,
      615,  615,  597,    0,  596,  616,  616,  613,  617,  617,
        0,  599,  604,  601,  618,  618,  619,  619,  602,  620,
      620,    0,  605,  621,  621,  622,  622,  623,  623,  624,
      624,  625,  625,  626,  626,  609,  627,  627,  606,  612,
        0,  610,  607,  628,  628,  614,  629,  629,  630,  630,
      631,  631,  616,  629,  632,  632,  617,  633,  633,  634,

      634,  635,  635,  636,  636,  637,  637,  638,  638,  639,
      639,  618,  640,  640,  619,  641,  641,  624,  642,  642,
      620,  621,  643,  643,  644,  644,  645,  645,  625,    0,
      639,  647,  647,  648,  648,    0,  649,  649,    0,  628,
      652,  652,  651,  651,    0,  631,  653,  653,    0,  637,
      630,  636,  649,  639,    0,  636,  634,  639,    0,  650,
      650,    0,  635,  653,  654,  654,    0,  641,    0,  638,
      642,  641,  644,  640,  650,  650,  655,  655,  656,  656,
      657,  657,    0,  650,    0,  650,  658,  658,  652,  650,
      650,  651,    0,  645,  650,  647,    0,  648,  659,  659,

      660,  660,  661,  661,  662,  662,  663,  663,  664,  664,
      666,  666,  654,  665,  665,  667,  667,  668,  668,    0,
      669,  669,    0,  663,  655,  669,  669,  670,  670,  671,
      671,  672,  672,  673,  673,  674,  674,  657,  675,  675,
      676,  676,    0,  677,  677,  678,  678,  679,  679,  658,
      661,    0,  664,  680,  680,  660,  682,  682,  666,  667,
        0,  668,  681,  681,    0,  659,    0,  662,  683,  683,
      665,    0,  671,  684,  684,  685,  685,  686,  686,  674,
      687,  687,    0,  670,    0,  673,  688,  688,  689,  689,
      690,  690,    0,  691,  691,    0,  675,    0,  672,    0,

      679,  678,    0,  676,  677,    0,  681,  692,  692,  693,
      693,  694,  694,    0,  680,  695,  695,  696,  696,  697,
      697,  698,  698,    0,  692,  684,    0,  685,  699,  699,
      700,  700,  701,  701,  689,  702,  702,  687,  703,  703,
      686,  691,  704,  704,  705,  705,    0,  688,  706,  706,
        0,  697,  707,  707,  690,  694,  708,  708,  709,  709,
      710,  710,  711,  711,  712,  712,  713,  713,  714,  714,
        0,  698,  696,  715,  715,    0,  693,  695,  717,  717,
      706,    0,  703,  716,  716,  718,  718,  714,  719,  719,
      705,  699,  704,  701,  700,    0,  716,  702,  720,  720,

      708,  721,  721,  722,  722,  723,  723,  707,  710,  724,
      724,  725,  725,    0,  726,  726,    0,  709,  727,  727,
      728,  728,    0,  711,  730,  730,  713,  729,  729,    0,
      718,  731,  731,    0,  717,    0,  715,    0,  732,  732,
      733,  733,  734,  734,  735,  735,  736,  736,  720,  723,
      737,  737,  719,  733,    0,  729,  732,  721,    0,  725,
        0,  722,  726,  738,  738,  739,  739,  740,  740,    0,
      724,  728,  735,  741,  741,  735,    0,  731,  738,  742,
      742,  727,  737,  743,  743,  744,  744,  730,  745,  745,
      746,  746,  748,  748,  747,  747,    0,  738,  749,  749,

        0,  734,    0,  750,  750,  751,  751,  752,  752,  753,
      753,  754,  754,  755,  755,    0,  741,  756,  756,  757,
      757,  758,  758,  759,  759,    0,  761,  761,  740,  760,
      760,    0,  739,  762,  762,  763,  763,  764,  764,    0,
      748,  765,  765,    0,  767,  767,  743,  750,  768,  768,
      745,  746,  747,    0,  769,  769,  766,  766,  770,  770,
        0,  749,    0,  766,  771,  771,  751,  757,  755,  752,
      753,  773,  773,  760,  761,  756,  772,  772,  774,  774,
      775,  775,  776,  776,  777,  777,  759,  766,  778,  778,
      762,  779,  779,  780,  780,    0,  763,  781,  781,  766,

      764,  767,  769,    0,  765,  782,  782,  783,  783,  768,
      771,    0,  766,  784,  784,  770,  786,  786,  787,  787,
      772,  788,  788,  789,  789,    0,  790,  790,  791,  791,
      792,  792,  794,  794,  773,  778,    0,  780,  793,  793,
      795,  795,  796,  796,    0,  777,  776,  797,  797,  798,
      798,  799,  799,  779,  800,  800,    0,  784,  794,  801,
      801,    0,  786,    0,  781,  802,  802,  803,  803,    0,
      783,  789,  790,  788,  791,  804,  804,    0,  805,  805,
      806,  806,  807,  807,  808,  808,  809,  809,    0,  796,
      791,    0,  792,  810,  810,    0,  793,  811,  811,  798,

        0,  795,  812,  812,    0,  797,  813,  813,    0,  799,
      807,  800,  814,  814,    0,  806,  809,    0,  815,  815,
      816,  816,  804,  817,  817,  818,  818,  811,    0,  803,
      805,    0,  808,  814,  819,  819,  820,  820,  821,  821,
        0,  822,  822,    0,  817,  823,  823,    0,  817,    0,
      812,  824,  824,  811,  825,  825,  820,  810,  822,  822,
        0,  826,  826,    0,  813,  815,  827,  827,  828,  828,
      829,  829,    0,  830,  830,  822,  831,  831,  832,  832,
        0,  816,  819,  834,  834,  833,  833,    0,  818,  830,
      835,  835,  831,  836,  836,  837,  837,  838,  838,  839,

      839,  840,  840,  821,  841,  841,  842,  842,    0,  823,
      827,  843,  843,  844,  844,  845,  845,  825,  826,  833,
      846,  846,  847,  847,  848,  848,  832,  849,  849,  851,
      851,  829,  850,  850,    0,  834,  828,  852,  852,  835,
      836,  853,  853,  854,  854,  838,  855,  855,    0,  840,
      857,  857,  841,  858,  858,  839,  837,  844,  842,  856,
      856,  860,  860,  859,  859,  861,  861,    0,  843,  862,
      862,  845,    0,  848,    0,  851,    0,  856,    0,  849,
        0,  859,  863,  863,    0,  847,  864,  864,  850,    0,
      855,  859,  865,  865,    0,  866,  866,    0,  854,  867,

      867,  858,  868,  868,  852,  869,  869,  859,  866,  870,
      870,  871,  871,  872,  872,  873,  873,  874,  874,  875,
      875,  877,  877,  861,  876,  876,  879,  879,  860,    0,
      864,  862,  878,  878,  880,  880,  881,  881,    0,  863,
      865,  882,  882,  883,  883,  884,  884,  885,  885,    0,
      886,  886,  887,  887,  888,  888,    0,  867,    0,  872,
      869,  889,  889,  890,  890,  891,  891,    0,  868,  892,
      892,  893,  893,    0,  871,  885,  887,  879,  874,    0,
      875,    0,  880,  876,  878,  877,  881,    0,  883,  894,
      894,    0,  891,  889,  895,  895,  896,  896,  897,  897,

      898,  898,  899,  899,  882,  900,  900,  884,  886,  901,
      901,  890,  888,  902,  902,  903,  903,  904,  904,  893,
      905,  905,  906,  906,  892,  907,  907,  908,  908,  909,
      909,  910,  910,  894,  911,  911,  913,  913,  914,  914,
      895,  912,  912,    0,  898,    0,  915,  915,  912,  916,
      916,    0,  917,  917,  918,  918,  897,    0,  901,  919,
      919,  902,    0,  900,  920,  920,  921,  921,  906,  923,
      923,  924,  924,  925,  925,  926,  926,    0,  903,  904,
        0,  905,  927,  927,  912,  923,  907,    0,  908,  915,
      928,  928,  929,  929,    0,  914,  917,  930,  930,  913,

      931,  931,  918,    0,  916,  932,  932,    0,  919,  933,
      933,    0,  920,    0,  921,  934,  934,  935,  935,  936,
      936,  925,  937,  937,  938,  938,  927,    0,  924,  939,
      939,  940,  940,    0,  928,  942,  942,  943,  943,  944,
      944,  945,  945,  946,  946,  947,  947,  948,  948,    0,
      931,  949,  949,  950,  950,    0,  951,  951,    0,  952,
      952,  953,  953,    0,  933,  934,  949,    0,  950,  935,
      954,  954,  938,  955,  955,  956,  956,  957,  957,  937,
        0,  940,    0,  944,  958,  958,  959,  959,  960,  960,
      961,  961,    0,  945,  962,  962,  942,  964,  964,  943,

        0,  946,  951,  961,  963,  963,  965,  965,  947,    0,
      948,  952,  966,  966,  967,  967,    0,  963,    0,  965,
      953,    0,  956,  968,  968,  969,  969,  954,  970,  970,
        0,  955,  958,  971,  971,  972,  972,    0,  971,  957,
      974,  974,  962,    0,  964,  973,  973,    0,  959,  971,
      975,  975,  976,  976,    0,  977,  977,  978,  978,  979,
      979,  980,  980,  975,  981,  981,  967,    0,  982,  982,
      966,  984,  984,  983,  983,  985,  985,    0,  970,  986,
      986,  969,  987,  987,  968,  988,  988,  989,  989,  990,
      990,    0,  972,  991,  991,  985,    0,  973,  992,  992,

      993,  993,  974,  977,  994,  994,  990,  995,  995,  980,
      996,  996,  978,    0,  979,    0,  976,  997,  997,  980,
      982,  983,  998,  998,    0,  981,  999,  999,  984, 1001,
     1001, 1000, 1000, 1002, 1002, 1003, 1003, 1004, 1004, 1005,
     1005,    0,  986, 1006, 1006, 1007, 1007,  992, 1000, 1008,
     1008,  994,    0, 1004,  996,  991, 1000, 1009, 1009, 1010,
     1010, 1011, 1011,    0,  995, 1012, 1012,    0,  998, 1013,
     1013, 1014, 1014, 1015, 1015,    0, 1016, 1016, 1017, 1017,
        0, 1002,    0, 1005, 1001,  999, 1019, 1019, 1006, 1020,
     1020, 1018, 1018, 1003, 1021, 1021, 1022, 1022, 1023, 1023,

        0, 1024, 1024, 1007, 1027, 1027, 1009, 1016, 1018, 1010,
     1025, 1025, 1008, 1011, 1026, 1026, 1028, 1028, 1029, 1029,
     1022, 1013, 1024, 1030, 1030, 1031, 1031, 1018,    0, 1014,
     1032, 1032, 1033, 1033, 1017,    0, 1015,    0, 1019, 1034,
     1034, 1035, 1035, 1036, 1036,    0, 1026, 1037, 1037, 1038,
     1038,    0, 1020, 1039, 1039,    0, 1040, 1040, 1025, 1042,
     1042,    0, 1027,    0, 1023, 1041, 1041, 1043, 1043, 1044,
     1044, 1045, 1045, 1046, 1046, 1031,    0, 1032,    0, 1029,
     1028, 1030, 1047, 1047, 1048, 1048, 1049, 1049, 1050, 1050,
     1051, 1051,    0, 1052, 1052, 1033, 1053, 1053,    0, 1054,

     1054, 1045, 1035, 1055, 1055, 1037,    0, 1036, 1056, 1056,
        0, 1039, 1038, 1040, 1054, 1043,    0, 1041, 1057, 1057,
        0, 1042, 1058, 1058, 1059, 1059,    0, 1060, 1060,    0,
     1049, 1062, 1062, 1063, 1063,    0, 1046, 1064, 1064, 1047,
     1065, 1065,    0, 1066, 1066, 1048, 1068, 1068,    0, 1050,
        0, 1051, 1052,    0, 1053, 1067, 1067,    0, 1069, 1069,
     1067, 1055, 1070, 1070, 1071, 1071, 1073, 1073,    0, 1058,
        0, 1073, 1074, 1074, 1057,    0, 1059, 1060, 1075, 1075,
     1076, 1076, 1077, 1077, 1078, 1078, 1079, 1079, 1062, 1065,
     1080, 1080, 1081, 1081, 1082, 1082,    0, 1083, 1083,    0,

     1064, 1069, 1084, 1084,    0, 1065, 1065, 1066, 1086, 1086,
     1087, 1087, 1088, 1088, 1089, 1089, 1090, 1090, 1091, 1091,
     1074,    0, 1075, 1092, 1092, 1071,    0, 1076, 1093, 1093,
     1094, 1094, 1078,    0, 1079,    0, 1081, 1095, 1095, 1096,
     1096, 1097, 1097, 1098, 1098, 1099, 1099,    0, 1092,    0,
     1084, 1080, 1083, 1100, 1100,    0, 1082, 1097, 1101, 1101,
     1094,    0, 1102, 1102, 1103, 1103, 1086, 1102, 1087,    0,
     1089,    0, 1090, 1104, 1104, 1088,    0, 1105, 1105, 1106,
     1106, 1107, 1107, 1096, 1101,    0, 1093,    0, 1095, 1104,
     1105, 1098,    0, 1108, 1108, 1106, 1109, 1109, 1110, 1110,

     1111, 1111, 1112, 1112, 1113, 1113, 1114, 1114, 1099, 1108,
        0, 1100,    0, 1115, 1115, 1116, 1116, 1117, 1117, 1118,
     1118,    0, 1114,    0, 1119, 1119,    0, 1103, 1120, 1120,
     1121, 1121,    0, 1107, 1122, 1122, 1123, 1123, 1124, 1124,
     1125, 1125, 1126, 1126, 1110, 1115, 1112, 1127, 1127,    0,
     1128, 1128, 1113,    0, 1109, 1121, 1129, 1129, 1130, 1130,
     1131, 1131, 1111, 1133, 1133,    0, 1132, 1132, 1134, 1134,
        0, 1129, 1135, 1135, 1117, 1136, 1136,    0, 1116, 1119,
     1123, 1132,    0, 1120, 1124, 1137, 1137, 1138, 1138, 1122,
     1126, 1139, 1139, 1140, 1140, 1125, 1128, 1141, 1141, 1142,

     1142, 1143, 1143, 1144, 1144,    0, 1145, 1145, 1146, 1146,
     1130, 1131, 1127, 1147, 1147, 1148, 1148, 1149, 1149,    0,
     1150, 1150, 1151, 1151, 1135,    0, 1133, 1140, 1152, 1152,
     1154, 1154, 1134, 1153, 1153, 1155, 1155,    0, 1136, 1156,
     1156, 1141,    0, 1157, 1157, 1158, 1158,    0, 1137,    0,
     1138, 1150, 1159, 1159, 1139, 1160, 1160, 1142, 1145, 1157,
        0, 1147, 1161, 1161,    0, 1146,    0, 1144,    0, 1159,
     1151,    0, 1148, 1162, 1162,    0, 1152, 1157, 1149, 1163,
     1163, 1153, 1164, 1164,    0, 1156,    0, 1155, 1165, 1165,
     1166, 1166, 1154, 1167, 1167, 1169, 1169, 1168, 1168, 1170,

     1170, 1171, 1171, 1160, 1172, 1172, 1173, 1173, 1175, 1175,
     1158,    0, 1165,    0, 1161, 1174, 1174, 1176, 1176, 1177,
     1177, 1178, 1178, 1180, 1180, 1162, 1179, 1179, 1171,    0,
     1172, 1179, 1181, 1181, 1173, 1182, 1182,    0, 1164, 1183,
     1183, 1167, 1166, 1168, 1184, 1184,    0, 1177, 1185, 1185,
     1186, 1186,    0, 1169, 1188, 1188, 1170, 1187, 1187,    0,
     1189, 1189,    0, 1174, 1183, 1189, 1190, 1190, 1191, 1191,
     1175, 1192, 1192, 1178, 1193, 1193, 1194, 1194,    0, 1176,
     1180,    0, 1195, 1195, 1197, 1197, 1192, 1196, 1196, 1199,
     1199,    0, 1182, 1200, 1200,    0, 1184, 1201, 1201, 1202,

     1202, 1203, 1203, 1204, 1204, 1205, 1205, 1206, 1206, 1209,
     1209, 1185, 1186,    0, 1187, 1188, 1207, 1207, 1210, 1210,
        0, 1205, 1211, 1211, 1212, 1212, 1194, 1213, 1213, 1191,
     1195, 1214, 1214, 1196, 1215, 1215,    0, 1199, 1216, 1216,
        0, 1217, 1217, 1218, 1218,    0, 1197, 1219, 1219, 1201,
        0, 1204,    0, 1203, 1220, 1220,    0, 1221, 1221, 1206,
     1222, 1222, 1202, 1223, 1223, 1225, 1225,    0, 1206, 1224,
     1224, 1226, 1226, 1227, 1227, 1207, 1221,    0, 1215, 1211,
     1228, 1228, 1229, 1229, 1210, 1230, 1230, 1231, 1231, 1232,
     1232, 1233, 1233, 1234, 1234, 1216, 1217, 1235, 1235, 1224,

     1236, 1236, 1238, 1238,    0, 1218,    0, 1223, 1222, 1225,
     1237, 1237, 1239, 1239,    0, 1237, 1220, 1240, 1240, 1241,
     1241, 1227, 1242, 1242, 1241, 1235, 1243, 1243, 1226, 1230,
     1244, 1244, 1228,    0, 1231,    0, 1245, 1245,    0, 1229,
     1232,    0, 1246, 1246, 1247, 1247, 1244, 1248, 1248, 1238,
        0, 1234, 1249, 1249, 1250, 1250,    0, 1233, 1246, 1251,
     1251, 1244, 1252, 1252, 1253, 1253, 1254, 1254,    0, 1249,
     1255, 1255, 1256, 1256, 1240, 1250, 1247, 1257, 1257,    0,
     1243, 1258, 1258, 1249,    0, 1242, 1245,    0, 1259, 1259,
     1260, 1260, 1261, 1261,    0, 1262, 1262, 1263, 1263, 1264,

     1264, 1265, 1265, 1266, 1266, 1267, 1267,    0, 1253, 1268,
     1268,    0, 1263, 1269, 1269, 1271, 1271, 1252, 1254, 1270,
     1270,    0, 1251, 1272, 1272, 1273, 1273,    0, 1274, 1274,
        0, 1264,    0, 1255,    0, 1256, 1259, 1275, 1275, 1276,
     1276, 1257,    0, 1258,    0, 1270, 1277, 1277, 1278, 1278,
     1279, 1279,    0, 1260, 1280, 1280, 1261, 1262, 1281, 1281,
     1282, 1282, 1267, 1265,    0, 1266,    0, 1272, 1283, 1283,
     1284, 1284, 1285, 1285, 1286, 1286, 1282, 1271, 1274, 1288,
     1288,    0, 1287, 1287,    0, 1289, 1289,    0, 1273, 1290,
     1290, 1291, 1291, 1292, 1292, 1293, 1293,    0, 1275, 1295,

     1295, 1276, 1280, 1294, 1294, 1296, 1296, 1297, 1297, 1278,
     1281,    0, 1279, 1298, 1298, 1299, 1299, 1300, 1300, 1301,
     1301, 1303, 1303, 1283, 1285, 1284, 1287, 1302, 1302, 1304,
     1304, 1288, 1286, 1289, 1305, 1305,    0, 1290, 1306, 1306,
     1307, 1307,    0, 1295,    0, 1308, 1308,    0, 1292, 1309,
     1309, 1311, 1311, 1293, 1310, 1310, 1291, 1296, 1312, 1312,
     1294,    0, 1298, 1297,    0, 1303,    0, 1301, 1313, 1313,
     1306, 1314, 1314, 1315, 1315,    0, 1302,    0, 1299, 1316,
     1316, 1317, 1317, 1300, 1302, 1318, 1318, 1304, 1307, 1308,
     1318, 1319, 1319, 1320, 1320,    0, 1305, 1321, 1321, 1311,

     1322, 1322, 1323, 1323, 1324, 1324, 1309, 1319,    0, 1310,
     1325, 1325, 1327, 1327, 1328, 1328, 1329, 1329, 1331, 1331,
     1312, 1330, 1330, 1332, 1332,    0, 1333, 1333, 1334, 1334,
        0, 1316, 1335, 1335, 1314, 1336, 1336,    0, 1317, 1337,
     1337, 1338, 1338,    0, 1337, 1339, 1339, 1340, 1340, 1320,
        0, 1341, 1341, 1342, 1342,    0, 1324,    0, 1343, 1343,
        0, 1322,    0, 1323, 1344, 1344, 1345, 1345,    0, 1328,
     1329,    0, 1334, 1330, 1346, 1346, 1347, 1347, 1327, 1333,
     1348, 1348, 1344, 1333, 1349, 1349, 1354, 1354, 1338, 1343,
        0, 1340, 1350, 1350, 1351, 1351, 1352, 1352, 1353, 1353,

     1351,    0, 1339, 1341, 1355, 1355, 1356, 1356, 1357, 1357,
     1358, 1358, 1353, 1359, 1359, 1342, 1353, 1360, 1360, 1361,
     1361,    0, 1346, 1362, 1362, 1363, 1363,    0, 1349, 1345,
     1364, 1364, 1365, 1365, 1366, 1366,    0, 1347, 1367, 1367,
     1368, 1368, 1360, 1348, 1369, 1369, 1370, 1370, 1365, 1350,
     1371, 1371, 1355, 1352, 1372, 1372, 1373, 1373, 1356,    0,
     1359,    0, 1364, 1374, 1374,    0, 1357, 1375, 1375, 1376,
     1376, 1377, 1377, 1363, 1362, 1378, 1378, 1379, 1379, 1380,
     1380,    0, 1366, 1381, 1381,    0, 1367, 1382, 1382, 1383,
     1383, 1384, 1384, 1370, 1376, 1385, 1385, 1386, 1386, 1387,

     1387, 1388, 1388, 1389, 1389,    0, 1372, 1371, 1390, 1390,
        0, 1369, 1391, 1391, 1392, 1392, 1393, 1393, 1394, 1394,
     1395, 1395, 1385,    0, 1390, 1374, 1375, 1396, 1396, 1377,
        0, 1378, 1397, 1397,    0, 1381, 1398, 1398, 1399, 1399,
        0, 1380, 1400, 1400,    0, 1388, 1394, 1389, 1382, 1384,
        0, 1387, 1383, 1401, 1401, 1402, 1402, 1403, 1403, 1404,
     1404,    0, 1405, 1405, 1406, 1406,    0, 1391, 1407, 1407,
     1408, 1408,    0, 1409, 1409, 1392, 1410, 1410, 1411, 1411,
     1412, 1412,    0, 1395, 1413, 1413, 1414, 1414, 1415, 1415,
     1416, 1416, 1398,    0, 1400, 1417, 1417, 1418, 1418,    0,

     1401,    0, 1402, 1419, 1419, 1420, 1420, 1399, 1421, 1421,
     1422, 1422, 1423, 1423, 1407,    0, 1404, 1405, 1424, 1424,
     1403, 1409, 1425, 1425,    0, 1418, 1406, 1408, 1412, 1426,
     1426, 1427, 1427,    0, 1413, 1411, 1415,    0, 1410, 1416,
     1428, 1428,    0, 1414, 1429, 1429, 1430, 1430, 1431, 1431,
     1432, 1432, 1433, 1433, 1420,    0, 1426, 1435, 1435, 1417,
     1419, 1434, 1434, 1436, 1436,    0, 1437, 1437, 1438, 1438,
     1425, 1439, 1439, 1435, 1423, 1422, 1440, 1440, 1441, 1441,
     1424, 1442, 1442, 1443, 1443, 1444, 1444, 1445, 1445, 1446,
     1446, 1447, 1447,    0, 1427,    0, 1429, 1448, 1448, 1449,

     1449, 1450, 1450, 1428, 1449,    0, 1431,    0, 1430, 1433,
     1437,    0, 1438, 1434, 1432, 1451, 1451, 1452, 1452, 1453,
     1453, 1439, 1454, 1454, 1455, 1455, 1456, 1456, 1457, 1457,
     1458, 1458, 1459, 1459, 1460, 1460,    0, 1461, 1461, 1440,
        0, 1445, 1462, 1462, 1442, 1463, 1463, 1464, 1464, 1450,
     1465, 1465,    0, 1447, 1446, 1466, 1466,    0, 1462, 1467,
     1467, 1468, 1468, 1469, 1469, 1470, 1470,    0, 1469, 1471,
     1471,    0, 1457,    0, 1456, 1465, 1458,    0, 1451, 1455,
        0, 1460, 1472, 1472, 1473, 1473, 1452, 1461, 1471,    0,
     1459,    0, 1474, 1474, 1475, 1475,    0, 1463, 1476, 1476,

     1477, 1477, 1466, 1478, 1478, 1464, 1479, 1479, 1480, 1480,
     1481, 1481, 1482, 1482, 1483, 1483, 1484, 1484, 1485, 1485,
     1478, 1467,    0, 1468, 1474, 1486, 1486, 1487, 1487, 1470,
     1488, 1488, 1489, 1489,    0, 1490, 1490, 1491, 1491, 1492,
     1492, 1493, 1493, 1472, 1494, 1494, 1477, 1495, 1495, 1496,
     1496, 1497, 1497, 1498, 1498, 1499, 1499, 1500, 1500, 1501,
     1501, 1476, 1483,    0, 1481,    0, 1485, 1491,    0, 1479,
        0, 1480, 1502, 1502, 1482, 1503, 1503, 1484, 1504, 1504,
     1505, 1505, 1506, 1506, 1507, 1507, 1508, 1508, 1509, 1509,
     1489,    0, 1487, 1490,    0, 1488,    0, 1492,    0, 1495,

     1494, 1500,    0, 1497, 1493, 1510, 1510, 1501, 1511, 1511,
        0, 1498, 1506, 1512, 1512,    0, 1502, 1513, 1513, 1514,
     1514, 1515, 1515, 1516, 1516, 1517, 1517,    0, 1507, 1518,
     1518,    0, 1505, 1513, 1519, 1519, 1520, 1520, 1521, 1521,
     1522, 1522, 1523, 1523,    0, 1508, 1524, 1524,    0, 1514,
        0, 1509, 1525, 1525, 1526, 1526, 1527, 1527, 1528, 1528,
     1523, 1529, 1529, 1530, 1530, 1511, 1531, 1531, 1510, 1515,
        0, 1516, 1532, 1532,    0, 1512,    0, 1533, 1533,    0,
     1520, 1534, 1534, 1535, 1535, 1536, 1536, 1537, 1537, 1538,
     1538, 1539, 1539, 1540, 1540, 1519, 1541, 1541, 1542, 1542,

        0, 1521, 1543, 1543,    0, 1527, 1544, 1544,    0, 1528,
     1545, 1545,    0, 1527, 1546, 1546, 1547, 1547, 1548, 1548,
     1530, 1526,    0, 1529, 1533, 1549, 1549, 1550, 1550, 1552,
     1552, 1534,    0, 1532, 1551, 1551, 1538, 1553, 1553,    0,
     1535, 1554, 1554,    0, 1541, 1555, 1555, 1556, 1556,    0,
     1537,    0, 1539,    0, 1557, 1557, 1558, 1558, 1559, 1559,
     1555, 1540, 1560, 1560, 1561, 1561, 1548,    0, 1547, 1549,
     1562, 1562, 1563, 1563, 1559,    0, 1546, 1564, 1564,    0,
     1552, 1551, 1565, 1565, 1566, 1566, 1567, 1567, 1568, 1568,
     1569, 1569,    0, 1560, 1570, 1570, 1571, 1571, 1572, 1572,

        0, 1553, 1557, 1573, 1573, 1574, 1574, 1575, 1575, 1576,
     1576,    0, 1561, 1565, 1577, 1577,    0, 1558, 1578, 1578,
     1579, 1579, 1562, 1580, 1580, 1581, 1581, 1571, 1582, 1582,
     1583, 1583, 1564, 1584, 1584,    0, 1568, 1585, 1585, 1586,
     1586, 1587, 1587, 1588, 1588, 1589, 1589, 1566, 1590, 1590,
     1591, 1591, 1592, 1592, 1593, 1593,    0, 1594, 1594, 1595,
     1595, 1570, 1572, 1574, 1579, 1596, 1596, 1597, 1597, 1575,
     1578, 1576, 1598, 1598, 1599, 1599, 1600, 1600, 1601, 1601,
        0, 1584,    0, 1596,    0, 1585, 1581, 1583, 1602, 1602,
     1603, 1603, 1604, 1604,    0, 1588, 1605, 1605, 1593,    0,

     1586, 1606, 1606, 1607, 1607, 1591, 1608, 1608, 1587, 1609,
     1609, 1610, 1610,    0, 1595, 1611, 1611, 1592, 1594, 1612,
     1612,    0, 1601, 1613, 1613, 1614, 1614,    0, 1600, 1597,
     1615, 1615, 1599, 1616, 1616, 1598, 1611, 1617, 1617,    0,
     1604, 1618, 1618, 1619, 1619, 1614, 1620, 1620, 1621, 1621,
     1602,    0, 1603, 1622, 1622, 1607,    0, 1605, 1609, 1623,
     1623, 1624, 1624, 1625, 1625, 1626, 1626, 1627, 1627, 1608,
        0, 1613, 1628, 1628, 1629, 1629, 1630, 1630, 1615, 1631,
     1631, 1632, 1632,    0, 1633, 1633,    0, 1617, 1635, 1635,
     1620, 1634, 1634, 1636, 1636, 1637, 1637, 1638, 1638, 1639,

     1639, 1640, 1640, 1641, 1641, 1642, 1642, 1643, 1643, 1644,
     1644, 1645, 1645,    0, 1622, 1646, 1646, 1647, 1647, 1624,
        0, 1623, 1648, 1648, 1628, 1649, 1649,    0, 1626, 1650,
     1650, 1632,    0, 1646, 1631, 1629, 1633, 1651, 1651,    0,
     1630, 1652, 1652, 1634, 1653, 1653,    0, 1640,    0, 1641,
     1654, 1654, 1642,    0, 1643,    0, 1636,    0, 1637, 1655,
     1655, 1644, 1645, 1656, 1656, 1657, 1657, 1658, 1658, 1659,
     1659,    0, 1649, 1660, 1660, 1661, 1661, 1662, 1662,    0,
     1647, 1663, 1663, 1664, 1664, 1648, 1665, 1665, 1666, 1666,
     1667, 1667, 1668, 1668, 1669, 1669, 1671, 1671,    0, 1651,

     1670, 1670, 1672, 1672, 1673, 1673, 1674, 1674, 1675, 1675,
     1676, 1676,    0, 1657, 1677, 1677, 1655, 1678, 1678, 1679,
     1679, 1656, 1680, 1680, 1681, 1681,    0, 1661, 1682, 1682,
     1658, 1683, 1683, 1684, 1684, 1666, 1685, 1685, 1686, 1686,
     1664, 1669,    0, 1663, 1670, 1687, 1687,    0, 1665,    0,
     1687, 1671, 1685, 1688, 1688,    0, 1683, 1689, 1689, 1690,
     1690,    0, 1674, 1691, 1691,    0, 1679, 1692, 1692,    0,
     1675, 1693, 1693, 1694, 1694,    0, 1677, 1695, 1695, 1696,
     1696, 1697, 1697, 1686, 1680, 1682, 1698, 1698, 1699, 1699,
     1684, 1700, 1700,    0, 1695,    0, 1701, 1701, 1702, 1702,

        0, 1688, 1703, 1703, 1704, 1704,    0, 1687, 1705, 1705,
     1706, 1706, 1707, 1707,    0, 1691, 1690, 1708, 1708, 1689,
     1709, 1709, 1710, 1710, 1711, 1711,    0, 1696, 1697, 1712,
     1712, 1713, 1713,    0, 1693, 1714, 1714, 1715, 1715, 1716,
     1716, 1717, 1717, 1718, 1718, 1719, 1719, 1720, 1720, 1699,
     1713, 1721, 1721, 1722, 1722, 1723, 1723,    0, 1705, 1700,
     1701, 1724, 1724,    0, 1707, 1708,    0, 1704, 1725, 1725,
     1726, 1726, 1727, 1727, 1728, 1728, 1729, 1729, 1730, 1730,
        0, 1712,    0, 1716,    0, 1715,    0, 1711, 1731, 1731,
        0, 1714, 1732, 1732, 1733, 1733, 1734, 1734, 1735, 1735,

        0, 1722, 1737, 1737,    0, 1723, 1736, 1736, 1738, 1738,
     1739, 1739,    0, 1724, 1740, 1740, 1725, 1741, 1741, 1742,
     1742, 1743, 1743, 1728, 1730,    0, 1743, 1744, 1744, 1745,
     1745, 1746, 1746,    0, 1727, 1747, 1747, 1748, 1748, 1729,
     1749, 1749, 1751, 1751, 1750, 1750, 1731, 1752, 1752,    0,
     1732,    0, 1753, 1753, 1754, 1754, 1755, 1755, 1734,    0,
     1735, 1733, 1756, 1756, 1736, 1757, 1757, 1758, 1758, 1738,
     1759, 1759, 1739,    0, 1742, 1741, 1750, 1760, 1760, 1744,
     1761, 1761, 1762, 1762, 1763, 1763,    0, 1748, 1764, 1764,
     1745, 1765, 1765, 1766, 1766, 1767, 1767, 1768, 1768, 1769,

     1769,    0, 1749,    0, 1751, 1770, 1770, 1771, 1771, 1752,
     1753,    0, 1754, 1772, 1772,    0, 1759, 1773, 1773, 1774,
     1774,    0, 1757,    0, 1775, 1775, 1776, 1776, 1758, 1777,
     1777,    0, 1763, 1778, 1778, 1779, 1779,    0, 1762,    0,
     1766, 1780, 1780, 1781, 1781, 1782, 1782, 1783, 1783, 1784,
     1784, 1769,    0, 1770, 1785, 1785,    0, 1772, 1771, 1780,
     1786, 1786, 1787, 1787, 1788, 1788, 1789, 1789, 1790, 1790,
     1791, 1791, 1792, 1792, 1793, 1793, 1794, 1794, 1795, 1795,
     1773, 1775, 1796, 1796, 1797, 1797,    0, 1776, 1798, 1798,
     1799, 1799, 1800, 1800, 1783,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1790, 1786, 1792,    0, 1794,    0, 1795,    0, 1789,    0,
        0,    0,    0,    0,    0, 1798,    0, 1796,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1797, 1802, 1802,
     1802, 1802, 1802, 1803, 1803, 1803, 1803, 1803, 1804, 1804,
     1804, 1804, 1804, 1805, 1805, 1805, 1806,    0, 1806, 1806,
     1806, 1807, 1807, 1807, 1807, 1807, 1809,    0, 1809, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,

     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
#line 2 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"

// use NOMINMAX to avoid conflicts between windows.h min,max and std::min std::max ...
#define NOMINMAX

#include "IdentifierInfo.h"
//#include "Variable.hpp"
#include "imageextent.h"
#include "AmiInstructionBlock.h"
#include "driver.h"

#include "scanner.h"

extern yyip::Driver GB_driver;

/* import the parser's token type into a local typedef */
typedef yyip::Parser::token token;
typedef yyip::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H


#include <boost/format.hpp>
#include <boost/shared_ptr.hpp>

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <locale.h>
#include "messages.h"
#include "fonctions.h"

#include "IdentifierInfo.h"
#include "Variable.hpp"
#include "imageextent.h"
#include "AmiInstructionBlock.h"

#include "improcess_bison.tab.hpp"
#include "VarContexts.hpp"
#include "ami_function.h"
#include "VarArray.h"
#include <string>

#define LEX_DEBUG(expr) if (GB_debug) {expr}


//int          yyiplineno = 0;
//std::string  GB_current_file;

int yycharno = 0;
bool LexError = 0;

//extern  void yyiperror(const char*);
extern  VarContexts  Vars;

yyip::Parser::token::yytokentype checkvar(
      yyip::Parser::semantic_type* yylval,
      const char* varname, int context=-1);

BasicVariable::ptr IsObject(  const char* varname, int context=-1);

using namespace std;


string* cpp_string;
//char string_buf[256];
//char *string_buf_ptr;

//#define MAXSIZE_BLOCK 10000
//char block_buf[MAXSIZE_BLOCK];
//char *block_buf_ptr;


AmiInstructionBlock* ami_block;

int  block_level = 0;
int comment_caller;



extern int       GB_argc;
extern wxChar**  GB_argv;
extern int       GB_num_arg_parsed;


/* enable c++ scanner class generation */



/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 110 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 2442 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/GeneratedFlexBison/improcess_flex.cpp"

#define INITIAL 0
#define str 1
#define block 2
#define comment 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 113 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


#line 2554 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/GeneratedFlexBison/improcess_flex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1802 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5980 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 121 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::RIGHT_ASSIGN);   /*{>>=,RIGHT_ASSIGN}*/
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 122 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::LEFT_ASSIGN);    /*{<<=,LEFT_ASSIGN}*/
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 123 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ADD_ASSIGN);     /*{+=,ADD_ASSIGN}*/
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 124 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SUB_ASSIGN);     /*{-=,SUB_ASSIGN}*/
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 125 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::MUL_ASSIGN);     /*{*=,MUL_ASSIGN}*/
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 126 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::DIV_ASSIGN); } /*{/=,DIV_ASSIGN}*/
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 127 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::MOD_ASSIGN); } /*{%=,MOD_ASSIGN}*/
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 128 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::AND_ASSIGN); } /*{&=,AND_ASSIGN}*/
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 129 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::XOR_ASSIGN); } /*{ ^=,XOR_ASSIGN}*/
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 130 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::OR_ASSIGN); } /*{|=,OR_ASSIGN}*/
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 131 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::RIGHT_OP); } /*{>>,RIGHT_OP}*/
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 132 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::INC_OP); } /*{++,INC_OP}*/
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 133 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::DEC_OP); } /*{--,DEC_OP}*/
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 134 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::PTR_OP); } /*{->,PTR_OP}*/
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 135 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::AND_OP); } /*{&&,AND_OP}*/
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::OR_OP); } /*{||,OR_OP}*/
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 137 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::LE_OP); } /*{<=,LE_OP}*/
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 138 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::GE_OP); } /*{>=,GE_OP}*/
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 139 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::EQ_OP); } /*{==,EQ_OP}*/
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 140 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{  return(token::NE_OP); } /*{!=,NE_OP}*/
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 143 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TRANSPOSE_OP); /*{',TRANSPOSE_OP}*/
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 144 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_EXP);  /*{^,T_EXP}*/
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 145 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GT);   /*{>,T_GT}*/
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 146 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_LT);   /*{<,T_LT}*/
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 147 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MULT); /*{*,T_MULT}*/
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 148 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::POINTWISE_MULT);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 149 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DIV);  /*{/,T_DIV}*/
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 150 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_NOT); /*{!,T_NOT}*/
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 151 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ADD); /*{+,T_ADD}*/
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 152 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SUB); /*{-,T_SUB}*/
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 153 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MOD); /*{%,T_MOD}*/
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 155 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ASSIGN_OP); /*{=,ASSIGN_OP}*/
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 156 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OP_PAR); /*{(,T_OP_PAR}*/
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 157 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CL_PAR); /*{),T_CL_PAR}*/
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 158 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OP_BR);  /*{[,T_OP_BR}*/
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 159 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CL_BR);  /*{],T_CL_BR}*/
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 160 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AND);    /*{&,T_AND}*/
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 161 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OR);     /*{|,T_OR}*/
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 163 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_POINT); /*{.,T_POINT}*/
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 164 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_COMMA); /*{,,T_COMMA}*/
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_QUEST);  /*{?,T_QUEST}*/
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 166 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_COLON); /*{:,T_COLON}*/
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SEMICOLON);  /*{;,T_SEMICOLON}*/
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 171 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetComponent); /*{SetComponent,T_SetComponent}*/
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 172 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetExtent); /*{GetExtent,T_GetExtent}*/
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 174 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_LineNumber); /*{LineNumber,T_LineNumber}*/
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 176 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SET);               /*{set,SET}*/
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 177 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SETPOS);            /*{setpos,SETPOS}*/
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 178 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_lininterp);      /*{lininterp,T_lininterp}*/
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 179 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_initvalue);       /*{initvalue,T_initvalue}*/
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 181 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_itk); /*{itk,T_itk}*/
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 182 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CannyEdgeDetector); /*{CannyEdgeDetector,T_CannyEdgeDetector}*/
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 184 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetName); /*{GetName,T_GetName}*/
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 185 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetObjectName); /*{GetObjectName,T_GetObjectName}*/
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 186 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetName); /*{SetName,T_SetName}*/
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 189 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CHAR); /*{CHAR,T_CHAR}*/
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 190 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_UCHAR); /*{UCHAR,T_UCHAR}*/
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 191 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SHORT); /*{SHORT,T_SHORT}*/
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 192 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_USHORT); /*{USHORT,T_USHORT}*/
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 193 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_INT); /*{INT,T_INT}*/
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 194 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_UINT); /*{UINT,T_UINT}*/
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 195 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_FLOAT); /*{FLOAT,T_FLOAT}*/
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 196 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_LONG); /*{LONG,T_LONG}*/ /// New (added: 27/05/2010)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 197 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DOUBLE); /*{DOUBLE,T_DOUBLE}*/
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 198 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_RGB); /*{RGB,T_RGB}*/
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 199 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_FLOAT_VECTOR); /*{FLOAT_VECTOR,T_FLOAT_VECTOR}*/
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 200 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetFormat); /*{GetFormat,T_GetFormat}*/
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 201 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Comments); /*{Comments,T_Comments}*/
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 203 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_IMAGE); /*{IMAGE,T_IMAGE}*/
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 204 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_NUM); /*{NUM,T_NUM}*/
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 205 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_STRING); /*{STRING,T_STRING}*/
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 206 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_TRANSFORM); /*{TRANSFORM,T_TRANSFORM}*/
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 207 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OBJECT); /*{OBJECT,T_OBJECT}*/
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 209 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_atof); /*{atof,T_atof}*/
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_global);     /*{global,T_global}*/
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_global_new); /*{global_new,T_global_new}*/
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_local_new); /*{local_new,T_local_new}*/
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 214 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_local);      /*{local,T_local}*/
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 215 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_wait);       /*{wait,T_wait}*/
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 216 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_schedule);   /*{schedule,T_schedule}*/
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 218 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse constants ====================
//
 return(token::CONST_PI);
} /*{Pi,CONST_P}*/
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 226 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse Math functions ====================
//
return(token::SIN);
} /*{sin,SIN}*/
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 232 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::COS); /*{cos,COS}*/
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 233 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TAN); /*{tan,TAN}*/
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 234 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ASIN); /*{asin,ASIN}*/
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 235 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ACOS); /*{acos,ACOS}*/
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 236 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ATAN); /*{atan,ATAN}*/
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 237 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::EXP); /*{exp,EXP}*/
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 238 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::LN); /*{ln,LN}*/
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 239 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::LOG); /*{log,LOG}*/
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 240 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::COSH); /*{cosh,COSH}*/
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 241 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SINH); /*{sinh,SINH}*/
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 242 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SQRT); /*{sqrt,SQRT}*/
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 243 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ABS); /*{abs,ABS}*/
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 244 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::NORM); /*{norm,NORM}*/
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 245 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ROUND); /*{round,ROUND}*/
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 246 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::FLOOR); /*{floor,FLOOR}*/
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 248 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PROC);   /*{proc,T_PROC}*/
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 249 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Class);  /*{Class,T_Class}*/
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 250 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_public);  /*{public,T_public}*/
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 252 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse Loops and Conditions ===============
//
return(token::FOR);
} /*{for,FOR}*/
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 258 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_IN); /*{in,T_IN}*/
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 259 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TO); /*{to,TO}*/
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 260 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::STEP); /*{step,STEP}*/
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 261 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ENDFOR); /*{endfor,ENDFOR}*/
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 263 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_REPEAT); /*{repeat,T_REPEAT}*/
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 264 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_WHILE); /*{while,T_WHILE}*/
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 265 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_UNTIL); /*{until,T_UNTIL}*/
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 266 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_BREAK); /*{break,T_BREAK}*/
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 268 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::IF); /*{if,IF}*/
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 269 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::ELSE); /*{else,ELSE}*/
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 271 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse Commands ===============
//
return(token::ASHELL);
} /*{sh,ASHELL}*/
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 278 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetDebugOn); /*{SetDebugOn,T_SetDebugOn}*/
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 279 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetDebugOff); /*{SetDebugOff,T_SetDebugOff}*/
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 280 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_TraceScanning); /*{TraceScanning,T_TraceScanning}*/
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 281 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_TraceParsing); /*{TraceParsing,T_TraceParsing}*/
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 282 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetVerboseOn); /*{SetVerboseOn,T_SetVerboseOn}*/
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 283 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetVerboseOff); /*{SetVerboseOff,T_SetVerboseOff}*/
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 284 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_NoMessageDialog); /*{NoMessageDialog,T_NoMessageDialog}*/
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 286 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GetScriptsDir); /*{GetScriptDir,T_GetScriptDir}*/
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 287 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetProgress); /*{SetProgress,T_SetProgress}*/
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 288 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetStatusText); /*{SetStatusText,T_SetStatusText}*/
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 289 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::QUIT); /*{Quit,QUIT}*/
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 290 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::QUIT);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 292 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Image); /*{Image,T_Image}*/
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 293 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_BrowseImage); /*{BrowseImage,T_BrowseImage}*/
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 295 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ReadRawImages); /*{ReadRawImages,T_ReadRawImages}*/
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 297 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SHOW); /*{Show,SHOW}*/
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 298 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SHOW);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 300 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_HIDE); /*{Hide,T_HIDE}*/
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 301 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_HIDE);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 302 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::HELP); /*{Help,HELP}*/
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 303 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::HELP);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 304 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::LS); /*{ls,LS}*/
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 305 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::PRINT); /*{print,PRINT}*/
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 306 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::PRINTN); /*{printn,PRINTN}*/
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 307 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_boost_format); /*{boost_format,T_boost_format}*/
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 308 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SPRINT); /*{sprint,T_SPRINT}*/
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 309 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::VARIABLES); /*{vars,VARIABLES}*/
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 310 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::FUNCTION); /*{func,FUNCTION}*/
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 311 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_eval); /*{eval,T_eval}*/
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 313 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_tx); /*{tx,T_tx}*/
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 314 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ty); /*{ty,T_ty}*/
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 315 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_tz); /*{tz,T_tz}*/
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 316 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_trx); /*{trx,T_trx}*/
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 317 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_try); /*{try,T_try}*/
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 318 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_trz); /*{trz,T_trz}*/
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 319 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vx); /*{vx,T_vx}*/
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 320 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vy); /*{vy,T_vy}*/
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 321 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vz); /*{vz,T_vz}*/
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 322 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vdim); /*{vdim,T_vdim}*/
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 323 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_inc); /*{inc,T_inc}*/
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 324 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_val); /*{val,T_val}*/
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 326 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::FILTER); /*{filter,FILTER}*/
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 327 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkMedian3D); /*{vtkMedian3D,T_vtkMedian3D}*/
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 328 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::NormGrad); /*{normgrad,NormGrad}*/
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 329 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DiscNormGrad); /*{discnormgrad,T_DiscNormGrad}*/
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 330 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_gradient); /*{gradient,T_gradient}*/
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 331 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SecDerGrad); /*{secdergrad,SecDerGrad}*/
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 332 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SecDerGrad2); /*{secdergrad2,SecDerGrad2}*/
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 333 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DiscSecDerGrad); /*{discsecdergrad,T_DiscSecDerGrad}*/
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 334 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::OpImage); /*{OpImage,OpImage}*/
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 335 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::SubImage); /*{subimage,SubImage}*/
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 336 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AutoCrop); /*{autocrop,T_AutoCrop}*/
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 337 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::PutImage); /*{putimage,PutImage}*/
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 338 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_rot2D); /*{rot2D,T_rot2D}*/
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 340 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_mean); /*{mean,T_mean}*/
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 341 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_localmean); /*{localmean,T_localmean}*/
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 342 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_localmean2); /*{localmean2,T_localmean2}*/
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 343 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_localSD); /*{localSD,T_localSD}*/
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 344 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_localSD2); /*{localSD2,T_localSD2}*/
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 345 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_struct_tensor); /*{StructTensor,T_struct_tensor}*/
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 346 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_StructTensorH); /*{StructTensorH,T_StructTensorH}*/
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 347 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_HessianMatrix); /*{HessianMatrix,T_HessianMatrix}*/
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 348 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_HessianEVal); /*{HessianEVal,T_HessianEVal}*/
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 349 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Derivatives); /*{Derivatives,T_Derivatives}*/
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 350 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_curvatures); /*{Curvatures,T_curvatures}*/
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 351 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DiscMeanCurvature); /*{DiscMeanCurvature,T_DiscMeanCurvature}*/
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 352 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Laplacian); /*{Laplacian,T_Laplacian}*/
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 353 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_setvoxelsize); /*{setvoxelsize,T_setvoxelsize}*/
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 354 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_settranslation); /*{settranslation,T_settranslation}*/
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 355 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_setendianness);  /*{setendianness,T_setendianness}*/
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 357 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_threscross); /*{threscross,T_threscross}*/
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 358 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_IsocontourPoints); /*{IsocontourPoints,T_IsocontourPoints}*/
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 359 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_IsosurfDist); /*{IsosurfDist,T_IsosurfDist}*/
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 360 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkIsoContourDist); /*{vtkIsoContourDist,T_vtkIsoContourDist}*/
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 364 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Convolve); /*{Convolve,T_Convolve}*/
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 365 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ConvolveMask); /*{ConvolveMask,T_ConvolveMask}*/
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 366 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Pad); /*{Pad,T_Pad}*/
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 367 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Eigen2D); /*{Eigen2D,T_Eigen2D}*/
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 368 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Eigen3D); /*{Eigen3D,T_Eigen3D}*/
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 369 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ChamferDT); /*{ChamferDT,T_ChamferDT}*/
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 370 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Chamfer2DT); /*{Chamfer2DT,T_Chamfer2DT}*/
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 371 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_BorgeforsDT); /*{BorgeforsDT,T_BorgeforsDT}*/
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 372 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_BorgeforsSDT); /*{BorgeforsSDT,T_BorgeforsSDT}*/
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 373 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkSignedBorgefors); /*{vtkSignedBorgefors,T_vtkSignedBorgefors}*/
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 374 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkSignedFMDist); /*{vtkSignedFMDist,T_vtkSignedFMDist}*/
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 375 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PropagationDist); /*{PropagationDist,T_PropagationDist}*/
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 376 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PropagationDist2); /*{PropagationDist2,T_PropagationDist2}*/
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 377 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PropDanielsson); /*{PropDanielsson,T_PropDanielsson}*/
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 378 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkPropDanielsson); /*{vtkPropDanielsson,T_vtkPropDanielsson}*/
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 379 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkPropDaniel2); /*{vtkPropDaniel2,T_vtkPropDaniel2}*/
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 380 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CC); /*{CC,T_CC}*/
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 382 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ConvexHull); /*{ConvexHull,T_ConvexHull}*/
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 384 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MeanHalfSize); /*{MeanHalfSize,T_MeanHalfSize}*/
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 385 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Resize); /*{Resize,T_Resize}*/
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 386 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ReSlice); /*{ReSlice,T_ReSlice}*/
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 387 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Flip);  /*{Flip,T_Flip}*/// flips image in one of the main axis direction
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 390 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_RestartTime); /*{RestartTime,T_RestartTime}*/
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 391 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_InitTime); /*{InitTime,T_InitTime}*/
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 392 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_TimeSpent); /*{TimeSpent,T_TimeSpent}*/
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 393 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_EndTime); /*{EndTime,T_EndTime}*/
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 395 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_NULL); /*{NULL,T_NULL}*/
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 398 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ProcessXEvents); /*{ProcessXEvents,T_ProcessXEvents}*/
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 399 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ProcessEvents); /*{ProcessEvents,T_ProcessEvents}*/
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 401 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_COUNT); /*{count,T_COUNT}*/
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 402 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MAX); /*{max,T_MAX}*/
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 403 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_argmax); /*{argmax,T_argmax}*/
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 404 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MIN); /*{min,T_MIN}*/
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 405 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_MEDIAN); /*{median,T_MEDIAN}*/
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 406 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SUM); /*{sum,T_SUM}*/
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 408 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_info); /*{info,T_info}*/
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 411 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Xpos); /*{Xpos,T_Xpos}*/
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 412 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Ypos); /*{Ypos,T_Ypos}*/
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 413 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Zpos); /*{Zpos,T_Zpos}*/
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 414 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SpacePos); /*{SpacePos,T_SpacePos}*/
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 416 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_del); /*{del,T_del}*/
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 417 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_delvars); /*{delvars,T_delvars}*/
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 419 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkFastMarching); /*{vtkFastMarching,T_vtkFastMarching}*/
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 420 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkFastMarchingTarget); /*{vtkFastMarchingTarget,T_vtkFastMarchingTarget}*/
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 423 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_FluxDiffusion); /*{FluxDiffusion,T_FluxDiffusion}*/
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 424 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkAnisoGS); /*{vtkAnisoGS,T_vtkAnisoGS}*/
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 425 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::AnisoSmoothGS); /*{AnisoSmoothGS,AnisoSmoothGS}*/
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 426 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TInit); /*{init,TInit}*/
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 427 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TIterate); /*{iterate,TIterate}*/
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 428 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TEnd); /*{end,TEnd}*/
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 430 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoWeickert); /*{AnisoWeickert,T_AnisoWeickert}*/
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 431 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoCW); /*{AnisoCW,T_AnisoCW}*/
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 433 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SRAD_qcoeff); /*{SRAD_qcoeff,T_SRAD_qcoeff}*/
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 434 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoSRAD); /*{AnisoSRAD,T_AnisoSRAD}*/
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 435 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoSRAD2); /*{AnisoSRAD2,T_AnisoSRAD2}*/
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 436 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoDPAD); /*{AnisoDPAD,T_AnisoDPAD}*/
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 437 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoDPAD2); /*{AnisoDPAD2,T_AnisoDPAD2}*/
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 438 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoNRAD); /*{AnisoNRAD,T_AnisoNRAD}*/
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 439 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoLeeAdd2); /*{AnisoLeeAdd2,T_AnisoLeeAdd2}*/
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 441 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AnisoRudinMult); /*{AnisoRudinMult,T_AnisoRudinMult}*/
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 443 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::TAddGaussNoise); /*{AddGaussNoise,TAddGaussNoise}*/
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 445 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SNR); /*{SNR,T_SNR}*/
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 447 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_save); /*{save,T_save}*/
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 449 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_eccentricity); /*{eccentricity,T_eccentricity}*/
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 452 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isoarea2D); /*{isoarea2D,T_isoarea2D}*/
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 453 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_posarea); /*{posarea,T_posarea}*/
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 455 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ReadCTALine); /*{ReadCTALine,T_ReadCTALine}*/
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 456 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ReadCTALineRadii); /*{ReadCTALineRadii,T_ReadCTALineRadii}*/
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 458 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isosurf); /*{isosurf,T_isosurf}*/
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 459 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isosurf_inv); /*{isosurf_inv,T_isosurf_inv}*/
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 460 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isosurf_ijk); /*{isosurf_ijk,T_isosurf_ijk}*/
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 461 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isosurf_ras); /*{isosurf_ras,T_isosurf_ras}*/
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 462 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Surface); /*{Surface,T_Surface}*/
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 463 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkDecimate); /*{vtkDecimate,T_vtkDecimate}*/
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 464 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkMarchingCubes); /*{vtkMarchingCubes,T_vtkMarchingCubes}*/
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 465 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkSmooth); /*{vtkSmooth,T_vtkSmooth}*/
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 466 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkWindowedSinc); /*{vtkWindowedSinc,T_vtkWindowedSinc}*/
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 468 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_isoline); /*{isoline,T_isoline}*/
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 470 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkDist); /*{vtkDist,T_vtkDist}*/
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 471 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_AndreDist); /*{AndreDist,T_AndreDist}*/
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 473 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OutFlux); /*{OutFlux,T_OutFlux}*/
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 474 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OutFluxScalar); /*{OutFluxScalar,T_OutFluxScalar}*/
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 475 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_2DFlux); /*{2DFlux,T_2DFlux}*/
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 476 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OrientationRatio); /*{OrientationRatio,T_OrientationRatio}*/
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 478 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_computeCC); /*{computeCC,T_computeCC}*/
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 479 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetLight); /*{SetLight,T_SetLight}*/
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 480 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetLightPos); /*{SetLightPos,T_SetLightPos}*/
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 482 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Skeleton); /*{Skeleton,T_Skeleton}*/
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 483 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SimplePoints); /*{SimplePoints,T_SimplePoints}*/
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 485 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_NormalField); /*{NormalField,T_NormalField}*/
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 486 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DirConnectivity); /*{DirConnectivity,T_DirConnectivity}*/
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 487 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OrientField); /*{OrientField,T_OrientField}*/
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 488 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_OrientPositive); /*{OrientPositive,T_OrientPositive}*/
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 490 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Skeleton2lines); /*{Skeleton2lines,T_Skeleton2lines}*/
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 491 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SmoothLines);  /*{SmoothLines,T_SmoothLines}*/
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 492 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ResampleLines); /*{ResampleLines,T_ResampleLines}*/
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 493 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ShortestPath); /*{ShortestPath,T_ShortestPath}*/
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 494 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ShortestPathImage); /*{ShortestPathImage,T_ShortestPathImage}*/
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 495 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PathFromDispl); /*{PathFromDispl,T_PathFromDispl}*/
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 496 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_PathFromVectField); /*{PathFromVectField,T_PathFromVectField}*/
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 497 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_LineRecons); /*{LineRecons,T_LineRecons}*/
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 499 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CircleIntegral); /*{CircleInt,T_CircleIntegral}*/
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 500 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CircleIntegralExc); /*{CircleIntExc,T_CircleIntegralExc}*/
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 501 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CircleIntSdExc); /*{CircleIntSdExc,T_CircleIntSdExc}*/
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 502 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CircleMinIntSdExc); /*{CircleMinIntSdExc,T_CircleMinIntSdExc}*/
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 503 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_LocalExtrema); /*{LocalExtrema,T_LocalExtrema}*/
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 506 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_gnuplot); /*{gnuplot,T_gnuplot}*/
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 507 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_histo); /*{histo,T_histo}*/
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 508 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_cumhisto); /*{cumhisto,T_cumhisto}*/
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 509 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DisplayHisto); /*{DisplayHisto,T_DisplayHisto}*/
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 511 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GenRead); /*{GenRead,T_GenRead}*/
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 514 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Matrix); /*{Matrix,T_Matrix}*/
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 515 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Invert); /*{Invert,T_Invert}*/
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 517 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{return(token::T_SaveStructuredGrid); /*{SaveStructuredGrid,T_SaveStructuredGrid}*/

//
//============================== PARAMWIN options ====================
//

//ParamWin          {
//                  return(token::T_ParamWin);

//BeginBook         return(token::T_BeginBook); // BeginBook,T_BeginBook
// EndBook           return(token::T_EndBook); //EndBook,T_EndBook
// AddPage           return(token::T_AddPage); / / AddPage,T_AddPage
// BeginPanel        return(token::T_BeginPanel); // BeginPanel,T_BeginPanel
// EndPanel          return(token::T_EndPanel); // EndPanel,T_EndPanel}
// SelectPage        return(token::T_SelectPage); // SelectPage,T_SelectPage

//BeginBoxPanel     return(token::T_BeginBoxPanel); /// BeginBoxPanel,T_BeginBoxPanel
//EndBoxPanel       return(token::T_EndBoxPanel); /// EndBoxPanel,T_EndBoxPanel

//AddFloat          return(token::T_AddFloat); // AddFloat,T_AddFloat
// AddInt            return(token::T_AddInt); // AddInt,T_AddInt
// AddButton         return(token::T_AddButton); // AddButton,T_AddButton

// AddBoolean        return(token::T_AddBoolean); /// AddBoolean,T_AddBoolean

// AddEnum           return(token::T_AddEnum); // AddEnum,T_AddEnum
// AddEnumChoice     return(token::T_AddEnumChoice); // AddEnumChoice,T_AddEnumChoice
//AddImageChoice    return(token::T_AddImageChoice); // AddImageChoice,T_AddImageChoice
// AddString         return(token::T_AddString); // AddString,T_AddString
// AddFilename       return(token::T_AddFilename); // AddFilename,T_AddFilename
//AddLabel          return(token::T_AddLabel); //AddLabel,T_AddLabel
//SetCallback       return(token::T_SetCallback); //SetCallback,T_SetCallback
//SetDragCallback   return(token::T_SetDragCallback); //SetDragCallback,T_SetDragCallback

//BeginBox          return(token::T_BeginBox); //BeginBox,T_BeginBox
//EndBox            return(token::T_EndBox); //EndBox,T_EndBox

//BeginHorizontal   return(token::T_BeginHorizontal); //BeginHorizontal,T_BeginHorizontal
//EndHorizontal     return(token::T_EndHorizontal); //EndHorizontal,T_EndHorizontal

// EnablePanel       return(token::T_EnablePanel);  //EnablePanel,T_EnablePanel

// EnableBox         return(token::T_EnableBox);  // EnableBox,T_EnableBox

// Display           return(token::T_Display); //Display,T_Display

// CreateWin         return(token::T_CreateWin); // CreateWin,T_CreateWin
// redraw            return(token::T_redraw); // redraw,T_redraw

//SetPositionProp      return(token::T_SetPositionProp); //SetPositionProp,T_SetPositionProp
// ShowSlider        return(token::T_ShowSlider); // ShowSlider,T_ShowSlider
// Enable            return(token::T_Enable);  //Enable,T_Enable

} /*{ParamWin,T_ParamWin}*/
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 574 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CreateFlatMesh);    /*{CreateFlatMesh,T_CreateFlatMesh}*/
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 575 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CreateVolume);      /*{CreateVolume,T_CreateVolume}*/
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 576 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkCreateFlatMesh); /*{vtkCreateFlatMesh,T_vtkCreateFlatMesh}*/
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 577 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Altitude2Position); /*{Altitude2Position,T_Altitude2Position}*/
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 578 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Temp2Altitudes);    /*{Temp2Altitudes,T_Temp2Altitudes}*/
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 579 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_GeoCoordinates);    /*{GeoCoordinates,T_GeoCoordinates}*/
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 580 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_Set3DArrowParam); /*{Set3DArrowParam,T_Set3DArrowParam}*/
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 582 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CreateVectors); /*{CreateVectors,T_CreateVectors}*/
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 584 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CreateVectorsFromField); /*{CreateVectorsFromField,T_CreateVectorsFromField}*/
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 586 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ComputeAltitudes); /*{ComputeAltitudes,T_ComputeAltitudes}*/
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 587 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_ReadFlow); /*{ReadFlow,T_ReadFlow}*/
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 588 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_SetFluidNavFile); /*{SetFluidNavFile,T_SetFluidNavFile}*/
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 589 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_DrawEarthCoord); /*{DrawEarthCoord,T_DrawEarthCoord}*/
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 591 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_CreateEllipsoids); /*{CreateEllipsoids,T_CreateEllipsoids}*/
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 593 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_import_vtk);     /*{import_vtk,T_import_vtk}*/
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 594 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_import_wii);     /*{import_wii,T_import_wii}*/
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 595 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_import_filters); /*{import_filters,T_import_filters}*/
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 597 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_amiOFCorr2D);  /*{amiOFCorr2D,T_amiOFCorr2D}*/
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 598 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_amiOFVar2D);   /*{amiOFVar2D,T_amiOFVar2D}*/
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 600 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkDicomRead); /*{vtkDicomRead,T_vtkDicomRead}*/
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 601 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_vtkMINCRead);  /*{vtkMINCRead,T_vtkMINCRead}*/
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 603 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_exists);       /*{exists,T_exists}*/
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 604 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_FileExists);  /*{FileExists,T_FileExists}*/
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 606 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_InfoDialog); /*{InfoDialog,T_InfoDialog}*/
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 608 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_slice);        /*{slice,T_slice}*/
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 610 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_argc);         /*{argc,T_argc}*/
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 611 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
return(token::T_emptyargs);    /*{emptyargs,T_emptyargs}*/
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 614 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse float ====================
//
//  setlocale(LC_NUMERIC,"C");
  setlocale(LC_NUMERIC, "C");
  yylval->adouble=atof(YYText());
  return(token::NUMBER);
}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 625 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse interger ====================
//
//  setlocale(LC_NUMERIC,"C");
  setlocale(LC_NUMERIC, "C");
  char* endstr;
  yylval->adouble=strtol(YYText(),&endstr,0);
  return(token::NUMBER);
}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 636 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse interger ====================
//
//  setlocale(LC_NUMERIC,"C");
  setlocale(LC_NUMERIC, "C");
  char* endstr;
  yylval->adouble=strtol(YYText(),&endstr,0);
  return(token::NUMBER);
}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 649 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//
//============================ Parse string ====================
//
 cpp_string = new string();
 BEGIN(str);
 }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 658 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  // end of string
  // Not thread safe ...
  BEGIN(0);
  // add the \0 character, why ???...
  cpp_string->append(1,'\0');

  if((yylval->astring = new char[cpp_string->length()+1])==NULL) {
    GB_driver.yyiperror(E_MEM);
    return token::LEX_ERROR;
  }
  // first conversion, we keep char* for astring for now
  strcpy(yylval->astring, cpp_string->c_str());
  delete cpp_string;
  cpp_string = NULL;
  return(token::ASTRING);
}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 676 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  GB_driver.yyiperror(E_UNTERM_STRING);
}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 680 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\n');
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 681 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\t');
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 682 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\r');
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 683 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\b');
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 684 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,'\f');
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 686 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
cpp_string->append(1,YYText()[1]);
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 688 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  cpp_string->append(YYText());
}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 692 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  cpp_string->append(YYText());
/*
  char *yptr = YYText();

  while (*yptr)
    *string_buf_ptr++ = *yptr++;
*/
}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 703 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  yylval->adouble=GB_argc-GB_num_arg_parsed;
  return(token::NUMBER);
}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 708 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  // TODO allow more than 10 arguments!!
  int n,pos;
  n = YYText()[1]-'0';
  // TODO: check the position, improve the code here
  pos = n+GB_num_arg_parsed-1;

  if ((pos>=GB_argc)||(pos<0)) {
    boost::format fmt =
        boost::format("improcess.l \t invalid argument number %d / %d\n");
#ifdef str
  #undef str
      GB_driver.yyiperror( str(fmt % n % (GB_argc-GB_num_arg_parsed)).c_str() );
  #define str 1
#else
      GB_driver.yyiperror( str(fmt % n % (GB_argc-GB_num_arg_parsed)).c_str() );
#endif
    return token::LEX_ERROR;
//myss1.c_str() );
  }

  // we use GB_argv[n+1] because the first two arguments are the program and the script file
  wxString argument(GB_argv[pos]);
  
  if((yylval->astring = new char[strlen(argument.mb_str(wxConvUTF8))+1])==NULL) {
    GB_driver.yyiperror(E_MEM);
    return token::LEX_ERROR;
  }

  strcpy(yylval->astring,argument.mb_str(wxConvUTF8));

  return(token::ASTRING);

}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 743 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//============================ Parse block ====================
//
  if (block_level==0) {
    ami_block = new AmiInstructionBlock();
    ami_block->SetStartingLine(GB_driver.yyiplineno);
    if (GB_debug )std::cerr << "Starting block at " <<  GB_driver.yyiplineno << std::endl;
    if (GB_debug )std::cerr << "Starting block at " << *yylloc << std::endl;
    block_level++;
    BEGIN(block);
  }

/*
<block>\# {
//============================ Parse comment ====================
//
    comment_caller = block;
    BEGIN(comment);
//    printf("begin comment in block \n");
}

<block>"//"  {
    comment_caller = block;
    BEGIN(comment);
//    printf("begin comment in block \n");
}
*/
}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 772 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  // dealing with windows end-of-lines ...
  yylloc->lines(1); yylloc->step();
  GB_driver.yyiplineno++;
  ami_block->GetBody().append(YYText());
}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 780 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  block_level++;
  ami_block->GetBody().append(1,'{');
}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 785 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{

  block_level--;
  if (block_level>0)
    ami_block->GetBody().append(1,'}');
  else {
    BEGIN(0);
    ami_block->GetBody().append(3,'\0');
//    cpp_block->append(1,YY_END_OF_BUFFER_CHAR);

//     printf("block = *%s*\n",block_buf);

/*
    length=ami_block->GetBody().length();

    if((yyiplval.astring = new char[length+3])==NULL)
      yyiperror(E_MEM);
    strcpy(yyiplval.astring,
            ami_block->GetBody().c_str());
    // why add those 3 characters ...??? lex is looking ahead several characters
    // risky in memory ...
    yyiplval.astring[length  ]=YY_END_OF_BUFFER_CHAR;
    yyiplval.astring[length+1]=YY_END_OF_BUFFER_CHAR;
    yyiplval.astring[length+2]=YY_END_OF_BUFFER_CHAR;
*/
    yylval->ablock = ami_block;
    // cannot use smart pointers in union ...
    // needs to be freed after use ...

    //ami_block = AmiInstructionBlock_ptr();
    return(token::ABLOCK);
  }
}
	YY_BREAK
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 820 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//  char *yptr = YYText();
//  while (*yptr)
//    *block_buf_ptr++ = *yptr++;
  ami_block->GetBody().append(YYText());
}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 828 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//============================ Parse comment ====================
//
    comment_caller = INITIAL;
    BEGIN(comment);
//  printf("begin comment \n");
}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 836 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
    comment_caller = INITIAL;
    BEGIN(comment);
//  printf("begin comment \n");
}
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 843 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  //GB_driver.yyiplineno++;
//  printf("end comment from %d \n",comment_caller);
  // use unput to accept the end of the command if any
// std::cout << "<comment>\n [" << YYText() << "]" << std::endl;
// std::cout << "length = " << strlen(YYText()) << std::endl;
  if (strlen(YYText())==1) {
    unput(YYText()[0]);
  }
  if (strlen(YYText())==2) {
    unput(YYText()[1]);
    unput(YYText()[0]);
  }
  BEGIN(comment_caller);
}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 859 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
  // on ecrit ce qu'on veut dans un commentaire ...
  // sauver les commentaires dans une variable du driver??
}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 864 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  int context = Vars.GetCurrentContextNumber();
  string text(YYText());
  string varname = text.substr(7);
  yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),context);
  return result;
}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 875 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(8);
  yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),0);
  return result;
}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 885 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(6);
  yyip::Parser::token::yytokentype 
      result = checkvar(yylval,varname.c_str(),
                        OBJECT_CONTEXT_NUMBER);
  return result;
}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 898 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(2);
  yyip::Parser::token::yytokentype 
      result = checkvar(yylval,varname.c_str(),
                        OBJECT_CONTEXT_NUMBER);
  return result;
}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 911 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
// TODO: can all the variable system to return only variable from lex !!!
// this rule is a hack
//
//============================ Parse variable in a given context ====================
//
  //cout << "::XX->XX variable in object ?" << std::endl;
  string text(YYText());
  size_t pos = text.find("->");
  string contextname = text.substr(2,pos-2);


  // check if contextname is really a context
  //cout << "looking for "<< contextname << std::endl;
  BasicVariable::ptr var = IsObject(contextname.c_str(),OBJECT_CONTEXT_NUMBER);
  if (var.get()) 
  {
    FILE_MESSAGE("Object found");
    string varname = text.substr(pos+2);

    Variable<AMIObject>::ptr objvar( boost::dynamic_pointer_cast<Variable<AMIObject> >(var));
    AMIObject::ptr object (objvar->Pointer());

    Variables::ptr previous_ocontext = Vars.GetObjectContext();
    Vars.SetObjectContext(object->GetContext());

    yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),OBJECT_CONTEXT_NUMBER);

    Vars.SetObjectContext(previous_ocontext);
    return result;
  } else {
    std::string error_string =" lex error \t object not found ";
    GB_driver.yyiperror(error_string.c_str());
  }
}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 948 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable in a given context ====================
//
  //cout << "variable in object ?" << std::endl;
  string text(YYText());
  size_t pos = text.find("->");
  string contextname = text.substr(0,pos);


  // check if contextname is really a context
  BasicVariable::ptr var = IsObject(contextname.c_str());
  if (var.get()) 
  {
    FILE_MESSAGE("Object found");
    string varname = text.substr(pos+2);

    Variable<AMIObject>::ptr objvar( boost::dynamic_pointer_cast<Variable<AMIObject> >(var));
    AMIObject::ptr object ( objvar->Pointer());

    Variables::ptr previous_ocontext = Vars.GetObjectContext();
    Vars.SetObjectContext(object->GetContext());

    yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),OBJECT_CONTEXT_NUMBER);

    Vars.SetObjectContext(previous_ocontext);
    return result;
  } else {
    std::string error_string =" lex error \t object not found ";
    GB_driver.yyiperror(error_string.c_str());
  }
}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 985 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
//
//============================ Parse variable ====================
//
   return checkvar(yylval,YYText());
}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 993 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
                    yylloc->step();
                  }
	YY_BREAK
case 361:
/* rule 361 can match eol */
YY_RULE_SETUP
#line 997 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
      //cout << "\\NEWLINE \n" << std::endl;
      // allow multiline command
      GB_driver.yyiplineno++;
    }
	YY_BREAK
case 362:
/* rule 362 can match eol */
YY_RULE_SETUP
#line 1003 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{
          //cout << "NEWLINE \n" << std::endl;
//          if (yyleng!=1)std::cout << " ******* yyleng = " << yyleng << "************" << std::endl; 
          yylloc->lines(1); yylloc->step();
          GB_driver.yyiplineno++;
          return(token::END_INSTRUCTION);
      } /*{end-of-line,END_INSTRUCTION}*/
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 1011 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
{

    std::string error_string =" lex error \t invalid characters ";
    GB_driver.yyiperror(error_string.c_str());

  }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 1021 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"
ECHO;
	YY_BREAK
#line 4857 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/GeneratedFlexBison/improcess_flex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(str):
case YY_STATE_EOF(block):
case YY_STATE_EOF(comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyipfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyipfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyiprealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyiprealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1802 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1802 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1801);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyipalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyipalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyipfree((void *) b->yy_ch_buf  );

	yyipfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyipalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyiprealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyipalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyiprealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyipalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyiprealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyipfree (void * ptr )
{
	free( (char *) ptr );	/* see yyiprealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1021 "/Users/administrador/Desktop/mi_rama_AMILab/Daniel/src/Language/improcess_flex.lpp"





//--------------------------------------------------
//       IsObject()
//--------------------------------------------------
//
BasicVariable::ptr IsObject( const char* varname, int context)
//
{
  BasicVariable::ptr var = Vars.GetVar(varname,context);
  if (var.get())
    if ((var->Type() == type_ami_object))
      return var;
    else 
      return BasicVariable::ptr();
  else
    return BasicVariable::ptr();
}


//--------------------------------------------------
//       checkvar()
//--------------------------------------------------
//
yyip::Parser::token::yytokentype checkvar(
  yyip::Parser::semantic_type* yylval,
  const char* varname,
  int context
)
//
{

  BasicVariable::ptr var = Vars.GetVar(varname,context);
  //cout << "res = " << res << std::endl;
  if  ((!GB_driver.procedure_declaration) && var.get())   {

    // add the variable to the stack
    GB_driver.var_stack.AddVar(var);

    //yylval->variable = var.get();
    switch(var->Type()) {
      case type_image:            return token::VAR_IMAGE;
        /*{$variable_image,VAR_IMAGE}*/
      case type_float:
      case type_long:
      case type_double:
      case type_int:
      case type_uchar:
        return token::PROCESSED_VAR; /*{$PROCESSED_VAR,PROCESSED_VAR}*/
//      case type_surfdraw:         return token::VAR_SURFDRAW;
        /*{$variable_surfdraw,VAR_SURFDRAW}*/
//      case type_file:             return token::VAR_FILE;
        /*{$variable_file,VAR_FILE}*/
      case type_c_procedure:      return token::VAR_C_PROCEDURE;
        /*{$variable_c_procedure,VAR_C_PROCEDURE}*/
      case type_class_member:      return token::VAR_CLASS_MEMBER;
        /*{$variable_class_procedure,VAR_CLASS_MEMBER}*/
      case type_c_image_function: return token::VAR_C_IMAGE_FUNCTION;
        /*{$variable_c_image_function,VAR_C_IMAGE_FUNCTION}*/
      case type_c_function: return token::VAR_C_FUNCTION;
        /*{$variable_c_function,VAR_C_FUNCTION}*/

      case type_ami_function:     return token::VAR_AMI_FUNCTION;
        /*{$variable_ami_function,VAR_AMI_FUNCTION}*/
      case type_ami_class:     return token::VAR_AMI_CLASS;
        /*{$variable_ami_class,VAR_AMI_CLASS}*/
      case type_ami_object:     return token::VAR_AMI_OBJECT;
        /*{$variable_ami_object,VAR_AMI_OBJECT}*/

      case type_string:           return token::VAR_STRING;
        /*{$variable_string,VAR_STRING}*/
      case type_matrix:           return token::VAR_MATRIX;
        /*{$variable_matrix,VAR_MATRIX}*/
//      case type_gltransform:      return token::VAR_GLTRANSFORM;
        /*{$variable_gltransform,VAR_GLTRANSFORM}*/
      case type_array:       {
        Variable<VarArray>::ptr vararray( 
          boost::dynamic_pointer_cast<Variable<VarArray> >(var));
        VarArray::ptr array (vararray->Pointer());
        switch(array->Type()) {
          case type_image:      return token::VAR_ARRAY_IMAGE;
          /*{$variable_image_array,VAR_ARRAY_IMAGE}*/
          default:
            GB_driver.err_print("Array type not available \n");
        }
        break;
      }
      default:
        GB_driver.err_print("Variable type still not available \n");
        GB_driver.var_stack.GetLastBasicVar();
    }

  }

  yylval->ident = new IdentifierInfo;
  yylval->ident->SetName( varname);
  yylval->ident->SetCreationContext(context);
  return(token::IDENTIFIER);
}

/*** Additional Code ***/

namespace yyip {

Scanner::Scanner(std::istream* in,
     std::ostream* out)
    : yyipFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}


/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int yyipFlexLexer::yylex()
{
    std::cerr << "in yyipFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

/*
int yyFlexLexer::yywrap()
{
    return 1;
}
*/








