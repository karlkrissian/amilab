/*

    IMAGE PROCESSING LANGUAGE

    Karl Krissian
    ULPGC
    06 02 2001
 */


%{
 /*** C/C++ Declarations ***/
  //#include <stdlib.h>
  //#include <stdio.h>

#include "driver.h"
#include "CoutwxString.h"
#include "MainFrame.h"
#include "ParamPanel.hpp"
#include <locale.h>
#include "fonctions.h"
#include "func_isoline.hpp"

#include "ami_function.h"
#include "ami_class.h"
#include "ami_object.h"
#include "IdentifierInfo.h"

#include "localstats.h"
//#include "dist_squared.hpp"
#include "improcess_bison.tab.hpp"
#include "wrapAMIFluid.h"
#include "wrapVTK.h"
#include "wrapITK.h"
#include "itkCannyEdgeDetector.h"
#include "wrapWII.h"
#include "wrapFilters.h"
#include "wrapSystem.h"
#include <cstdlib>

//#include "myscan.h"
#include "ImageDraw.hpp"
#include "Func_ReadCTALine.h"
#include "LineRecons.h"
//#include "PruneLines.h"



#ifndef __FLEX_LEXER_H
#define yyFlexLexer yyipFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif


#include "Viewer3D.hpp"

//#include "Erreurs.Main.hpp"
 // #include "Graphique.hpp"
#include "Viewer3D.hpp"
#include "DessinImage.hpp"
#include "CompareImage.hpp"
#include "bruit.hpp"
#include "CalculAireSection.hpp"
#include "reponse_cercle.hpp"
#include "func_shortestpath.h"
#include "AnisoGaussSeidel.h"
#include "LevelSetsCURVES.h"
#include "vtkwrap.h"

#include "gnuplot.hpp"

#include "xmtext.hpp"
#include "StringUtils.hpp"
//#include "histo.hpp"

#ifndef WIN32
#include <unistd.h>
#endif

#include <iostream>

#include "VarContexts.hpp"
//#include "Duree.hpp"

#include "DefineClass.hpp"
/*
#include <boost/shared_ptr.hpp>
//--- string formatting using boost
#include <iostream>
#include <iomanip>
#include <cassert>
#include "boost/format.hpp"
namespace MyNS_ForOutput {
  using std::cout; using std::cerr;
  using std::string;
  using std::endl; using std::flush;

  using boost::format;
  using boost::io::group;
}
using namespace MyNS_ForOutput;
*/

//-------

#include "wx/evtloop.h"
#include "penguin.h"
#include "driver.h"

extern VarContexts       Vars;

//Duree            IP_time;

extern MainFrame*   GB_main_wxFrame;
extern wxApp*       GB_wxApp;
extern int          GB_argc;

extern int       GB_num_arg_parsed;
extern wxString  GB_scripts_dir;
extern wxString  GB_help_dir;


namespace AMIFluid {
extern char* FLUID_NAVIGATION_FILE;
}


DessinImage* CreateIDraw(  const std::string& title, InrImage::ptr image);
// Creation of a DessinImage pointer
// this function is distinct if compiling with all amilab

extern yyip::Driver GB_driver;

extern unsigned char        GB_debug;
extern unsigned char        GB_verbose;
extern unsigned char        verbose;
extern unsigned char        GB_nofile;

extern char program[80];

extern unsigned char DELETE_IDRAW;

//-------------------------------------------------------
class wxWaitTimer : public wxTimer
//    -----------
{
  public:
    bool finished;

    wxWaitTimer() : finished(false) {}
    //Called each time the timer's timeout expires
    void Notify()     { finished = true; }
};



//------------------------------------------------------
class wxScheduleTimer : public wxTimer
//    ---------------
{
  DEFINE_CLASS(wxScheduleTimer)
  public:
    wxScheduleTimer( AMIFunction::ptr& callback)
    {
      f = callback;
    }

    ~wxScheduleTimer()
    { 
      //cout << "~wxScheduleTimer()" << endl; 
    }

    //Called each time the timer's timeout expires
    void Notify();

  private:
    AMIFunction::ptr f;
};

// create a array of shared pointers
// to delete the wxScheduleTimer when necessary
static std::list<wxScheduleTimer::ptr> schedule_timers;

static void CB_ParamWin( void* cd ) {

  AMIFunction::ptr f;
  f = *(AMIFunction::ptr*) (cd);

  GB_driver.yyip_call_function(f);

} // CB_ParamWin( void* cd )


//static void ( void* cd, long unsigned int *) {
//  CB_ParamWin(cd);
//}

 static void CB_Button(  void* cd) {
  CB_ParamWin(cd);
}

void CB_delete_imagedraw( void* var);

void CB_delete_surfdraw( void* varid);

//------------------------------------------------------
void CB_update_imagelist( void* imagelist_gui)
//   -------------------
{
  wxEnumerationParameter* imlist = (wxEnumerationParameter*) imagelist_gui;
  boost::shared_ptr<wxArrayString> imagelist;

  imagelist = Vars.SearchVariables(type_image);
  imagelist->Add(_T("Image"));
  imlist->SetChoices(imagelist);
}

#define UNARYOP_EXPR(operator,val,res)           \
  res=operator(val);


#define UNARYOP_IMAGE(operator)           \
  InrImage* im;                           \
  int       i;                            \
  im = driver.im_stack.GetLastImage();           \
  im->InitBuffer();                       \
  Si im->ScalarFormat() Alors             \
    Repeter                                \
     im->FixeValeur( operator(im->ValeurBuffer()) );   \
    JusquA Non(im->IncBuffer()) FinRepeter             \
  Sinon                                                \
    Pour(i,0,im->GetVDim()-1)                 \
      im->InitBuffer();                       \
      Repeter                                 \
       im->VectFixeValeur( i, operator(im->VectValeurBuffer(i)) );   \
      JusquA Non(im->IncBuffer()) FinRepeter  \
    FinPour                                   \
  FinSi                                       \
  driver.im_stack.AddImage(im);

#define IMAGE_OP_EXPR(operator,expr)                     \
  InrImage* im1;                                         \
  int       i;                                           \
  double    val = expr;                                  \
  im1 = driver.im_stack.GetLastImage();                         \
  im1->InitBuffer();                                     \
  Si im1->ScalarFormat() Alors                           \
    Repeter                                              \
      im1->FixeValeur(im1->ValeurBuffer() operator val); \
    JusquA Non(im1->IncBuffer()) FinRepeter              \
  Sinon                                                  \
    Repeter                                              \
      Pour(i,0,im1->GetVDim()-1)                         \
        im1->VectFixeValeur(i,im1->VectValeurBuffer(i) operator val);  \
      FinPour                                            \
    JusquA Non(im1->IncBuffer()) FinRepeter              \
  FinSi                                                  \
  driver.im_stack.AddImage(im1);

#define EXPR_OP_IMAGE(operator,expr)                     \
  InrImage* im1;                                         \
  int       i;                                           \
  double    val = expr;                                  \
  im1 = driver.im_stack.GetLastImage();                         \
  im1->InitBuffer();                                     \
  Si im1->ScalarFormat() Alors                           \
    Repeter                                              \
      im1->FixeValeur(val operator im1->ValeurBuffer() ); \
    JusquA Non(im1->IncBuffer()) FinRepeter              \
  Sinon                                                  \
    Repeter                                              \
      Pour(i,0,im1->GetVDim()-1)                         \
        im1->VectFixeValeur(i, val operator im1->VectValeurBuffer(i));  \
      FinPour                                            \
    JusquA Non(im1->IncBuffer()) FinRepeter              \
  FinSi                                                  \
  driver.im_stack.AddImage(im1);

#define IMAGE_OP_IMAGE(operator)    \
  InrImage* im1;                    \
  InrImage* im2;                    \
  im2 = driver.im_stack.GetLastImage();    \
  im1 = driver.im_stack.GetLastImage();    \
  im1->InitBuffer();                \
  im2->InitBuffer();                \
  Repeter                           \
    im1->FixeValeur(im1->ValeurBuffer() operator im2->ValeurBuffer()); \
    im2->IncBuffer();               \
  JusquA Non(im1->IncBuffer())      \
  FinRepeter                        \
  driver.im_stack.AddImage(im1);           \
  delete im2;

#define IMAGE_OP_IMAGE_2(operator)  \
  InrImage* im1;                    \
  InrImage* im2;                    \
  InrImage* res;                    \
  im2 = driver.im_stack.GetLastImage();    \
  im1 = driver.im_stack.GetLastImage();    \
  res = (*im1) operator (*im2);     \
  Si res == NULL Alors              \
    driver.err_print((boost::format("Error in operation %s \t IMAGE_OP_IMAGE_2 \n") % #operator).str().c_str()); \
  FinSi                             \
  driver.im_stack.AddImage(res);           \
  delete im1;                       \
  delete im2;

#define UNARYOP_MATRIX(operator)           \
  FloatMatrix* mat;                         \
  int       i,j;                            \
  mat = driver.matrix_stack.GetLastMatrix();       \
  for (i=0;i<mat->Rows();i++)               \
  for (j=0;j<mat->Cols();j++) {             \
    (*mat)[i][j]=operator((*mat)[i][j]);               \
  }                                         \
  driver.matrix_stack.AddMatrix(mat);

#define MATRIX_OP_EXPR(operator,expr)        \
  FloatMatrix* mat;                          \
  int       i,j;                             \
  float     val = expr;                      \
  mat = driver.matrix_stack.GetLastMatrix();        \
  for (i=0;i<mat->Rows();i++)               \
  for (j=0;j<mat->Cols();j++) {             \
    (*mat)[i][j]=(*mat)[i][j] operator val;            \
  }                                         \
  driver.matrix_stack.AddMatrix(mat);

#define MATRIX_OP_MATRIX_2(operator)        \
  FloatMatrix* mat1;                          \
  FloatMatrix* mat2;                          \
  FloatMatrix* mat;                          \
  int       i,j;                             \
  mat2 = driver.matrix_stack.GetLastMatrix();        \
  mat1 = driver.matrix_stack.GetLastMatrix();        \
  if ((mat1->Rows()==mat2->Rows())&&(mat1->Cols()==mat2->Cols())) { \
    mat=new FloatMatrix(mat1->Rows(),mat1->Cols()); \
    for (i=0;i<mat1->Rows();i++)               \
    for (j=0;j<mat1->Cols();j++)              \
      (*mat)[i][j]=(*mat1)[i][j] operator (*mat2)[i][j];            \
    driver.matrix_stack.AddMatrix(mat);                 \
    delete mat1;                                    \
    delete mat2;                                    \
  }                                              \
  else {                                         \
    delete mat2;                                    \
    driver.matrix_stack.AddMatrix(mat1);                \
  }


%}

/* write out a header file containing the token defines */
%defines

/* start symbol is named "start" */
%start start

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%name-prefix="yyip"



/* set the parser's class identifier */
%define "parser_class_name" "Parser"

/* keep track of the current position within the input */
%locations

%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class Driver& driver }

/* verbose error messages */
%error-verbose


%union {
  IdentifierInfo*       ident;
  Variable*             variable;
  char*                 astring;
  AmiInstructionBlock*  ablock;
  float                 afloat;
  double                adouble;
  int                   aint;
  ParamList*            paramlist; // here smart pointer
                            // not allowed in union ...
  ParamListDecl*        paramlistdecl;
  ImageExtent<float>*          imageextent;
}

%token LEX_ERROR

%token      END      0  "end of file"

%token T_EXP
%token T_GT
%token T_LT
%token T_MULT
%token T_DIV
%token T_FACT
%token T_ADD
%token T_SUB
%token T_MOD

%token T_OP_PAR
%token T_CL_PAR
%token T_OP_BR
%token T_CL_BR

%token T_AND
%token T_OR

%token T_POINT
%token T_COMMA
%token T_QUEST
%token T_COLON

%token T_SEMICOLON


%token T_SetDebugOn
%token T_SetDebugOff
%token T_SetVerboseOn
%token T_SetVerboseOff
%token T_SetProgress

%token T_argc
%token T_emptyargs

%token END_INSTRUCTION

%token T_Image
%token T_ReadRawImages
%token T_Transform
%token SHOW HELP QUIT T_HIDE
%token PRINT PRINTN
%token T_InfoDialog
%token T_boost_format
%token T_SPRINT
%token ASHELL LS

%token T_SetName
%token T_GetName
%token T_GetOutput
%token T_GetDiffCoeff

%token ASTRING ABLOCK NUMBER
%token IDENTIFIER
%token VAR_IMAGE   VAR_FLOAT VAR_INT VAR_UCHAR VAR_STRING VAR_IMAGEDRAW
%token VAR_SURFACE VAR_SURFDRAW VAR_MATRIX
%token VAR_FILE
%token VAR_C_FUNCTION
%token VAR_C_PROCEDURE
%token VAR_C_IMAGE_FUNCTION
%token VAR_AMI_FUNCTION
%token VAR_AMI_CLASS
%token VAR_AMI_OBJECT
%token VAR_PARAMWIN
%token VAR_GLTRANSFORM
%token VAR_ARRAY_SURFACE
%token VAR_ARRAY_IMAGE
%token T_del
%token T_delvars
%token ENDOP

%token T_global
%token T_local
%token T_global_new
%token T_local_new
%token T_context

%token T_wait
%token T_schedule

%token T_ParamWin
%token T_BeginPanel T_EndPanel
%token T_BeginBook T_EndBook T_AddPage
%token T_AddFloat T_AddInt T_CreateWin T_Display
%token T_AddButton T_AddBoolean
%token T_AddEnum T_AddEnumChoice
%token T_AddImageChoice 
%token T_AddString T_AddFilename
%token T_ShowSlider
%token T_SetCallback
%token T_SetDragCallback
%token T_SetPositionProp
%token T_BeginBox T_EndBox T_BeginHorizontal T_EndHorizontal
%token T_redraw

%token RIGHT_ASSIGN LEFT_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN
%token MOD_ASSIGN AND_ASSIGN XOR_ASSIGN
%token OR_ASSIGN RIGHT_OP  INC_OP
%token DEC_OP PTR_OP AND_OP OR_OP LE_OP
%token GE_OP EQ_OP NE_OP
%token TRANSPOSE_OP POINTWISE_MULT
%token ASSIGN_OP

%token T_COUNT
%token T_MAX
%token T_argmax
%token T_MIN
%token T_MEDIAN

%token OpImage  FILTER NormGrad T_DiscNormGrad T_gradient
%token SecDerGrad SecDerGrad2 SubImage PutImage
%token T_AutoCrop
%token T_DiscSecDerGrad
%token T_EDPdilate T_EDPerode T_EDPopen T_EDPclose
%token AnisoGS AnisoSmoothGS T_vtkAnisoGS
%token T_SetDistMap
%token T_DiscMeanCurvature
%token T_vtkMedian3D

%token T_NULL

%token T_InitTime
%token T_TimeSpent
%token T_EndTime

%token T_LevelSetsCURV
%token T_UpdateResult
%token T_SetMeanCurv
%token T_SetAffineCurv
%token T_SetBalloonScheme
%token T_SetVelocity
%token T_SetExpansion
%token T_SetExpansionImage
%token T_SetAdvectionField
%token T_SetCurvWeights
%token T_GetAttachVect
%token T_GetCurvature
%token T_GetDistMap
%token T_GetAdvection
%token T_GetVelocity
%token T_GetExpansion
%token T_GetSkeleton
%token T_SetDistMethod
%token T_SetParam
%token T_SetIsoContourBin
%token T_SetBandTube
%token T_SetThreads

%token T_SaveDistMap
%token T_SaveSecDerGrad

%token T_SetNumGaussians
%token T_SetGaussian
%token T_SetProbThreshold

%token T_SetILowTh
%token T_SetIHighTh
%token T_SetProbHighTh

%token T_SetNumInitPoints
%token T_SetInitPoint

%token T_vtkFastMarching
%token T_vtkFastMarchingTarget

%token T_FluxDiffusion
%token T_AnisoWeickert T_AnisoCW
%token T_SRAD_qcoeff
%token T_AnisoSRAD
%token T_AnisoSRAD2
%token T_AnisoLeeAdd2
%token T_AnisoDPAD
%token T_AnisoDPAD2
%token T_AnisoNRAD
%token T_AnisoRudinMult
%token TInit TSetCoeff TIterate TEnd TAddGaussNoise T_SNR
%token T_SetNoiseType
%token T_SetNoiseSD
%token T_GetNoiseSD
%token T_GetDAcoeff
%token T_SetMask
%token T_SetSRADROI
%token T_SetRNRADROI
%token T_SetRNRADROI_NEW
%token T_SetLocalStruct
%token T_SetEigenMode
%token T_Setdt
%token T_Setneighborhood
%token T_info T_NbPoints T_NbPolys
%token T_save
%token T_normalize
%token T_OrientField
%token T_OrientPositive
%token T_2DFlux
%token T_OutFlux
%token T_OutFluxScalar
%token T_OrientationRatio
%token T_Skeleton
%token T_SimplePoints
%token T_CircleIntegral
%token T_CircleIntegralExc
%token T_CircleIntSdExc
%token T_CircleMinIntSdExc
%token T_LocalExtrema
%token T_NormalField
%token T_DirConnectivity
%token T_eccentricity
%token T_rot2D
%token T_mean
%token T_SUM
%token T_localmean
%token T_localmean2
%token T_localSD
%token T_localSD2
%token T_struct_tensor
%token T_StructTensorH
%token T_HessianMatrix
%token T_HessianEVal
%token T_Derivatives
%token T_curvatures
%token T_Laplacian
%token T_setvoxelsize
%token T_settranslation
%token T_setendianness

%token T_Skeleton2lines
%token T_SmoothLines
%token T_ResampleLines
%token T_RemoveLine
%token T_ConnectLines
%token T_threscross
%token T_IsocontourPoints
%token T_IsosurfDist
%token T_vtkIsoContourDist
%token T_ShortestPath
%token T_ShortestPathImage
%token T_PathFromDispl
%token T_PathFromVectField
%token T_LineRecons
%token T_GetNumberOfLines
%token T_GetLine

%token T_ReadCTALine
%token T_ReadCTALineRadii
%token T_WriteCTALine

%token T_SetIsoContour
%token T_SetIsoContourParam
%token T_DrawIsoContour
%token T_SetIsoContourColor
%token T_DrawAllContours
%token T_AllContoursParam

%token T_GetZmin
%token T_GetZmax
%token T_GetYmin
%token T_GetYmax
%token T_GetXmin
%token T_GetXmax
%token T_GetXPos
%token T_GetYPos
%token T_GetZPos

%token T_vtkDicomRead T_vtkMINCRead

%token T_Convolve
%token T_ConvolveMask
%token T_Pad
%token T_Eigen2D
%token T_Eigen3D
%token T_ChamferDT
%token T_Chamfer2DT
%token T_BorgeforsDT
%token T_BorgeforsSDT
%token T_vtkSignedBorgefors
%token T_vtkSignedFMDist
%token T_PropagationDist
%token T_PropagationDist2
%token T_PropDanielsson
%token T_vtkPropDanielsson
%token T_vtkPropDaniel2
%token T_CC

%token T_ProcessXEvents
%token T_ProcessEvents

%token T_isoarea2D T_posarea

%token T_isosurf T_isosurf_inv T_isosurf_ijk T_isosurf_ras
%token T_vtkDecimate T_vtkMarchingCubes T_vtkSmooth T_Recompute
%token T_vtkWindowedSinc

%token T_isoline

%token T_vtkDist T_AndreDist
%token T_Surface
%token T_getimage
%token T_GetImageFromX
%token T_rotate
%token T_computeCC T_drawCC T_setminCC
%token T_addobj T_setcurrentobj
%token T_writeVRML T_writeVTK
%token T_OwnMaterial T_SetColor T_SetColors
%token T_SetColorOpacity
%token T_Paint
%token T_SetLight T_SetLightPos
%token T_SetLightAmbient T_SetLightDiffuse T_SetLightSpecular
%token T_SetBackground

%token T_Remove
%token T_SwapBuffers

%token T_SetAmbient
%token T_SetDiffuse
%token T_SetSpecular
%token T_SetShininess
%token T_SetOpacity
%token T_SetOpacityImage
%token T_SetVisible
%token T_SetColorMaterial

%token T_penguin

%token T_Statistics T_GetIntensities
%token T_GetLinesLength
%token T_GetLinesExtremities
%token T_GetConnections
%token T_SelectLines
%token T_RemoveSelection
%token T_mergepoints T_Triangulate T_Displace T_Normals T_InvertNormals
%token T_Translate
%token T_Scale
%token T_SetPointsColors
%token T_SetLineWidth
%token T_AddPoint T_NewLine T_EndLine T_LineAddPointNumber
%token T_GetTransform T_SetTransform
%token T_Interpolate

%token T_Matrix
%token T_Invert

%token T_PrintMatrices

%token SET SETPOS SHOWCURSOR UPDATE COMPARE SETVECTOR
%token T_SetCompareDisplacement
%token T_DrawVector
%token T_DisplayVectors
%token T_SetVectParam
%token T_SetVectColor
%token T_SetVectStyle
%token T_SetLineThickness
%token T_SetZoom
%token T_SetWindowSize
%token T_SetColormap
%token T_drawcircle
%token T_setGLwin
%token T_initvalue
%token T_ShowSection
%token T_HideSection


%token T_Xpos T_Ypos T_Zpos T_SpacePos

%token T_CHAR T_UCHAR T_SHORT T_USHORT T_INT T_UINT
%token T_FLOAT T_DOUBLE
%token T_RGB  T_FLOAT_VECTOR
%token T_GetFormat

%token T_atof

%token T_gnuplot
%token T_histo
%token T_cumhisto
%token T_DisplayHisto

%token T_OPEN
%token T_CLOSE
%token T_scan_float
%token T_read
%token T_rewind

%token T_LineNumber
%token CONST_PI
%token SIN  COS  TAN
%token ASIN ACOS ATAN
%token SINH COSH
%token EXP LN LOG
%token SQRT ABS ROUND FLOOR
%token NORM

%token FOR TO STEP ENDFOR
%token T_REPEAT T_UNTIL
%token T_BREAK
%token IF THEN ELSE

%token VARIABLES
%token FUNCTION
%token T_eval

%token T_exists
%token T_FileExists
%token T_slice

%token T_GenRead

%token T_IMAGE
%token T_IMAGEDRAW
%token T_SURFACE
%token T_NUM
%token T_STRING
%token T_TRANSFORM

%token T_PROC
%token T_Class

%token T_MeanHalfSize
%token T_Resize
%token T_ReSlice
%token T_Flip
%token T_SetCompTransf

%token T_ConvexHull


%token T_itk
%token T_CannyEdgeDetector

%token T_CreateFlatMesh
%token T_CreateVolume
%token T_vtkCreateFlatMesh
%token T_Altitude2Position
%token T_GeoCoordinates
%token T_ElevateMesh
%token T_CreateVectors
%token T_Set3DArrowParam
%token T_CreateEllipsoids
%token T_ComputeAltitudes
%token T_Temp2Altitudes
%token T_ReadFlow
%token T_SetFluidNavFile
%token T_DrawEarthCoord
%token T_PaintCallback

%token T_SaveStructuredGrid

%token T_import_ami
%token T_import_vtk
%token T_import_itk
%token T_import_wii
%token T_import_filters
%token T_import_sys

%token T_amiOFCorr2D
%token T_amiOFVar2D
//%token T_amiOFVar2DZoom

%type <ident>          identifier
%type <ident>          IDENTIFIER
%type <variable>       VAR_IMAGE
%type <variable>       var_image
%type <variable>       VAR_IMAGEDRAW
%type <variable>       VAR_SURFACE
%type <variable>       var_surface
%type <variable>       VAR_SURFDRAW
%type <variable>       VAR_FLOAT
%type <variable>       VAR_INT
%type <variable>       VAR_UCHAR
%type <variable>       VAR_FILE
%type <variable>       VAR_C_FUNCTION
%type <variable>       VAR_C_PROCEDURE
%type <variable>       VAR_C_IMAGE_FUNCTION
%type <variable>       VAR_AMI_FUNCTION
%type <variable>       VAR_AMI_CLASS
%type <variable>       VAR_AMI_OBJECT
%type <variable>       VAR_STRING
%type <variable>       VAR_PARAMWIN
%type <variable>       VAR_MATRIX
%type <variable>       VAR_GLTRANSFORM
%type <variable>       VAR_ARRAY_SURFACE
%type <variable>       VAR_ARRAY_IMAGE
%type <variable>       variable
%type <aint>           basic_type
%type <astring>        ASTRING
%type <astring>        primary_expr_string
%type <astring>        postfix_expr_string
%type <astring>        additive_expr_string
%type <astring>        expr_string
%type <ablock>         ABLOCK
%type <ablock>         instr_block
%type <adouble>         primary_expr
%type <adouble>         postfix_expr
%type <adouble>         unary_expr
%type <adouble>         cast_expr
%type <adouble>         multiplicative_expr
%type <adouble>         additive_expr
%type <adouble>         shift_expr
%type <adouble>         relational_expr
%type <adouble>         equality_expr
%type <adouble>         and_expr
%type <adouble>         exclusive_or_expr
%type <adouble>         inclusive_or_expr
%type <adouble>         logical_or_expr
%type <adouble>         logical_and_expr
%type <adouble>         conditional_expr
%type <adouble>         assignment_expr
%type <adouble>         expr
%type <adouble>         NUMBER
%type <aint>           command
%type <paramlist>      param_list
%type <paramlistdecl>  param_list_decl
%type <imageextent>    image_extent

%destructor { delete [] $$; } ASTRING primary_expr_string postfix_expr_string additive_expr_string expr_string
%destructor { delete  $$; } identifier IDENTIFIER
%destructor { delete  $$; } instr_block
%destructor { delete  $$; } image_extent



%{

#include "driver.h"
#include "scanner.h"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lex

%}

%%

start : /* empty */
    | list_commands END;

list_commands
          :
         end_instr | list_commands end_instr |
         command end_instr
         | list_commands command end_instr
         | loop_inst   | list_commands loop_inst
         | cond_inst   | list_commands cond_inst
         | func_inst   | list_commands func_inst
         | proc_decl   | list_commands proc_decl;
         | class_decl  | list_commands class_decl;
         | object_decl | list_commands object_decl;

end_instr :
        END_INSTRUCTION
        | T_SEMICOLON
        ;


loop_inst :
        FOR identifier ASSIGN_OP expr TO expr
      instr_block end_instr
        {
       int  previous_lineno=driver.yyiplineno;
       int* varint;
        AmiInstructionBlock::ptr block($7);
        IdentifierInfo::ptr ident($2);

      varint = new int;
      Vars.AddVar(type_int,ident,(void*)varint);
      for(*varint = (int) $4; *varint <= (int) $6; (*varint)++)
        {
          driver.yyiplineno = block->GetStartingLine();
          driver.parse_block(block);
        }
      Vars.deleteVar(ident->GetName().c_str());
      driver.yyiplineno=previous_lineno;
    }
        |
        FOR identifier ASSIGN_OP expr TO expr STEP expr
      instr_block end_instr
        {
       int  previous_lineno=driver.yyiplineno;
       float* var;
        AmiInstructionBlock::ptr block($9);
        IdentifierInfo::ptr ident($2);

      var = new float;
      Vars.AddVar(type_float,ident,(void*)var);

      for(*var = $4; *var <= $6; (*var)+=$8)
        {

          driver.yyiplineno = block->GetStartingLine();
          //driver.yyiplineno=previous_lineno;
          driver.parse_block(block);

        }
      Vars.deleteVar(ident->GetName().c_str());
      driver.yyiplineno=previous_lineno;
    }
    |
    T_REPEAT instr_block
    {
       int  previous_lineno=driver.yyiplineno;
        AmiInstructionBlock::ptr block($2);


      //          printf(" block = %s \n",$7);
          int res;
      //driver.yyiplineno = $2->GetStartingLine();

      do {

          //driver.yyiplineno=previous_lineno;
          driver.yyiplineno = block->GetStartingLine();
          res=driver.parse_block(block);

      } while (!res);
      driver.yyiplineno = previous_lineno;
    };


cond_inst :
    IF expr   instr_block end_instr
    {
      int  previous_lineno;
      AmiInstructionBlock::ptr block($3);

      // Pb with line numbers
      previous_lineno=driver.yyiplineno;

        if ($2>0.5)
        {
          //driver.yyiplineno=previous_lineno;
          driver.parse_block(block);
          driver.yyiplineno = previous_lineno;
        }
    }
    | IF expr  instr_block ELSE instr_block  end_instr
    {
       int  previous_lineno = driver.yyiplineno;

      AmiInstructionBlock::ptr block_if(  $3);
      AmiInstructionBlock::ptr block_else($5);

      // Pb with line numbers
      previous_lineno=driver.yyiplineno;

      if ($2>0.5)
        driver.parse_block(block_if);
      else
        driver.parse_block(block_else);
      driver.yyiplineno = previous_lineno;

    };


proc_decl:
    T_PROC  identifier
    {
      GB_driver.procedure_declaration = true;
    }
        T_OP_PAR param_list_decl T_CL_PAR
        instr_block end_instr
    {
      AMIFunction* amifunc;
      AmiInstructionBlock::ptr body($7);
      IdentifierInfo::ptr ident($2);

      amifunc = new AMIFunction;

      amifunc->SetName(ident->GetName().c_str());
      amifunc->SetFileName(driver.current_file);
      amifunc->SetParamList($5);
      amifunc->SetBody(     body);
      if (GB_debug)
        cout  << ident->GetName()
              << " body = "
              << body->GetBody()  << endl;

      Vars.AddVar( type_ami_function,ident, (void*) amifunc);

      // desactivate the flag procedure_declaration
      // which allows not to accept variables as identifiers
      GB_driver.procedure_declaration = false;
    } 
    |
    T_PROC  VAR_AMI_FUNCTION
    {
      // allow overriding current functions
      GB_driver.procedure_declaration = true;
    }
        T_OP_PAR param_list_decl T_CL_PAR
        instr_block end_instr
    {
      AMIFunction* amifunc;
      AmiInstructionBlock::ptr body($7);
      Variable*       var   = $2;

      // delete previous variable
      std::string varname = var->Name();
      int context = Vars.GetContext(var);
      Vars.deleteVar(var);

      FILE_MESSAGE(boost::format("Redefining procedure %1%") % varname); 

      amifunc = new AMIFunction;

      amifunc->SetName(varname.c_str());
      amifunc->SetFileName(driver.current_file);
      amifunc->SetParamList($5);
      amifunc->SetBody(     body);
      FILE_MESSAGE(boost::format("%1%: body = %2%")
                    % varname  % body->GetBody());

      // add the variable in the same context ...
      Vars.AddVar(  type_ami_function,
                    varname.c_str(),
                    (void*) amifunc,
                    context);

      // desactivate the flag procedure_declaration
      // which allows not to accept variables as identifiers
      GB_driver.procedure_declaration = false;
    };


class_decl:
    T_Class  identifier
        instr_block end_instr
    {
      AMIClass* amiclass;
      AmiInstructionBlock::ptr body($3);
      IdentifierInfo::ptr ident($2);

      amiclass = new AMIClass;

      amiclass->SetName(ident->GetName());
      amiclass->SetFileName(driver.current_file);
      amiclass->SetBody(     body);
      if (GB_debug) printf("%s body = %s\n", ident->GetName().c_str(),body->GetBody().c_str());

      Vars.AddVar( type_ami_class, ident, (void*) amiclass);

    };

object_decl:
    VAR_AMI_CLASS  identifier
    {
      Variable*       var   = $1;
      AMIClass::ptr ac = *(AMIClass::ptr*) (var->Pointer());
      IdentifierInfo::ptr ident($2);

      AMIObject* amiobject;

      amiobject = new AMIObject;

      amiobject->SetName(ident->GetName());
      amiobject->SetClass(ac);

      Vars.AddVar( type_ami_object, ident, (void*) amiobject);

    };

func_inst :
    FUNCTION expr_string end_instr
    {
       driver.res_print($2);
       driver.parse_script($2);
       delete [] $2;
     }
       |
       FUNCTION
       {
          int res;
          string name;
          string inc_cmd; // increment the command line string

          //cout << "current wd = "  <<  wxGetCwd() << endl;
          res=AskScript(name);
          if (!res) {
            driver.yyiperror(" Need script \n");
            YYABORT;
          }
          //cout << "current wd = "  <<  wxGetCwd() << endl;

        driver.res_print(name.c_str());
        driver.res_print("\n");
        driver.parse_file(name.c_str());

        // convert path delimiters to avoid pbs with \ character
        wxFileName filename(GetwxStr(name.c_str()),wxPATH_NATIVE);
        filename.Normalize(wxPATH_NORM_ALL,wxEmptyString,wxPATH_UNIX);

        wxString newname(   filename.GetVolume()+filename.GetVolumeSeparator()+
                            filename.GetPath(wxPATH_GET_VOLUME,wxPATH_UNIX)+
                            filename.GetPathSeparator(wxPATH_UNIX)+
                            filename.GetFullName());

        driver.res_print( newname.mb_str());
        driver.res_print("\n");
        inc_cmd = str(format(" \"%1%\" // from browser ") % newname.mb_str());
        if (driver.in_console)
          GB_main_wxFrame->GetConsole()
                          ->IncCommand(wxString::FromAscii(inc_cmd.c_str()));
      }
    |
    T_eval expr_string
    {
      std::string inputstring($2);
      driver.parse_string(inputstring,"'eval string' command");
      delete [] $2;
     }
        | VAR_AMI_FUNCTION  T_OP_PAR param_list T_CL_PAR end_instr
        {
          Variable*       var   = $1;
          ParamList::ptr  param($3);
          AMIFunction::ptr f;

          f = *(AMIFunction::ptr*) (var->Pointer());

        driver.yyip_call_function(f,param);

        if (GB_debug)
          cerr  << "End function body = "
                << f->GetString()
                << endl;

        }
        | VAR_AMI_FUNCTION  end_instr
        {
          Variable*    var   = $1;
          AMIFunction::ptr f;

          f = *(AMIFunction::ptr*) (var->Pointer());

          // Call the function
          driver.yyip_call_function(f);
        }
;

command:
         T_emptyargs {
         /**
          Description:
            Sets the number of command line arguments to 1 (name of the program)
          **/
          GB_argc = 1;
         }
         |
         T_BREAK {
           YYABORT;
         }
         |
         T_global
         {
         /**
         Description:
          Set a global context for variables,
          creates new variables as global and can only
          access global variables

         Others:
          local, global_new
         **/
       Vars.SetGlobalContext();
         }
         |
         T_global_new
         {
         /**
         Description:
          Set a global context for new variables,
          creates new variables as global,
          but allow access to lobal variables

         Others:
          local, global
         **/
       Vars.SetGlobalNew(1);
         }
         |
         T_local_new
         {
         /**
         Description:
          Set a local context for new variables,
          creates new variables as local,
          and allow access to local variables

         Others:
          local, global, global_new
         **/
       Vars.SetGlobalNew(0);
         }
         |
         T_local
         {
         /**
         Description:
         Set a local context for variables
         **/
       Vars.SetLastContext();
       Vars.SetGlobalNew(0);
         }
         |
     T_wait T_OP_PAR expr T_CL_PAR
     {
        /**
        Description: waits the time given in milliseconds
        */

        int ms = (int) $3;
        wxWaitTimer w;
        w.Start(ms,wxTIMER_ONE_SHOT);
        while (!w.finished) {
          if (GB_wxApp->Pending()) {
            GB_wxApp->Dispatch();
          }
        } // end while
      }
      |
      T_schedule T_OP_PAR expr T_COMMA VAR_AMI_FUNCTION T_CL_PAR
      {
        /**
        Parameters:
            (3) time in ms
            (5) function to schedule
        **/

        // TODO To avoid pbs, make sure that the variable does not disappears
        // by making a copy of it
        int ms = (int) $3;
        Variable*    var   = $5;

        wxScheduleTimer::ptr w = wxScheduleTimer::ptr(new wxScheduleTimer(  *(AMIFunction::ptr*) (var->Pointer()) ));
        // add to the list of schedule timers
        schedule_timers.push_back(w);
        w->Start(ms,wxTIMER_ONE_SHOT);

      }
          |
          identifier ASSIGN_OP T_Surface T_OP_BR expr T_CL_BR
          {
            VarArray* arraysurf;
            IdentifierInfo::ptr ident($1);

            int size = (int) $5;
            if (size<1) size = 1;
            arraysurf = new VarArray();
            arraysurf->Init(type_surface,size);
            Vars.AddVar(type_array,ident,arraysurf);
          }
          |
          identifier LEFT_ASSIGN T_Surface T_OP_BR expr T_CL_BR
          {
            VarArray* arraysurf;
            IdentifierInfo::ptr ident($1);
            int size = (int) $5;
            if (size<1) size = 1;
            arraysurf = new VarArray();
            arraysurf->Init(type_surface,size);
            Vars.AddVar(type_array,ident,arraysurf);
          }
          |
          identifier ASSIGN_OP T_Image T_OP_BR expr T_CL_BR
          {
            IdentifierInfo::ptr ident($1);
            VarArray* array;
            int size = (int) $5;
            if (size<1) size = 1;
            array = new VarArray();
            array->Init(type_image,size);
            Vars.AddVar(type_array,ident,array);
          }
         |
          identifier ASSIGN_OP expr_image
          {
          void * imptr;
          IdentifierInfo::ptr ident($1);

          imptr = (void*)driver.im_stack.GetLastImage();
          if (imptr != NULL)
            Vars.AddVar(type_image,ident,imptr);
          else
            driver.err_print("assignment of NULL image\n");
        }
         |
          identifier LEFT_ASSIGN expr_image
          {
          void * imptr;
          imptr = (void*)driver.im_stack.GetLastImage();
          IdentifierInfo::ptr ident($1);

          if (imptr != NULL)
            Vars.AddVar(type_image,ident,imptr);
          else
            driver.err_print("assignment of NULL image\n");
        }
        | identifier ASSIGN_OP VAR_C_FUNCTION  T_OP_PAR param_list T_CL_PAR
        {
          Variable*      var   = $3;
          ParamList::ptr param($5);
          Variable::ptr  res;
          IdentifierInfo::ptr ident($1);

          res = ((Variable::ptr (*)(ParamList*)) var->Pointer())(param.get());
          if (!res.use_count()) {
            driver.yyiperror(" function returns NULL \n");
            YYABORT;
          }
          res->Rename(ident->GetName().c_str());
          Vars.AddVar(res,ident->GetCreationContext());
        }
        |
        VAR_ARRAY_IMAGE T_OP_BR expr T_CL_BR ASSIGN_OP expr_image
        {
          VarArray::ptr array;
          void * imptr = (void*)driver.im_stack.GetLastImage();
          int  i = (int) $3;
          char name[256];

          array = *((VarArray::ptr*) ($1->Pointer()));
          if (imptr != NULL)
            if (array->GetVar(i).Pointer()==NULL) {
              sprintf(name,"%s[%d]",$1->Name(),i);
              array->InitElement(i,imptr,name);
            }
            else
            {
              driver.err_print("array element already assigned\n");
              delete (InrImage*)imptr;
            }
          else
            driver.err_print("assignment of NULL image\n");
        }
        |
      identifier ASSIGN_OP expr_matrix
            {
          void * imptr;
          imptr = (void*) driver.matrix_stack.GetLastMatrix();
          IdentifierInfo::ptr ident($1);

          if (imptr != NULL)
        Vars.AddVar(type_matrix,ident,imptr);
          else
        driver.err_print("assignment of NULL matrix\n");
        }
        |
        identifier ASSIGN_OP gltransform
        {
          void * imptr;
          imptr = (void*)driver.gltransf_stack.GetLastMatrix();
          IdentifierInfo::ptr ident($1);

          if (imptr != NULL)
            Vars.AddVar(type_gltransform,ident,imptr);
          else
            driver.err_print("assignment of NULL matrix\n");
        }
       | VAR_MATRIX ASSIGN_OP expr
       {
          FloatMatrix::ptr m1 = *((FloatMatrix::ptr*) ($1->Pointer()));
          (*m1) = $3;
       }
       | VAR_MATRIX ASSIGN_OP expr_matrix
       {
          FloatMatrix::ptr m1 = *((FloatMatrix::ptr*) ($1->Pointer()));
          FloatMatrix* m2 = driver.matrix_stack.GetLastMatrix();
          (*m1) = m2;
          printf("delete m2\n");
          delete m2;
          printf("delete m2 end\n");
       }
        |
        VAR_ARRAY_SURFACE T_OP_BR expr T_CL_BR ASSIGN_OP surface
        {
          VarArray::ptr array;
          void * surfptr;
          int  i = (int) $3;
          char name[256];

          array = *((VarArray::ptr*) ($1->Pointer()));
          surfptr = (void*)driver.surf_stack.GetLastSurf();
          if (surfptr != NULL)
          if (array->GetVar(i).Pointer()==NULL) {
            sprintf(name,"%s[%d]",$1->Name(),i);
            array->InitElement(i,surfptr,name);
          }
          else
          {
            driver.err_print("array element already assigned\n");
            delete (SurfacePoly*)surfptr;
          }
          else
            driver.err_print("assignment of NULL surface\n");
        }
        |
        identifier ASSIGN_OP T_context
        {
          Variables* contextptr = new Variables();
          IdentifierInfo::ptr ident($1);
          contextptr->SetName(ident->GetName());

          Vars.AddVar(type_context,ident,(void*)contextptr);
        }
        |
        identifier ASSIGN_OP surface
        {
          void * surfptr;
          surfptr = (void*)driver.surf_stack.GetLastSurf();
          IdentifierInfo::ptr ident($1);

          if (surfptr != NULL)
            Vars.AddVar(type_surface,ident,surfptr);
          else
            driver.err_print("assignment of NULL surface\n");
        }
        |
        var_surface LEFT_ASSIGN surface
        {
          Variable* var = $1;
          void* surfptr  = (void*) driver.surf_stack.GetLastSurf();

          // instead of deleting and creating,
          // replace the pointer and the information
          if (surfptr != NULL) {
            var->FreeMemory();
            var->Init(type_surface,
                      var->Name(),
                      surfptr);
          }
          else
            driver.err_print("assignment of NULL surface\n");

        }
        |
        VAR_ARRAY_SURFACE LEFT_ASSIGN T_Surface T_OP_BR expr T_CL_BR
        {
          Variable* var = $1;
          VarArray* arraysurf;
          int size = (int) $5;
          if (size<1) size = 1;
          arraysurf = new VarArray();
          arraysurf->Init(type_surface,size);

          // instead of deleting and creating,
          // replace the pointer and the information
          if (arraysurf != NULL) {
            var->FreeMemory();
            var->Init(type_array,
                      var->Name(),
                      arraysurf);
          }
          else
            driver.err_print("not able to create surface array !\n");

        }
        |
        identifier ASSIGN_OP T_INT T_OP_PAR expr T_CL_PAR
            {
          int* varint;
          IdentifierInfo::ptr ident($1);

          varint = new int((int)$5);
          Vars.AddVar(type_int,ident,(void*)varint);
        }
    |
        identifier ASSIGN_OP T_UCHAR T_OP_PAR expr T_CL_PAR
        {
        unsigned char* varuchar;
        IdentifierInfo::ptr ident($1);

        varuchar = new unsigned char((unsigned char)$5);
        Vars.AddVar(type_uchar,ident,(void*)varuchar);
        }
        |
          identifier ASSIGN_OP expr
            {
          float* varfloat;
          IdentifierInfo::ptr ident($1);
          varfloat = new float($3);

          Vars.AddVar(type_float,ident,(void*)varfloat);
        }
        |
          identifier ASSIGN_OP expr_string
            {
          string* varstring;
          varstring = new string($3);
          IdentifierInfo::ptr ident($1);

          Vars.AddVar(type_string,ident,(void*)varstring);
              delete [] $3;
        }
        |
        identifier ASSIGN_OP T_OPEN T_OP_PAR  expr_string T_COMMA ASTRING T_CL_PAR
        {
          FILE* file;
          IdentifierInfo::ptr ident($1);

          file = fopen($5,$7);
          if (file!=NULL) {
            Vars.AddVar(type_file,ident,(void*)file);
          } else {
            fprintf(stderr,"error opening file '%s' in mode '%s'\n",
                      $5,$7);
          /*
          switch (errno) {
          case EEXIST: fprintf(stderr,"EEXIST \n"); break;
          case EISDIR: fprintf(stderr,"EISDIR \n"); break;
          case ETXTBSY:fprintf(stderr,"ETXTBSY \n"); break;
          case EFAULT: fprintf(stderr,"EFAULT \n"); break;
          case EACCES: fprintf(stderr,"EACCES \n"); break;
          case ENAMETOOLONG: fprintf(stderr,"ENAMETOOLONG \n"); break;
          case ENOENT: fprintf(stderr,"ENOENT \n"); break;
          case ENOTDIR:fprintf(stderr,"ENOTDIR \n"); break;
          case EMFILE: fprintf(stderr,"EMFILE \n"); break;
          case ENFILE: fprintf(stderr,"ENFILE \n"); break;
          case ENOMEM: fprintf(stderr,"ENOMEM \n"); break;
          case EROFS:  fprintf(stderr,"EROFS \n"); break;
          case ELOOP:  fprintf(stderr,"ELOOP \n"); break;
          case ENOSPC: fprintf(stderr,"ENOSPC \n"); break;
                  default: fprintf("unknown error \n");
          }
          */
          }
        }
        |
        VAR_FILE ASSIGN_OP T_OPEN T_OP_PAR  expr_string T_COMMA ASTRING T_CL_PAR
        {
            std::string filename($1->Name());
            Variable* var;

            if (Vars.GetVar(filename.c_str(),&var))
                Vars.deleteVar(filename.c_str());

            FILE* file;
            file = fopen($5,$7);
            if (file!=NULL) {
                Vars.AddVar(type_file,filename.c_str(),(void*)file);
            } else {
              fprintf(stderr,"error opening file '%s' in mode '%s'\n",
                      $5,$7);
            }
        }
        | VAR_FILE T_POINT T_rewind
        {
            FILE_ptr file = *(FILE_ptr*) ($1->Pointer());
            rewind(file.get());
        }
        |  T_SetDebugOn
        {
      GB_debug = 1;
        }
        |  T_SetDebugOff
        {
      GB_debug = 0;
        }
        |  T_SetVerboseOn
        {
      GB_verbose = 1;
      verbose = 1;
        }
        |  T_SetVerboseOff
        {
      GB_verbose = 0;
        }
        |  T_SetProgress T_OP_PAR expr T_CL_PAR
        {
          GB_main_wxFrame->SetProgress((int)($3+0.5));
        }
        |  QUIT  {
          GB_main_wxFrame->Close(true);
        }
        |  SHOW var_image
        {
          char titre[100];
          Variable* var;
          int var_context = Vars.GetContext($2);

          if (var_context>=0) {
            sprintf(titre,"%s_draw",$2->Name());
            if (GB_debug) fprintf(stderr,
                      "SHOW var_image  title %s \n",
                      titre);
            //if (Vars.GetCurrentContext()->GetVar(titre,&var)) {
            if (Vars.GetVar(titre,&var,var_context)) {
              DessinImageParametres* param;
              DessinImage::ptr di;
              di = *((DessinImage::ptr*) var->Pointer());
              param = di->GetParam();
              param->_MAJ.MAJCoupes();
              di->Paint();
            }
            else
            {
              if (GB_debug) fprintf(stderr,"SHOW var_image creating title %s \n",titre);
              DessinImage* di;

              std::string varname(titre);

              di = CreateIDraw( varname,
                    *((InrImage::ptr*) $2->Pointer()));

              Variable* newvar = Vars.AddVar(type_imagedraw,titre, (void*) di,
                          var_context);
              di->SetCloseFunction(
                (void*) CB_delete_imagedraw,
                (void*) (newvar));
            }
          } // var_context >=0
        }
        |  T_HIDE var_image
        {
          char titre[100];
          Variable* var;

          sprintf(titre,"%s_draw",$2->Name());
          if (Vars.GetVar(titre,&var)) {

        if (var->Type() == type_imagedraw) {
            driver.err_print("Hide window \n");
            (*(DessinImage::ptr*) var->Pointer())->Hide();
        }
        else
          fprintf(stderr,"Variable %s_draw not of type imagedraw \n",
            $2->Name());
          } else
        fprintf(stderr,"Image %s not visible \n",
            $2->Name());

        }
        |  SHOW var_surface
        {
          string    titre;
          Viewer3D* surfdraw;
          Variable* var;
          int var_context = Vars.GetContext($2);

          if (var_context>=0) {
            titre = str(format("%s_draw") % $2->Name());
            if (!Vars.GetVar(titre.c_str(),&var,var_context)) {
              surfdraw = new Viewer3D(  GB_main_wxFrame,
                                        wxString::FromAscii(titre.c_str()));

              Variable* newvar =  Vars.AddVar(type_surfdraw,titre.c_str(),
                          (void*) surfdraw,
                          var_context);
              surfdraw->SetCloseFunction(
                              (void*) CB_delete_surfdraw,
                              (void*) (newvar));

              surfdraw->Show(true);
              // Add the surface to the OpenGL Object
              surfdraw->GetCanvas()->AddSurface(
                                *(SurfacePoly::ptr*) $2->Pointer());
              surfdraw->Paint();
              surfdraw->GetCanvas()->Normalize();
              surfdraw->GetCanvas()->Center();
            } else
              cerr << " variable " << titre << " already exists " << endl;
          } // var_context >=0
        }
        |  T_penguin
        {
          // Create the main frame window
          PenguinFrame *frame = new PenguinFrame(GB_main_wxFrame, wxT("wxWidgets Penguin Sample"),
              wxDefaultPosition, wxDefaultSize);

          #if wxUSE_ZLIB
            if (wxFileExists(wxT("penguin.dxf.gz")))
              frame->GetCanvas()->LoadDXF(wxT("penguin.dxf.gz"));
          #else
            if (wxFileExists(wxT("penguin.dxf")))
              frame->GetCanvas()->LoadDXF(wxT("penguin.dxf"));
          #endif

          // Show the frame
          frame->Show(true);
        }
        |  var_image ASSIGN_OP expr_image
        {
          InrImage::ptr i1 = *(InrImage::ptr*) $1->Pointer();
          InrImage::ptr i2 = InrImage::ptr(driver.im_stack.GetLastImage());

          if (i2.get()) {
            // copy option
            if (!((*i1)=(*i2))) driver.err_print(" Error in images assignement\n");
          } else {
            driver.err_print("Error\n");
          }
        }
        |  var_image LEFT_ASSIGN expr_image
        {
        /**
        Description:
          Replacing the previous image by the new one.
        **/
          Variable* var = $1;
          InrImage::ptr i1 = *(InrImage::ptr*) $1->Pointer();
          InrImage* imptr  = driver.im_stack.GetLastImage();
          bool can_skip_allocation = false;

          if (i1.get()!=imptr) {
            can_skip_allocation = (i1->GetFormat()==imptr->GetFormat());
            if (can_skip_allocation) {
              // first try the standard data copy
              can_skip_allocation = ((*i1)=(*imptr));
              if (can_skip_allocation) {
                // copy additional information here
                i1->SetTranslation(imptr->TrX(), imptr->TrY(), imptr->TrZ());
                i1->SetVoxelSize( imptr->VoxSizeX(), 
                                  imptr->VoxSizeY(),
                                  imptr->VoxSizeZ());
                // then delete imptr
                delete imptr;
              }
            }
            if (!can_skip_allocation) {
              // instead of deleting and creating,
              // replace the pointer and the information
              if (imptr != NULL) {
                var->FreeMemory();
                var->Init(type_image,
                          var->Name(),
                          (void*)imptr);
              }
              else
                driver.err_print("assignment of NULL image\n");
            } // end if (!can_skip_allocation)
          } // end if (i1.get()!=imptr)
        }
        |  var_image ASSIGN_OP expr
        {
        /**
        parameters:
        (1) image
        (3) expression

        description:
        Sets the whole image to a constant value given by expression.
        **/
          InrImage::ptr i1 = *(InrImage::ptr*) $1->Pointer();
          i1->InitImage($3);
        }
        |  var_image T_OP_BR expr T_CL_BR ASSIGN_OP expr_image
        {
        /**
        parameters:
        (1) image: vectorial or RGB input image
        (3) n: component index
        (6) imageval: image expression

        description:
        assigns imageval to the component 'n' of the input image
        **/
          int comp = (int) $3;

          InrImage::ptr i1 = *(InrImage::ptr*) $1->Pointer();
          InrImage::ptr i2 = InrImage::ptr(
                                driver.im_stack.GetLastImage());

          Si (comp<0) Ou (comp>i1->GetVDim()) Alors
            fprintf(stderr,"image[n]=image error index too high, reset to 0 \n");
            comp = 0;
          FinSi

          Si i2->ScalarFormat()  Alors
             i1->InitBuffer();
             i2->InitBuffer();
             Repeter
                i1->VectFixeValeur(comp,i2->ValeurBuffer());
                i2->IncBuffer();
             JusquA Non(i1->IncBuffer()) FinRepeter
          Sinon
            driver.yyiperror("image[]=image\t second image has to be scalar \n");
            YYABORT;
          FinSi

        }
        |  var_image T_OP_BR expr T_CL_BR ASSIGN_OP expr
        {
        /**
        parameters:
        (1) image: vectorial or RGB input image
        (3) n: component index
        (6) val: numerical expression

        description:
        assigns the value val to every component 'n' of the input image
        **/
          int comp = (int) $3;

          Si (comp<0) Ou (comp>2) Alors
        fprintf(stderr,"image[n]=image error \n");
        comp = 0;
          FinSi

         InrImage::ptr i1 = *(InrImage::ptr*) $1->Pointer();

          Si i1->VectorialFormat()  Alors

             i1->InitBuffer();
             Repeter
           i1->VectFixeValeur(comp,$6);
             JusquA Non(i1->IncBuffer()) FinRepeter

      FinSi

        }
        |  var_image T_OP_PAR expr T_COLON expr T_COMMA expr T_COLON expr T_COMMA expr T_COLON expr T_CL_PAR ASSIGN_OP expr_image
        {
        /**
          Description: Pads the image ...
        */
          int posx  = (int) $3;
          int stepx = (int) $5;
          int posy  = (int) $7;
          int stepy = (int) $9;
          int posz  = (int) $11;
          int stepz = (int) $13;


          InrImage::ptr i1 = *(InrImage::ptr*) $1->Pointer();
          InrImage::ptr i2 = InrImage::ptr(driver.im_stack.GetLastImage());

          Func_Pad(i1.get(),i2.get(),stepx,posx,stepy,posy,stepz,posz);


        }
        |  VAR_FLOAT INC_OP
        {
          (*(*(float_ptr*) $1->Pointer()))++;
        }
        |  VAR_FLOAT DEC_OP
        {
          (*(*(float_ptr*) $1->Pointer()))--;
        }
        |  VAR_FLOAT ASSIGN_OP expr
        {
          *(*(float_ptr*) $1->Pointer()) = $3;
        }
        |  VAR_INT INC_OP
        {
          (*(*(int_ptr*) $1->Pointer()))++;
        }
        |  VAR_INT DEC_OP
        {
          (*(*(int_ptr*) $1->Pointer()))--;
        }
        |  VAR_INT ASSIGN_OP expr
        {
          *(*(int_ptr*) $1->Pointer()) = (int) $3;
        }
        |  VAR_UCHAR ASSIGN_OP expr
        {
           *(*(uchar_ptr*) $1->Pointer()) = (unsigned char) $3;
        }
        |  VAR_UCHAR INC_OP
        {
           (*(*(uchar_ptr*) $1->Pointer()))++;
        }
        |  VAR_UCHAR DEC_OP
        {
           (*(*(uchar_ptr*) $1->Pointer()))--;
        }
        |  VAR_STRING ASSIGN_OP expr_string
        {
          string_ptr newname( new std::string($3));
          $1->SetString(newname);
        }
        | SHOW VARIABLES
        {
          Vars.display();
        }
        | T_del variable
        {
        /**
          Description: 
            Delete the given variable
        */
         /*Variable* var;

         if (Vars.GetVar($2->Name(),&var))
         Vars.deleteVar($2->Name());
         */
         Vars.deleteVar($2);
        }
        | T_delvars expr_string
        {
        /**
          Description: 
            Delete all variables that match the expression, where the expression can contain 
            '*' and '?' characters
        */
         std::string varmatch($2);
         Vars.deleteVars(varmatch);
        }
        | T_del VAR_ARRAY_SURFACE T_OP_BR expr T_CL_BR
        {
          VarArray::ptr array = *(VarArray::ptr*) ($2->Pointer());;
          int  i = (int) $4;

          if (array->GetVar(i).Pointer()!=NULL) {
            array->GetVar(i).FreeMemory();
          }
        }
        | ASHELL expr_string
           {
         std::system($2);
         delete [] $2;
           }
        | LS
           {
//         std::ostream streamtest(TC->GetLog());
//        std::cout=streamtest;
         //wxStreamToTextRedirector redirect(TC->GetLog());

         std::system("ls");
           }
        | HELP
          {
        driver.res_print("Topics: \n");
        driver.res_print("\t var:  variables                 \n");
            driver.res_print("\t     image:     Help for image     variables\n");
            driver.res_print("\t     imagedraw: Help for imagedraw variables\n");
        driver.res_print("\t cmd:  commands                  \n");
        driver.res_print("\t fnc:  functions                 \n");
        driver.res_print("\t loop: loops                     \n");
        driver.res_print("\t cond: conditions                \n");
            driver.res_print("\t arit: arithmetical expressions  \n");
      }
        | HELP identifier
         {
          IdentifierInfo::ptr ident($2);
       if (strcmp(ident->GetName().c_str(),"var")==0) {
         driver.res_print("var types: void image float int string imagedraw surface surfacedraw \n");
         driver.res_print("\t del varname\n");
         driver.res_print("\t\t\t - deletes a variable and frees its contents from memory \n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"cmd")==0) {
         driver.res_print("commands:\n");
         driver.res_print("\t sh Quit Image Show Help ls print func filter normgrad discnormgrad OpImage EDPdilate EDPerode EDPopen EDPclose\n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"fnc")==0) {
         driver.res_print("functions:\n");
         driver.res_print("\t  filter normgrad gradient OpImage secdergrad ");
             driver.res_print("subimage putimage\n");
         driver.res_print("\t       OpImage( var_image, string ) \n");
         driver.res_print("\t       OpImage( var_image, var_image, string ) \n");
         driver.res_print("\t       OpImage( var_image, var_image, var_image, string ) \n");
         driver.res_print("\t       filter( var_image, expr, number, number, number ) \n");
         driver.res_print("\t       normgrad(   var_image, expr ) \n");
         driver.res_print("\t       discnormgrad(   var_image ) \n");
         driver.res_print("\t       gradient(   var_image, expr ) \n");
         driver.res_print("\t       secdergrad( var_image, expr ) \n");
         driver.res_print("\t       subimage( var_image, expr, expr, expr, expr, expr, expr ) \n");
         driver.res_print("\t       putimage( var_image, var_image, expr, expr, expr  ) \n");
         driver.res_print("\t       EDPdilate( var_image, expr, expr) \n");
         driver.res_print("\t       EDPerode(  var_image, expr, expr) \n");
         driver.res_print("\t       EDPopen(   var_image, expr, expr) \n");
         driver.res_print("\t       EDPclose(  var_image, expr, expr) \n");

         driver.res_print("\t       AnisoGS(   var_image, expr, expr, expr, expr) \n");
         driver.res_print("\t\t  expr 1: standard deviation of the Gaussian convolution  \n");
         driver.res_print("\t\t  expr 2: threshold on the gradient norm \n");
         driver.res_print("\t\t  expr 3: data attachment coefficient \n");
         driver.res_print("\t\t  expr 4: number of iterations \n");
             driver.res_print("\t       StructTensor( var_image, expr, expr ) \n");
             driver.res_print("\t       Curvatures(   var_image, expr ) \n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"loop")==0) {
         driver.res_print("loops:\n");
         driver.res_print("\t  for var=expr to expr { instructions } \n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"cond")==0) {
         driver.res_print("loops:\n");
         driver.res_print("\t  if expr  { instructions } \n");
         driver.res_print("\t\t  [ else { instructions } ]\n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"arit")==0) {
         driver.res_print("arithmetical expressions:\n");
         driver.res_print("\t  constants: Pi\n");
         driver.res_print("\n");
         driver.res_print("\t  functions:  cos()  sin()  tan() \n");
         driver.res_print("\t             acos() asin() atan() \n");
         driver.res_print("\t              exp()   ln()  log() \n");
         driver.res_print("\t             sinh() cosh()        \n");
         driver.res_print("\t  operators:\n");
         driver.res_print("\t            *, /\n");
         driver.res_print("\t            +, -\n");
         driver.res_print("\t            <, >, <=, >=\n");
         driver.res_print("\t            ==, != \n");
         driver.res_print("\t            & \n");
         driver.res_print("\t            ^ \n");
         driver.res_print("\t            | \n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"image")==0) {
         driver.res_print("variable Image\n");
         driver.res_print(" Creation:\n");
         driver.res_print("\t Image \"filename\"\n");
         driver.res_print("\t\t\t - reads an image file \n");
         driver.res_print("\t Image \n");
         driver.res_print("\t\t\t -  open browsing window for choosing the image\n");
         driver.res_print("\t Image(basic_type, size_x , size_y, size_z) \n");
         driver.res_print("\t\t\t - create an image of a basic type and the given dimensions\n");
         driver.res_print("\t\t\t - basic_type are CHAR UCHAR SHORT USHORT FLOAT DOUBLE RGB FLOAT_VECTOR \n");
         driver.res_print("\t\t\t - size_x, size_y, size_z: float expressions \n");
         driver.res_print(" Functions that return a new image: \n");
         driver.res_print("\t OpImage( var_image, string ) \n");
         driver.res_print("\t\t\t - applies point to point operations to 1 image\n");
         driver.res_print("\t OpImage( var_image, var_image, string ) \n");
         driver.res_print("\t\t\t - applies point to point operations to 2 images\n");
         driver.res_print("\t OpImage( var_image, var_image, var_image, string ) \n");
         driver.res_print("\t\t\t - applies point to point operations to 3 images\n");
         driver.res_print("\t filter( var_image, size, number, number, number ) \n");
         driver.res_print("\t\t\t - applies Gaussian (or derivatives) convolution of sd size \n");
         driver.res_print("\t\t\t - number represent the derivation order:\n");
         driver.res_print("\t\t\t\t 0: no           derivation in this dimension\n");
         driver.res_print("\t\t\t\t 1: first order  derivation in this dimension\n");
         driver.res_print("\t\t\t\t 2: second order derivation in this dimension\n");
         driver.res_print("\t normgrad(   var_image, expr ) \n");
         driver.res_print("\t\t\t - applies Gaussian (or derivatives) convolution of sd size \n");

         driver.res_print("\t discnormgrad(   var_image ) \n");
         driver.res_print("\t\t\t - Discrete gradient norm without Gaussian convolution \n");

         driver.res_print("\t gradient(   var_image, expr ) \n");
         driver.res_print("\t\t\t - Gradient of the image using  Gaussian (and derivatives) convolution of sd size \n");

         driver.res_print("\t secdergrad( var_image, expr ) \n");
             driver.res_print("\t\t\t - Compute the second order derivative in the gradient direction.\n");


         driver.res_print("\t subimage( var_image, expr, expr, expr,");
         driver.res_print(" expr, expr, expr ) \n");
             driver.res_print("\t\t\t - extract a subimage \n");

         driver.res_print("\t AddGaussNoise( var_image, expr, expr) \n");
             driver.res_print("\t\t\t - add a Gaussian noise to the image \n");
             driver.res_print("\t\t\t - param 2: mean \n");
             driver.res_print("\t\t\t - param 3: standard deviation \n");

         driver.res_print("\t eccentricity( var_image) \n");
             driver.res_print("\t\t\t - Compute a expression of eccentricity  \n");
             driver.res_print("\t\t\t - of the image, returns an 'expr'  \n");

         driver.res_print("\t isoarea2D( var_image, expr, expr, expr) \n");
             driver.res_print("\t\t\t - Compute the surface area of the region\n");
             driver.res_print("\t\t\t   of positive intensity containing the point\n");
             driver.res_print("\t\t\t   (x,y)\n");
             driver.res_print("\t\t\t expr 1: resolution  \n");
             driver.res_print("\t\t\t expr 2: x  \n");
             driver.res_print("\t\t\t expr 3: y  \n");

         driver.res_print("\t EDPdilate( var_image, expr, expr) \n");
         driver.res_print("\t EDPerode(  var_image, expr, expr) \n");
         driver.res_print("\t EDPopen(   var_image, expr, expr) \n");
         driver.res_print("\t EDPclose(  var_image, expr, expr) \n");

         driver.res_print("\t AnisoGS(   var_image, expr, expr, expr, expr) \n");
         driver.res_print("\t\t  expr 1: sigma     \n");
         driver.res_print("\t\t  expr 2: threshold \n");
         driver.res_print("\t\t  expr 3: data attachment coefficient \n");
         driver.res_print("\t\t  expr 4: number of iterations \n");


         driver.res_print("\t image = AnisoGS.init( var_image, expr, expr, expr )\n");
         driver.res_print("\t\t  expr 1:    sigma  \n");
         driver.res_print("\t\t  expr 2:    theshold  \n");
         driver.res_print("\t\t  expr 3:    data attachment coeff  \n");
         driver.res_print("\t AnisoGS.setcoeff( expr )\n");
         driver.res_print("\t\t  expr 1:    tangential coeff  \n");
         driver.res_print("\t AnisoGS.setcoeff( expr, expr )\n");
         driver.res_print("\t\t  expr 1:    min curv coeff  \n");
         driver.res_print("\t\t  expr 2:    max curv coeff  \n");
         driver.res_print("\t AnisoGS.iterate\n");
         driver.res_print("\t AnisoGS.end\n");

         driver.res_print("\t image = AnisoWeickert.init( var_image, expr, expr, expr )\n");
         driver.res_print("\t\t  expr 1:    sigma  \n");
         driver.res_print("\t\t  expr 2:    theshold  \n");
         driver.res_print("\t\t  expr 3:    evolution step dt  \n");
         driver.res_print("\t AnisoWeickert.iterate\n");
         driver.res_print("\t AnisoWeickert.end\n");

         driver.res_print("\t image = AnisoCW.init( var_image, expr, expr, expr,expr, expr )\n");
         driver.res_print("\t\t  expr 1:    sigma  first Gaussian convolution\n");
         driver.res_print("\t\t  expr 2:    rho    second Gaussian convolution\n");
         driver.res_print("\t\t  expr 2:    C      threshold for the coherence\n");
         driver.res_print("\t\t  expr 2:    alpha  lowest diffusion coefficient\n");
         driver.res_print("\t\t  expr 3:    dt     evolution step \n");
         driver.res_print("\t AnisoCW.iterate\n");
         driver.res_print("\t AnisoCW.end\n");

         driver.res_print(" Operations: \n");

         driver.res_print("\t Show var_image \n");
         driver.res_print("\t\t\t - displays the image \n");

         driver.res_print("\t var_image = var_image \n");
         driver.res_print("\t\t\t - makes a copy \n");

         driver.res_print("\t var_image.initvalue( expr ) \n");
             driver.res_print("\t\t\t - initialize every point to a scalar value \n");

         driver.res_print("\t var_image.initvalue( expr, expr, expr ) \n");
             driver.res_print("\t\t\t - initialization every point to a vector or RGB value \n");

         driver.res_print("\t var_image.set( expr ) \n");
         driver.res_print("\t\t\t - change the value a the current point \n");

         driver.res_print("\t var_image.set( expr, expr, expr ) \n");
         driver.res_print("\t\t\t - change the value a the current point \n");
         driver.res_print("\t\t\t - for RGB or VECTOR FIELD images \n");

         driver.res_print("\t var_image.setpos(expr,expr,expr) \n");
         driver.res_print("\t\t\t - set the current position \n");

         driver.res_print("\t var_image.putimage(var_image,expr,expr,expr) \n");
         driver.res_print("\t\t\t - put an image at the specified position \n");

         driver.res_print("\t var_image(expr,expr) \n");
         driver.res_print("\t\t\t - return the value at a 2D position \n");

         driver.res_print("\t var_image(expr,expr,expr) \n");
         driver.res_print("\t\t\t - return the value at a 3D position \n");

         driver.res_print("\t var_image.tx \n");
         driver.res_print("\t\t\t - return size in X \n");

         driver.res_print("\t var_image.ty \n");
         driver.res_print("\t\t\t - return size in Y \n");

         driver.res_print("\t var_image.tz \n");
         driver.res_print("\t\t\t - return size in Z \n");

         driver.res_print("\t var_image.init \n");
         driver.res_print("\t\t\t - init the current position to (0,0,0) \n");

         driver.res_print("\t var_image.info \n");
         driver.res_print("\t\t\t - print information on the image \n");

         driver.res_print("\t var_image.save \"filename\" \n");
         driver.res_print("\t\t\t - save the image \n");

         driver.res_print("\t var_image.normalize \n");
         driver.res_print("\t\t\t - normalizes a vector field image \n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"imagedraw")==0) {
         driver.res_print("variable imagedraw\n");
         driver.res_print(" Creation:");
         driver.res_print("\t show var_image \n");
         driver.res_print("\t\t\t - displays an image and creates a new variable\n");
         driver.res_print("\t\t\t   of type imagedraw and the name ending by _draw \n");
         driver.res_print(" Functions:\n");

         driver.res_print(" var_imagedraw.setpos( expr, expr, expr) \n");
         driver.res_print("\t\t\t   set the cursor position \n");

         driver.res_print(" var_imagedraw.showcursor( expr) \n");
         driver.res_print("\t\t\t   expr=1-->shows cursor   0-->hides cursor \n");

         driver.res_print(" var_imagedraw.update \n");
         driver.res_print("\t\t\t   update the displayed images \n");

         driver.res_print(" var_imagedraw.compare(var_image) \n");
         driver.res_print("\t\t\t   add a comparison image \n");

         driver.res_print(" var_imagedraw.setvector( number, var_image) \n");
         driver.res_print("\t\t\t   set var_image a the vector image with number \n");
         driver.res_print("\t\t\t   between 1 and 3 \n");
       }
     }
    | HELP ASTRING
    {
      string  help_cmd;
      string  help_file;


      // Check for directory
      help_file = str( format("%s/%s") % GB_help_dir.c_str() % $2);

      Si GB_debug AlorsFait fprintf(stderr,"3\n");
          help_cmd = str(format("test -d %s") % help_file.c_str());
          Si (std::system(help_cmd.c_str()) == 0) Alors
            printf("\nAvailable help files in %s:\n",$2);
            help_cmd = str( format("cd %s; ls *.amih ") % help_file.c_str());
            std::system(help_cmd.c_str());
          Sinon

         Si GB_debug AlorsFait fprintf(stderr,"4\n");
            // Check for file
            help_file = str( format("%s/%s.amih") % GB_help_dir.c_str() %$2);

            help_cmd = str(format("test -r %s") % help_file.c_str());
            Si (std::system(help_cmd.c_str()) == 0) Alors
              help_cmd = str( format("more %s") % help_file.c_str());
              std::system(help_cmd.c_str());
            Sinon
              Si GB_debug AlorsFait fprintf(stderr,"5\n");
              // Try to find it in any subdirectory of the help dir
              help_cmd = str(format("test -r `find %s -name \"%s.amih\"` 2> /dev/null")
                            % GB_help_dir.c_str()
                            % $2);
              Si std::system(help_cmd.c_str())==0 Alors
                help_cmd = str(format("find %s -name \"%s.amih\" -exec ls {} \\; -exec more {} \\;")
                  % GB_help_dir.c_str()
                  % $2);
                std::system(help_cmd.c_str());
              Sinon
                fprintf(stderr,"\nNo help file (%s) found for this command \n",
            help_file.c_str());
            printf("\nAvailable help directories:\n");
            help_cmd = str(format("cd %s; find . -type d  ") % GB_help_dir.c_str());
                std::system(help_cmd.c_str());

                printf("\nAvailable help files:\n");
            help_cmd = str(format("ls *.amih ") %
                std::system(help_cmd.c_str()));
          FinSi
            FinSi

          FinSi

      Si GB_debug AlorsFait fprintf(stderr,"6\n");

        }
        | VAR_FILE T_POINT PRINT expr_string
        {
          FILE_ptr file = *(FILE_ptr*) ($1->Pointer());

          fprintf(file.get(),"%s",$4);
          fflush(file.get());
          delete [] $4;
        }
        | VAR_FILE T_POINT PRINTN expr_string
        {
          FILE_ptr file = *(FILE_ptr*) ($1->Pointer());

          fprintf(file.get(),"%s\n",$4);
          fflush(file.get());
          delete [] $4;
        }
        | PRINT expr_string
        {
         /**
          Description:
            Print a string
          **/
          driver.res_print($2);
          delete [] $2;
        }
        | PRINTN expr_string
          {
         /**
          Description:
            Print a string and newline
          **/
        driver.res_print($2);
        driver.res_print("\n");
        delete [] $2;
      }
      | PRINT expr_matrix
      {
        FloatMatrix* mat=driver.matrix_stack.GetLastMatrix();
        mat->PrintSelf();
        delete mat;
      }
      | T_InfoDialog expr_string
      {
         /**
          Parameters:
            string expression: information text
          Description:
            Popup an Information Dialog with the given message
          **/
          driver.info_print($2);
          delete [] $2;
      }
      | expr_matrix
      {
        FloatMatrix* mat=driver.matrix_stack.GetLastMatrix();
        mat->PrintSelf();
        delete mat;
          }
        | VAR_FILE T_POINT PRINT expr
        {
            FILE_ptr file = *(FILE_ptr*) ($1->Pointer());

          fprintf(file.get(),"%5.10f",$4);
          fflush(file.get());
        }
        | VAR_FILE T_POINT T_CLOSE
        {
            printf("Files are not close anymore: delete the variable instead \n");
          //FILE_ptr file = *(FILE_ptr*) ($1->Pointer());
          //fclose(file.get());
        }
        | PRINT expr
        {
        /**
          Description:
            Prints a numerical value.
        **/
          string st;
          st = str(format("%5.10f") % $2);
          driver.res_print(st.c_str());
        }
        | PRINTN expr
        {
        /**
          Description:
            Prints a numerical value and a newline.
        **/
          string st;
          st = str(format("%5.10f\n") %$2);
          driver.res_print(st.c_str());
        }
        | VAR_IMAGEDRAW T_POINT SETPOS T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          DessinImage::ptr draw;
          DessinImageParametres* param;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          param = draw->GetParam();
          param->_pos._x = (int) $5;
          param->_pos._y = (int) $7;
          param->_pos._z = (int) $9;
          //      param->_pos.Check();
          param->_MAJ.MAJCoupes();

          draw->Paint();

        }
        | VAR_IMAGEDRAW T_POINT SHOWCURSOR T_OP_PAR expr T_CL_PAR
        {
          DessinImage::ptr draw;
          DessinImageParametres* param;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          param = draw->GetParam();
          param->_curseur._visible = (int) ($5>0.5);
          //      param->_MAJ.MAJCoupes();

          draw->Paint();
        }
        | VAR_IMAGEDRAW T_POINT UPDATE
        {
          DessinImage::ptr draw;
          DessinImageParametres* param;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          param = draw->GetParam();
          param->_MAJ.MAJCoupes();
          draw->Paint();
        }
        | VAR_IMAGEDRAW T_POINT COMPARE T_OP_PAR var_image T_CL_PAR
        {
            DessinImage::ptr draw;
            InrImage::ptr im;
            char title[255];
            Variable* var;

            draw = *(DessinImage::ptr*) ($1->Pointer());
            im   = *(InrImage::ptr*) $5->Pointer();

            sprintf(title,"%s_draw",$5->Name());

            if (Vars.GetCurrentContext()->GetVar(title,&var)) {
              DessinImage::ptr di;
              DessinImageParametres* param;
              di = *(DessinImage::ptr*) var->Pointer();
              param = di->GetParam();
              param->_MAJ.MAJCoupes();
              di->Paint();

/* already done at window creation
              std::string* varname = new std::string(title);
              di->SetCloseFunction(
                  (void*) CB_delete_imagedraw,
                  (void*) varname);
*/
              draw->CreeCompare2Image(di);
            }
            else
            {
              DessinImage* di;
              std::string varname(title);
              di = CreateIDraw( varname, im);

              Variable* newvar = Vars.AddVar(type_imagedraw,title, (void*) di);
              di->SetCloseFunction(
                  (void*) CB_delete_imagedraw,
                  (void*) (newvar));
              // get the pointer to the newly created
              // variable
              Variable* var;
              if (Vars.GetVar(title,&var))
                draw->CreeCompare2Image(*(DessinImage::ptr*)var->Pointer());
              else
                fprintf(stderr,"Image comparison: Variable %s not found !\n",title);
            }

        }
        | VAR_IMAGEDRAW T_POINT COMPARE T_OP_PAR VAR_IMAGEDRAW T_CL_PAR
        {
        DessinImage::ptr draw1;
        DessinImage::ptr draw2;

          draw1 = *(DessinImage::ptr*) $1->Pointer();
          draw2 = *(DessinImage::ptr*) $5->Pointer();

/*          std::string* varname = new std::string($5->Name());
          draw2->SetCloseFunction(
                  (void*) CB_delete_imagedraw,
                  (void*) varname);
*/
          draw1->CreeCompare2Image(draw2);
        }
        | VAR_IMAGEDRAW T_POINT T_SetCompareDisplacement T_OP_PAR VAR_IMAGEDRAW T_COMMA var_image T_CL_PAR
        {
        /**
        Parameters:
            (1) Image Draw Window
            (5)  comparison window
            (7) Vectorial image

        Description:
            Defines a displacement to apply to the cursor when
            comparing 2 image drawing windows
        **/
          DessinImage::ptr draw;
          DessinImage::ptr draw2;
          InrImage::ptr displ;

          draw  = *(DessinImage::ptr*) $1->Pointer();
          draw2 = *(DessinImage::ptr*) $5->Pointer();
          displ = *(InrImage::ptr*)    $7->Pointer();
          draw->SetCompareDisplacement(draw2,displ);
        }
        | VAR_IMAGEDRAW T_POINT T_SetCompTransf T_OP_PAR
           expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA
           expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA
           expr T_COMMA expr T_COMMA expr T_COMMA expr
         T_CL_PAR
        {
        DessinImage::ptr draw;
        FloatMatrix* mat;

        draw = *(DessinImage::ptr*) ($1->Pointer());

        mat = new FloatMatrix(4,4);
        (*mat)[0][0] = $5;
        (*mat)[0][1] = $7;
        (*mat)[0][2] = $9;
        (*mat)[0][3] = $11;
        (*mat)[1][0] = $13;
        (*mat)[1][1] = $15;
        (*mat)[1][2] = $17;
        (*mat)[1][3] = $19;
        (*mat)[2][0] = $21;
        (*mat)[2][1] = $23;
        (*mat)[2][2] = $25;
        (*mat)[2][3] = $27;

            if (draw->GetCompareWindow(0)!=NULL)
          draw->GetCompareWindow(0)->SetTransformationMatrix(mat);
        // PB: the matrix is never freed from memory ...
        // TODO use smart pointer management !!!

        }
        | VAR_IMAGEDRAW T_POINT SETVECTOR T_OP_PAR NUMBER T_COMMA var_image T_CL_PAR
        {
          /**
            Parameters:
                (1) Image Drawing window
                (5) Index of the vector field to be drawned (between 1 and 3)
                (7) Vector field image
            Description:
                Assign a vector field to be draw in the given image drawing window.
          **/
          DessinImage::ptr draw;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          draw->LoadVectImage( (int) $5, (*(InrImage::ptr*) $7->Pointer()));
        }
        | VAR_IMAGEDRAW T_POINT T_DrawVector T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
          DessinImage::ptr draw;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          draw->SetVectorVisible( (int) $5, (int) $7);
        }
        | VAR_IMAGEDRAW T_POINT T_DisplayVectors
        {
          DessinImage::ptr draw;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          draw->CB_AfficheChampVect(draw.get(),NULL);
        }
        | VAR_IMAGEDRAW T_POINT T_SetVectParam T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
          /**
          Parameters:
            (5) expression: vector size
            (7) expression: vector spacing

          Description:
            Sets the size and spacing of the vector drawing interface in the given
            image drawing window.
          **/
          DessinImage::ptr draw;
          float size    = $5;
          int   spacing = (int)$7;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          draw->SetVectParam( size, spacing);
        }
        | VAR_IMAGEDRAW T_POINT T_SetVectColor T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          /**
            Parameters:
            (5)  expression: vector id
            (7)  expression: red component (0-255)
            (9)  expression: green component (0-255)
            (11) expression: blue component (0-255)

            Description:
            Sets the color of the given vector field (given by vector id),
            the color is set as (R,G,B) components, each component has a value
            between 0 and 255.
          **/
          DessinImage::ptr draw;
          int vectid = (int) $5;
          unsigned char red   = (unsigned char) $7;
          unsigned char green = (unsigned char) $9;
          unsigned char blue  = (unsigned char) $11;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          draw->SetVectColor( vectid,red,green,blue);
        }
        | VAR_IMAGEDRAW T_POINT T_SetVectStyle T_OP_PAR expr T_CL_PAR
        {
          DessinImage::ptr draw= *(DessinImage::ptr*) ($1->Pointer());
          draw->SetVectType((int)$5);
        }
        | VAR_IMAGEDRAW T_POINT T_SetLineThickness T_OP_PAR expr T_CL_PAR
        {
          DessinImage::ptr draw= *(DessinImage::ptr*) ($1->Pointer());
          draw->SetLineThickness((int)$5);
        }
        | VAR_IMAGEDRAW T_POINT T_SetZoom T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          int xmin = (int)  $5;
          int ymin = (int)  $7;
          int zmin = (int)  $9;
          int xmax = (int) $11;
          int ymax = (int) $13;
          int zmax = (int) $15;

          DessinImage::ptr draw= *(DessinImage::ptr*) ($1->Pointer());
          draw->SetZoom(xmin,ymin,zmin,xmax,ymax,zmax);

        }
        | VAR_IMAGEDRAW T_POINT T_SetWindowSize T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
          int width  = (int) $5;
          int height = (int) $7;

          DessinImage::ptr draw= *(DessinImage::ptr*) ($1->Pointer());
          draw->SetSize(width,height);
          draw->Update();


        }
        | VAR_IMAGEDRAW T_POINT T_drawcircle T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          DessinImage::ptr draw;
          ClasseCouleur c;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          c.FixeValeur((int)$11,(int)$13,(int)$15);
          draw->DessineCercle( (int) $5, (int) $7, (int) $9, c);
        }
        | VAR_IMAGEDRAW T_POINT T_SetColormap T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_CL_PAR
        {
          DessinImage::ptr draw;
          // TODO: fix this memory problem ...
          InrImage* colmap=(InrImage*) driver.im_stack.GetLastImage();

          draw = *(DessinImage::ptr*) ($1->Pointer());
          draw->SetUserColormap( colmap,  $7,  $9);
          //      delete colmap;
        }
        | VAR_IMAGEDRAW T_POINT T_setGLwin T_OP_PAR VAR_SURFDRAW T_CL_PAR
        {
          DessinImage::ptr draw;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          draw->SetGLWindow( *((Viewer3D_ptr*) $5->Pointer()));

        }
        | VAR_IMAGEDRAW T_POINT T_SetIsoContour T_OP_PAR expr T_COMMA var_image T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) isocontour index (0,1 or 2)
                (7) image to use for the isocontour
                (9) intensity value of the isocontour

            Description:
                Sets the image and intensity value of an isocontour in an 'image_draw' window.
            **/
            DessinImage::ptr draw;

            draw = *(DessinImage::ptr*) ($1->Pointer());
            draw->InitIsoContour( (*(InrImage::ptr*) $7->Pointer()), $9 , (int) $5 );
            draw->DrawIsoContour( (int) $5, true );
        }
        | VAR_IMAGEDRAW T_POINT T_SetIsoContour T_OP_PAR var_image T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) image to use for the isocontour
                (7) intensity value of the isocontour

            Description:
                Sets the image and intensity value of the isocontour number 0 in an 'image_draw' window.
            **/
            DessinImage::ptr draw;

            draw = *(DessinImage::ptr*) ($1->Pointer());
            draw->InitIsoContour( (*(InrImage::ptr*) $5->Pointer()), $7 , 0 );
            draw->DrawIsoContour( 0, true );
        }
        | VAR_IMAGEDRAW T_POINT T_SetIsoContourParam T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) isocontour index (0,1 or 2)
                (7) isocontour thickness
                (9) isocontour style

            Description:
                Sets the parameters (line style and thickeness)
                of an isocontour in an 'image_draw' window.
            **/
            DessinImage::ptr draw;

            draw = *(DessinImage::ptr*) ($1->Pointer());
            draw->SetIsoContourParam( (int)$5, (int)$7, (int)$9 );
        }
        | VAR_IMAGEDRAW T_POINT T_SetIsoContourParam T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5)  isocontour index (0,1 or 2)
                (7)  isocontour thickness
                (9)  isocontour style (0,1,2 for LineSolid, LineOnOffDash, or LineDoubleDash)
                (11) cap_style (0:CapNotLast, 1:CapButt, 2:CapRound, or 3:CapProjecting)
                (13) join_style (0:JoinMiter, 1:JoinRound, or 2:JoinBevel)

            Description:
                Sets the parameters (line style and thickeness)
                of an isocontour in an 'image_draw' window.
            **/
            DessinImage::ptr draw;

            draw = *(DessinImage::ptr*) ($1->Pointer());
            draw->SetIsoContourParam( (int)$5, (int)$7, (int)$9 );
            draw->SetLineAttributes( (int)$11, (int)$13);
        }
        | VAR_IMAGEDRAW T_POINT T_DrawIsoContour T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) isocontour index (0,1 or 2)
                (7) visible or not (0 or 1)

            Description:
                Sets the visibility of an isocontour in an 'image_draw' window.
            **/
            DessinImage::ptr draw;

            draw = *(DessinImage::ptr*) ($1->Pointer());
            draw->DrawIsoContour( (int) $5, (int) $7 );
        }
        | VAR_IMAGEDRAW T_POINT T_SetIsoContourColor T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) isocontour index (0,1 or 2)
                (7)  Red   component in [0,255]
                (9)  Green component in [0,255]
                (11) Blue  component in [0,255]

            Description:
                Sets the color as RGB of an isocontour in an 'image_draw' window.
            **/
            DessinImage::ptr draw;
            draw = *(DessinImage::ptr*) ($1->Pointer());
            draw->SetIsoContourColor( (int) $5, (unsigned char) $7,
                                                (unsigned char) $9,
                                                (unsigned char) $11);
        }
        | VAR_IMAGEDRAW T_POINT T_DrawAllContours T_OP_PAR expr T_CL_PAR
        {
            /**
            Parameters:
                (5) boolean parameter

            Description:
                Activates or desactivates the drawing of a series of isocontours.
            **/
            DessinImage::ptr draw;
            draw = *(DessinImage::ptr*) ($1->Pointer());
            draw->SetDrawAllContours( (int) $5 );
        }
        | VAR_IMAGEDRAW T_POINT T_AllContoursParam T_OP_PAR expr  T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) intensity step between isocontours
                (7) half size of the intensity range where to draw isocontours

            Description:
                Parameters for drawing a series of isocontours around the main isocontour.
            **/
            DessinImage::ptr draw;
            draw = *(DessinImage::ptr*) ($1->Pointer());
            draw->AllContoursParam(  $5 , $7 );
        }
        | VAR_IMAGEDRAW T_POINT T_PaintCallback T_OP_PAR VAR_AMI_FUNCTION T_CL_PAR
        {
            DessinImage::ptr draw;

            draw = *(DessinImage::ptr*) ($1->Pointer());
            draw->SetPaintCallback( (void*) CB_ParamWin, (void*) $5->Pointer());
            // may be a pb to call Paint() here since it will start another interpreter ??? to check
            //draw->Paint();
        }
        | VAR_IMAGEDRAW T_POINT T_SetOpacityImage T_OP_PAR var_image T_CL_PAR
        {
        /**
         description:
            Setting the opacity image for the volume rendering.
            This image should have unsigned char values.
         **/
          DessinImage::ptr draw;
          InrImage::ptr im;

          draw = *(DessinImage::ptr*) ($1->Pointer());
          im = *(InrImage::ptr*) $5->Pointer();
          draw->SetVolRenOpacity( im.get());
        }
        | var_image T_POINT T_initvalue T_OP_PAR expr T_CL_PAR
        {
        /**
        parameters:
          (5) expr:  value to init the image

        description:
          Set the whole image to the same vector value .
        **/
          (*(InrImage::ptr*) $1->Pointer())->InitImage($5);
        }
        | var_image T_POINT T_initvalue T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        parameters:
          (5) expr:  X coord of the init vector
          (7) expr:  Y coord of the init vector
          (9) expr:  Z coord of the init vector

        description:
          Set the whole image to the same value.
        **/
      (*(InrImage::ptr*) $1->Pointer())->InitImage($5,$7,$9);
        }
        | var_image T_POINT SET T_OP_PAR expr T_CL_PAR
        {
        /**
        parameters:
          #1 expr:  scalar value

        description:
        Set the current voxel (or pixel)
        to the specified value.
        The position of the current voxel can be set
        using 'setpos'.


        Others:
                setpos
        **/
      (*(InrImage::ptr*) $1->Pointer())->FixeValeur($5);
        }
        | var_image T_POINT SET T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {

        /**
        parameters:
          #1 expr:  X coord of the vector value
          #2 expr:  Y coord of the vector value
          #3 expr:  Z coord of the vector value

        description:
        Set the current voxel (or pixel)
        to the specified value.
        The position of the current voxel can be set
        using 'setpos'.


        Others:
                setpos
        **/

      (*(InrImage::ptr*) $1->Pointer())->VectFixeValeurs($5,$7,$9);
        }
        | var_image T_POINT SETPOS T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
          (5) expr:  X position
          (7) expr:  Y position
          (9) expr:  Z position

        Description:
          Set the current voxel (or pixel) of the image
          to the specified position.

        See Also:
          set
        **/
          Si (*(InrImage::ptr*) $1->Pointer())->CoordOK( (int) $5,(int)$7,(int)$9)
          Alors
        (*(InrImage::ptr*) $1->Pointer())->BufferPos((int)$5,(int)$7,(int)$9);
          Sinon
        char tmp_string[255];
        sprintf(tmp_string,"coord = %f %f %f \n",$5, $7, $9);
        driver.err_print(tmp_string);
          FinSi
        }
        |
        var_image T_POINT PutImage
        T_OP_PAR  var_image T_COMMA
           expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
          (1)  var_image: image to modify
          (5)  var_image: image to insert
          (7)  expr:      X position of inserted image
          (9)  expr:      Y position
          (11) expr:      Z position

        description:
          Insert an image (#2) in a given image (#1)
          at the specified position in voxel coordinates,
          does not use the translation information from the image.

        Example:
          i = Image(FLOAT,10,10,10)
          j = Image(FLOAT,5,5,5)
          i.putimage(j,2,2,2)
        **/
       InrImage::ptr  i1;
       InrImage::ptr  i2;

       i1 = *(InrImage::ptr*) $1->Pointer();
       i2 = *(InrImage::ptr*) $5->Pointer();
       Func_PutImage( i1.get(), i2.get(), (int) $7, (int) $9, (int) $11);
        }
        |
        var_image T_POINT PutImage  T_OP_PAR  var_image T_CL_PAR
        {
        /**
        Parameters:
          (1)  var_image: image to modify
          (5)  var_image: image to insert

        description:
          Insert an image  in a given image,
          uses the translation and the voxel size information
          to calculate where to insert the image.

        Example:
          i = Image(FLOAT,10,10,10)
          j = Image(FLOAT,5,5,5)
          i.putimage(j,2,2,2)
        **/
      InrImage::ptr  i1;
      InrImage::ptr  i2;
      float tx1,ty1,tz1;
      float tx2,ty2,tz2;

          i1 = *(InrImage::ptr*) $1->Pointer();
          i2 = *(InrImage::ptr*) $5->Pointer();
      i1->GetTranslation(tx1,ty1,tz1);
      i2->GetTranslation(tx2,ty2,tz2);
      Func_PutImage( i1.get(), i2.get(),
             (int) round((double)(tx2-tx1)/i1->VoxSizeX()),
             (int) round((double)(ty2-ty1)/i1->VoxSizeY()),
             (int) round((double)(tz2-tz1)/i1->VoxSizeZ()));
    }
    |
    var_image T_POINT T_SetName T_OP_PAR expr_string T_CL_PAR {
      (*(InrImage::ptr*) $1->Pointer())->FixeNom( $5);
      delete [] $5;
    }
        |
        AnisoGS T_POINT TInit  T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
            (5)  var_image: input image
            (7)  expr: sigma, standard deviation of the Gaussian smoothing used
                        to compute the gradient and principal curvature directions
            (9)  expr:  threshold on the magnitude of the gradient
            (11) expr: data attachment coefficient

        Description:
            Sets parameters for the anisotropic diffusion algorithm using
            Gauss-Seidel scheme.
        **/
        Func_InitAnisoGS( ((InrImage::ptr*) $5->Pointer())->get(),
                          $7,  $9, $11);
        }
        |
        AnisoGS T_POINT TSetCoeff T_OP_PAR expr T_CL_PAR
        {
          Func_SetCoeffAnisoGS($5);
        }
        |
        AnisoGS T_POINT T_SetDistMap T_OP_PAR expr T_CL_PAR
        {
          Func_AnisoGS_SetDistanceMap((int)$5);
        }
        |
        AnisoGS T_POINT T_SetNoiseType T_OP_PAR expr T_CL_PAR
        {
          Func_AnisoGS_SetNoiseType((int)$5);
        }
        |
        AnisoGS T_POINT T_SetNoiseSD T_OP_PAR expr T_CL_PAR
        {
          Func_AnisoGS_SetNoiseSD($5);
        }
        |
        AnisoGS T_POINT T_SetMask T_OP_PAR var_image T_CL_PAR
        {
          Func_AnisoGS_SetMask(((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        AnisoGS T_POINT T_SetSRADROI T_OP_PAR var_image T_CL_PAR
        {
        /**
         Parameters:
            (5) image which defines a region of interest used
                to estimate the noise parameters in the
                Oriented Speckle Reducing Anisotropic Diffusion
         Description:
            Sets the region of interest (region of constant tissue in the image)
            and activates the Oriented Speckle Reducing Anisotropic Diffusion
         **/
          Func_AnisoGS_SetSRAD_ROI(((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        AnisoGS T_POINT T_SetRNRADROI T_OP_PAR var_image T_CL_PAR
        {
        /**
         Parameters:
            (5) image which defines a region of interest used
                to estimate the noise parameters in the
                Rician Noise Reducing Anisotropic Diffusion
         Description:
            Sets the region of interest (region of constant tissue in the image)
            and activates the Rician Noise Reducing Anisotropic Diffusion
            used to reduce noise in MRI data.
         **/
          Func_AnisoGS_SetRNRAD_ROI(((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        AnisoGS T_POINT T_SetRNRADROI_NEW T_OP_PAR var_image T_CL_PAR
        {
        /**
         Parameters:
            (5) image which defines a region of interest used
                to estimate the noise parameters in the
                Rician Noise Reducing Anisotropic Diffusion
         Description:
            Sets the region of interest (region of constant tissue in the image)
            and activates the Rician Noise Reducing Anisotropic Diffusion
            used to reduce noise in MRI data.
            New version of the filter, using local directional mean and variance
            for the diffusion matrix.
         **/
          Func_AnisoGS_SetRNRAD_ROI_NEW(((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        AnisoGS T_POINT T_SetLocalStruct T_OP_PAR expr T_CL_PAR
        {
        /**
          Parameters:
            (5) expr: determine the local structure description
              0 for smoothed gradient and principal curv. directions
              1 for the local structure tensor

          Description:
            Sets the local structure mode.
         **/
      Func_SetLocalStructureMode((int)$5);
        }
        |
    AnisoGS T_POINT T_SetEigenMode T_OP_PAR expr T_CL_PAR
        {
        /**
          Parameters:
            (5) expr: option for selecting the eigenvalues for the
              diffusion matrix
              0: sums the 3D, 2D and 1D diffusions
                - lambda1 will depend on a coefficient based on a
                    3D neighborhood
                - lambda2 will be the sum of lambda1 + a coeff based
                    on a 2D neighborhood
                - lambda3 = lambda2 + coeff based on a linear neigh.
              1: take the maximum instead of the sum

          Description:
            Choose a way to select the diffusion matrix eigenvalues.
         **/
      Func_SetEigenvaluesMode((int)$5);
        }
        |
    AnisoGS T_POINT T_Setdt T_OP_PAR expr T_CL_PAR
        {
      Func_AnisoGS_Setdt($5);
        }
        |
    AnisoGS T_POINT T_Setneighborhood T_OP_PAR expr T_CL_PAR
        {
      Func_AnisoGS_Setneighborhood((int)$5);
        }
        |
        AnisoGS T_POINT TSetCoeff T_OP_PAR expr T_COMMA expr T_CL_PAR
        {

      Func_SetCoeffAnisoGS3D($5,$7);

    }
        |
        AnisoGS T_POINT TIterate
        {
      float  error;

      error = Func_ItereAnisoGS();

      //driver.res_print("Error in AnisoGS.Iterate ");
    }
        |
    AnisoGS T_POINT TEnd
        {
      int res;

      res = Func_EndAnisoGS();

    }
        |
        T_AnisoWeickert T_POINT TIterate
        {
      Func_IterateWeickert();
    }
        |
    T_AnisoWeickert T_POINT TEnd
        {

      Func_EndWeickert();

    }
        |
        T_AnisoCW T_POINT TIterate
        {
      Func_IterateWeickert();
    }
        |
    T_AnisoCW T_POINT TEnd
        {
      Func_EndWeickert();
    }
        |
        T_LevelSetsCURV T_POINT T_SetParam T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr  T_CL_PAR
        {
    //
    // parameters:
    // 1. number of iterations
    // 2. coefficient of the data attachment
    // 3. curvature coefficient
    // 4. reinitialization frequency for the distance map

    Func_LevelSets_InitParam(
                 0.8,
                 (int) $5,
                 $7,
                 $9,
                 1,
                 (int) $11
                 );

        }
        |
        T_LevelSetsCURV T_POINT T_SetParam T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA
                                           expr T_COMMA expr T_COMMA expr  T_CL_PAR
        {
    //
    // parameters:
    // 1. threshold on the cumulative histo of the grad norm for data attachment
    // 2. number of iterations
    // 3. coefficient of the data attachment
    // 4. curvature coefficient
    // 5. evolution step dt
    // 6. reinitialization frequency for the distance map


      Func_LevelSets_InitParam(
                   $5,
                   (int) $7,
                   $9,
                   $11,
                   $13,
                   (int) $15
                   );

        }
        |
        T_LevelSetsCURV T_POINT T_SetMeanCurv T_OP_PAR expr T_CL_PAR
        {
      Func_LevelSets_SetMeanCurv( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT T_SetAffineCurv T_OP_PAR expr T_CL_PAR
        {
      Func_LevelSets_SetAffineCurvature( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT T_SetBalloonScheme T_OP_PAR expr T_CL_PAR
        {
      Func_LevelSets_SetBalloonScheme( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT T_SetDistMethod T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetDMmethod( (int) $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetThreads T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetThreads( (int) $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetProbThreshold T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetProbThreshold( $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetILowTh T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetIntensityLowThreshold( $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetIHighTh T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetIntensityHighThreshold( $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetProbHighTh T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetProbabilityHighThreshold( $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetNumGaussians T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetNumGaussians( (int) $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetGaussian T_OP_PAR  expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      Func_LevelSets_SetGaussian( (int) $5, $7, $9);
    }
        |
        T_LevelSetsCURV T_POINT T_SetNumInitPoints T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetNumInitPoints( (int) $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetInitPoint T_OP_PAR  expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      Func_LevelSets_SetInitPoint( (int) $5, (int) $7, (int) $9, (int) $11, (int) $13);
    }
        |
        T_LevelSetsCURV T_POINT T_SetIsoContourBin T_OP_PAR  expr T_CL_PAR
        {
          Func_LevelSets_SetIsoContourBin( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT T_SetVelocity T_OP_PAR var_image T_COMMA expr T_CL_PAR
        {
          Func_LevelSetsVelocity(((InrImage::ptr*) $5->Pointer())->get(),$7);
        }
        |
        T_LevelSetsCURV T_POINT T_SetExpansion T_OP_PAR  expr T_CL_PAR
        {
          Func_LevelSetsExpansion($5);
        }
        |
        T_LevelSetsCURV T_POINT T_SetExpansionImage T_OP_PAR  var_image T_CL_PAR
        {
          /** 
            Parameters:
              - input image: expansion image, expansion force for the level set evolution
            Description:
              Set the expansion to be the given image instead of a combination of Gaussian functions
              The expansion will then be multiplied by the expansion coefficient during the evolution.
              
          */
          Func_LevelSetsExpansionImage( ((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        T_LevelSetsCURV T_POINT T_SetBandTube T_OP_PAR  expr T_COMMA expr T_CL_PAR
        {
          Func_LevelSetsBandAndTube((int)$5,(int)$7);
        }
        |
        T_LevelSetsCURV T_POINT T_SetCurvWeights T_OP_PAR var_image T_CL_PAR
        {
          Func_LevelSetsSetCurvWeights( ((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        T_LevelSetsCURV T_POINT T_SetAdvectionField T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_CL_PAR
        {
          Func_LevelSetsSetAdvectionField(
                ((InrImage::ptr*) $5->Pointer())->get(),
                ((InrImage::ptr*) $7->Pointer())->get(),
                ((InrImage::ptr*) $9->Pointer())->get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetCurvature T_OP_PAR var_image T_CL_PAR
        {
      Func_LevelSetsGetCurvatureData( ((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetDistMap T_OP_PAR var_image T_CL_PAR
        {
      Func_LevelSetsGetDistanceMap( ((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetAdvection T_OP_PAR var_image T_CL_PAR
        {
      Func_LevelSetsGetAdvectionData( ((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetSkeleton T_OP_PAR var_image T_CL_PAR
        {
      Func_LevelSetsGetSkeleton( ((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetVelocity T_OP_PAR var_image T_CL_PAR
        {
      Func_LevelSetsGetVelocityData( ((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetExpansion T_OP_PAR var_image T_CL_PAR
        {
      Func_LevelSetsGetExpansionData( ((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetCurvature T_OP_PAR T_NULL T_CL_PAR
        {
      Func_LevelSetsGetCurvatureData( NULL );
        }
        |
        T_LevelSetsCURV T_POINT T_GetAdvection T_OP_PAR T_NULL T_CL_PAR
        {
      Func_LevelSetsGetAdvectionData( NULL);
        }
        |
        T_LevelSetsCURV T_POINT T_GetVelocity T_OP_PAR T_NULL T_CL_PAR
        {
      Func_LevelSetsGetVelocityData( NULL);
        }
        |
        T_LevelSetsCURV T_POINT T_SaveDistMap T_OP_PAR expr T_CL_PAR
        {
      Func_LevelSetsSaveDistMap( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT T_SaveSecDerGrad T_OP_PAR expr T_CL_PAR
        {
      Func_LevelSetsSaveSecDerGrad( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT TIterate
        {
      $$ = Func_LevelSets_Iterate();
    }
    |
    T_LevelSetsCURV T_POINT TEnd
        {
      Func_LevelSets_End();
    }
        | var_image T_POINT T_save expr_string
        {
        /**
        Parameters
          (4) expr_string:  image name

        Description:
          Save the image to the disk, using the specified
          image name.
          The output format depends on the image type
          and on the filename extension.
          For saving images with standard 2D image format
          (jpeg, gif, etc...) you need to have a RGB image.


        Example:

          rgb_im = (RGB) im
          im.save "image.jpg"


        See also:
          image_cast
        **/
      (*(InrImage::ptr*) $1->Pointer())->Sauve($4);
      delete [] $4;
        }
        | var_image T_POINT T_normalize
        {
        /**
        Description:
          Normalizes a vector field given by a vectorial image.

        Example:
          v1.normalize

        **/
      Func_Normalize((((InrImage::ptr*) $1->Pointer())->get()));
        }
        |
        var_image T_POINT T_OrientField T_OP_PAR var_image T_CL_PAR
        {
          Func_OrientField( ((InrImage::ptr*) $1->Pointer())->get() , ((InrImage::ptr*) $5->Pointer())->get() );
        }
        |
        var_image T_POINT T_OrientPositive T_OP_PAR var_image T_CL_PAR
        {
       Func_OrientPositive( ((InrImage::ptr*) $1->Pointer())->get() , ((InrImage::ptr*) $5->Pointer())->get() );
    }
    | var_surface T_POINT T_save expr_string
    {
      (*(SurfacePoly::ptr*) $1->Pointer())->Write($4);
      delete [] $4;
    }
    |
    var_surface T_POINT T_WriteCTALine  expr_string
    {
    /**
    Parameters:
        (1) input polydata
        (4) filename
    Description:
        Save the first line of the polydata in text format
    **/
      SurfacePoly::ptr surf = (*(SurfacePoly::ptr*) $1->Pointer());
      Func_WriteCTALine(surf.get(),$4);
      delete [] $4;
    }
    | var_surface T_POINT T_OwnMaterial T_OP_PAR expr T_CL_PAR
    {

      (*(SurfacePoly::ptr*) $1->Pointer())->SetOwnMaterial( (int) $5);

        }
        | var_surface T_POINT T_SetAmbient T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {

      (*(SurfacePoly::ptr*) $1->Pointer())->GetMaterial()._ambient.FixeValeur((int) $5,(int) $7,(int) $9);

        }
        | var_surface T_POINT T_SetDiffuse T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {

      (*(SurfacePoly::ptr*) $1->Pointer())->GetMaterial()._diffuse.FixeValeur((int) $5,(int) $7,(int) $9);

        }
        | var_surface T_POINT T_SetSpecular T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {

      (*(SurfacePoly::ptr*) $1->Pointer())->GetMaterial()._specular.FixeValeur((int) $5,(int) $7,(int) $9);

        }
        |
    var_surface T_POINT T_SetShininess T_OP_PAR expr T_CL_PAR
        {

      (*(SurfacePoly::ptr*) $1->Pointer())->GetMaterial()._shininess= $5;

        }
        |
    var_surface T_POINT T_SetOpacity T_OP_PAR expr T_CL_PAR
    {

      (*(SurfacePoly::ptr*) $1->Pointer())->GetMaterial()._opacity= $5;

    }
    |
    var_surface T_POINT T_SetVisible T_OP_PAR expr T_CL_PAR
    {
      /**
      Description:
        Sets the object visible or not visible in the scene.
      **/
      (*(SurfacePoly::ptr*) $1->Pointer())->SetVisible( (int) $5);
    }
    |
    var_surface T_POINT T_SetColorMaterial T_OP_PAR expr T_CL_PAR
    {
        /**
        Description:
          Enable/Disable colormaterial for the associated surface.
        **/

      (*(SurfacePoly::ptr*) $1->Pointer())->GetMaterial()._colormaterial = (unsigned char) ($5>0.5);

    }
    |
      var_surface T_POINT T_SetColorOpacity T_OP_PAR expr T_CL_PAR
    {
      /**
      Parameters:
        (1) surface object
        (5) alpha value
    
      Description:
        to define the transparency to the RGB color
        associated per each vertex (actived with Enable ColorMaterial)
      **/

      (*(SurfacePoly::ptr*) $1->Pointer())->SetColorOpacity($5);

    }
    | var_surface T_POINT T_SetColor T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      int n;
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());

      Pour(n,0,s->NbPoints()-1)
        (*s)[n].SetColor((unsigned char) $5,
                 (unsigned char) $7,
                 (unsigned char) $9);
      FinPour

          s->SetColorMaterial(true);
          s->GLRecomputeList(  );

    }
    | var_surface T_POINT T_SetPointsColors T_OP_PAR var_image  T_CL_PAR
    {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());


      s->SetPointsColors( ((InrImage::ptr*) $5->Pointer())->get() );

    }
    | var_surface T_POINT T_SetColors T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_CL_PAR
    {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
      InrImage::ptr i = InrImage::ptr(driver.im_stack.GetLastImage());
      // TODO: use smart pointer to image in SetColors ...
      s->SetColors( i.get() , $7, $9);
    }
    | var_surface T_POINT T_SetColors T_OP_PAR expr_image  T_CL_PAR
    {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
      InrImage::ptr i = InrImage::ptr(driver.im_stack.GetLastImage());
      s->SetColors( i.get() );

    }
    | var_surface T_POINT T_Statistics T_OP_PAR var_image  T_CL_PAR
    {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
      s->Statistics( ((InrImage::ptr*) $5->Pointer())->get() );

    }
    | var_surface T_POINT T_mergepoints T_OP_PAR expr T_CL_PAR
    {
      (*(SurfacePoly::ptr*) $1->Pointer())->MergePoints($5);
    }
    | var_surface T_POINT T_Triangulate
    {
      (*(SurfacePoly::ptr*) $1->Pointer())->Triangulate();
    }
    | var_surface T_POINT T_curvatures T_OP_PAR expr T_CL_PAR
    {

      SurfacePoly::ptr surf = *(SurfacePoly::ptr*) $1->Pointer();
      float        depth = $5;
      char         name[100];
      int          n;

      // param 1: depth (neighborhood)
      //

      // Create images for the curvatures and their directions
      InrImage* Icmin;
      InrImage* Icmax;
      InrImage* Idmin;
      InrImage* Idmax;

      n = surf->GetNumberOfPoints();

      Icmin = new InrImage(n,1,1,WT_FLOAT,"mincurv.ami.gz");
      Icmax = new InrImage(n,1,1,WT_FLOAT,"maxcurv.ami.gz");

      Idmin = new InrImage(n,1,1,3,WT_FLOAT,"mincurvdir.ami.gz");
      Idmax = new InrImage(n,1,1,3,WT_FLOAT,"maxcurvdir.ami.gz");

      surf->ComputeCurvatures(Icmin,Icmax,Idmin,Idmax, (int) depth);

      sprintf(name,"%s_cmin",$1->Name());
      Vars.AddVar(type_image,name,Icmin);
      sprintf(name,"%s_cmax",$1->Name());
      Vars.AddVar(type_image,name,Icmax);
      sprintf(name,"%s_dmin",$1->Name());
      Vars.AddVar(type_image,name,Idmin);
      sprintf(name,"%s_dmax",$1->Name());
      Vars.AddVar(type_image,name,Idmax);

    }
    | var_surface T_POINT T_Displace T_OP_PAR expr_image T_CL_PAR
    {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
      InrImage::ptr i = InrImage::ptr(driver.im_stack.GetLastImage());
      s->DisplacePoints( i.get() );
    }
    | var_surface T_POINT T_Translate T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());

      s->Translate( $5,$7,$9 );

    }
    | var_surface T_POINT T_Scale T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());

      s->Scale( $5,$7,$9,0 );

        }
        | var_surface T_POINT T_SetLineWidth T_OP_PAR expr T_CL_PAR
        {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
          int          w = (int) $5;

          Si w<1  AlorsFait w=1;
          Si w>10 AlorsFait w=10;

          s->_line_width = w;

        }
    | var_surface T_POINT  T_RemoveLine T_OP_PAR  expr T_CL_PAR
        {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());

      s->RemoveLine((int)$5);
          s->GLRecomputeList();

    }
    | var_surface T_POINT T_SelectLines T_OP_PAR expr_image T_CL_PAR
    {
    /**
      Parameters:
        image expression
      Description:
        Select lines based on an image
        The image is 1D of size the number of lines
        if the value is > 0.5, then select the corresponding line
    **/

      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
      InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());

      s->SelectLines(im.get());
      s->GLRecomputeList();
    }
    | var_surface T_POINT T_RemoveSelection
    {
    /**
      Description: Remove selected lines
    **/
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());

        s->RemoveSelection();
        s->GLRecomputeList();
    }
    | var_surface T_POINT T_Recompute
    {
    (*(SurfacePoly::ptr*) $1->Pointer())->GLRecomputeList();

        }
        | var_surface T_POINT T_Normals
        {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());

      s->RecomputeNormals();

        }
        | var_surface T_POINT T_InvertNormals
        {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());

      s->InvertNormals();

        }
    | var_surface T_POINT  T_vtkSmooth T_OP_PAR  expr T_CL_PAR
        {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());

          Func_ApplyvtkSmooth(s.get(), (int) $5);
      //      s->GLRecomputeList();

    }
    | var_surface T_POINT  T_vtkWindowedSinc T_OP_PAR  expr T_CL_PAR
        {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());

          Func_vtkWindowedSinc(s.get(), (int) $5);
      //      s->GLRecomputeList();

    }
    | var_surface T_POINT  T_vtkDecimate
        {

          SurfacePoly::ptr surf_init = *(SurfacePoly::ptr*) $1->Pointer();
          SurfacePoly* surf;

          surf = Func_decimate(surf_init.get());
      Si surf != NULL Alors

        // Non correct: supprimer la variable et la re-creer:
        // car pb si la variable est deja utilisee ...
        //          $1->Init(type_surface,$1->Name(), surf);
        //      delete surf_init;
      Sinon
        fprintf(stderr,"improcess.y: var_surface.T_vtkDecimate \t error \n ");
          FinSi


    }
        | var_surface T_POINT T_setminCC T_OP_PAR expr T_CL_PAR
        {
        /**
        Description:
          Sets a threshold for drawing connected components
          bigger.
        **/
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
          GLuint _SURFACE;

          Si Non(s->_cc_calculees) Alors
            s->CalculCC();
          FinSi
          s->GLSurfaceMinThCC( _SURFACE, (int) $5);

        }
        | var_surface T_POINT T_drawCC T_OP_PAR expr T_CL_PAR
        {
        /**
        Description:
        Draw one connected component only
        **/
          SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
          GLuint _SURFACE;

            //          Si _type_surface == SURFACE_POLY Alors
            Si Non(s->_cc_calculees) Alors
              s->CalculCC();
            FinSi
            s->GLSurfaceDrawOnlyCC( _SURFACE, (int) $5);
            //          FinSi

        }
        | var_surface T_POINT T_drawCC T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
        /**
        Description:
        Activate/Desactivate Drawing of one connected components
        **/
          SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
          GLuint _SURFACE;

      //          Si _type_surface == SURFACE_POLY Alors
            Si Non(s->_cc_calculees) Alors
              s->CalculCC();
            FinSi
            s->GLSurfaceSetDrawCC( _SURFACE, (int) $5,(int) $7);
        //          FinSi

        }
        | var_surface T_POINT T_AddPoint T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
      s->AddPoint($5,$7,$9);
    }
        | var_surface T_POINT T_NewLine
        {
      SurfacePoly::ptr s = *(SurfacePoly::ptr*) $1->Pointer();
      s->NewLine();
    }
        | var_surface T_POINT T_LineAddPointNumber T_OP_PAR expr T_CL_PAR
        {
      SurfacePoly::ptr s = *(SurfacePoly::ptr*) $1->Pointer();
      s->LineAddPointNumber( (int) $5 );
    }
        | var_surface T_POINT T_EndLine
        {
      SurfacePoly::ptr s = *(SurfacePoly::ptr*) $1->Pointer();
      s->EndLine();
    }
        | T_SetFluidNavFile T_OP_PAR expr_string T_CL_PAR
        {
      if (strlen($3)<255) {
        strcpy(AMIFluid::FLUID_NAVIGATION_FILE,$3);
      } else
        fprintf(stderr,"SetFluidNavFile() \t File too long \n");
      delete [] $3;
        }
        | T_DrawEarthCoord T_OP_PAR VAR_IMAGEDRAW T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA
                                                 expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      DessinImage::ptr di = *(DessinImage::ptr*) $3->Pointer();
      float minlat  = $5;
      float maxlat  = $7;
      float latstep = $9;
      float latsmallsteps = $11;
      float minlon  = $13;
      float maxlon  = $15;
      float lonstep = $17;
      float lonsmallsteps = $19;

      float  lat,lon;
      float  X,Y;
      float  posx1=0,posy1=0;
      int    pos1_OK,pos2_OK;
      float  posx2=0,posy2=0;
      int    len;
      AMIFluid::TNavig nav_params;
      int    i_offset, j_offset;
      int    type=1; // Africa
      char typestring[2][255] = {"NAtl","AfGG"};

      InrImage::ptr           im    = di->GetImage();
      DessinImageParametres* param = di->GetParam();

          AMIFluid::InitCoordinates(i_offset,j_offset,nav_params, typestring[type]);
      minlat  *= PI/180.0;
      maxlat  *= PI/180.0;
      minlon  *= PI/180.0;
      maxlon  *= PI/180.0;
      latstep *= PI/180.0;
      lonstep *= PI/180.0;

      latsmallsteps *= PI/180.0;
      lonsmallsteps *= PI/180.0;

      // Lattitude lines
      for(lat=minlat;lat<=maxlat;lat+=latstep) {
        pos1_OK=0;
        for(lon=minlon;lon<=maxlon;lon+=lonsmallsteps)
          {
        AMIFluid::COOCAR1(lat,lon,X,Y,len,nav_params);
        if (len==0) {
          //          printf("len==0\n");
          X=X-i_offset;
          Y=Y-j_offset;
          posx2=(X-im->TrX())/im->VoxSizeX();
          posy2=(Y-im->TrY())/im->VoxSizeY();

          pos2_OK =  ((posx2>=param->_Zoom._xmin)&&(posx2<=param->_Zoom._xmax)&&
                  (posy2>=param->_Zoom._ymin)&&(posy2<=param->_Zoom._ymax));
          if (pos1_OK&&pos2_OK) {
            if (fabsf(lat)>1E-5)
              di->FixeParametresLigne( 1, wxSOLID, wxCAP_ROUND, wxJOIN_MITER);
            else
              di->FixeParametresLigne( 1, wxDOT, wxCAP_ROUND, wxJOIN_MITER);
            di->DrawLineZ(posx1,posy1,posx2,posy2);
          }
        }
        else pos2_OK=0;

        posx1=posx2;
        posy1=posy2;
        pos1_OK=pos2_OK;
          }
      }

      // Longitude Lines
      for(lon=minlon;lon<=maxlon;lon+=lonstep) {
        pos1_OK=0;
        for(lat=minlat;lat<=maxlat;lat+=latsmallsteps)
          {
        AMIFluid::COOCAR1(lat,lon,X,Y,len,nav_params);
        if (len==0) {
          //          printf("len==0\n");
          X=X-i_offset;
          Y=Y-j_offset;
          posx2=(X-im->TrX())/im->VoxSizeX();
          posy2=(Y-im->TrY())/im->VoxSizeY();

          pos2_OK =  ((posx2>=param->_Zoom._xmin)&&(posx2<=param->_Zoom._xmax)&&
                  (posy2>=param->_Zoom._ymin)&&(posy2<=param->_Zoom._ymax));
          if (pos1_OK&&pos2_OK) {
            if (fabsf(lon)>1E-5)
              di->FixeParametresLigne( 1, wxSOLID, wxCAP_ROUND, wxJOIN_MITER);
            else
              di->FixeParametresLigne( 1, wxDOT, wxCAP_ROUND, wxJOIN_MITER);
            di->DrawLineZ(posx1,posy1,posx2,posy2);
          }
        }
        else pos2_OK=0;

        posx1=posx2;
        posy1=posy2;
        pos1_OK=pos2_OK;
          }
      }

        }
        | var_surface T_POINT T_ElevateMesh T_OP_PAR expr_image T_CL_PAR
        {
        /**
        description:
          ElevateMesh can have different behaviors depending on the type of
          the input image. In any case, it scans all the points of the mesh,
          and uses their 2 first coordinates (x,y) to deduce a position in
          the input image, and interpolate a value.
            - if the image is scalar, the value of the image at position
            (x,y) is used to set the elevation of the mesh (z coordinate).
            - if the image contains 2D vectors, the vectors are used to set
            the (x,y) coordinates of each vertex of the mesh.
            - if the image contains 3D vectors, those vectors are used
            to set new positions (x,y,z) for each vertex of the mesh.

        parameters:
        (1) input surface
        (5) input image

       Examples:
         s = CreateFlatMesh(i)
         ipos = Altitude2Postion(i,1)
         s.ElevateMesh(ipos)

       Others:
         CreateFlatMesh, ElevateMesh
         changes the position of the nodes of a 3D mesh

        **/
      SurfacePoly::ptr s = *(SurfacePoly::ptr*) $1->Pointer();
      InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
      AMIFluid::Func_ElevateMesh(s.get(),im);
      delete im;
    }
    | VAR_SURFDRAW T_POINT T_rotate T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
          Viewer3D_ptr sdraw = *((Viewer3D_ptr*) $1->Pointer());

          sdraw->GetCanvas()->UserRotate($5,$7,$9);
          sdraw->Paint();
        }
        | VAR_SURFDRAW T_POINT T_addobj T_OP_PAR surface T_CL_PAR
        {
          Viewer3D_ptr sdraw = *((Viewer3D_ptr*) $1->Pointer());
          SurfacePoly::ptr surf = SurfacePoly::ptr(driver.surf_stack.GetLastSurf());

          sdraw->GetCanvas()->AddSurface(surf);
          sdraw->Paint();
        }
        | VAR_SURFDRAW ADD_ASSIGN var_surface
        {
          Viewer3D_ptr sdraw = *((Viewer3D_ptr*) $1->Pointer());
          sdraw->GetCanvas()->AddSurface(*(SurfacePoly::ptr*) $3->Pointer());
          //sdraw->Paint();
        }
        | VAR_SURFDRAW SUB_ASSIGN var_surface
        {
          Viewer3D_ptr sdraw = *((Viewer3D_ptr*) $1->Pointer());

          sdraw->GetCanvas()->RemoveSurface(*(SurfacePoly::ptr*) $3->Pointer());
          sdraw->Paint();
        }
        | VAR_SURFDRAW T_POINT T_Remove T_OP_PAR var_surface T_CL_PAR
        {
          /**
            Description: Removes the surface without swapping the 3D buffer
          **/
          Viewer3D_ptr sdraw = *((Viewer3D_ptr*) $1->Pointer());

          sdraw->GetCanvas()->RemoveSurface(*(SurfacePoly::ptr*) $5->Pointer());
          sdraw->Paint(false);
        }
        | VAR_SURFDRAW T_POINT T_SwapBuffers
        {
          /**
            Description:  Swaps the 3D buffer
          **/
          Viewer3D_ptr sdraw = *((Viewer3D_ptr*) $1->Pointer());

          sdraw->GetCanvas()->AfficheBuffer();
        }
        | VAR_SURFDRAW T_POINT T_drawCC T_OP_PAR expr T_CL_PAR
        {
          Viewer3D_ptr sdraw = *((Viewer3D_ptr*) $1->Pointer());

          sdraw->GetCanvas()->DessineSurfaceCC ( (int) $5 );
          sdraw->Paint();
        }
        | VAR_SURFDRAW T_POINT T_drawCC T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
          Viewer3D_ptr sdraw = *((Viewer3D_ptr*) $1->Pointer());

          sdraw->GetCanvas()->DessineSurfaceCC( (int) $5, (int) $7);
          sdraw->Paint();
        }
        | VAR_SURFDRAW T_POINT T_setcurrentobj T_OP_PAR expr T_CL_PAR
        {
          Viewer3D_ptr sdraw = *((Viewer3D_ptr*) $1->Pointer());

          Si sdraw->GetCanvas()->SetCurrentObject( (int) $5 ) Alors
            sdraw->Paint();
          Sinon
            fprintf(stderr," Incorrect index \n");
          FinSi
        }
        | VAR_SURFDRAW T_POINT COMPARE T_OP_PAR VAR_SURFDRAW T_CL_PAR
        {
          Viewer3D_ptr sdraw1 = *((Viewer3D_ptr*) $1->Pointer());
          Viewer3D_ptr sdraw2 = *((Viewer3D_ptr*) $5->Pointer());

          sdraw1->AddCompSurf(sdraw2);
        }
        | VAR_SURFDRAW T_POINT SETVECTOR T_OP_PAR NUMBER T_COMMA var_image T_CL_PAR
        {
      Viewer3D_ptr draw;

      draw = *((Viewer3D_ptr*) $1->Pointer());
      switch ((int) $5) {
      case 1:
        draw->GetCanvas()->SetVectors1( (*(InrImage::ptr*) $7->Pointer()));
        break;
      case 2:
        draw->GetCanvas()->SetVectors2( (*(InrImage::ptr*) $7->Pointer()));
        break;
      }
    }
        | VAR_SURFDRAW T_POINT T_ShowSection T_OP_PAR expr T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      Viewer3D_ptr draw = *((Viewer3D_ptr*) $1->Pointer());
      int num = (int) $5;
          InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
      int orientation = (int) $9;
          int pos = (int) $11;
          float Imin = $13;
          float Imax = $15;

      draw->GetCanvas()->ShowFreeSection(num,im,orientation,pos,Imin,Imax);

          delete im;
        }
        | VAR_SURFDRAW T_POINT T_HideSection T_OP_PAR expr T_CL_PAR
        {
      Viewer3D_ptr draw = *((Viewer3D_ptr*) $1->Pointer());
      int num = (int) $5;

      draw->GetCanvas()->HideFreeSection(num);

        }
        | VAR_SURFDRAW T_POINT T_PrintMatrices
        {
          Viewer3D_ptr glclass=*((Viewer3D_ptr*) $1->Pointer());
          glclass->GetCanvas()->PrintMatrices();
        }
        | VAR_SURFDRAW T_POINT T_SetTransform T_OP_PAR gltransform T_CL_PAR
        {
          GLTransfMatrix* tr = (GLTransfMatrix*) driver.gltransf_stack.GetLastMatrix();
          Viewer3D_ptr sdraw = *(Viewer3D_ptr*) $1->Pointer();
          sdraw->GetCanvas()->SetObjectTransform(*tr);
              sdraw->Paint();
          delete tr;
        }
        | VAR_SURFDRAW T_POINT T_SetTransform T_OP_PAR gltransform T_COMMA expr T_CL_PAR
        {
          GLTransfMatrix* tr = (GLTransfMatrix*) driver.gltransf_stack.GetLastMatrix();
          Viewer3D_ptr sdraw = *(Viewer3D_ptr*) $1->Pointer();
          sdraw->GetCanvas()->SetObjectTransform(*tr);
          if ($7>0.5) sdraw->Paint();
          delete tr;
        }
        | VAR_SURFDRAW T_POINT T_Paint
        {
          Viewer3D_ptr sdraw = *(Viewer3D_ptr*) $1->Pointer();
          sdraw->Paint();
          sdraw->Update();
          // process all pending events ...
          while (GB_wxApp->Pending()) {
            if (GB_verbose) printf("Dispatching event on GB_wxApp \n");
            GB_wxApp->Dispatch();
          }
        }
        | VAR_SURFDRAW T_POINT T_SetLightAmbient T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Viewer3D_ptr sdraw = *(Viewer3D_ptr*) $1->Pointer();
          int lightnumber = (int) $5;
          int r = (int) $7;
          int g = (int) $9;
          int b = (int) $11;
      if (lightnumber<MAX_LIGHTS) {
            sdraw->GetCanvas()->GetLight(lightnumber)._ambient.FixeValeur(r,g,b);
        sdraw->Paint();
      }
    }
        | VAR_SURFDRAW T_POINT T_SetLightDiffuse T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Viewer3D_ptr sdraw = *(Viewer3D_ptr*) $1->Pointer();
          int lightnumber = (int) $5;
          int r = (int) $7;
          int g = (int) $9;
          int b = (int) $11;
      if (lightnumber<MAX_LIGHTS) {
            sdraw->GetCanvas()->GetLight(lightnumber)._diffuse.FixeValeur(r,g,b);
        sdraw->Paint();
      }
    }
        | VAR_SURFDRAW T_POINT T_SetLightSpecular T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Viewer3D_ptr sdraw = *(Viewer3D_ptr*) $1->Pointer();
          int lightnumber = (int) $5;
          int r = (int) $7;
          int g = (int) $9;
          int b = (int) $11;
      if (lightnumber<MAX_LIGHTS) {
            sdraw->GetCanvas()->GetLight(lightnumber)._specular.FixeValeur(r,g,b);
        sdraw->Paint();
      }
    }
        | VAR_SURFDRAW T_POINT T_SetBackground T_OP_PAR expr T_COMMA expr T_COMMA expr  T_CL_PAR
        {
          Viewer3D_ptr sdraw = *(Viewer3D_ptr*) $1->Pointer();
          sdraw->GetCanvas()->SetBG((int)$5,(int)$7,(int)$9);
          sdraw->Paint();
        }
        | VAR_SURFDRAW T_POINT T_SetWindowSize T_OP_PAR expr T_COMMA expr   T_CL_PAR
        {
          Viewer3D_ptr sdraw = *(Viewer3D_ptr*) $1->Pointer();
          sdraw->SetSize((int) $5, (int) $7);
          sdraw->Paint();
          sdraw->Update();
          // process all pending events ...
          while (GB_wxApp->Pending()) {
            if (GB_verbose) printf("Dispatching event on GB_wxApp \n");
            GB_wxApp->Dispatch();
          }
        }
        |
        T_struct_tensor T_OP_PAR var_image T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Func_StructureTensor(((InrImage::ptr*) $3->Pointer())->get(),
                   $3->Name(),
                   $5, $7, NULL);
        }
        |
        T_struct_tensor T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr_image T_CL_PAR
        {
          InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();

          Func_StructureTensor(
            ((InrImage::ptr*) $3->Pointer())->get(),
            $3->Name(),
            $5, $7, mask);
          delete mask;
        }
        |
        T_StructTensorH T_OP_PAR var_image T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
            (3) Input image
            (5) Numerical expression: sigma, Gaussian standard deviation
            (7) Numerical expression: beta, Hessian matrix coefficient
        Description:
            Computation of a Tensor that combines the standard
            gradient based structure tensor and the square
            of the Hessian matrix
            Computes eigenvalues and eigenvectors of the tensor
            and saves them in images:
            i_STHvap1, i_STHvap2, i_STHvap3
            i_STHvep1, i_STHvep2, i_STHvep3
        **/
          Func_StructureTensorHessian(
            ((InrImage::ptr*) $3->Pointer())->get(),
            $3->Name(),
            $5, $7, NULL);
        }
        |
        T_StructTensorH T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr_image T_CL_PAR
        {
        /**
        Parameters:
            (3) Input image
            (5) Numerical expression: sigma, Gaussian standard deviation
            (7) Numerical expression: beta, Hessian matrix coefficient
            (9) IMAGE: mask of the places to compute the tensor
        Description:
            Computation of a Tensor that combines the standard
            gradient based structure tensor and the square
            of the Hessian matrix
            Computes eigenvalues and eigenvectors of the tensor
            and saves them in images:
            i_STHvap1, i_STHvap2, i_STHvap3
            i_STHvep1, i_STHvep2, i_STHvep3
        **/
      InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();

          Func_StructureTensorHessian(
            ((InrImage::ptr*) $3->Pointer())->get(),
            $3->Name(),
            $5, $7, mask);
          delete mask;
        }
        |
        T_StructTensorH T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr_image T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
            (3) Input image
            (5) Numerical expression: sigma, Gaussian standard deviation
            (7) Numerical expression: beta, Hessian matrix coefficient
            (9) IMAGE: mask of the places to compute the tensor
            (11) NUM: boolean for saving the gradient vector
        Description:
            Computation of a Tensor that combines the standard
            gradient based structure tensor and the square
            of the Hessian matrix
            Computes eigenvalues and eigenvectors of the tensor
            and saves them in images:
            i_STHvap1, i_STHvap2, i_STHvap3
            i_STHvep1, i_STHvep2, i_STHvep3
            i_STHgrad
        **/
      InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();
      int save_grad = (int) $11;

          Func_StructureTensorHessian(((InrImage::ptr*) $3->Pointer())->get(),
                   $3->Name(),
                   $5, $7, mask, save_grad);
      delete mask;
        }
        |
        T_HessianMatrix T_OP_PAR var_image T_COMMA expr  T_CL_PAR
        {
          Func_HessianMatrix(((InrImage::ptr*) $3->Pointer())->get(),
                 $3->Name(),
                 $5,   // sigma
                 0,   // gamma
                 NULL  // mask
                 );
        }
        |
        T_HessianMatrix T_OP_PAR var_image T_COMMA expr  T_COMMA expr_image T_CL_PAR
        {
      InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();

          Func_HessianMatrix(((InrImage::ptr*) $3->Pointer())->get(),
                 $3->Name(),
                 $5,   // sigma
                 0,   // gamma
                 mask  // mask
                 );
      delete mask;
        }
        |
        T_HessianMatrix T_OP_PAR var_image T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Func_HessianMatrix(((InrImage::ptr*) $3->Pointer())->get(),
                 $3->Name(),
                 $5,   // sigma
                 $7,   // gamma
                 NULL  // mask
                 );
        }
        |
        T_HessianMatrix T_OP_PAR var_image T_COMMA expr T_COMMA expr  T_COMMA expr_image T_CL_PAR
        {
      InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();

          Func_HessianMatrix(((InrImage::ptr*) $3->Pointer())->get(),
                 $3->Name(),
                 $5,   // sigma
                 $7,   // gamma
                 mask  // mask
                 );
      delete mask;
        }
        |
        T_Derivatives T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr  T_CL_PAR
        {
        /**
        Parameters:
          (3)  input image
          (5)  expr: Gaussian standard deviation
          (7)  expr: normalization parameter gamma
          (9)  choose for 1st eigenvalue/eigenvector
          (11) choose for 1st eigenvalue/eigenvector
          (13) choose for 1st eigenvalue/eigenvector
          (15) choose for gradient vector


        Description:
            Compute information for local first and second order derivatives
         **/

          Func_Derivatives(((InrImage::ptr*) $3->Pointer())->get(),
               $3->Name(),
               $5,   // sigma
               $7,   // gamma
               NULL,
               (int)$9,   // 1st eigenvalue | eigenvector?
               (int)$11,  // 2nd eigenvalue | eigenvector?
               (int)$13,  // 3rd eigenvalue | eigenvector?
               (int)$15  // Gradient vector?
               );
        }
        |
        T_Derivatives T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr_image T_CL_PAR
        {
      InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();

          Func_Derivatives(((InrImage::ptr*) $3->Pointer())->get(),
               $3->Name(),
               $5,   // sigma
               $7,   // gamma
               mask,  // mask
               (int)$9,   // 1st eigenvalue | eigenvector?
               (int)$11,   // 2nd eigenvalue | eigenvector?
               (int)$13,   // 3rd eigenvalue | eigenvector?
               (int)$15   // Gradient vector?
               );
      delete mask;
        }
        |
        T_HessianEVal T_OP_PAR var_image T_COMMA expr T_COMMA
                      expr  T_COMMA expr_image T_COMMA expr T_CL_PAR
        {
      InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();

          Func_HessianVap(((InrImage::ptr*) $3->Pointer())->get(),
              $3->Name(),
              $5,   // sigma
              $7,   // gamma
              mask,
              (int) $11 // eigenvalue number
              );
      delete mask;
        }
        |
        T_curvatures T_OP_PAR var_image T_COMMA expr  T_CL_PAR
        {
          Func_Curvatures(((InrImage::ptr*) $3->Pointer())->get(),
              $3->Name(),
              $5);
        }
        |
        T_Eigen3D T_OP_PAR ASTRING T_COMMA
                      var_image T_COMMA var_image T_COMMA
                  var_image T_COMMA var_image T_COMMA
                  var_image T_COMMA var_image T_COMMA
                      expr_image
                  T_CL_PAR
        {
      InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();

          Func_Eigen3D(
               (char*) $3,
               ((InrImage::ptr*) $5 ->Pointer())->get(),
               ((InrImage::ptr*) $7 ->Pointer())->get(),
               ((InrImage::ptr*) $9 ->Pointer())->get(),
               ((InrImage::ptr*) $11->Pointer())->get(),
               ((InrImage::ptr*) $13->Pointer())->get(),
               ((InrImage::ptr*) $15->Pointer())->get(),
               mask  // mask
               );
      delete mask;
        }
        |
        T_Eigen3D T_OP_PAR ASTRING T_COMMA
                      var_image T_COMMA var_image T_COMMA
                  var_image T_COMMA var_image T_COMMA
                  var_image T_COMMA var_image
                  T_CL_PAR
        {

          Func_Eigen3D(
               (char*) $3,
               ((InrImage::ptr*) $5 ->Pointer())->get(),
               ((InrImage::ptr*) $7 ->Pointer())->get(),
               ((InrImage::ptr*) $9 ->Pointer())->get(),
               ((InrImage::ptr*) $11->Pointer())->get(),
               ((InrImage::ptr*) $13->Pointer())->get(),
               ((InrImage::ptr*) $15->Pointer())->get(),
               NULL
               );
        }
        |
        T_Eigen2D T_OP_PAR ASTRING T_COMMA
                      var_image T_COMMA var_image T_COMMA
                  var_image T_COMMA
                      expr_image
                  T_CL_PAR
        {
      InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();

          Func_Eigen2D(
               (char*) $3,
               ((InrImage::ptr*) $5 ->Pointer())->get(),
               ((InrImage::ptr*) $7 ->Pointer())->get(),
               ((InrImage::ptr*) $9 ->Pointer())->get(),
               mask  // mask
               );
      delete mask;
        }
        |
        T_Eigen2D T_OP_PAR ASTRING T_COMMA
                      var_image T_COMMA var_image T_COMMA
                  var_image
                  T_CL_PAR
        {
          Func_Eigen2D(
               (char*) $3,
               ((InrImage::ptr*) $5 ->Pointer())->get(),
               ((InrImage::ptr*) $7 ->Pointer())->get(),
               ((InrImage::ptr*) $9 ->Pointer())->get(),
               NULL
               );
        }
    |
    T_setvoxelsize T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      (((InrImage::ptr*) $3->Pointer())->get())->SetVoxelSize($5, $7, $9);
    }
    |
    var_image T_POINT T_setvoxelsize T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      (*(InrImage::ptr*) $1->Pointer())->SetVoxelSize($5, $7, $9);
    }
    |
    var_image T_POINT T_setvoxelsize T_OP_PAR var_image T_CL_PAR
    {
      InrImage::ptr im = *(InrImage::ptr*) $5->Pointer();
      (*(InrImage::ptr*) $1->Pointer())->SetVoxelSize(
                                   im->VoxSizeX(),
                                   im->VoxSizeY(),
                                   im->VoxSizeZ());
    }
    |
    var_image T_POINT T_settranslation T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      (*(InrImage::ptr*) $1->Pointer())->SetTranslation($5, $7, $9);
    }
    |
    var_image T_POINT T_settranslation T_OP_PAR var_image T_CL_PAR
    {
      InrImage::ptr im = *(InrImage::ptr*) $5->Pointer();
      (*(InrImage::ptr*) $1->Pointer())->SetVoxelSize(
                                   im->TrX(),
                                   im->TrY(),
                                   im->TrZ());
    }
    |
    var_image T_POINT T_setendianness T_OP_PAR expr  T_CL_PAR
    {
    /**
      Parameters:
        (5) boolean, 0 little endianness, 1 big endianness

      Description:
        Forces the endianness of the image, usually before writting it to a file.
        If the endianness is different from the one of the architecture, the bytes
        are swapped before writting, and there are swapped back after.
    **/
      ((amimage*) (*(*(InrImage::ptr*) $1->Pointer())) )->SetEndianness((AMIENDIANNESS)(int)$5);
    }
    |
    T_DiscSecDerGrad T_OP_PAR var_image T_COMMA var_image T_CL_PAR
    {
      Func_DiscSecDerGrad(
        ((InrImage::ptr*) $3->Pointer())->get(),
        ((InrImage::ptr*) $5->Pointer())->get());
    }
    |
    T_DiscSecDerGrad T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_CL_PAR
    {
      Func_DiscSecDerGrad(
                ((InrImage::ptr*) $3->Pointer())->get(),
                ((InrImage::ptr*) $5->Pointer())->get(),
                ((InrImage::ptr*) $7->Pointer())->get());
    }
    | expr  { $$=1;}
    |
    T_ProcessXEvents T_OP_PAR expr T_CL_PAR
    {
      /**
        Description: dispatches the given number of events
      **/
      int nb_event;

      nb_event = 0;
      while (nb_event<(int)$3) {
        if (GB_wxApp->Pending()) {
          GB_wxApp->Dispatch();
        }
        nb_event++;
      } // end while

    }
    |
    T_ProcessEvents T_OP_PAR expr T_CL_PAR
    {
      /**
        Description: dispatch the given number of events
      **/
      int nb_event;

      nb_event = 0;
      while (nb_event<(int)$3) {
        if (GB_wxApp->Pending()) {
          GB_wxApp->Dispatch();
        }
        nb_event++;
      } // end while

    }
    | T_gnuplot T_OP_PAR expr_image T_COMMA expr_string T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
            (3) IMAGE: 1D image to plot, where the voxel size in X is used
            (5) String: plot title
            (7) NUM: delay
        Description:
            Plots a 1D image using gnuplot.
        **/
      InrImage*   image = (InrImage*) driver.im_stack.GetLastImage();
      float* tabx;
      float* taby;
      GnuPlot   gnuplot;
      int x,num_courbe;
      char name[200];

          tabx = new float[image->_tx];
          taby = new float[image->_tx];

      Pour(x,0,image->_tx-1)
        tabx[x] = image->SpacePosX(x);
        taby[x] = (*image)(x,0,0);
      FinPour

          num_courbe = gnuplot.AddCourbe( image->_tx, tabx, taby, $5);
      sprintf(name,"%s.gnuplot",$5);
      gnuplot.XPlot(name,(int)$7);

      delete [] tabx;
      delete [] taby;
      delete image;
      delete [] $5;
         }
        | T_DisplayHisto T_OP_PAR var_image  T_CL_PAR
        {
cerr << "Feature not available, needs to be updated ! " << endl;
/*
      InrImage::ptr   image = *(InrImage::ptr*) $3->Pointer();
      Histogramme* histo;

      histo = new Histogramme(GB_main_window,"histo",
                  image.get(),
                  CREATE_TOPLEVEL_SHELL);
*/
        }
        |
        T_Pad T_OP_PAR var_image T_COMMA var_image T_COMMA
              expr T_COMMA expr T_COMMA
              expr T_COMMA expr T_COMMA
              expr T_COMMA expr
              T_CL_PAR
        {
        /**
        Parameters:
            (3)  IMAGE1: image to change
            (5)  IMAGE2: input image
            (7)  expression: step x
            (9)  expression: position x
            (11) expression: step y
            (13) expression: position y
            (15) expression: step z
            (17) expression: position z

        Description:
            Pads the output image (IMAGE1) using the input image (IMAGE2),
            starting from position (posx,posy,posz) in IMAGE1,
            tries to fill all the values of IMAGE2 with a voxel lattice of size
            (step x, step y, step z).
            Works for scalar or vectorial images, both images must be of the same
            type (scalar or vectorial).
        **/

            int step_x = (int) $7;
            int step_y = (int) $11;
            int step_z = (int) $15;
        int pos_x  = (int) $9;
        int pos_y  = (int) $13;
        int pos_z  = (int) $17;

      // pad the first image with the second one
      //
      Func_Pad(
        ((InrImage::ptr*) $3->Pointer())->get(),
        ((InrImage::ptr*) $5->Pointer())->get(),
           step_x,step_y,step_z,
           pos_x,pos_y,pos_z);


        }
        |
    T_GenRead T_OP_PAR ASTRING T_CL_PAR
        {
      Func_GenRead($3);
        }
        |
    T_InitTime
        {
      driver.IP_time.Debut();
        }
        |
    T_EndTime
        {
      driver.IP_time.Fin();
      cout << "time spent = " << driver.IP_time << endl;
        }
        |
          identifier ASSIGN_OP T_ParamWin T_OP_PAR  expr_string T_CL_PAR
            {
          void * pwptr;
          IdentifierInfo::ptr ident($1);

          pwptr = (void*)new ParamPanel(GB_main_wxFrame,  (char*) $5  );
//          GB_main_wxFrame->AddParamPage((wxWindow*)pwptr,GetwxStr((char*) $5),
//                                        true // select as current page
//                                        );
          //GB_main_wxFrame->GetAuiManager().Update();
          if (pwptr != NULL)
        Vars.AddVar(type_parampanel,ident,pwptr);
          else
        driver.err_print("assignment of NULL parameter window\n");
              delete [] $5;
        }
    |
    VAR_PARAMWIN T_POINT T_BeginBox T_OP_PAR  expr_string T_CL_PAR
    {
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
    pw->BeginBox( (char*) $5);
    delete [] $5;
    }
    |
    VAR_PARAMWIN T_POINT T_BeginBook
    {
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      pw->BeginBook();
    }
    |
    VAR_PARAMWIN T_POINT T_EndBook
    {
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      pw->EndBook();
    }
    |
    VAR_PARAMWIN T_POINT T_AddPage T_OP_PAR  expr_string T_CL_PAR
    {
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      pw->AddPage( (char*) $5);
      delete [] $5;
    }
    |
    VAR_PARAMWIN T_POINT T_BeginPanel T_OP_PAR  expr_string T_CL_PAR
    {
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      pw->BeginPanel( (char*) $5);
      delete [] $5;
    }
    |
    VAR_PARAMWIN T_POINT T_EndPanel
    {
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      pw->EndPanel();
    }
    |
    VAR_PARAMWIN T_POINT T_EndBox
    {
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      pw->EndBox( );
    }
    |
    VAR_PARAMWIN T_POINT T_BeginHorizontal
    {
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      pw->BeginHorizontal( );
    }
    |
        VAR_PARAMWIN T_POINT T_EndHorizontal
        {
            ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
        pw->EndHorizontal( );
        }
        |
        VAR_PARAMWIN T_POINT T_CreateWin
        {
          ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
          pw->CreeDialogue( );
        }
        |
        VAR_PARAMWIN T_POINT T_Display
        {
        /**
          Description:
            Displays the given parameter panel, a smart pointer
            copy is stored
        */
          ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();

          GB_main_wxFrame->AddParamPanelPage(pw,
                                        pw->GetName(),
                                        true // select as current page
                                        );
        }
        |
        VAR_PARAMWIN T_POINT T_HIDE
        {
        /**
          Description:
            Hides the given parameter panel, the smart pointer copy is released
        */
          ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();

          GB_main_wxFrame->RemoveParamPanelPage(pw);
        }
        |
        VAR_PARAMWIN T_POINT T_redraw
        {
          ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
          pw->ReAfficheParametres();
        }
        |
        VAR_PARAMWIN T_POINT T_ShowSlider T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
          (1) Parameter window
          (5) parameter id
          (7) bool: 1/0 for show/hide
        Description:
          Show/hide the slider if there is one.
        **/
          ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
          int n = (int) $5;
          bool show = (bool) $7;

          pw->ParamShowSlider(n,show );
        }
        |
        VAR_PARAMWIN T_POINT T_SetCallback T_OP_PAR VAR_AMI_FUNCTION T_CL_PAR
        {
          ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
          int n = pw->NbParameters();
            pw->ChangedValueCallback(n-1,(void*) CB_ParamWin, (void*) $5->Pointer() );
        }
    |
    VAR_PARAMWIN T_POINT T_SetPositionProp 
      T_OP_PAR 
        expr  T_COMMA  expr T_COMMA  expr 
      T_CL_PAR
    {
      /**
      Description:
        Sets the object position properties of the given widget
      Parameters:
        - proportion property (0: not proportional, 
                               1: standard proportion,
                               -1: keeps previous value)
        - border size ( -1 keeps previous value)
        - flags       ( -1 keeps previous value)
      **/
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      int n = pw->NbParameters();
        pw->SetPositionProperties(
              n-1, (int) $5, (int) $7, (int) $9);
    }
        |
        VAR_PARAMWIN T_POINT T_SetDragCallback T_OP_PAR expr
           T_CL_PAR
        {
        /**
          Parameters:
            - index of the parameter for which to set the drag callback
          Description: activate the drag callback
        */
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      int n = pw->NbParameters();
      int i     = (int) $5;
      bool drag = true;
      if ((i>=0)&&(i<n))
        pw->SetDragCallback(i,drag);
      else
        fprintf(stderr,"VAR_PARAMWIN.SetDragCallbackO( %d , .. ) \t bad parameter number \n",i);
        }
        |
        VAR_PARAMWIN T_POINT T_SetDragCallback T_OP_PAR expr
          T_COMMA expr T_CL_PAR
        {
        /**
          Parameters:
            - index of the parameter for which to set the drag callback
            - boolean value: activate or desactivate the drag callbacks
          Description: activate the drag callback
        */
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      int n = pw->NbParameters();
      int i     = (int) $5;
      bool drag = (bool) $7;
      if ((i>=0)&&(i<n))
        pw->SetDragCallback(i,drag);
      else
        fprintf(stderr,"VAR_PARAMWIN.SetDragCallbackO( %d , .. ) \t bad parameter number \n",i);
        }
        |
        T_SaveStructuredGrid T_OP_PAR var_image T_COMMA expr_string T_CL_PAR
        {
          InrImage::ptr   i = *(InrImage::ptr*) $3->Pointer();
          Func_VectorImage2StructuredGrid(i.get(),$5);
          delete [] $5;
        }
        |
        VAR_GLTRANSFORM T_POINT PRINT
        {
          (*(GLTransfMatrix_ptr*) $1->Pointer())->Print();
        }
        |
        VAR_GLTRANSFORM T_POINT T_save expr_string
        {
          Func_SaveTransform(((GLTransfMatrix_ptr*) $1->Pointer())->get(),$4);
          delete [] $4;
        }
        |
        T_import_ami
        {
          AddWrapFluid();
        }
        |
        T_import_vtk
        {
          AddWrapVTK();
        }
        |
        T_import_itk
        {
          AddWrapITK();
        }
        |
        T_import_wii
        {
          AddWrapWII();
        }
        |
        T_import_filters
        {
          AddWrapFilters();
        }
        |
        T_import_sys
        {
          AddWrapSystem();
        }
        |
        T_amiOFCorr2D T_OP_PAR var_image T_COMMA var_image T_COMMA
        var_image  T_COMMA var_image T_COMMA
        var_image  T_COMMA
        var_image T_COMMA var_image T_COMMA
        expr T_COMMA expr T_COMMA
        expr T_COMMA  expr T_COMMA
        expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        InrImage::ptr im1 = *(InrImage::ptr*) $3->Pointer();
    InrImage::ptr im2 = *(InrImage::ptr*) $5->Pointer();
    InrImage::ptr u = *(InrImage::ptr*) $7->Pointer();
    InrImage::ptr v = *(InrImage::ptr*) $9->Pointer();
    InrImage::ptr corr = *(InrImage::ptr*) $11->Pointer();
    InrImage::ptr conf_x = *(InrImage::ptr*) $13->Pointer();
    InrImage::ptr conf_y = *(InrImage::ptr*) $15->Pointer();
    int initx= (int) $17;
    int inity= (int) $19;
    int displx= (int) $21;
    int disply= (int) $23;
    int sizex= (int) $25;
    int sizey= (int) $27;
    int deform = (int) $29;

    amiOpticFlowCorrelation2D(
      im1.get(),
      im2.get(),
      u.get(),
      v.get(),
      corr.get(),
      conf_x.get(),
      conf_y.get(),
      initx,inity,
      displx,disply,sizex,sizey,deform);
        }
    |
        T_amiOFVar2D T_OP_PAR var_image T_COMMA var_image T_COMMA
        expr T_COMMA expr T_COMMA expr T_COMMA
            expr T_COMMA expr T_COMMA expr T_COMMA
        var_image  T_COMMA var_image T_COMMA  expr  T_CL_PAR
        {
        InrImage::ptr im1 = *(InrImage::ptr*) $3->Pointer();
        InrImage::ptr im2 = *(InrImage::ptr*) $5->Pointer();
        float     sigma = $7;
        float     T     = $9;
        float     alpha = $11;
        long      dtype = (long) $13;      /* type of smoothness term */
        float     quantile = $15;          /* isotropy fraction */
        float     ht       = $17;          /* time step size */
        InrImage::ptr u =  *(InrImage::ptr*) $19->Pointer();  /* x component of optic flow, changed */
        InrImage::ptr v =  *(InrImage::ptr*) $21->Pointer();  /* y component of optic flow, changed */
        int       Niter    = (int)  $23;   /* Number of Iterations for Gauss-Seidel */

        amiOpticFlowVariational2D(
          im1.get(),
          im2.get(),
          sigma,T,alpha,dtype,quantile,ht,
          u.get(),
          v.get(),
          Niter);

        }
        |
        VAR_C_PROCEDURE  T_OP_PAR param_list T_CL_PAR
        {
          Variable*  var   = $1;
          ParamList::ptr param($3);
          ((void (*)(ParamList*)) var->Pointer())(param.get());
        }
        |
        T_Set3DArrowParam T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
          (3) size of the 3D arrow basis (def: 0.05)
          (5) size of the 3D arrow head (def: 0.1)
          (7) position of the 3D arrow (def: 0.85)

        Description:
          Parameters for 3D arrows created by CreateVectors() when the vector style is 1.
          Each arrow is composed of 2 tetrahedra:
            - the basis size in proportion to the arrow size is given by the 1st parameter,
            - the head size by the 2nd parameter,
            - the lower position of the head along the arrow by the 3rd parameter.
        **/
          AMIFluid::Func_SetArrowParameters((float)$3,(float)$5,(float)$7);
        }
        ;



param_list:
        {
          ParamList* pl = new ParamList();
          $$ = pl;
        }
        | expr
        {
          ParamList* pl(new ParamList);
          float_ptr* x = new float_ptr(new float($1));
          pl->AddParam(type_float, x);
          $$ = pl;
        }
        | param_list T_COMMA expr
        {
          ParamList* pl =  $1;
          float_ptr* x= new float_ptr(new float($3));
          pl->AddParam(type_float, x);
          $$ = pl;
        }
        | expr_string
        {
          ParamList* pl = new ParamList();
          string_ptr* x = new string_ptr(new string($1));
          delete [] $1;
          pl->AddParam(type_string, x);
          $$ = pl;
         }
        | param_list T_COMMA expr_string
        {
          ParamList* pl =  $1;
          string_ptr* x = new string_ptr(new string($3));
          delete [] $3;
          pl->AddParam(type_string, x);
          $$ = pl;
        }
        | T_AND VAR_FLOAT
        {
          ParamList* pl =  new ParamList();
          // creating reference
          float_ptr* x = new float_ptr(*((float_ptr*) $2->Pointer()));

          pl->AddParam(type_float, x);
          $$ = pl;
        }
        | param_list T_COMMA T_AND VAR_FLOAT
        {
          ParamList* pl = $1;
          float_ptr*   x = new float_ptr(* ((float_ptr*)$4->Pointer()));
          pl->AddParam(type_float, x);
          $$ = pl;
        }
        | T_AND VAR_INT
        {
          ParamList* pl = new ParamList();
          int_ptr*   x = new int_ptr(*((int_ptr*)$2->Pointer()));
          pl->AddParam(type_int, x);
          $$ = pl;
        }
        | param_list T_COMMA T_AND VAR_INT
        {
          ParamList* pl = $1;
          int_ptr*   x = new int_ptr( *((int_ptr*)$4->Pointer()));
          pl->AddParam(type_int, x);
          $$ = pl;
        }
        | expr_image
        {
          ParamList* pl = new ParamList();
          InrImage::ptr* i = new InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
          pl->AddParam(type_image, i);
          $$ = pl;
        }
        | param_list T_COMMA expr_image
        {
          ParamList* pl = $1;
          InrImage::ptr*   i = new InrImage::ptr( (InrImage*) driver.im_stack.GetLastImage());
          pl->AddParam(type_image, i);
          $$ = pl;
        }
        | T_AND var_image
        {
          ParamList* pl = new ParamList();
          InrImage::ptr*  i = new InrImage::ptr(*(InrImage::ptr*) $2->Pointer());
          pl->AddParam(type_image, i);
          $$ = pl;
        }
        | param_list T_COMMA T_AND var_image
        {
          ParamList* pl = $1;
          InrImage::ptr* i = new InrImage::ptr(*(InrImage::ptr*) $4->Pointer());
          pl->AddParam(type_image, i);
          $$ = pl;
        }
        | T_AND var_surface
        {
          ParamList* pl = new ParamList();
          SurfacePoly::ptr*  s = new SurfacePoly::ptr(*(SurfacePoly::ptr*) $2->Pointer());
          pl->AddParam(type_surface, s);
          $$ = pl;
        }
        | param_list T_COMMA T_AND var_surface
        {
          ParamList* pl = $1;
          SurfacePoly::ptr*  s = new SurfacePoly::ptr(*(SurfacePoly::ptr*) $4->Pointer());
          pl->AddParam(type_surface, s);
          $$ = pl;
        }
        |  VAR_IMAGEDRAW
        {
          ParamList* pl = new ParamList();
          DessinImage::ptr* i = new DessinImage::ptr(*(DessinImage::ptr*) $1->Pointer());
          pl->AddParam(type_imagedraw, i);
          $$ = pl;
        }
        | param_list T_COMMA VAR_IMAGEDRAW
        {
          ParamList* pl = $1;
          DessinImage::ptr*  i = new DessinImage::ptr(*(DessinImage::ptr*) $3->Pointer());
          pl->AddParam(type_imagedraw, i);
          $$ = pl;
        }
        ;

param_list_decl:
        {
      //      printf("no parameters \n");
      ParamListDecl* pl = new ParamListDecl;
      $$ = pl;
    }
    | T_NUM IDENTIFIER
    {
      IdentifierInfo::ptr ident($2);
      cout << "param_list_decl: T_NUM IDENTIFIER" << endl;
      cout << ident->GetName().c_str() << endl;
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName().c_str(),type_float);
      $$ = pl;
        }
        | T_STRING IDENTIFIER
        {
      IdentifierInfo::ptr ident($2);
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName().c_str(),type_string);
      $$ = pl;
        }
    | T_IMAGE IDENTIFIER
        {
      IdentifierInfo::ptr ident($2);
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName().c_str(),type_image);
      $$ = pl;
        }
    | T_IMAGEDRAW IDENTIFIER
        {
      IdentifierInfo::ptr ident($2);
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName().c_str(),type_imagedraw);
      $$ = pl;
        }
    | T_SURFACE IDENTIFIER
        {
      IdentifierInfo::ptr ident($2);
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName().c_str(),type_surface);
      $$ = pl;
        }
    | param_list_decl T_COMMA T_NUM IDENTIFIER
        {
      IdentifierInfo::ptr ident($4);
      ParamListDecl* pl = (ParamListDecl*) $1;
      pl->AddParam(ident->GetName().c_str(),type_float);
      $$ = pl;
        }
    | param_list_decl T_COMMA T_STRING IDENTIFIER
        {
      IdentifierInfo::ptr ident($4);
      ParamListDecl* pl = (ParamListDecl*) $1;
      pl->AddParam(ident->GetName().c_str(),type_string);
      $$ = pl;
        }
    | param_list_decl T_COMMA T_IMAGE IDENTIFIER
        {
      IdentifierInfo::ptr ident($4);
      ParamListDecl* pl = (ParamListDecl*) $1;
      pl->AddParam(ident->GetName().c_str(),type_image);
      $$ = pl;
        }
    | param_list_decl T_COMMA T_IMAGEDRAW IDENTIFIER
        {
      IdentifierInfo::ptr ident($4);
      ParamListDecl* pl = (ParamListDecl*) $1;
      pl->AddParam(ident->GetName().c_str(),type_imagedraw);
      $$ = pl;
        }
    | param_list_decl T_COMMA T_SURFACE IDENTIFIER
        {
      IdentifierInfo::ptr ident($4);
      ParamListDecl* pl = (ParamListDecl*) $1;
      pl->AddParam(ident->GetName().c_str(),type_surface);
      $$ = pl;
        };

primary_expr_string: ASTRING
        {
        $$=$1;
        }
        |
        VAR_STRING
        {
      //
      // TODO: replace string expression to use std::string !!!
      //
      char* res;

      res = new char[(*(string_ptr*)$1->Pointer())->length()+1];
      strcpy(res,((string_ptr*)$1->Pointer())->get()->c_str());
      $$= res;
        }
;


postfix_expr_string
        : primary_expr_string
        {
          $$=$1;
          //fflush(stdout);
        }
        |
        T_SPRINT T_OP_PAR expr_string T_COMMA expr T_CL_PAR
        {
      char* res;

      //printf("expr_string=%s*\n",$3);
      //printf("expr=%f*\n",$5);
      res = new char[strlen($3)+20];
      sprintf(res,$3,$5);
      //          res[strlen($3)]=0;
      delete [] $3;
      //printf("res=%s*\n",res);
      $$=res;
    }
    |
    T_boost_format T_OP_PAR expr_string T_CL_PAR T_MOD expr
    {
    /**
      Description: 
        Uses the class boost::format to create the result of 
        the format as a string, only one numerical parameter 
        is accepted.
    */
      boost::format bf($3);
      delete [] $3;
      std::string resstr = (bf % $6).str();
      char* res = new char[resstr.length()+1];
      strcpy(res,resstr.c_str());
      $$= res;
    }
    |
    T_boost_format T_OP_PAR expr_string T_CL_PAR T_MOD expr_string
    {
    /**
      Description: 
        Uses the class boost::format to create the result of 
        the format as a string, using a string expression as a parameter.
    */
      boost::format bf($3);
      delete [] $3;
      std::string resstr = (bf % $6).str();
      char* res = new char[resstr.length()+1];
      strcpy(res,resstr.c_str());
      $$= res;
      delete [] $6;
    }
    |
    T_TimeSpent
    {
      char* res;
      long min,hour,sec;

      driver.IP_time.Fin();
      driver.IP_time.AddCumul();
      driver.IP_time.GetCumul(hour,min,sec);
      res = new char[10];
          sprintf(res,"%03d:%02d:%02d",(int)hour,(int)min,(int)sec);
      $$=res;
        }
        |
    var_image T_POINT T_GetName {
      $$=(char*) (*(InrImage::ptr*) $1->Pointer())->Nom();
    }
;


additive_expr_string
        : postfix_expr_string
        | additive_expr_string T_ADD postfix_expr_string
        {
          char* res;
          res = new char[strlen($1)+strlen($3)+1];
          strcpy(res,$1);
          strcat(res,$3);
          delete [] $1;
          delete [] $3;
          $$=res;
        }
        | additive_expr_string T_SUB postfix_expr_string
        {
          RemoveEndString($1,$3);
          $$=$1;
        }
        ;

expr_string
        : additive_expr_string
        ;

instr_block: begin_block
               ABLOCK
             end_block
          {
        $$=$2;
        if (GB_debug)
          cerr << format("ablock : %s")
                  % $2->GetBody()
                << endl;
          };

begin_block: ;
end_block: ;

primary_expr
    : NUMBER
    | T_argc
    {
    /**
    Description:
      returns the number of arguments in the command line
    **/
      $$=GB_argc-GB_num_arg_parsed;
    }
    | T_LineNumber
    {
    /**
    Description:
      Line number in the current script
    **/
      $$=driver.yyiplineno;
    }
    | CONST_PI
    {
      /**
      Description:
        the constant Pi is set to
         3.14159265358979323846
      **/
      $$= 3.14159265358979323846;
    }
    | VAR_FLOAT
    {
      $$=*((float_ptr*)$1->Pointer())->get();
    }
    | VAR_INT
    {
      $$ = (float) *((int_ptr*)$1->Pointer())->get();
    }
    | VAR_UCHAR
    {
      $$ = (float) *((uchar_ptr*)$1->Pointer())->get();
    }
    | T_OP_PAR expr T_CL_PAR
    {
      $$=$2;
      fflush(stdout);
    }
    ;

postfix_expr
        : primary_expr
        | var_image T_OP_PAR expr T_CL_PAR
        {
        /**
        parameters:
        (1) input_image
        (3) x

        description:
        returns the image value at pixel (x,y=0,z=0).

        return:
        float value
        **/
      $$=(**(InrImage::ptr*) $1->Pointer())((int) $3,0);
    }
        | var_image T_OP_PAR expr T_COMMA expr  T_CL_PAR
        {
        /**
        parameters:
        (1) input_image
        (3) x
        (5) y

        description:
        returns the image value at pixel (x,y,z=0) by default

        return:
        float value
        **/
      $$=(**(InrImage::ptr*) $1->Pointer())((int) $3,(int) ( $5));
    }
        | var_image T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      $$=(**(InrImage::ptr*) $1->Pointer())((int) $3,(int) ( $5), (int) ($7));
    }
        | var_image T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Description:
        get image component value at a given 3D voxel position.
        same as image(expr,expr,expr;expr)
        **/
        InrImage::ptr im = *(InrImage::ptr*) $1->Pointer();
        Si im->CoordOK((int) $3, (int) $5, (int) $7)
           Et ((int) $9 >=0) Et ((int)$9 <im->GetVDim()) Alors

        $$=(**(InrImage::ptr*) $1->Pointer())((int) $3,(int) $5, (int) $7,
                      (int) $9 );
      Sinon
        driver.err_print("var_image(expr,expr,expr,expr) \t err coord \n");
          FinSi
    }
        | var_image T_OP_PAR expr T_COMMA expr T_COMMA expr T_SEMICOLON expr T_CL_PAR
        {
        /**
        Description:
        get image component value at a given 3D voxel position.
        **/
        InrImage::ptr im = *(InrImage::ptr*) $1->Pointer();
        Si im->CoordOK((int) $3, (int) $5, (int) $7)
           Et ((int) $9 >=0) Et ((int)$9 <im->GetVDim()) Alors

        $$=(**(InrImage::ptr*) $1->Pointer())((int) $3,(int) $5, (int) $7,
                      (int) $9 );
      Sinon
        driver.err_print("var_image(expr,expr,expr;expr) \t err coord \n");
          FinSi
    }
        | var_image T_OP_PAR expr  T_COMMA expr T_SEMICOLON expr T_CL_PAR
        {
        /**
        Description:
        get image component value at a given 2D  position. ( z component set to 0)
        **/
        InrImage::ptr im = *(InrImage::ptr*) $1->Pointer();
      Si (im->CoordOK((int) $3,   (int $5),   0  )
        Et ((int) $7 >=0) Et ((int)$7 <im->GetVDim())) Alors
        $$=(**(InrImage::ptr*) $1->Pointer())((int) $3,(int) $5,0, (int) $7 );
      Sinon
        driver.err_print("var_image(expr,expr;expr) \t err coord \n");
          FinSi
    }
        | var_image T_OP_PAR expr  T_SEMICOLON expr T_CL_PAR
        {
        /**
        Description:
        get image component value at a given 1D  position. (y and z components set to 0)
        **/
      Si (*(InrImage::ptr*) $1->Pointer())->CoordOK((int) $3,   0,   0  )
        Et ((int) $5 >=0) Et ((int)$5 <3) Alors
        $$=(**(InrImage::ptr*) $1->Pointer())((int) $3,0,0, (int) $5 );
      Sinon
        driver.err_print("var_image(expr;expr) \t err coord \n");
          FinSi
    }
        | var_image T_POINT TInit
        {
        /**
        description:
        Init the image buffer to the first voxel or pixel:
        at coordinates (0,0,0).

        See Also:
                inc val

        Example(s):

        i.init
        for x=0 to i.tx-1 {
          print "value at x = "; print x; print ": ";
          print i.val; print "\n";
          i.inc
        }
        **/
        (*(InrImage::ptr*) $1->Pointer())->InitBuffer();
        }
        | var_image T_POINT identifier
        {
          IdentifierInfo::ptr ident($3);
      if (strcmp(ident->GetName().c_str(),"tx")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->_tx;
      }
      else
      if (strcmp(ident->GetName().c_str(),"ty")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->_ty;
      }
      else
      if (strcmp(ident->GetName().c_str(),"tz")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->_tz;
      }
      else
      if (strcmp(ident->GetName().c_str(),"trx")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->_translation_x;
      }
      else
      if (strcmp(ident->GetName().c_str(),"vdim")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->GetVDim();
      }
      else
      if (strcmp(ident->GetName().c_str(),"try")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->_translation_y;
      }
      else
      if (strcmp(ident->GetName().c_str(),"trz")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->_translation_z;
      }
      else
      if (strcmp(ident->GetName().c_str(),"vx")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->_size_x;
      }
      else
      if (strcmp(ident->GetName().c_str(),"vy")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->_size_y;
      }
      else
      if (strcmp(ident->GetName().c_str(),"vz")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->_size_z;
      }
      else
      if (strcmp(ident->GetName().c_str(),"inc")==0) {
        (*(InrImage::ptr*) $1->Pointer())->IncBuffer();
      }
      else
      if (strcmp(ident->GetName().c_str(),"val")==0) {
        $$=(*(InrImage::ptr*) $1->Pointer())->ValeurBuffer();
      }
      else
        {
          char tmp_string[255];
          sprintf(tmp_string," %s.%s identifier not recognized \n",
              $1->Name(), ident->GetName().c_str());
          strcat(tmp_string," known identifiers {tx, ty, tz, vdim, trx, try, trz, vx, vy, vz, init, inc, val, info} \n");
          driver.err_print(tmp_string);
        }

        }
        | var_image T_POINT T_info
        {
        InrImage::ptr im;
        im=*(InrImage::ptr*) $1->Pointer();
        std::string tmp_string;
        tmp_string = (boost::format(" %s: format=%s  dim=(%d,%d,%d)x%d  vox=(%f,%f,%f) \
  translation =(%f,%f,%f) \n")
            % $1->Name()
            % im->FormatName().c_str()
            % im->_tx
            % im->_ty
            % im->_tz
            % im->GetVDim()
            % im->_size_x
            % im->_size_y
            % im->_size_z
            % im->_translation_x
            % im->_translation_y
            % im->_translation_z).str();
        driver.res_print(tmp_string);
    }
    | var_surface T_POINT T_info
    {
      SurfacePoly::ptr s = *(SurfacePoly::ptr*) $1->Pointer();

      std::string tmp_string;
      tmp_string = (boost::format(" %s: %d points %d lines %d polygons  \n")
        % $1->Name()
        % s->GetNumberOfPoints()
        % s->GetNumberOfLines()
        % s->GetNumberOfPolys ()
        ).str();
      driver.res_print(tmp_string);
      tmp_string = (boost::format(" limits X:[%4.2f %4.2f] Y:[%4.2f %4.2f]  Z:[%4.2f %4.2f]  \n")
        % s->_xmin % s->_xmax
        % s->_ymin % s->_ymax
        % s->_zmin % s->_zmax).str();
      driver.res_print(tmp_string);
    }
        |
    var_surface T_POINT T_NbPoints
        {
      SurfacePoly::ptr s = *(SurfacePoly::ptr*) $1->Pointer();

      $$ = s->GetNumberOfPoints();
    }
        |
    var_surface T_POINT T_NbPolys
        {
      SurfacePoly::ptr s = *(SurfacePoly::ptr*) $1->Pointer();

      $$ = s->GetNumberOfPolys();

    }
        |
        T_SNR T_OP_PAR var_image  T_COMMA var_image T_CL_PAR
        {
      $$=Func_SNR(((InrImage::ptr*) $3->Pointer())->get(),((InrImage::ptr*) $5->Pointer())->get());
        }
        |
        T_eccentricity T_OP_PAR var_image T_CL_PAR
        {
           $$=Func_eccentricity(((InrImage::ptr*) $3->Pointer())->get());
        }
        |
        T_isoarea2D T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          float   resolution = $5;
          int     cx = (int) $7;
          int     cy = (int) $9;
          float    surf_inf[1];
          float    surf_sup[1];
          float    surf_interp[1];
          Point3D point;
      Vect3D<float> v1,v2;
      CalculAireSection* compute_area;

          compute_area = new CalculAireSection( ((InrImage::ptr*) $3->Pointer())->get(),
                        resolution);
      compute_area->InitImagesSurf((InrImage*) NULL, (InrImage*) NULL,
                       (InrImage*) NULL, (InrImage*) NULL);
      surf_inf[0]  = surf_sup[0] = surf_interp[0] = 0.0;
      v1.Init( 1.0, 0.0, 0.0);
      v2.Init( 0.0, 1.0, 0.0);
      point.Init( cx,cy,0);

      $$=compute_area->Aire( 0, point, v1, v2,
                  surf_inf, surf_sup, surf_interp);

      delete compute_area;

        }
        |
        T_posarea T_OP_PAR var_image T_CL_PAR
        {

      $$=Func_ComputePositiveArea( ((InrImage::ptr*) $3->Pointer())->get() );
        }
        |
        T_posarea T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      float val[4];

      val[0] = $3;
      val[1] = $5;
      val[2] = $7;
      val[3] = $9;
      $$=Func_PositiveArea(val);
        }
        |
        T_COUNT T_OP_PAR expr_image  T_CL_PAR
        {
        /**
             description:
             returns the of pixels (or voxels) with intensity higher than 0.5

             parameters:
               (3) image expression

            Keywords:

            Others:
                max, mean, min, median

        **/
      InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
      $$=Func_count( im );
      delete im;
        }
        |
        T_mean T_OP_PAR expr_image  T_CL_PAR
        {
        /**
             description:
             returns the average value of an image

             parameters:
               (3) image expression

            Keywords:

            Others:
                min, max, median

        **/
      InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
      $$=Func_mean( im);
      delete im;
        }
        |
        T_MAX T_OP_PAR expr_image  T_CL_PAR
        {
        /**
             description: 
             returns the maximal value of an image

             parameters:
               (3) image variable

            Keywords:

            Others:
                min, mean, median

        **/
      InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
      $$=Func_max( im,NULL);
      delete im;
        }
        |
        T_argmax T_OP_PAR expr_image  T_CL_PAR
        {
        /**
             description:
             returns the position of the maximal value of an image

             parameters:
               (3) image expression

            Keywords:

            Others:
                min, mean, median, max

        **/
      InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
      $$=Func_argmax( im);
      delete im;
        }
        |
        T_MIN T_OP_PAR var_image  T_CL_PAR
        {
        /**
             description:
             returns the minimal value of an image

             parameters:
               (3) image variable

            Keywords:

            Others:
                max, mean, median

        **/
      $$=Func_min( ((InrImage::ptr*) $3->Pointer())->get(),NULL);
        }
        |
        T_MEDIAN T_OP_PAR var_image  T_CL_PAR
        {
        /**
             description:
             returns the median value of an image

             parameters:
               (3) image variable

            Keywords:

            Others:
                min, max, mean, count

        **/
      $$=Func_med( ((InrImage::ptr*) $3->Pointer())->get(),0.5,NULL);
        }
        |
        T_MAX T_OP_BR expr_image T_CL_BR T_OP_PAR var_image  T_CL_PAR
        {
        /**
             description:
             returns the maximal value of an image in a region of
             interest defined by pixels (or voxels) of intensity
             higher than 0.5 in the image between []

             parameters:
               (3) image expression
               (5) image variable

            Keywords:

            Others:
                min, max, mean, median, count

        **/
          InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();
          $$=Func_max( ((InrImage::ptr*) $6->Pointer())->get(),mask);
          delete mask;
        }
        |
        T_MIN T_OP_BR expr_image T_CL_BR T_OP_PAR var_image  T_CL_PAR
        {
        /**
             description:
             returns the minimal value of an image in a region of
             interest defined by pixels (or voxels) of intensity
             higher than 0.5 in the image between []

             parameters:
               (3) image expression
               (5) image variable

            Keywords:

            Others:
                min, max, mean, median, count

        **/
          InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();
          $$=Func_min( ((InrImage::ptr*) $6->Pointer())->get(),mask);
          delete mask;
        }
        |
        T_MEDIAN T_OP_BR expr_image T_CL_BR T_OP_PAR var_image  T_CL_PAR
        {
        /**
             description:
             returns the median value of an image in a region of
             interest defined by pixels (or voxels) of intensity
             higher than 0.5 in the image between []

             parameters:
               (3) image expression
               (5) image variable

            Keywords:

            Others:
                min, max, mean, median, count

        **/
          InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();
          $$=Func_med( ((InrImage::ptr*) $6->Pointer())->get(),0.5,mask);
          delete mask;
        }
        |
        T_MEDIAN T_OP_BR expr_image T_CL_BR T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {
          InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();
          $$=Func_med( ((InrImage::ptr*) $6->Pointer())->get(),(float) $8,mask);
          delete mask;
        }
        |
        T_mean T_OP_BR expr_image T_CL_BR T_OP_PAR expr_image  T_CL_PAR
        {
        /**
             description:
             returns the average value of an image in a region of
             interest defined by pixels (or voxels) of intensity
             higher than 0.5 in the image between []

             parameters:
               (3) image expression: defines the Region of Interest
               (5) image expression: image from which to compute the mean intensity value.

            Keywords:

            Others:
                min, max, mean, median, count

        **/
          InrImage* input = (InrImage*) driver.im_stack.GetLastImage();
          InrImage* mask  = (InrImage*) driver.im_stack.GetLastImage();
          $$=Func_mean( input,mask);
          delete mask;
          delete input;
        }
        |
        T_mean T_OP_PAR var_image T_COMMA expr_image T_CL_PAR
        {
        /**
             description:
             returns the maximal value of an image in a region of
             interest

             parameters:
               (3) image variable
               (5) image expression: the pixels (or voxels) higher than 0.5
               define the Region of Interest

            Keywords:

            Others:
                min, max, mean, median, count

        **/
          InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();

          $$=Func_mean( ((InrImage::ptr*) $3->Pointer())->get(), mask);
          delete mask;
    }
    |  T_atof T_OP_PAR expr_string T_CL_PAR
    {
//    setlocale(LC_NUMERIC,"C");
      setlocale(LC_NUMERIC, "C");
      $$=atof($3);
      delete [] $3;
    }
    |
    VAR_IMAGEDRAW T_POINT T_GetXmin
    {
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = *(DessinImage::ptr*) ($1->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._xmin;
        }
        |
        VAR_IMAGEDRAW T_POINT T_GetXmax
        {
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = *(DessinImage::ptr*) ($1->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._xmax;
        }
        |
        VAR_IMAGEDRAW T_POINT T_GetYmin
        {
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = *(DessinImage::ptr*) ($1->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._ymin;
        }
        |
        VAR_IMAGEDRAW T_POINT T_GetYmax
        {
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = *(DessinImage::ptr*) ($1->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._ymax;
        }
        |
        VAR_IMAGEDRAW T_POINT T_GetZmin
        {
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = *(DessinImage::ptr*) ($1->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._zmin;
        }
        |
        VAR_IMAGEDRAW T_POINT T_GetZmax
        {
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = *(DessinImage::ptr*) ($1->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._zmax;
        }
        |
        VAR_IMAGEDRAW T_POINT T_GetXPos
        {
          DessinImage::ptr draw;
          DessinImageParametres* param;
          string comment;
          draw = *(DessinImage::ptr*) ($1->Pointer());
          param = draw->GetParam();
          $$=param->_pos._x;
          comment = str(format(" //  xpos=%3d") % param->_pos._x);
          if (driver.in_console)
            GB_main_wxFrame->GetConsole()
                           ->IncCommand(wxString::FromAscii(comment.c_str()));
        }
    |
    VAR_IMAGEDRAW T_POINT T_GetYPos
    {
      DessinImage::ptr draw;
      DessinImageParametres* param;
      string comment;

      draw = *(DessinImage::ptr*) ($1->Pointer());
      param = draw->GetParam();
      $$=param->_pos._y;

      comment = str( format(" //  ypos=%3d") % param->_pos._y);
      if (driver.in_console)
        GB_main_wxFrame->GetConsole()
                       ->IncCommand(wxString::FromAscii(comment.c_str()));

    }
    |
    VAR_IMAGEDRAW T_POINT T_GetZPos
    {
      DessinImage::ptr draw;
      DessinImageParametres* param;
      string comment;

      draw = *(DessinImage::ptr*) ($1->Pointer());
      param = draw->GetParam();
      $$=param->_pos._z;

      comment = str( format(" //  xpos=%3d") % param->_pos._z);
      if (driver.in_console)
        GB_main_wxFrame->GetConsole()
                        ->IncCommand(wxString::FromAscii(comment.c_str()));
    }
    |
    AnisoGS T_POINT T_GetNoiseSD
    {
      $$=Func_AnisoGS_GetNoiseSD();
    }
    |
    AnisoGS T_POINT T_GetDAcoeff
    {
      $$=Func_AnisoGS_GetDAcoeff();
    }
    |
    T_LevelSetsCURV T_POINT T_UpdateResult
    {
      $$ = Func_LevelSets_UpdateResult();
    }
    | VAR_MATRIX T_OP_PAR expr T_COMMA expr T_CL_PAR
    {
          FloatMatrix::ptr mat = *(FloatMatrix::ptr*)$1->Pointer();
          int i = (int)$3;
          int j = (int)$5;
          $$ = (*mat)[i][j];
    }
    | VAR_MATRIX T_OP_PAR expr T_COMMA expr T_CL_PAR ASSIGN_OP expr
    {
          FloatMatrix::ptr mat = *(FloatMatrix::ptr*)$1->Pointer();
          int i = (int)$3;
          int j = (int)$5;
          $$  =  ((*mat)[i][j] = $8);
    }
    |
    VAR_PARAMWIN T_POINT T_AddFloat T_OP_PAR  VAR_FLOAT T_COMMA expr T_COMMA expr T_CL_PAR
    {
      /**
          description:
            Adds an interface for a floating point variable to the window of parameters.

          parameters:
            (1) variable of type window of parameters
            (5) float variable for which we want to create an interface
            (7) minimal value accepted
            (9) maximal value accepted

        Keywords:

        Others:
            ParamWin, AddInt, CreateWin, Display

        Example:
          a=1
          w1 = ParamWin("test")
          w1.AddFloat(a,1,100)
          w1.CreateWin
          w1.Display
      **/

      float* var = ((float_ptr*)$5->Pointer())->get();
      float min_value = (float)$7;
      float max_value = (float)$9;

    ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
        int var_id = pw->AddFloat( var, (char*)$5->Name());
        pw->FloatConstraints( var_id, min_value, max_value, *var );
        $$ = var_id;
    }
    |
    VAR_PARAMWIN T_POINT T_AddInt T_OP_PAR  VAR_INT  T_COMMA expr T_COMMA expr T_CL_PAR
    {
      /**
        Description:
        Add interface to set an integer value between a minimal and a maximal value.
      **/
      int* var = ((int_ptr*)$5->Pointer())->get();
      ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
      int var_id = pw->AddInteger( var, (char*)$5->Name());
          pw->IntegerConstraints( var_id, (int)$7, (int)$9, *var );
      $$ = var_id;
    }
    |
    VAR_PARAMWIN T_POINT T_AddButton T_OP_PAR  expr_string T_COMMA VAR_AMI_FUNCTION T_CL_PAR
    {
    int bid;
    ParamPanel_ptr pw = *(ParamPanel_ptr*) $1->Pointer();
    pw->AddButton( &bid, $5,
                (void*) CB_Button,
                (void*) $7->Pointer());
    $$ = bid;
    }
    |
    VAR_PARAMWIN T_POINT T_AddBoolean T_OP_PAR   VAR_UCHAR   T_CL_PAR
    {
    /**
    Parameters:
      (5) Variable of type UCHAR

    Description:
      Adds a boolean variable to the parameter window.
    **/
      unsigned char*   var = ((uchar_ptr*) $5->Pointer())->get();
      ParamPanel_ptr pw  = *(ParamPanel_ptr*) $1->Pointer();
      int var_id;
      pw->AddBoolean( &var_id, var, (char*)$5->Name());
      pw->BooleanDefault( var_id, *var);
      $$ = var_id;
    }
    |
    VAR_PARAMWIN T_POINT T_AddImageChoice T_OP_PAR  VAR_STRING  T_COMMA expr_string T_CL_PAR
    {
    /**
    Parameters:
      - string variable that will contain the name of the
              selected image
      - label: description of the image to select
    Description:
      Allows the user to choose among the current image variables available
    **/
      ParamPanel_ptr pw  = *(ParamPanel_ptr*) $1->Pointer();
      boost::shared_ptr<wxArrayString> imagelist;
      int var_id;

      imagelist = Vars.SearchVariables(type_image);
      imagelist->Add(_T("Image"));

      // Get list of image names
      pw->AddListChoice( &var_id,
          (string_ptr*)$5->Pointer(),
          (char*) $7,
          imagelist,
          (void*)CB_update_imagelist);
      //pw->EnumerationDefaut( var_id,  *var);
      $$ = var_id;
    }
    |
    VAR_PARAMWIN T_POINT T_AddEnum T_OP_PAR   VAR_INT T_COMMA expr   T_CL_PAR
    {
    /**
    Parameters:
      (5) Variable of type INT
      (7) number of different values of the enumeration

    Description:
      Adds an integer variable as an enumeration to the parameter window.
    **/
      int*   var = ((int_ptr*) $5->Pointer())->get();
      ParamPanel_ptr pw  = *(ParamPanel_ptr*) $1->Pointer();
      int size = (int) $7;
      int var_id;
      pw->AddEnumeration( &var_id, size, var, (char*)$5->Name());
      //pw->EnumerationDefaut( var_id,  *var);
      $$ = var_id;
    }
    |
    VAR_PARAMWIN T_POINT T_AddEnum T_OP_PAR   VAR_INT   T_CL_PAR
    {
    /**
    Parameters:
      (5) Variable of type INT

    Description:
      Adds an integer variable as an enumeration to the parameter window.
    **/
      int*   var = ((int_ptr*) $5->Pointer())->get();
      ParamPanel_ptr pw  = *(ParamPanel_ptr*) $1->Pointer();
      int var_id;
      pw->AddEnumeration( &var_id, var, (char*)$5->Name());
      $$ = var_id;
    }
    |
    VAR_PARAMWIN T_POINT T_AddEnumChoice T_OP_PAR  expr T_COMMA expr_string   T_CL_PAR
    {
    /**
    Parameters:
      (5) expression:        identificator of the enumeration parameter
      (7) string expression: text associated to this choice

    Description:
      Adds a choice for an enumeration created in the parameter window
    **/
      ParamPanel_ptr pw  = *(ParamPanel_ptr*) $1->Pointer();
      int id = (int) $5;
      int var_id;
      pw->AddEnumChoice( id, &var_id, (char*) $7);
      $$ = var_id;
      delete [] $7;
    }
    |
    VAR_PARAMWIN T_POINT T_AddString T_OP_PAR  VAR_STRING  T_COMMA expr_string  T_CL_PAR
    {
    /**
    Parameters:
      (1) Parameter window
      (5) String variable to interface
      (7) label

    Description:
      Adds a string in the parameter window
    **/
        ParamPanel_ptr pw  = *(ParamPanel_ptr*) $1->Pointer();
        int var_id;
        pw->AjouteChaine( &var_id,
          (string_ptr*)$5->Pointer(),
          $7);
        pw->ContraintesChaine(var_id,(char*) ((string_ptr*)$5->Pointer())->get()->c_str());
        $$=var_id;
        delete [] $7;
    }
    |
    VAR_PARAMWIN T_POINT T_AddFilename T_OP_PAR  VAR_STRING  T_COMMA expr_string  T_COMMA expr_string T_COMMA expr_string T_CL_PAR
    {
    /**
    Parameters:
      (1) Parameter window
      (5) String variable to interface
      (7) label
      (9) default path
      (11) default mask

    Description:
      Adds a filename in the parameter window
    **/
        ParamPanel_ptr pw  = *(ParamPanel_ptr*) $1->Pointer();
        int var_id;
        // passer AjouteNomFichier a std::string !!!!
        pw->AjouteNomFichier( &var_id, (string_ptr*)$5->Pointer(), (char*) $7);
        pw->ContraintesNomFichier(var_id,(char*) $9,(char*)"",(char*) $11);
        $$=var_id;
    }
    |
    VAR_PARAMWIN T_POINT UPDATE
    {
    /**
    Parameters:
      (1) Parameter window

    Description:
      update the display of all the parameters
    **/
        ParamPanel_ptr pw  = *(ParamPanel_ptr*) $1->Pointer();
        pw->MAJ();
        GB_main_wxFrame->GetAuiManager().Update();
    }
    |
    VAR_PARAMWIN T_POINT UPDATE T_OP_PAR  expr  T_CL_PAR
    {
    /**
    Parameters:
      (1) Parameter window
      (5) parameter id

    Description:
      update the display of one parameter
    **/
        ParamPanel_ptr pw  = *(ParamPanel_ptr*) $1->Pointer();
        pw->UpdateParameter((int)$5);
    }
    | T_exists T_OP_PAR identifier T_CL_PAR
    {
    /**
    Description:
    Check for the existence of a variable, returns 0
    **/
          $$=0;
    }
    | T_exists T_OP_PAR variable T_CL_PAR
    {
    /**
    Description:
    Check for the existence of a variable, returns 1
    **/
          $$=1;
    }
    | T_FileExists T_OP_PAR expr_string T_CL_PAR
    {
    /**
    Parameters:
      string: input filename
    Description:
      Check for the existence of the given filename
    **/
      $$ = wxFileExists(wxString($3,wxConvUTF8));
      delete [] $3;
    }
    | basic_type
    {
          $$ = (int) $1;
    }
    | VAR_FILE T_POINT T_scan_float T_OP_PAR expr_string T_CL_PAR
    {
        float res;
        FILE_ptr file = *(FILE_ptr*) ($1->Pointer());
        setlocale(LC_NUMERIC, "C");
        fscanf(file.get(),$5,&res);
        $$ =  res;
    }
    | VAR_FILE T_POINT T_read T_OP_PAR VAR_FLOAT T_CL_PAR
    {
       float*  var = ((float_ptr*) $5->Pointer())->get();
        FILE_ptr file = *(FILE_ptr*) ($1->Pointer());
        setlocale(LC_NUMERIC, "C");
        $$ = fscanf(file.get(),"%f",var);
    }
    | VAR_FILE T_POINT T_read T_OP_PAR VAR_STRING T_CL_PAR
    {
      FILE_ptr file = *(FILE_ptr*) ($1->Pointer());
      setlocale(LC_NUMERIC, "C");
      // not safe, TODO: use iostream or boost for files here ...
      char res[100];
      $$ = fscanf(file.get(),"%s",res);
      string_ptr var( new std::string(res));
      $5->SetString(var);
    }
    | var_surface T_POINT T_GetNumberOfLines 
    {
    /**
      Parameters:
        - input polydata
      Description: 
        Returns the number of lines of the polydata structure
    */
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());

      $$ = s->GetNumberOfLines(  );
    }
    | T_MAX  T_OP_PAR expr T_COMMA expr T_CL_PAR
    {
    /**
      Parameters:
        - 2 numbers
      Description: 
        Returns the maximal value
    */
      $$ = macro_max($3,$5);
    }
    ;

unary_expr
        : postfix_expr
        | unary_operator cast_expr { $$=$2; }
        | T_FACT cast_expr  { UNARYOP_EXPR(!,              $2,$$) }
        | T_SUB cast_expr  { UNARYOP_EXPR(-,              $2,$$) }
        | T_ADD cast_expr  { UNARYOP_EXPR(+,              $2,$$) }
        | SIN cast_expr  { UNARYOP_EXPR(sin,            $2,$$) }
        | COS cast_expr  { UNARYOP_EXPR(cos,            $2,$$) }
        | SQRT cast_expr { UNARYOP_EXPR(sqrt,           $2,$$) }
        | ABS   cast_expr { UNARYOP_EXPR(fabs,           $2,$$) }
        | ROUND cast_expr { UNARYOP_EXPR(round,           $2,$$) }
        | FLOOR cast_expr
        {
          /**
            Description:
                return the closest integer smaller than the given expression value.
           **/
          UNARYOP_EXPR(floor,           $2,$$)
        }
        | TAN   cast_expr  { UNARYOP_EXPR(tan,            $2,$$) }
        | ASIN cast_expr { UNARYOP_EXPR(asin,           $2,$$) }
        | ACOS cast_expr { UNARYOP_EXPR(acos,           $2,$$) }
        | ATAN cast_expr { UNARYOP_EXPR(atan,           $2,$$) }
        | EXP cast_expr  { UNARYOP_EXPR(exp,            $2,$$) }
        | LOG cast_expr  { UNARYOP_EXPR(1.0/log(10.0)*log,$2,$$) }
        | LN cast_expr   { UNARYOP_EXPR(log,            $2,$$) }
        ;

unary_operator
        :
          T_MULT |
          '~'
        ;

cast_expr:
        unary_expr
        |
         T_OP_PAR basic_type T_CL_PAR unary_expr
        {
      switch((WORDTYPE) $2) {
      case WT_UNSIGNED_CHAR:  $$=(unsigned char) $4; break;
      case WT_SIGNED_SHORT:   $$=(short) $4;  break;
      case WT_UNSIGNED_SHORT: $$=(unsigned short) $4;  break;
      case WT_SIGNED_INT:     $$=(int) $4;  break;
      case WT_UNSIGNED_INT:   $$=(unsigned int) $4;  break;
      case WT_FLOAT:          $$=(float) $4;  break;
      default:
        fprintf(stderr,"Conversion not available\n");
      }
        }
        ;

multiplicative_expr
        : cast_expr
        | multiplicative_expr T_MULT cast_expr { $$=$1*$3; }
        | multiplicative_expr T_DIV cast_expr { $$=$1/$3; }
        | multiplicative_expr T_MOD cast_expr { $$= ((int) round($1)) % ((int) round($3)); }
        ;

additive_expr
        : multiplicative_expr
        | additive_expr T_ADD multiplicative_expr {  $$=$1+$3; }
        | additive_expr T_SUB multiplicative_expr {  $$=$1-$3; }
        ;

shift_expr
        : additive_expr
        ;


relational_expr
        : shift_expr
        | relational_expr T_LT shift_expr   {  $$=($1<$3);  }
        | relational_expr T_GT shift_expr   {  $$=($1>$3);  }
        | relational_expr LE_OP shift_expr {  $$=($1<=$3); }
        | relational_expr GE_OP shift_expr {  $$=($1>=$3); }
        ;

equality_expr
        : relational_expr
        | equality_expr EQ_OP relational_expr  { $$=($1==$3); }
        | equality_expr NE_OP relational_expr  { $$=($1!=$3); }
        | expr_string   EQ_OP expr_string      { $$=(strcmp($1,$3)==0); }
        | expr_string   NE_OP expr_string      { $$=(strcmp($1,$3)!=0); }
        ;

and_expr
        : equality_expr
        | and_expr T_AND equality_expr
        {
      $$ = ((int)$1) & ((int)$3);
    }
        ;


exclusive_or_expr
        : and_expr
        | exclusive_or_expr T_EXP and_expr
        ;

inclusive_or_expr
        : exclusive_or_expr
        {
          $$=$1;
        }
        | inclusive_or_expr T_OR exclusive_or_expr
        {
      $$ = ((int)$1) | ((int)$3);
        }
        ;

logical_and_expr
        : inclusive_or_expr
        {
           $$=$1;
        }
        | logical_and_expr AND_OP inclusive_or_expr
        {
          $$=$1&&$3;
        }
        ;

logical_or_expr
        : logical_and_expr
        {
      $$=$1;
    }
        | logical_or_expr OR_OP logical_and_expr
        {
      $$=$1||$3;
    }
        ;

conditional_expr
        : logical_or_expr
        | logical_or_expr T_QUEST logical_or_expr T_COLON conditional_expr
        {
      $$=($1?$3:$5);
        }
        ;

assignment_expr
        : conditional_expr
        ;

expr
        : assignment_expr
        ;



basic_type:
         T_CHAR
        {
      driver.err_print(" char format is not available: use unsigned char \n");
      $$=WT_UNSIGNED_CHAR;
    }
       | T_UCHAR
       {
          $$=WT_UNSIGNED_CHAR;
       }
       | T_SHORT
       {
     $$=WT_SIGNED_SHORT;
       }
       | T_USHORT
       {
     $$=WT_UNSIGNED_SHORT;
       }
       | T_INT
       {
     $$=WT_SIGNED_INT;
       }
       | T_UINT
       {
     $$=WT_UNSIGNED_INT;
       }
       | T_FLOAT
       {
     $$=WT_FLOAT;
       }
       | T_DOUBLE
       {
     $$=WT_DOUBLE;
       }
       | T_RGB
       {
     $$=WT_RGB;
       }
       | T_FLOAT_VECTOR
       {
     $$=WT_FLOAT_VECTOR;
       }
       | var_image T_POINT T_GetFormat
      {
//        printf("format %d \n",(int) ( *(InrImage::ptr*) $1->Pointer())->GetFormat());
        $$ = (int) (*(InrImage::ptr*) $1->Pointer())->GetFormat();
      };


var_image:
        VAR_IMAGE
        {
          $$=$1;
        }
        |
        VAR_ARRAY_IMAGE T_OP_BR expr T_CL_BR
        {
          VarArray::ptr array;
          int  i = (int) $3;

          array = *(VarArray::ptr*) ($1->Pointer());
          if (array->GetVar(i).Pointer()==NULL) {
            // create a small image to avoid problems
            InrImage* im = new InrImage(1,1,1,WT_UNSIGNED_CHAR);
            string name = str(format("%s[%d]") % $1->Name() % i);
            array->InitElement(i,im,name.c_str());
          }
          $$=&(array->GetVar(i));
        }


image:
       T_Image  expr_string
       {
     driver.im_stack.AddImage($2);
     delete [] $2;
       }
       |
       T_Image T_OP_PAR expr_string T_CL_PAR
       {
     driver.im_stack.AddImage($3);
     delete [] $3;
       }
       |
       T_ReadRawImages T_OP_PAR expr T_COMMA expr T_COMMA basic_type T_COMMA
                           expr T_COMMA expr_string T_COMMA expr T_COMMA expr T_CL_PAR
       {
       /**
       Parameters:
         (3)  dimension in X
         (5)  dimension in Y
         (7)  image type, one of: CHAR, UCHAR, SHORT,
                                 USHORT, FLOAT, DOUBLE, RGB, FLOAT_VECTOR.
         (9)  endianess: 0 for little, 1 for big.
         (11) filename or file format
         (13) first slice number
         (15) last slice number

       Description:
         Read 2D raw data (or a sequence of 2D raw data) as an image.
         The program can read raw data compressed with gzip:
         if the file is not found, it looks for the same filename with a '.gz' extention. If
         it can find it, it will open the file using the 'popen' (pipe open) command and the 'gunzip' program.

       Examples:
          i = ReadRawImages(1024,1024,USHORT,0,"AfGG.%d",48,48)
       **/
     InrImage* im  = new InrImage();
     amimage* amim = new amimage();
     int dimx                    = (int)           $3;
     int dimy                    = (int)           $5;
     WORDTYPE inr_format         = (WORDTYPE)      $7;
     int endianness              = (int)           $9;
     char* file_format           = (char*)         $11;
     unsigned short first_slice  = (unsigned short)$13;
     unsigned short last_slice   = (unsigned short)$15;

         amim->SetDim(dimx,dimy,1);
     if (endianness)
       amim->endianness = BIG_END;
     else
       amim->endianness = LITTLE_END;

         im->AMIFromWT(1,inr_format,amim);
     amim->datafile    = AMI_DATAEXT;
     amim->file_format = file_format;
     delete [] file_format;
     amim->first_slice = first_slice;
     amim->last_slice  =  last_slice;

     if (amim->readdata_ext()) {
       im->SetAMImage(amim);
       driver.im_stack.AddImage(im);
     } else {
       // Error message
       driver.err_print("ReadRawImages() failed ... \n");
       driver.im_stack.AddImage((InrImage*)NULL);
       delete amim;
       delete im;
     }
       }
       |
       T_ReadRawImages T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA  basic_type T_COMMA
                           expr T_COMMA expr_string  T_CL_PAR
       {
       /**
       Parameters:
         (3)  dimension in X
         (5)  dimension in Y
         (7)  dimension in Z
         (9)  image type, one of: CHAR, UCHAR, SHORT,
                                 USHORT, FLOAT, DOUBLE, RGB, FLOAT_VECTOR.
         (11)  endianess: 0 for little, 1 for big.
         (13) filename or file format

       Description:
         Read 3D raw data as an image.
         The program can read raw data compressed with gzip:
         if the file is not found, it looks for the same filename with a '.gz' extention. If
         it can find it, it will open the file using the 'popen' (pipe open) command and the 'gunzip' program.

       Examples:
          i = ReadRawImages(256,256,256,USHORT,0,"data.raw")
       **/
     InrImage* im  = new InrImage();
     amimage* amim = new amimage();
     int dimx                    = (int)           $3;
     int dimy                    = (int)           $5;
     int dimz                    = (int)           $7;
     WORDTYPE inr_format         = (WORDTYPE)      $9;
     int endianness              = (int)           $11;
     char* file_format           = (char*)         $13;

         amim->SetDim(dimx,dimy,dimz);
     if (endianness)
       amim->endianness = BIG_END;
     else
       amim->endianness = LITTLE_END;

     im->AMIFromWT(1,inr_format,amim);
     amim->datafile    = AMI_DATAEXT;
     amim->file_format = file_format;
     delete [] file_format;

     if (amim->readdata3D_ext()) {
       im->SetAMImage(amim);
       driver.im_stack.AddImage(im);
     } else {
       // Error message
       driver.err_print("ReadRawImages() failed ... \n");
       driver.im_stack.AddImage((InrImage*)NULL);
       delete amim;
       delete im;
     }
       }
       |
       T_ReadRawImages T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA  basic_type T_COMMA expr T_COMMA
                           expr T_COMMA expr_string  T_CL_PAR
       {
       /**
       Parameters:
         (3)  dimension in X
         (5)  dimension in Y
         (7)  dimension in Z
         (9)  image type, one of: CHAR, UCHAR, SHORT,
                                 USHORT, FLOAT, DOUBLE, RGB,
         (11) Vectorial dimension
         (13)  endianess: 0 for little, 1 for big.
         (15) filename or file format

       Description:
         Read 3D raw data as an image.
         The program can read raw data compressed with gzip:
         if the file is not found, it looks for the same filename with a '.gz' extention. If
         it can find it, it will open the file using the 'popen' (pipe open) command and the 'gunzip' program.

       Examples:
          i = ReadRawImages(256,256,256,FLOAT,3,0,"3dvectorfielddata.raw")
       **/
     InrImage* im  = new InrImage();
     amimage* amim = new amimage();
     int dimx                    = (int)           $3;
     int dimy                    = (int)           $5;
     int dimz                    = (int)           $7;
     WORDTYPE inr_format         = (WORDTYPE)      $9;
     int vdim                    = (int)           $11;
     int endianness              = (int)           $13;
     char* file_format           = (char*)         $15;

     amim->SetDim(dimx,dimy,dimz);
     amim->SetVDim(vdim);
     if (endianness)
       amim->endianness = BIG_END;
     else
       amim->endianness = LITTLE_END;

     im->AMIFromWT(vdim,inr_format,amim);
     amim->datafile    = AMI_DATAEXT;
     amim->file_format = file_format;
     delete [] file_format;

     if (amim->readdata3D_ext()) {
       im->SetAMImage(amim);
       driver.im_stack.AddImage(im);
     } else {
       // Error message
       driver.err_print("ReadRawImages() failed ... \n");
       driver.im_stack.AddImage((InrImage*)NULL);
       delete amim;
       delete im;
     }
       }
       | T_vtkDicomRead T_OP_PAR expr_string T_CL_PAR
       {
       /**
       Parameters:
        (3) STRING EXPRESSION: dicom directory

       Description:
         Reads a dicom file using VTK
       **/
            InrImage*  res;

            res = Func_vtkDicomRead( (char*) $3);

            Si res==NULL Alors
                driver.err_print("vtkDicomRead() error ... \n");
                driver.im_stack.AddImage((InrImage*)NULL);
            FinSi

            driver.im_stack.AddImage(res);
            delete [] $3;
       }
       | T_vtkMINCRead T_OP_PAR expr_string T_CL_PAR
       {
       /**
       Parameters:
        (3) STRING EXPRESSION: filename in minc format

       Description:
         Reads a file in minc format using vtk reader for MINC.
       **/
            InrImage*  res;

            res = Func_vtkMINCRead( (char*) $3);

            Si res==NULL Alors
                driver.err_print("vtkMINCRead() error ... \n");
                driver.im_stack.AddImage((InrImage*)NULL);
            FinSi

            driver.im_stack.AddImage(res);
            delete [] $3;
       }
       | VAR_C_IMAGE_FUNCTION  T_OP_PAR param_list T_CL_PAR
       {
       Variable*  var   = $1;
       ParamList::ptr param($3);
       InrImage*  im;

       im = ((InrImage* (*)(ParamList*)) var->Pointer())(param.get());
       if (!im) {
        driver.yyiperror(" image function returns NULL \n");
        YYABORT;
       }
      driver.im_stack.AddImage(im);
       }
       |
       T_Image
       {
          int res;
          string name;
          string inc_cmd; // increment the command line string

          res=AskImage(name);
          if (!res) {
            driver.yyiperror(" Need Image \n");
            YYABORT;
          }
          driver.im_stack.AddImage((char*)name.c_str());


          wxFileName filename(GetwxStr(name));
          filename.Normalize(wxPATH_NORM_ALL,wxEmptyString,wxPATH_UNIX);
          wxString newname(   filename.GetVolume()+filename.GetVolumeSeparator()+
                              filename.GetPath(wxPATH_GET_VOLUME,wxPATH_UNIX)+
                              filename.GetPathSeparator(wxPATH_UNIX)+
                              filename.GetFullName());
          driver.res_print(newname.mb_str());
          driver.res_print("\n");
          inc_cmd = str(format(" \"%1%\" // from browser ") % newname.mb_str());

          if (driver.in_console)
            GB_main_wxFrame->GetConsole()
                            ->IncCommand(wxString::FromAscii(inc_cmd.c_str()));
      }
      |
      T_Image T_OP_PAR basic_type T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
        InrImage* im;
        printf(" ********** %d %f %f %f\n", $3, $5, $7, $9);
        im = new InrImage( (int) $5, (int) $7, (int) $9, (WORDTYPE) $3);
        driver.im_stack.AddImage(im);
      }
      |
      T_Image T_OP_PAR basic_type T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      /**
    Parameters:
      (3)  image type
      (5)  dimension in X
      (7)  dimension in Y
      (9)  dimension in Z
      (11) dimension in V: size of the vectors

    Description:
      Creates a new image
      **/
    InrImage* im;
    printf(" ********** %d %f %f %f\n", $3, $5, $7, $9);
    im = new InrImage( (int) $5, (int) $7, (int) $9, (int) $11, (WORDTYPE) $3);
    driver.im_stack.AddImage(im);
    }
    |
    T_Image T_OP_PAR basic_type T_COMMA expr T_COMMA var_image T_CL_PAR
    {
    /**
    Parameters:
      (3) image type
      (5) dimension in V: size of the vectors
      (7) reference image variable for the size,
            translation and voxel size.

    Description:
      Creates a new image from a reference image
    **/
      InrImage* im;
      WORDTYPE imformat = (WORDTYPE) $3;
      int vdim   = (int) $5;
      InrImage::ptr varim=*(InrImage::ptr*) $7->Pointer();
      string  imname;

      imname = str(format("newimagefrom_%s.ami.gz")
                  % $7->Name());

      im = new InrImage(imformat,vdim,
                        imname.c_str(),varim.get());
      driver.im_stack.AddImage(im);
    }
    |
    var_image
      {
         InrImage::ptr varim;
         InrImage* im;
         char  imname[200];

         varim=*(InrImage::ptr*) $1->Pointer();
         sprintf(imname,"copy_%s",$1->Name());
         im = new InrImage(varim->_format,imname,varim.get());
         (*im)=(*varim);
          driver.im_stack.AddImage(im);
       }
      |
      var_image T_OP_BR expr T_CL_BR
       {
       /**
        Description:
          Applied on RGB or vectorial images,
          returns one component of the image:
          expr=0 returns Red   if RGB or the X coordinate if vectorial
          expr=1 returns Green if RGB or the Y coordinate if vectorial
          expr=2 returns Blue  if RGB or the Z coordinate if vectorial

        Examples:
          i = Image "test.jpg"
          ired   = i[0]
          igreen = i[1]
          iblue  = i[2]

          print ired(i.tx/2,i.ty/2); print "\n"
          print i(i.tx/2,i.ty/2,0,0); print "\n"
       **/
         InrImage::ptr im1;
         InrImage* im;
          char  imname[200];
         int i;

         im1=*(InrImage::ptr*) $1->Pointer();

          i = (int) $3;
          Si i<0               AlorsFait i = 0;
          Si i>=im1->GetVDim() AlorsFait i = im1->GetVDim()-1;
          sprintf(imname,"C%d_%s",i,$1->Name());

         SelonQue im1->_format Vaut
          Valeur WT_RGB:
          Valeur WT_RGBA:
          Valeur WT_UNSIGNED_CHAR:
             im = new InrImage(WT_UNSIGNED_CHAR,1,imname,im1.get());
          FinValeur

          Valeur WT_UNSIGNED_INT:
             im = new InrImage(WT_UNSIGNED_INT,1,imname,im1.get());
          FinValeur

          Valeur WT_SIGNED_INT:
             im = new InrImage(WT_SIGNED_INT,1,imname,im1.get());
          FinValeur

          Valeur WT_UNSIGNED_SHORT:
             im = new InrImage(WT_UNSIGNED_SHORT,1,imname,im1.get());
          FinValeur

          Valeur WT_SIGNED_SHORT:
             im = new InrImage(WT_SIGNED_SHORT,1,imname,im1.get());
          FinValeur

          Valeur WT_FLOAT_VECTOR:
          Valeur WT_FLOAT:
             im = new InrImage(WT_FLOAT,1,imname,im1.get());
          FinValeur

          Valeur WT_DOUBLE:
             im = new InrImage(WT_DOUBLE,1,imname,im1.get());
          FinValeur

       Defaut:
        driver.yyiperror(" operator [] does not handle this format \n");
        YYABORT;
         FinSelonQue

         im->InitBuffer();
         im1->InitBuffer();
         Repeter
           im->FixeValeur(im1->VectValeurBuffer(i));
               im1->IncBuffer();
         JusquA Non(im->IncBuffer()) FinRepeter
         driver.im_stack.AddImage(im);

       }
       |
       T_SUM T_OP_PAR expr_image  T_COMMA expr T_CL_PAR
       {
        /**
             description:
             returns the sum of the values of an image along the specified dimension
             0 for X, 1 for Y, 2 for Z

             parameters:
               (3) image expression
               (5) expr

            Keywords:

            Others:
                min, max, median

        **/
    InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
        InrImage* res = NULL;
        int dim = (int) $5;
        int i,j,k;
        double sum;
        // check that the image is scalar
        if (im->ScalarFormat()) {
        switch (dim) {
          case 0:
            res = new InrImage(1,im->DimY(),im->DimZ(),1,WT_FLOAT,"sumX.ami.gz");
            for(j=0;j<=im->DimY()-1;j++)
            for(k=0;k<=im->DimZ()-1;k++) {
              sum=0;
              for(i=0;i<=im->DimX()-1;i++)
        sum += (*im)(i,j,k);
              res->BufferPos(0,j,k);
              res->FixeValeur(sum);
            }
          break;
          case 1:
            res = new InrImage(im->DimX(),1,im->DimZ(),1,WT_FLOAT,"sumY.ami.gz");
            for(i=0;i<=im->DimX()-1;i++)
            for(k=0;k<=im->DimZ()-1;k++) {
              sum=0;
              for(j=0;j<=im->DimY()-1;j++)
        sum += (*im)(i,j,k);
              res->BufferPos(i,0,k);
              res->FixeValeur(sum);
            }
          break;
          case 2:
            res = new InrImage(im->DimX(),im->DimY(),1,1,WT_FLOAT,"sumZ.ami.gz");
            for(i=0;i<=im->DimX()-1;i++)
            for(j=0;j<=im->DimY()-1;j++) {
              sum=0;
              for(k=0;k<=im->DimZ()-1;k++)
        sum += (*im)(i,j,k);
              res->BufferPos(i,j,0);
              res->FixeValeur(sum);
            }
          break;
        }
        } else
        {
          driver.err_print("sum operator only for scalar images ... \n");
        }
        driver.im_stack.AddImage(res);
        delete im;
      }
      |
      T_localmean T_OP_PAR expr_image  T_COMMA expr T_CL_PAR
      {
    InrImage* im  = (InrImage*) driver.im_stack.GetLastImage();
    InrImage* res =Func_localmean( im, (int) $5);
    driver.im_stack.AddImage(res);
    delete im;
      }
      |
      T_localmean2 T_OP_PAR expr_image  T_COMMA expr T_CL_PAR
      {
    InrImage* im  = (InrImage*) driver.im_stack.GetLastImage();
    InrImage* res =Func_localmean2( im, (int) $5);
    driver.im_stack.AddImage(res);
    delete im;
      }
      |
      T_localSD T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr T_CL_PAR
      {
    InrImage* mean    = (InrImage*) driver.im_stack.GetLastImage();
    InrImage* im      = (InrImage*) driver.im_stack.GetLastImage();
    InrImage* res     = Func_localSD( im, mean, (int) $7);
    driver.im_stack.AddImage(res);
    delete im;
    delete mean;
      }
      |
      T_localSD2 T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr T_CL_PAR
      {
    InrImage* mean    = (InrImage*) driver.im_stack.GetLastImage();
    InrImage* im      = (InrImage*) driver.im_stack.GetLastImage();
    InrImage* res     = Func_localSD2( im, mean, (int) $7);
    driver.im_stack.AddImage(res);
    delete im;
    delete mean;
      }
      |
      T_MAX T_OP_PAR expr_image T_COMMA expr_image T_CL_PAR
      {
      /**
      Description:
      Returns the image corresponding to the pointwise maximum between 2 images.


      See Also:
              min, median
        **/
    InrImage* im1;
    InrImage* im2;
        float val1,val2;

    im2 = driver.im_stack.GetLastImage();
    im1 = driver.im_stack.GetLastImage();
    im1->InitBuffer();
    im2->InitBuffer();
    Repeter
          val1 = im1->ValeurBuffer();
      val2 = im2->ValeurBuffer();
      Si val2>val1 AlorsFait im1->FixeValeur(val2);
      im2->IncBuffer();
    JusquA Non(im1->IncBuffer())
    FinRepeter
    driver.im_stack.AddImage(im1);
    delete im2;

      }
      |
      OpImage T_OP_PAR var_image T_COMMA ASTRING T_CL_PAR
      {
    InrImage*  res;

    res = Func_OpImage(((InrImage::ptr*) $3->Pointer())->get(),
              NULL,
              NULL,
              $5);
    Si res==NULL Alors
      driver.err_print("OpImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
    delete [] $3;

      }
      |
      OpImage T_OP_PAR var_image T_COMMA ASTRING T_COMMA basic_type T_CL_PAR
      {
    InrImage*  res;

    res = Func_OpImage(((InrImage::ptr*) $3->Pointer())->get(),
              NULL,
              NULL,
              $5,
              (WORDTYPE) $7);
    Si res==NULL Alors
      driver.err_print("OpImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);

    delete [] $5;

      }
      |
      OpImage T_OP_PAR var_image T_COMMA var_image T_COMMA ASTRING T_CL_PAR
      {
    InrImage*  res;

    res = Func_OpImage(((InrImage::ptr*) $3->Pointer())->get(),
              ((InrImage::ptr*) $5->Pointer())->get(),
              NULL,
              $7);
    Si res==NULL Alors
      driver.err_print("OpImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);

    delete [] $7;
      }
      |
      OpImage T_OP_PAR var_image T_COMMA var_image T_COMMA ASTRING T_COMMA basic_type T_CL_PAR
      {
    InrImage*  res;

    res = Func_OpImage(((InrImage::ptr*) $3->Pointer())->get(),
              ((InrImage::ptr*) $5->Pointer())->get(),
              NULL,
              $7,
              $9);
    Si res==NULL Alors
      driver.err_print("OpImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);

    delete [] $7;

      }
      |
      OpImage T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA ASTRING T_CL_PAR
      {
        InrImage*  res;

        res = Func_OpImage(
            ((InrImage::ptr*) $3->Pointer())->get(),
            ((InrImage::ptr*) $5->Pointer())->get(),
            ((InrImage::ptr*) $7->Pointer())->get(),
              $9);
        Si res==NULL Alors
          driver.err_print("OpImage() erreur ... \n");
          res=((InrImage::ptr*) $3->Pointer())->get();
        FinSi
        driver.im_stack.AddImage(res);

        delete [] $9;
      }
      |
      OpImage T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA
                  ASTRING T_COMMA basic_type T_CL_PAR
      {
        InrImage*  res;

        res = Func_OpImage(
            ((InrImage::ptr*) $3->Pointer())->get(),
            ((InrImage::ptr*) $5->Pointer())->get(),
            ((InrImage::ptr*) $7->Pointer())->get(),
              $9,
              $11);
        Si res==NULL Alors
          driver.err_print("OpImage() erreur ... \n");
          res=((InrImage::ptr*) $3->Pointer())->get();
        FinSi
        driver.im_stack.AddImage(res);
        delete [] $9;
      }
      |
      FILTER
      T_OP_PAR expr_image
      T_COMMA expr
      T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      /**
        Parameters
          #1 expr_image: input image for the filter
          #2 expr:     standard deviation of the Gaussian kernel
          #3 expr:     derivation order in X coordinates
          #4 expr:     derivation order in Y coordinates
          #5 expr:     derivation order in Z coordinates

        description:
        Apply a Gaussian filter of specified standard deviation to
        input image and returns a new image.

        Example(s):
        - Convolution with a Gaussian kernel:
        i = Image(FLOAT,10,10,10)
        j = filter(i,1,0,0,0)

     **/
        InrImage*  res;
        InrImage* im = (InrImage*) driver.im_stack.GetLastImage();

        res = Func_Filter( im,
                  $5,
                  (int) $7,
                  (int) $9,
                  (int) $11);

        Si res==NULL Alors
          driver.err_print("Filter() erreur ... \n");
          res=im;
        Sinon
          delete im;
        FinSi
        driver.im_stack.AddImage(res);
      }
      | T_itk T_POINT T_CannyEdgeDetector T_OP_PAR var_image T_COMMA expr T_COMMA expr  T_CL_PAR
      {
        InrImage* res;
        float var           = $7;
        float lowthreshold  = $9;
        //float highthreshold = $11;
            res = Func_itkCannyEdgeDetector(  ((InrImage::ptr*) $5->Pointer())->get(), var, lowthreshold);
        Si res==NULL Alors
          driver.err_print("itk.CannyEdgeDetector() error ... \n");
          res=((InrImage::ptr*) $5->Pointer())->get();
        FinSi

        driver.im_stack.AddImage(res);
      }
      |
      T_vtkDist T_OP_PAR var_image T_CL_PAR
      {
        InrImage*  res;

        res = Func_vtkDist( ((InrImage::ptr*) $3->Pointer())->get());

        Si res==NULL Alors
          driver.err_print("vtkDist() erreur ... \n");
          res=((InrImage::ptr*) $3->Pointer())->get();
        FinSi

        driver.im_stack.AddImage(res);
      }
      |
      T_vtkMedian3D T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
        InrImage*  res;

        res = Func_vtkMedianFilter3D(
            ((InrImage::ptr*) $3->Pointer())->get(),
            (int) $5,(int) $7,(int) $9);

        Si res==NULL Alors
          driver.err_print("vtkMedian3D() erreur ... \n");
          res=((InrImage::ptr*) $3->Pointer())->get();
        FinSi

        driver.im_stack.AddImage(res);
      }
      |
      T_AndreDist T_OP_PAR var_image T_CL_PAR
      {
        driver.err_print("The function AndreDist() has been removed for licence issues! \n");
/*
        InrImage::ptr  in = *(InrImage::ptr*) $3->Pointer();
        InrImage*  res;
        int ok;

        res = new InrImage(WT_FLOAT,"AndreDist.ami.gz", in.get());

        ok = dist_squared( in.get(),res);

        Si !ok Alors
          sprintf(tmp_string,"AndreDist() erreur ... \n");
          driver.err_print(tmp_string);
          delete res;
          res=NULL;
        Sinon
          driver.im_stack.AddImage(res);
        FinSi
*/
      }
      |
      T_2DFlux T_OP_PAR expr_image T_COMMA  expr T_CL_PAR
      {
    InrImage*  res;

    res = Func_2DFlux( driver.im_stack.GetLastImage(),$5);

    Si res==NULL Alors
      driver.err_print("2DFlux() error ... \n");
      res=NULL;
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_OutFlux T_OP_PAR var_image T_CL_PAR
      {
    InrImage*  res;

    res = Func_OutFlux( ((InrImage::ptr*) $3->Pointer())->get());

    Si res==NULL Alors
      driver.err_print("OutFlux() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_OutFluxScalar T_OP_PAR var_image T_CL_PAR
      {
    InrImage*  res;

    res = Func_OutFluxScalar( ((InrImage::ptr*) $3->Pointer())->get());

    Si res==NULL Alors
      driver.err_print("OutFluxScalar() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_OrientationRatio T_OP_PAR var_image T_CL_PAR
      {
    InrImage*  res;

    res = Func_OrientationRatio2D( ((InrImage::ptr*) $3->Pointer())->get());

    Si res==NULL Alors
      driver.err_print("OrientationRatio() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_Skeleton T_OP_PAR var_image T_COMMA var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      /**
        Parameters:
          (3) IMAGE: input image
          (5) IMAGE: criterion for thinning
          (7) NUM: minimal threshold
          (9) NUM: maximal threshold
          (11) NUM: endpoint type 1: line 2: surface 3: line&surface
        Description:
          Creates a skeleton of the input image,
          the input image is considered binary (positive or 0 values)
          The skeletonization uses simple points.
          Usually the criterion image is an Euclidean distance
          transform to the boundaries of the object, and we
          can set than any point at distance lower than the minimal
          threshold shoud be removed automatically and any point
          at distance higher than the maximum should be kept.
      **/
    InrImage*  res;

    res = Func_Thinning( ((InrImage::ptr*) $3->Pointer())->get(),
                 ((InrImage::ptr*) $5->Pointer())->get(),
                 $7,
                 $9,
                 $11);

    Si res==NULL Alors
      driver.err_print("Skeleton() error ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_SimplePoints T_OP_PAR var_image  T_CL_PAR
      {
    InrImage*  res;

    res = Func_SimplePoints( ((InrImage::ptr*) $3->Pointer())->get() );

    Si res==NULL Alors
      driver.err_print("SimplePoints() error ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_CircleIntegral T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA
                           expr T_COMMA var_image T_CL_PAR
      {
        InrImage*  res;

        res = Func_CircleIntegration(
          ((InrImage::ptr*) $3 ->Pointer())->get(), // gradient
          ((InrImage::ptr*) $5 ->Pointer())->get(),  // first  vector
          ((InrImage::ptr*) $7 ->Pointer())->get(),  // second vector
          (float)     $9,              // radius
          CIRCLE_RESPONSE_MEAN,          // integration type
          ((InrImage::ptr*) $11->Pointer())->get()); // mask

        Si res==NULL Alors
          driver.err_print("CircleInt() error ... \n");
          res=((InrImage::ptr*) $3->Pointer())->get();
        FinSi

        driver.im_stack.AddImage(res);
      }
      |
      T_CircleIntegralExc T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA
                              expr T_COMMA var_image T_CL_PAR
      {
      InrImage*  res;

      res = Func_CircleIntegration(
        ((InrImage::ptr*) $3 ->Pointer())->get(),  // gradient
        ((InrImage::ptr*) $5 ->Pointer())->get(),  // first  vector
        ((InrImage::ptr*) $7 ->Pointer())->get(),  // second vector
        (float)     $9,              // radius
        CIRCLE_RESPONSE_MEAN,        // integration type
        ((InrImage::ptr*) $11->Pointer())->get()); // mask

      Si res==NULL Alors
        driver.err_print("CircleInt() error ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
      }
      |
      T_CircleIntSdExc T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA
                           expr T_COMMA var_image T_COMMA expr T_COMMA expr T_CL_PAR
      {
        /**
        Parameters:
          (3) gradient
          (5) first vector
          (7) second vector
          (9) radius
          (11) mask
          (13) threshold on standard deviation
          (15) threshold on excentricity

        Description:
          Compute integrations of the gradient vectors along circles
          in a plane defined by 2 vectors,
          with constraints on the standard deviation and the excentricity
          (see pub. Krissian et al. EMBS 2003)
        **/
        InrImage*  res;

        res = Func_CircleIntSdExc(
          ((InrImage::ptr*) $3 ->Pointer())->get(),  // gradient
          ((InrImage::ptr*) $5 ->Pointer())->get(),  // first  vector
          ((InrImage::ptr*) $7 ->Pointer())->get(),  // second vector
          (float)     $9,              // radius
          ((InrImage::ptr*) $11->Pointer())->get(),
          (float) $13,
          (float) $15,
          2, // pairs mode MEAN
          100, // keeps all points
          CIRCLE_RESPONSE_MEAN);

        Si res==NULL Alors
          driver.err_print("CircleIntSdExc() error ... \n");
          res=((InrImage::ptr*) $3->Pointer())->get();
        FinSi

        driver.im_stack.AddImage(res);
      }
      |
      T_CircleMinIntSdExc T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA
                           expr T_COMMA var_image T_COMMA expr T_COMMA expr T_COMMA expr  T_COMMA expr T_CL_PAR
      {
      /**
      Parameters:
        (3) gradient
        (5) first vector
        (7) second vector
        (9) radius
        (11) mask
        (13) threshold on standard deviation
        (15) threshold on excentricity
        (17) Pairs mode (0: MIN,1: MAX or 2:MEAN)
        (19) Highest percentage (Keeps only a percentage of highest boundary values)

      Description:
        Compute integrations of the gradient vectors along circles
        in a plane defined by 2 vectors,
        with constraints on the standard deviation and the excentricity
        (see pub. Krissian et al. EMBS 2003)
        with an additional constraint:
        it integrates half of the circle and takes the
        minimum between opposite values.
      **/
      InrImage*  res;

      res = Func_CircleIntSdExc(
        ((InrImage::ptr*) $3 ->Pointer())->get(),  // gradient
        ((InrImage::ptr*) $5 ->Pointer())->get(),  // first  vector
        ((InrImage::ptr*) $7 ->Pointer())->get(),  // second vector
        (float)     $9,              // radius
        ((InrImage::ptr*) $11->Pointer())->get(),
        (float) $13,
        (float) $15,
        (int) $17,
        (int) $19,
        CIRCLE_RESPONSE_MEAN);

      Si res==NULL Alors
        driver.err_print("CircleIntSdExc() error ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
      }
      |
      T_LocalExtrema T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA var_image T_CL_PAR
      {
    InrImage*  res;

    res = Func_LocalExtrema( ((InrImage::ptr*) $3->Pointer())->get(),  // input image
                 ((InrImage::ptr*) $5->Pointer())->get(),  // first  vector
                 ((InrImage::ptr*) $7->Pointer())->get(),  // second vector
                 ((InrImage::ptr*) $9->Pointer())->get()); // mask

    Si res==NULL Alors
      driver.err_print("LocalExtrema() error ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_LocalExtrema T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA var_image T_COMMA expr T_CL_PAR
      {
    InrImage*  res;
    int samples = (int) $11;

    res = Func_LocalExtrema( ((InrImage::ptr*) $3->Pointer())->get(),  // input image
                 ((InrImage::ptr*) $5->Pointer())->get(),  // first  vector
                 ((InrImage::ptr*) $7->Pointer())->get(),  // second vector
                 ((InrImage::ptr*) $9->Pointer())->get(),  // mask
                 samples);                   // number of sample points around the circle

    Si res==NULL Alors
      driver.err_print("LocalExtrema() error ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
     |
      T_NormalField T_OP_PAR var_image  T_CL_PAR
      {
    InrImage*  res;

    res = Func_NormalSmoothField( ((InrImage::ptr*) $3->Pointer())->get() );

    Si res==NULL Alors
      driver.err_print("NormalField() error ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_NormalField T_OP_PAR var_image T_COMMA var_image T_CL_PAR
      {
    InrImage*  res;

    res = Func_NormalSmoothField( ((InrImage::ptr*) $3->Pointer())->get() , ((InrImage::ptr*) $5->Pointer())->get() );

    Si res==NULL Alors
      driver.err_print("NormalField() error ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_DirConnectivity T_OP_PAR var_image T_COMMA var_image T_CL_PAR
      {
    InrImage*  res;

    res = Func_DirConnectivity( ((InrImage::ptr*) $3->Pointer())->get() , ((InrImage::ptr*) $5->Pointer())->get() );

    Si res==NULL Alors
      driver.err_print("DirConnectivity() error ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
     |
      NormGrad
      T_OP_PAR expr_image
      T_COMMA expr T_CL_PAR
      {
    InrImage*  res;
    InrImage*    input  = (InrImage*) driver.im_stack.GetLastImage();

    res = Func_NormGrad( input, $5);

    Si res==NULL Alors
      driver.err_print("Filter() error ... \n");
      res=input;
    Sinon
      delete input;
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_DiscNormGrad
      T_OP_PAR var_image  T_CL_PAR
      {
    InrImage*  res;

    res = Func_DiscNormGrad( ((InrImage::ptr*) $3->Pointer())->get());

    Si res==NULL Alors
      driver.err_print("discnormgrad() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_DiscMeanCurvature
      T_OP_PAR var_image  T_CL_PAR
      {
    InrImage*  res;

    res = Func_DiscMeanCurvature( ((InrImage::ptr*) $3->Pointer())->get());

    Si res==NULL Alors
      driver.err_print("DiscMeanCurvature() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_gradient
      T_OP_PAR var_image
      T_COMMA expr T_CL_PAR
      {
    InrImage*  res;

    res = Func_Gradient( ((InrImage::ptr*) $3->Pointer())->get(),
                 $5);

    Si res==NULL Alors
      driver.err_print("Filter() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
        |
        T_Laplacian T_OP_PAR var_image  T_CL_PAR
        {
    /**
        Parameters:
            (3) input image.

        Description:
        Computes a discrete laplacian (sum of second order derivatives),
        in 2D or 3D depending on the image dimension.
    **/
    InrImage*  res;

    res = Func_Laplacian(((InrImage::ptr*) $3->Pointer())->get());
    Si res==NULL Alors
      driver.err_print("Filter() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
        }
      |
      SecDerGrad
      T_OP_PAR var_image
      T_COMMA expr T_CL_PAR
      {
    InrImage*  res;

    res = Func_SecDerGrad( ((InrImage::ptr*) $3->Pointer())->get(),
                 $5);

    Si res==NULL Alors
      fprintf(stderr,"SecDerGrad() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      SecDerGrad2
      T_OP_PAR var_image
      T_COMMA expr T_CL_PAR
      {
    InrImage*  res;

    res = Func_SecDerGrad2( ((InrImage::ptr*) $3->Pointer())->get(),
                 $5);

    Si res==NULL Alors
      fprintf(stderr,"SecDerGrad2() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
    }
    | T_AutoCrop T_OP_PAR expr_image T_COMMA expr T_CL_PAR
    {

          InrImage* res;
          InrImage* im = (InrImage*) driver.im_stack.GetLastImage();

        res = Func_AutoCrop(im,(int)$5);

        driver.im_stack.AddImage(res);
        delete im;
    }
    |
      var_image T_OP_BR image_extent T_CL_BR
    {
      InrImage*  res;
      ImageExtent<float>* extent = (ImageExtent<float>*) $3;
  
      extent->print();
      extent->SetRelative(((InrImage::ptr*) $1->Pointer())->get());
  
      extent->print();
      cout << "xmax = " << (int)  extent->Xmax() << endl;
      cout << "xmax = " << (int)  round((double)extent->Xmax()) << endl;
      res = Func_SubImage( ((InrImage::ptr*) $1->Pointer())->get(),
                  (int)  round((double)extent->Xmin()),
                  (int)  round((double)extent->Ymin()),
                  (int)  round((double)extent->Zmin()),
                  (int)  round((double)extent->Xmax()),
                  (int)  round((double)extent->Ymax()),
                  (int)  round((double)extent->Zmax())
                  );
      delete extent;
  
      Si res==NULL Alors
        fprintf(stderr,"SubImage() erreur ... \n");
        res= ((InrImage::ptr*) $1->Pointer())->get();
      FinSi
  
      driver.im_stack.AddImage(res);
    }
    |
    var_image
      T_OP_BR  T_COLON  T_COMMA
      T_COLON  T_COMMA
      expr T_COLON expr T_CL_BR
    {
      InrImage::ptr  im = *(InrImage::ptr*) $1->Pointer();
      InrImage*  res;
  
      res = Func_SubImage( im.get(),
                  0, 0,  (int) round($7),
                  im->DimX()-1,  im->DimY()-1, (int) round($9));
  
      Si res==NULL Alors
        fprintf(stderr,"SubImage() erreur ... \n");
        res=((InrImage::ptr*) $1->Pointer())->get();
      FinSi
  
      driver.im_stack.AddImage(res);
      }
      |
      SubImage
      T_OP_PAR var_image
      T_COMMA expr T_COMMA expr T_COMMA expr
      T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      /**
      Parameters
        #1 var_image: input image
        #2 expr:      X min
        #3 expr:      Y min
        #4 expr:      Z min
        #5 expr:      X max
        #6 expr:      Y max
        #7 expr:      Z max

      Extract a rectangular subimage from the input image, the subimage
      keeps the information of the translation and it can be put back
      at the same position using putimage command.
      The same operation can also be achieved using the [] operator.

      Example:

      - Extract a subimage of size 4x4x4

      i = Image(FLOAT,10,10,10)
      j = subimage(i,5,5,5,8,8,8)

      Others:
        putimage, []

      **/
    InrImage*  res;

    res = Func_SubImage( ((InrImage::ptr*) $3->Pointer())->get(),
                 (int) $5, (int) $7, (int) $9,
                 (int) $11,(int) $13,(int) $15);

    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_EDPdilate T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
    InrImage*  res;
    res = Func_EDP_dilate( ((InrImage::ptr*) $3->Pointer())->get(),
                   $5,  $7, (int) $9);
    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPdilate T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_CL_PAR
      {
    InrImage*  res;
    res = Func_EDP_dilate( ((InrImage::ptr*) $3->Pointer())->get(), $5,  $7);
    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPdilate T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
    InrImage*  res;
    float Imin = $9;
    float Imax = $11;
    res = Func_EDP_dilate( ((InrImage::ptr*) $3->Pointer())->get(), $5,  $7, Imin, Imax);
    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPerode T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
    InrImage*  res;
    res = Func_EDP_erode( ((InrImage::ptr*) $3->Pointer())->get(),
                  $5,  $7, (int) $9);
    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPerode T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_CL_PAR
      {
    InrImage*  res;
    res = Func_EDP_erode( ((InrImage::ptr*) $3->Pointer())->get(), $5,  $7);
    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPerode T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
    /**
    Parameters:
      (3)  initial image
      (5)  total operation size
      (7)  time step
      (9)  minimal intensity
      (11) maximal intensity
    Description:
      Grayscale morphological erosion
      using Brockett and Maragos scheme with a given
      size and time step in voxel units
      minimal and maximal intensities allow to speed up the process
    **/
    InrImage*  res;
    float Imin = $9;
    float Imax = $11;
    res = Func_EDP_erode( ((InrImage::ptr*) $3->Pointer())->get(), $5,  $7, Imin, Imax);
    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPopen
      T_OP_PAR var_image
      T_COMMA expr T_COMMA expr T_CL_PAR
      {
    /**
    Parameters:
      (3)  initial image
      (5)  total operation size
      (7)  time step
    Description:
      Grayscale morphological opening
      using Brockett and Maragos scheme with a given
      size and time step in voxel units
    **/
    InrImage*  res;

    res = Func_EDP_open( ((InrImage::ptr*) $3->Pointer())->get(),
                    $5,  $7);

    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_EDPopen
      T_OP_PAR var_image
      T_COMMA expr T_COMMA expr  T_COMMA expr T_COMMA expr T_CL_PAR
      {
    /**
    Parameters:
      (3)  initial image
      (5)  total operation size
      (7)  time step
      (9)  minimal intensity
      (11) maximal intensity
    Description:
      Grayscale morphological opening
      using Brockett and Maragos scheme with a given
      size and time step in voxel units
      minimal and maximal intensities allow to speed up the process
    **/
    InrImage*  res;
    float Imin = $9;
    float Imax = $11;

    res = Func_EDP_open( ((InrImage::ptr*) $3->Pointer())->get(),
                    $5,  $7, Imin, Imax);

    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_EDPclose
      T_OP_PAR var_image
      T_COMMA expr T_COMMA expr T_CL_PAR
      {
    InrImage*  res;

    res = Func_EDP_close( ((InrImage::ptr*) $3->Pointer())->get(),
                   $5,  $7);

    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_EDPclose
      T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
    InrImage*  res;
    float Imin = $9;
    float Imax = $11;

    res = Func_EDP_close( ((InrImage::ptr*) $3->Pointer())->get(),
                   $5,  $7, Imin, Imax);

    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
      res=((InrImage::ptr*) $3->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      AnisoGS T_POINT T_GetOutput
      {
    InrImage*  res;

    res = Func_AnisoGS_GetOutput();

    Si res==NULL Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      AnisoGS T_POINT T_GetDiffCoeff
      {
    InrImage*  res;

    res = Func_AnisoGS_GetDiffusionCoeff();

    Si res==NULL Alors
      fprintf(stderr,"GetDiffCoeff() erreur ... \n");
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_LevelSetsCURV T_POINT TInit T_OP_PAR var_image  T_COMMA expr  T_CL_PAR
      {
    //
    // parameters:
    // 1. input image
    // 2. isosurface threshold on the input image

    InrImage*  res;

    res = Func_LevelSets_Init( ((InrImage::ptr*) $5->Pointer())->get(),
                   $7);

    Si res==NULL Alors
      fprintf(stderr,"Func_LevelSets_Init() erreur ... \n");
      res=((InrImage::ptr*) $5->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_LevelSetsCURV T_POINT TInit T_OP_PAR var_image T_COMMA var_image  T_CL_PAR
      {
    //
    // parameters:
    // 1. input image
    // 2. Initial position of the level set a the zero-crossing of
    //    this image

    InrImage*  res;

    res = Func_LevelSets_Init(
           ((InrImage::ptr*) $5->Pointer())->get(),
           ((InrImage::ptr*) $7->Pointer())->get()
                   );

    Si res==NULL Alors
      fprintf(stderr,"Func_LevelSets_Init() erreur ... \n");
      res=((InrImage::ptr*) $5->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
    }
    |
    T_LevelSetsCURV T_POINT T_GetOutput
    {

    InrImage*  res;

    res = Func_LevelSets_GetCurrentOutput();

    Si res==NULL Alors
      fprintf(stderr,"Func_LevelSets_GetOutput() error ... \n");
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_LevelSetsCURV T_POINT T_GetAttachVect  T_OP_PAR var_image T_CL_PAR
      {

    InrImage*  res;

    res = Func_LevelSets_GetAttachVectors( ((InrImage::ptr*) $5->Pointer())->get());

    Si res==NULL Alors
      fprintf(stderr,"Func_GetAttachVect() erreur ... \n");
      res=((InrImage::ptr*) $5->Pointer())->get();
    FinSi

    driver.im_stack.AddImage(res);
      }
        |
        AnisoGS
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      /**
      Parameters:
        (1) input image
        (2) sigma: standard deviation of the Gaussian smoothing applied to compute the local structure orientations.
        (3) k: diffusion parameter that controls the diffusion depending on the local gradients.
        (4) beta: data attachment coefficient.
        (5) number of iterations
      Description:
        Runs an anisotropic diffusion filter using Gauss-Seidel numerical scheme, based on the Flux-diffusion algorithm [Krissian,IEEE TMI 2002].
      **/
      int        nb_iter,i;
      float       error;

      Func_InitAnisoGS( ((InrImage::ptr*) $3->Pointer())->get(),
                  $5,  $7, $9);

          nb_iter = (int) $11;
      if (nb_iter < 1) nb_iter = 1;

      Pour(i,1,nb_iter)
        error = Func_ItereAnisoGS();
      FinPour

      driver.im_stack.AddImage(Func_AnisoGS_GetOutput());

      Func_EndAnisoGS();


    }
        |
        T_FluxDiffusion
        T_OP_PAR var_image T_COMMA var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      //
      // param 1: input image
      // 2: vector field
      // 3: data attachment coeff
      // 4: diffusion coeff
      // 5: number of iterations
      //
      InrImage*  res;
      int        nb_iter,i;
      float       error;

      Func_InitAnisoGS( ((InrImage::ptr*) $3->Pointer())->get(),
                  1,  1, $7);


          nb_iter = (int) $11;
      if (nb_iter < 1) nb_iter = 1;

      Pour(i,1,nb_iter)
        error = Func_ItereFlux(((InrImage::ptr*) $5->Pointer())->get(),$9);
      FinPour

          res = Func_AnisoGS_GetOutput();
      Si res==NULL Alors
        fprintf(stderr,"AnisoGS() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      Func_EndAnisoGS();

      driver.im_stack.AddImage(res);

    }
        |
        T_vtkAnisoGS
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
          Parameters:
            (3)  input image
            (5)  standard deviation for Gaussian smoothing sigma
            (7)  threshold on the gradient magnitude
            (9)  data attachment coefficient
            (11) number of iterations
            (13) number of threads

          Description:
            Anisotropic diffusion filter based on the Flux diffusion paper
            (Krissian, 2002, IEEE TMI).
        **/
      InrImage::ptr  in      = *(InrImage::ptr*) $3->Pointer();
      float      sigma   = $5;
      float      k       = $7;
      float      beta    = $9;
      int        nb_iter    = (int) $11;
      int        nb_threads = (int) $13;

          InrImage*  res = Func_vtkAnisoGS(  in.get(), sigma, k, beta, nb_iter, nb_threads);

      Si res==NULL Alors
        fprintf(stderr,"Func_vtkAnisoGS() erreur ... \n");
      FinSi

          //      printf("5 \n");
      driver.im_stack.AddImage(res);

    }
        |
        AnisoSmoothGS
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      InrImage*  res;
      int        nb_iter,i;
      float       error;

      Func_InitAnisoGS( ((InrImage::ptr*) $3->Pointer())->get(),
                  $5,  $7, $9);


          Func_SetSmoothedParam(1);

          nb_iter = (int) $11;
      if (nb_iter < 1) nb_iter = 1;

      Pour(i,1,nb_iter)
        error = Func_ItereAnisoGS();
      FinPour

          res = Func_AnisoGS_GetOutput();
      Si res==NULL Alors
        fprintf(stderr,"AnisoGS() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      Func_EndAnisoGS();

      driver.im_stack.AddImage(res);

    }
        |
        T_AnisoWeickert T_POINT TInit
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      InrImage*  res;

      res = Func_InitWeickert( ((InrImage::ptr*) $5->Pointer())->get(),
                $7,  $9, $11);

      Si res==NULL Alors
        fprintf(stderr,"Func_InitWeickert() erreur ... \n");
        res=((InrImage::ptr*) $5->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoCW        T_POINT TInit
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      InrImage*  res;

      res = Func_InitWeickertCoherence( ((InrImage::ptr*) $5->Pointer())->get(),
                $7,  $9, $11, $13, $15);

      Si res==NULL Alors
        fprintf(stderr,"Func_InitWeickert() erreur ... \n");
        res=((InrImage::ptr*) $5->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_SRAD_qcoeff T_OP_PAR var_image T_CL_PAR
        {
      InrImage*  res;

      res = Func_SRAD_qcoeff( ((InrImage::ptr*) $3->Pointer())->get());

      Si res==NULL Alors
        fprintf(stderr,"Func_SRAD_qcoeff() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoSRAD
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_CL_PAR
        {
      InrImage*  res;
      float dt = (float) $5;
      int numit = (int) $7;

      res = Func_SRAD( ((InrImage::ptr*) $3->Pointer())->get(),dt,numit,
               0, // Lee mode
               0,  // Yu neighborhood
               NULL); // no extent

      Si res==NULL Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoSRAD
        T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
        {
      InrImage*  res;
      float dt = (float) $5;
      int numit = (int) $7;
      ImageExtent<float>* extent = (ImageExtent<float>*) $9;

      res = Func_SRAD( ((InrImage::ptr*) $3->Pointer())->get(),dt,numit,
               0, // Lee mode
               0, // Yu neighborhood
               extent);

      delete extent;

      Si res==NULL Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoSRAD
        T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
        {
      InrImage*  res;
      float dt = (float) $5;
      int numit = (int) $7;
      int neighborhood = (int) $9;
      ImageExtent<float>* extent = (ImageExtent<float>*) $11;

      res = Func_SRAD( ((InrImage::ptr*) $3->Pointer())->get(),dt,numit,
               0, // Lee mode
               neighborhood,
               extent);

      delete extent;

      Si res==NULL Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoSRAD2
        T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
        {
      InrImage*  res;
      float dt = (float) $5;
      int numit = (int) $7;
      ImageExtent<float>* extent = (ImageExtent<float>*) $9;


      res = Func_SRAD2( ((InrImage::ptr*) $3->Pointer())->get(),dt,numit,
                0, // Lee function
                0, // Yu neighborhood
                extent
                );

      delete extent;

      Si res==NULL Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoSRAD2
        T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA
    expr T_COMMA image_extent T_CL_PAR
        {
      InrImage*  res;
      float dt = (float) $5;
      int numit = (int) $7;
      int neighborhood = (int) $9;
      ImageExtent<float>* extent = (ImageExtent<float>*) $11;

      res = Func_SRAD2( ((InrImage::ptr*) $3->Pointer())->get(),dt,numit,
                0, // Lee function
                neighborhood, // neighborhood size
                extent // bounding box
                );
      delete extent;

      Si res==NULL Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoLeeAdd2 T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
        {
      InrImage*  res;
      float dt = (float) $5;
      int numit = (int) $7;
      ImageExtent<float>* extent = (ImageExtent<float>*) $9;

      res = Func_SRAD2( ((InrImage::ptr*) $3->Pointer())->get(),dt,numit,
                2, // Additive mode
                0, // Yu neighborhood
                extent // constant region
                );
      delete extent;

      Si res==NULL Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoDPAD T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
        {
      InrImage*  res;
      float dt         = (float) $5;
      int numit        = (int) $7;
      int neighborhood = (int) $9;
      ImageExtent<float>* extent = (ImageExtent<float>*) $11;

      res = Func_SRAD( ((InrImage::ptr*) $3->Pointer())->get(),dt,numit,
               1, // Kuan's function
               neighborhood, // Yu neighborhood
               extent);
      delete extent;

      Si res==NULL Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
    }
    |
    T_AnisoDPAD2
    T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
    {
      InrImage*  res;
      float dt = (float) $5;
      int numit = (int) $7;
      int neighborhood = (int) $9;
      ImageExtent<float>* extent = (ImageExtent<float>*) $11;

      res = Func_SRAD2( ((InrImage::ptr*) $3->Pointer())->get(),dt,numit,
                1, // Kuan's function
                neighborhood, // Yu neighborhood
                extent
                );
      delete extent;

      Si res==NULL Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
    }
    |
    T_AnisoNRAD
    T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
    {
        /**
         Parameters:
            (3) var_image: input image
            (5) numerical expression: mode, 0 for Lee Filter, 1: Kuan Filter,
                 2: additive, 3: MRI denoising
            (7) numerical expression: dt, time step
            (9) numerical expression: numit, number of iterations
            (11) numerical expression: size of the neighborhood n, neighborhood is
                (2n+1)^N, where N is the dimension of the image domain.
            (13) image extent: area of interest to calculate the noise
                 standard deviation, usually a constant area, for MRI denoising: background area

         Description:
            Runs a noise reducing anisotropic diffusion, Lee and Kuan's mode are
            for speckle noise in ultrasound images, additive mode is for additive
            stationary noise and MRI is for MRI style noise. In the case of MRI,
            the filter is designed to run on the square of the image intensity.
         **/
            InrImage*  res;
            int mode = (int) $5;
            float dt = (float) $7;
            int numit = (int) $9;
            int neighborhood = (int) $11;
            ImageExtent<float>* extent = (ImageExtent<float>*) $13;

            res = Func_SRAD2( ((InrImage::ptr*) $3->Pointer())->get(),dt,numit,
                        mode, // fiter mode
                        neighborhood, //  neighborhood size
                        extent
                        );
            delete extent;

            Si res==NULL Alors
                fprintf(stderr,"Func_AnisoNRAD() erreur ... \n");
                res=((InrImage::ptr*) $3->Pointer())->get();
            FinSi

            driver.im_stack.AddImage(res);
    }
    |
    T_AnisoRudinMult
    T_OP_PAR var_image
    T_COMMA expr T_COMMA expr  T_COMMA expr T_COMMA expr T_CL_PAR
    {
      InrImage::ptr  initim = *(InrImage::ptr*) $3->Pointer();
      InrImage*  res;
      float dt = (float) $5;
      int numit = (int) $7;
      int attach = (int) $9;
      int scheme = (int) $11;

      if (initim->DimZ()==1)
        res = Func_RudinMultiplicative2D( initim.get(),dt,numit,attach, scheme);
      else
        res = Func_RudinMultiplicative3D( initim.get(),dt,numit,attach, scheme);

      Si res==NULL Alors
        fprintf(stderr,"Func_AnisoRudinMult() erreur ... \n");
        res=((InrImage::ptr*) $3->Pointer())->get();
      FinSi

      driver.im_stack.AddImage(res);
    }
    |
    TAddGaussNoise
    T_OP_PAR var_image
    T_COMMA expr T_COMMA expr T_CL_PAR
    {
      /**
        Description:
          Add Gaussian noise with specified mean and variance.
      **/

        AjouteBruit* addnoise;
        InrImage*    res;
        InrImage::ptr    in = *(InrImage::ptr*) $3->Pointer();
        float mean;
        float sd;
        char  resname[256];

      mean = $5;
      sd   = $7;

      sprintf(resname,"%s.noise",in->Nom());
      res = new InrImage(WT_FLOAT, resname, in.get());

      (*res)=(*in);

      addnoise = new AjouteBruit();
      addnoise->AjouteBruitGaussien(res,mean,sd);
      delete addnoise;

      driver.im_stack.AddImage(res);

    }
        |
    T_rot2D T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA
                    expr T_COMMA expr T_COMMA expr T_CL_PAR
        {

        InrImage*    res;

          res = Func_rot2D( ((InrImage::ptr*) $3->Pointer())->get(),
                $5, $7,   // rotation center
                $9,       // angle of rotation
                $11, $13  // dimension of the new image
                );

      driver.im_stack.AddImage(res);
        }
        | T_Xpos T_OP_PAR var_image  T_CL_PAR
        {
        /**
        Description:
        Creates an new USHORT image that contains
        the X coordinates of the given image.
        This can be very useful for arithmetic
        operations on images.

        Example(s):
        - Putting the image borders in X coordinates at 0:

        x = Xpos(i)
        i = i * (x>2) * ( x < i.tx-3)

        Others:
                Ypos, Zpos
       **/

          InrImage*    res;
          int x,y,z;

        res = new InrImage(WT_UNSIGNED_SHORT,1,
                   "tmp_X.inr.gz",
                   ((InrImage::ptr*) $3->Pointer())->get());
        res->InitBuffer();
        Pour(z,0,res->_tz-1)
        Pour(y,0,res->_ty-1)
        Pour(x,0,res->_tx-1)
          res->FixeValeur(x);
          res->IncBuffer();
            FinPour
            FinPour
            FinPour

        driver.im_stack.AddImage(res);
        }
        | T_Ypos T_OP_PAR var_image  T_CL_PAR
        {
        /**
        Description:
        Creates an new USHORT image that contains
        the Y coordinates of the given image.
        This can be very useful for arithmetic
        operations on images.

        Example(s):
        - Putting the image borders in X coordinates at 0:

        y = Ypos(i)
        i = i * (y>2) * ( y < i.tx-3)

        Others:
                Xpos, Zpos
       **/

          InrImage*    res;
          int x,y,z;

        res = new InrImage(WT_UNSIGNED_SHORT,1,
                   "tmp_X.inr.gz",
                   ((InrImage::ptr*) $3->Pointer())->get());
        res->InitBuffer();
        Pour(z,0,res->_tz-1)
        Pour(y,0,res->_ty-1)
        Pour(x,0,res->_tx-1)
          res->FixeValeur(y);
          res->IncBuffer();
            FinPour
            FinPour
            FinPour

        driver.im_stack.AddImage(res);
        }
        | T_Zpos T_OP_PAR var_image  T_CL_PAR
        {
        /**
        Description:
        Creates an new USHORT image that contains
        the Z coordinates of the given image.
        This can be very useful for arithmetic
        operations on images.

        Example(s):
        - Putting the image borders in Z coordinates at 0:

        z = Zpos(i)
        i = i * (z>2) * ( z < i.tx-3)

        Others:
                Xpos, Ypos
       **/

          InrImage*    res;
          int x,y,z;

        res = new InrImage(WT_UNSIGNED_SHORT,1,
                   "tmp_X.inr.gz",
                   ((InrImage::ptr*) $3->Pointer())->get());
        res->InitBuffer();
        Pour(z,0,res->_tz-1)
        Pour(y,0,res->_ty-1)
        Pour(x,0,res->_tx-1)
          res->FixeValeur(z);
          res->IncBuffer();
            FinPour
            FinPour
            FinPour

        driver.im_stack.AddImage(res);
        }
        | T_SpacePos T_OP_PAR var_image  T_CL_PAR
        {
        /**
        Description:
        Creates an new FLOAT vectorial image that contains
        the coordinates of the voxels (/pixels) of the given image.
        The coordinates are given in Real Coordinates (world),
        and are saved as vectors.


        Others:
                Xpos, Ypos, Zpos
       **/

          InrImage*    res;
          int x,y,z;

        res = new InrImage(WT_FLOAT,3,
                   "tmp_spacepos.inr.gz",
                   ((InrImage::ptr*) $3->Pointer())->get());
        res->InitBuffer();
        Pour(z,0,res->_tz-1)
        Pour(y,0,res->_ty-1)
        Pour(x,0,res->_tx-1)
          res->VectFixeValeurs(res->SpacePosX(x),
                               res->SpacePosY(y),
                               res->SpacePosZ(z));
          res->IncBuffer();
        FinPour
        FinPour
        FinPour

        driver.im_stack.AddImage(res);
        }
        |
        VAR_SURFDRAW T_POINT T_getimage
        {
          driver.im_stack.AddImage((*(Viewer3D_ptr*) $1->Pointer())->GetCanvas()->GetGLImage());
        }
        |
        VAR_SURFDRAW T_POINT T_GetImageFromX
        {
          fprintf(stderr,"not available in new wxwidgets version of the 3D viewer ! \n");
          driver.im_stack.AddImage((InrImage*)NULL);
/*
          driver.im_stack.AddImage((*(Viewer3D_ptr*) $1->Pointer())->GetInrImage());
*/
    }
    |
    VAR_IMAGEDRAW T_POINT T_getimage
    {
      driver.im_stack.AddImage((*(DessinImage::ptr*) $1->Pointer())->GetInrImage());
    }
    |
    T_threscross T_OP_PAR var_image T_COMMA expr T_CL_PAR
    {

    InrImage*    res;

      res = Func_ThresholdCrossing( ((InrImage::ptr*) $3->Pointer())->get(), $5);

          driver.im_stack.AddImage(res);

    }
    |
    T_IsocontourPoints T_OP_PAR var_image T_COMMA expr T_CL_PAR
    {
      InrImage*    res;

      res = Func_IsocontourPoints( ((InrImage::ptr*) $3->Pointer())->get(), $5);

      driver.im_stack.AddImage(res);

    }
    |
    T_IsosurfDist T_OP_PAR var_image T_COMMA expr T_CL_PAR
    {
        InrImage*    res;

      res = Func_IsosurfDist( ((InrImage::ptr*) $3->Pointer())->get(), $5);

          driver.im_stack.AddImage(res);

    }
    |
    T_vtkIsoContourDist T_OP_PAR var_image T_COMMA expr T_CL_PAR
    {
        InrImage*    res;

      res = Func_vtkIsoContourDist( ((InrImage::ptr*) $3->Pointer())->get(), $5);

          driver.im_stack.AddImage(res);
    }
    |
    T_vtkFastMarching T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3) input image
      (5) initialization image
      (7) maximal time
    Description:
      Runs the fast marching algorithm
     **/

        InrImage*    init = (InrImage*) driver.im_stack.GetLastImage(); // 2nd param
        InrImage*    input  = (InrImage*) driver.im_stack.GetLastImage(); // 1st param
        InrImage*    res = NULL;
            float   maxtime = (float) $7;

          res = Func_vtkFastMarching( input, init,  maxtime);

          driver.im_stack.AddImage(res);
    }
    |
    T_vtkFastMarchingTarget T_OP_PAR expr_image T_COMMA expr_image
                        T_COMMA expr
                        T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3) input image
      (5) initialization
      (7) maximal time
      (9)  target point X coord
      (11)               Y
      (13)              Z
    Description:
      Runs the fast marching algorithm
     **/

      InrImage::ptr init  = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
      InrImage::ptr input = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
      InrImage*     res = NULL;
      float   maxtime = (float) $7;

      res = Func_vtkFastMarchingTarget( input.get(), init.get(),  maxtime,
              (int) round($9),
              (int) round($11),
              (int) round($13)
              );

      driver.im_stack.AddImage(res);
    }
    |
    T_vtkFastMarching T_OP_PAR expr_image T_COMMA expr_image T_COMMA
                          expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3)  input image
      (5)  initialization
      (7)  mean
      (9)  standard deviation
      (11) maximal time
    Description:
      Runs the fast marching algorithm
     **/

      InrImage::ptr init  = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
      InrImage::ptr input = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
      InrImage*    res = NULL;
      float   mean    = (float) $7;
      float   sd      = (float) $9;
      float   maxtime = (float) $11;

      res = Func_vtkFastMarching( input.get(), init.get(), mean, sd, maxtime);

      driver.im_stack.AddImage(res);
    }
    |
    T_vtkFastMarching T_OP_PAR expr_image T_COMMA expr_image T_COMMA
                          expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3)  input image
      (5)  initialization
      (7)  mean
      (9)  standard deviation
      (11) maximal time
      (13) initialization type
    Description:
      Runs the fast marching algorithm
     **/
      /* Version without initialization */

      InrImage::ptr init  = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
      InrImage::ptr input = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
      InrImage*    res = NULL;
      float   mean     = (float) $7;
      float   sd       = (float) $9;
      float   maxtime  = (float) $11;
      int     inittype = (int) $13;

      res = Func_vtkFastMarching( input.get(), init.get(), mean, sd, maxtime,inittype);

      driver.im_stack.AddImage(res);
    }
    |
    T_vtkFastMarching T_OP_PAR expr_image T_COMMA expr_image T_COMMA
                          var_image T_COMMA
                          expr T_COMMA
                          expr  T_CL_PAR
    {
    /**
    Parameters:
      (3)  input image
      (5)  initialization
      (7)  track image, must be of format unsigned int
      (9)  maximal time
      (11) initialization type
    Description:
      Runs the fast marching algorithm using Dijkstra
      algorithm and tracking back the trajectories
     **/
      /* Version without initialization */

      InrImage::ptr init  = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
      InrImage::ptr input = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
      InrImage*    res   = NULL;
      float   maxtime    = (float) $9;
      int     inittype   = (int)   $11;

      res = Func_vtkFastMarching(
                  input.get(),
                  init.get(),
                  ((InrImage::ptr*) $7->Pointer())->get(),
                  maxtime,inittype);

      driver.im_stack.AddImage(res);
    }
    |
    T_Convolve T_OP_PAR var_image T_COMMA var_image T_CL_PAR
    {

      InrImage* res;
      res = Func_Convolve(((InrImage::ptr*) $3->Pointer())->get(),
                  ((InrImage::ptr*) $5->Pointer())->get());

          driver.im_stack.AddImage(res);

        }
        |
        T_ConvolveMask T_OP_PAR var_image T_COMMA var_image T_COMMA expr_image T_CL_PAR
        {

            InrImage* res;
        InrImage* mask = (InrImage*) driver.im_stack.GetLastImage();
;

      res = Func_ConvolveMask(((InrImage::ptr*) $3->Pointer())->get(),
                  ((InrImage::ptr*) $5->Pointer())->get(),
                  mask);

          driver.im_stack.AddImage(res);
      delete mask;

        }
        |
        T_ChamferDT T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {

            InrImage* res;
      res = Func_Chamfer(((InrImage::ptr*) $3->Pointer())->get(), $5, $7, $9);

          driver.im_stack.AddImage(res);

        }
        |
        T_Chamfer2DT T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {

            InrImage* res;
      res = Func_Chamfer2(((InrImage::ptr*) $3->Pointer())->get(), $5, $7, $9);

          driver.im_stack.AddImage(res);

        }
        |
        T_Chamfer2DT T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {

            InrImage* res;
        float a = $5;
        float b = $7;
        float c = $9;
        float dmax = $11;

          res = Func_Chamfer2(((InrImage::ptr*) $3->Pointer())->get(), a,b,c,dmax);

          driver.im_stack.AddImage(res);

        }
        |
        T_BorgeforsDT T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {

            InrImage* res;
        float dmax = $5;

      res = Func_Chamfer2(((InrImage::ptr*) $3->Pointer())->get(),
                  0.92644, 1.34065, 1.65849,
                  dmax);

          driver.im_stack.AddImage(res);

        }
        |
        T_BorgeforsSDT T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {

            InrImage* res;
        float dmax = $5;

      res = Func_Chamfer2Signed(((InrImage::ptr*) $3->Pointer())->get(),
                    0.92644, 1.34065, 1.65849,
                    dmax);

          driver.im_stack.AddImage(res);

        }
        |
        T_vtkSignedBorgefors T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {

            InrImage* res;
        float dmax = $5;

      res = Func_vtkSignedBorgefors(((InrImage::ptr*) $3->Pointer())->get(),
                    dmax);

          driver.im_stack.AddImage(res);

        }
        |
        T_vtkSignedFMDist T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {

            InrImage* res;
        float dmax = $5;

      res = Func_vtkSignedFMDist(((InrImage::ptr*) $3->Pointer())->get(),
                     dmax);

          driver.im_stack.AddImage(res);

        }
        |
        T_PropagationDist T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {

            InrImage* res;
        float dmax = $5;

      res = Func_PropagationDistance(((InrImage::ptr*) $3->Pointer())->get(),
                      dmax);

          driver.im_stack.AddImage(res);
        }
        |
        T_PropagationDist2 T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {

            InrImage* res;
        float dmax = $5;

      res = Func_PropagationDistance2(((InrImage::ptr*) $3->Pointer())->get(),
                      dmax);

          driver.im_stack.AddImage(res);
        }
        |
        T_PropDanielsson T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {

            InrImage* res;
        float dmax = $5;

      res = Func_PropagationDanielsson(((InrImage::ptr*) $3->Pointer())->get(),
                       dmax);

          driver.im_stack.AddImage(res);
        }
        |
        T_vtkPropDanielsson T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {

            InrImage* res;
        float dmax = $5;

      res = Func_vtkPropDanielsson(((InrImage::ptr*) $3->Pointer())->get(),
                       -dmax,dmax);
          driver.im_stack.AddImage(res);
        }
        |
        T_vtkPropDanielsson T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_CL_PAR
        {

            InrImage* res;
        float dmin = $5;
        float dmax = $7;

      res = Func_vtkPropDanielsson(((InrImage::ptr*) $3->Pointer())->get(),
                       dmin,dmax);

          driver.im_stack.AddImage(res);
        }
        |
        T_vtkPropDaniel2 T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
          (3) input image variable
          (5) threshold on the image intensity to define
              the object
          (7) minimal distance (<0)
          (9) maximal distance (>0)

        Description:
          Computes an Euclidean distance by propagation
          starting from the object, up to a given distance
          for positive and negative sides.
        **/
            InrImage* res;
        float threshold = $5;
        float dmin      = $7;
        float dmax      = $9;

        printf("threshold = %f \n",threshold);
      res = Func_vtkPropDaniel2(((InrImage::ptr*) $3->Pointer())->get(),
                    threshold,dmin,dmax);

          driver.im_stack.AddImage(res);
        }
         |
        T_CC T_OP_PAR expr_image T_CL_PAR
        {
        /**
        Parameters:
            (3) image expression: input image
        Description:
            Computes the connected components of the input image,
            considering the isosurface (or isocontour) of intensity value
            0 as the serapation between the components.
            The image background is supposed to have intensity values of 0.
            Returns an image of type INTEGER, and
            creates the following new variables:
                - reorder   : 1D image of the position position of the component
                    if sorted by size. The image size in X is the number of
                    components.
                    You can use image composition to get the image of the biggest
                    component, for example: reorder(cc_result) == 0.
                - inclusion :
                - cc_size   :
                - cc_sign   :
        Example:
            To analyze connected component from an isocontour value n for an image i,
            you can call i_cc=CC((FLOAT)i-n)
        **/
       InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
           InrImage* res;

      res = Func_CC(im);

          driver.im_stack.AddImage(res);
      delete im;
        }
       |
    var_image T_OP_PAR expr_image T_CL_PAR
        {
     /**
       Parameters:
         (1) image1: image variable
         (3) image2: image expression

       Description:
        Image Composition
        Several Cases:
         - scalar to scalar: transforms the intensity values
            of image 2 using image1 as a lookup table
         - vectorial to scalar
         - scalar to vectorial: returns the values of image1
            at the positions pointed by image2 (positions are converted
            to spatial coordinates)
         - vectorial to vectorial
      **/
      // image composition
      // Initialy for applying a RGB colormap to an image
      InrImage::ptr im1;
      InrImage* im2 = (InrImage*) driver.im_stack.GetLastImage();
      InrImage* res;
      int pos;

      im1 = *(InrImage::ptr*) $1->Pointer();

      res = new InrImage(
                          im1->_format,
                          im1->GetVDim(),
                          "ImComp.ami.gz",
                          im2);
 
      // Several Cases:
      // 1. scalar to scalar
      // 2. scalar to vectorial
      // 3. vectorial to scalar
      // 4. vectorial to vectorial
      if (res->ScalarFormat())
        res->InitImage(0);
      else
        res->InitImage(0,0,0);

      // im1 is a 1D image (colormap)
      //
      if (im1->VectorialFormat()&&im2->ScalarFormat()) {
        res->InitBuffer();
        im2->InitBuffer();

        Repeter

          pos = (int) im2->ValeurBuffer();
          Si (pos<0) AlorsFait pos = 0;
          Si (pos>=im1->DimX()) AlorsFait pos = im1->DimX()-1;
          im1->BufferPos(pos,0,0);

          res->VectFixeValeurs(im1->VectValeurBuffer(0),
                   im1->VectValeurBuffer(1),
                   im1->VectValeurBuffer(2));

          im2->IncBuffer();
            JusquA Non(res->IncBuffer()) FinRepeter
      } else
      // Greyscale colormap
      if (im1->ScalarFormat()&&im2->ScalarFormat()) {
        res->InitBuffer();
        im2->InitBuffer();
        Repeter
          pos = (int) im2->ValeurBuffer();
          Si (pos<0) AlorsFait pos = 0;
          Si (pos>=im1->DimX()) AlorsFait pos = im1->DimX()-1;
          im1->BufferPos(pos,0,0);
          res->FixeValeur(im1->ValeurBuffer());
          im2->IncBuffer();
            JusquA Non(res->IncBuffer()) FinRepeter
      } else
      // Applying a transformation ...
      if (im1->VectorialFormat()&&im2->VectorialFormat()) {
        float posx, posy, posz;
        res->InitBuffer();
        im2->InitBuffer();
        Repeter
          // linear interpolation
          posx =  im1->SpaceToVoxelX(im2->VectValeurBuffer(0));
          posy =  im1->SpaceToVoxelY(im2->VectValeurBuffer(1));
          posz =  im1->SpaceToVoxelZ(im2->VectValeurBuffer(2));
          res->VectFixeValeurs(
            im1->InterpLinIntensite(posx,posy,posz,0),
            im1->InterpLinIntensite(posx,posy,posz,1),
            im1->InterpLinIntensite(posx,posy,posz,2));
          im2->IncBuffer();
        JusquA Non(res->IncBuffer()) FinRepeter
      } else
      // Applying a transformation ...
      if (im1->ScalarFormat()&&im2->VectorialFormat()) {
        float posx, posy, posz;
        res->InitBuffer();
        im2->InitBuffer();
        Repeter
          // linear interpolation
          posx =  im1->SpaceToVoxelX(im2->VectValeurBuffer(0));
          posy =  im1->SpaceToVoxelY(im2->VectValeurBuffer(1));
          posz =  im1->SpaceToVoxelZ(im2->VectValeurBuffer(2));
          res->FixeValeur(im1->InterpLinIntensite(posx,posy,posz));
          im2->IncBuffer();
            JusquA Non(res->IncBuffer()) FinRepeter
      } else
        fprintf(stderr," Image Composition: type of composition not implemented \n");

          driver.im_stack.AddImage(res);
      delete im2;
        }
        | T_histo T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
    /**
       Parameters:
         (3) image: image to compute the histogram
         (5) expr: minimal value
         (7) expr: maximal value
         (9) expr: number of intervals

       Description:
         Compute the histogram of an image and returns it
         as a 1D image
    **/
      InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
      float vmin  = $5;
      float vmax  = $7;
      int   nint = (int) $9; // number of intervals

      InrImage* res;

      res = Func_Histogram(im,vmin,vmax,nint);
      driver.im_stack.AddImage(res);
      delete im;
    }
    | T_cumhisto T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
      float vmin  = $5;
      float vmax  = $7;
      int   nint = (int) $9; // number of intervals

      int* numpts;
      int  n;
      InrImage* res;
      float v;
      double total = 0;

      res = new InrImage(nint,1,1,WT_SIGNED_INT);

      numpts = new int[nint];
      Pour(n,0,nint-1)
        numpts[n]=0;
      FinPour

        im->InitBuffer();
      Repeter
        v = im->ValeurBuffer();
        Si v>=vmin Et v<vmax Alors
          n = (int) ((v-vmin)/(vmax-vmin)*nint);
          Si n==nint AlorsFait n=nint-1;
          numpts[n]++;
        FinSi
          JusquA Non(im->IncBuffer()) FinRepeter

      res->InitBuffer();
      Pour(n,0,nint-1)
        total += numpts[n];
        res->FixeValeur(1.0*total/im->Size());
        res->IncBuffer();
          FinPour

      delete [] numpts;

      driver.im_stack.AddImage(res);
      delete im;
    }
    | T_MeanHalfSize T_OP_PAR expr_image T_CL_PAR
    {
      InrImage* res;
      InrImage::ptr im = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());

      if (im->DimZ()>1)
        res = Func_MeanHalfSize(im.get(),3);
      else
        res = Func_MeanHalfSize(im.get(),2);

      if (res!=NULL) driver.im_stack.AddImage(res);
    }
    | T_MeanHalfSize T_OP_PAR expr_image T_COMMA expr T_CL_PAR
    {
      InrImage* res;
      int dim = (int) $5;

      InrImage::ptr im = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
      res = Func_MeanHalfSize(im.get(),dim);
      if (res!=NULL) driver.im_stack.AddImage(res);
    }
    | T_Flip T_OP_PAR expr_image T_COMMA expr  T_CL_PAR
    {
        InrImage* res;
        int axis=(int) $5;

        InrImage::ptr im = InrImage::ptr((InrImage*) driver.im_stack.GetLastImage());
        res=Func_Flip(im,axis);
        driver.im_stack.AddImage(res);
    }
    | T_Resize T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_CL_PAR
    {
        /**
        Parameters:
            image to resize
            new dimension in X
            new dimension in Y
            new dimension in Z
            interpolation: 0: nearest neighbor, 1:linear, 2:spline
        Description:
          Image resize
        **/
            InrImage* res;
            int sx = (int) $5;
            int sy = (int) $7;
            int sz = (int) $9;
            unsigned char interpolate=(unsigned char) $11;

            InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());
            res = Func_Resize(im.get(),sx,sy,sz,interpolate);

            if (res!=NULL) driver.im_stack.AddImage(res);
        }
        | T_ReSlice T_OP_PAR var_image T_COMMA var_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA  expr T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA  expr T_COMMA expr T_CL_PAR
        {
      InrImage* res;
      FloatMatrix m(4,4);
      m[0][0] =  $7;
      m[0][1] =  $9;
      m[0][2] =  $11;
      m[0][3] =  $13;
      m[1][0] =  $15;
      m[1][1] =  $17;
      m[1][2] =  $19;
      m[1][3] =  $21;
      m[2][0] =  $23;
      m[2][1] =  $25;
      m[2][2] =  $27;
      m[2][3] =  $29;

      InrImage::ptr im1 = *(InrImage::ptr*) $3->Pointer();
      InrImage::ptr im2 = *(InrImage::ptr*) $5->Pointer();

      res = Func_ReSlice(im1.get(),im2.get(),m);

      if (res!=NULL) driver.im_stack.AddImage(res);

    }
    | T_ConvexHull T_OP_PAR expr_image T_COMMA expr  T_COMMA expr T_CL_PAR
    {
      InrImage*         res;
      int   order = (int) $5;
      float resolution = $7;
      InrImage* input=(InrImage*) driver.im_stack.GetLastImage();

      res = Func_vtkConvexHull(input,
                   order,resolution);

      if (res!=NULL) driver.im_stack.AddImage(res);
      delete input;
    }
    | var_surface T_POINT T_GetLinesLength T_OP_PAR   T_CL_PAR
    {
      InrImage*         res;
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());


      res = s->GetImageLinesLength(  );

      if (res!=NULL) driver.im_stack.AddImage(res);
    }
    | var_surface T_POINT T_GetLine T_OP_PAR expr  T_CL_PAR
    {
      /**
        Parameters:
          - input polydata
          - line number
        Description:
          Get the points of the given line as a vectorial 1D image of 
          the point positions.
      */
      InrImage*         res = NULL;
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());
      int linenumber = (int) $5;
      
      if ((linenumber>=0)&&(linenumber<s->GetNumberOfLines())) {
        T_Line line=s->GetLine(linenumber);
        if (line.NbElts()>0) {
          // Create the image
          res = new InrImage(line.NbElts(),1,1,3,WT_FLOAT,
            (boost::format("%1%_line%2%") 
              % $1->Name()
              % linenumber
            ).str().c_str());
          // fill it with the point positions
          for(int n=0;n<line.NbElts();n++) {
            res->BufferPos(n,0,0);
            Point_3D<float>  pt = s->GetPoint(line[n]).pt;
            res->VectFixeValeurs( pt.X(),pt.Y(),pt.Z());
          }
          driver.im_stack.AddImage(res);
        } else
          driver.err_print((boost::format("Line %1% has no point.") % linenumber).str());
      } else {
        driver.err_print("Invalid line number.");
      }

    }
    | var_surface T_POINT T_GetLinesExtremities T_OP_PAR   T_CL_PAR
    {
    /**
      Parameters:
        - input polydata containing lines
      Description:
        Returns an image Mx2 where M is the number of lines and 
        containing the point id of the 2 extremities of each 
        line
    */
      InrImage*         res;
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());


      res = s->GetImageLinesExtremities(  );

      if (res!=NULL) driver.im_stack.AddImage(res);
    }
    | var_surface T_POINT T_GetConnections T_OP_PAR   T_CL_PAR
    {
    /**
      Parameters:
        - input polydata containing lines
      Description:
        Get the number of lines connected to each point.
        The result is given as a 1D image of size the total
        number of points of the polydata
    */
      InrImage*         res;
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());


      res = s->GetImageConnections(  );

      if (res!=NULL) driver.im_stack.AddImage(res);
        }
        | var_surface T_POINT T_GetIntensities T_OP_PAR var_image  T_CL_PAR
        {
      InrImage*         res;
      SurfacePoly::ptr s = (*(SurfacePoly::ptr*) $1->Pointer());


      res = s->GetIntensities( ((InrImage::ptr*) $5->Pointer())->get() );

      if (res!=NULL) driver.im_stack.AddImage(res);
        }
        | T_Altitude2Position T_OP_PAR expr_image T_COMMA expr  T_CL_PAR
        {
      InrImage* im =  (InrImage*) driver.im_stack.GetLastImage();
      InrImage* res;

      res = AMIFluid::Func_Altitude2Position(im,(int)$5);
      if (res!=NULL) driver.im_stack.AddImage(res);

      delete im;
    }
    | T_Altitude2Position T_OP_PAR expr_image T_CL_PAR
    {
      InrImage* im =  (InrImage*) driver.im_stack.GetLastImage();
      InrImage* res;
      res = AMIFluid::Func_Altitude2Position(im);
      if (res!=NULL) driver.im_stack.AddImage(res);
      delete im;
    }
    | T_GeoCoordinates T_OP_PAR expr_image  T_COMMA expr T_CL_PAR
    {
      InrImage* im =  (InrImage*) driver.im_stack.GetLastImage();
      InrImage* res;
      res = AMIFluid::Func_GeoCoordinates(im,(int)$5);
      if (res!=NULL) driver.im_stack.AddImage(res);
      delete im;
    }
    | T_GeoCoordinates T_OP_PAR expr_image  T_CL_PAR
    {
      InrImage* im =  (InrImage*) driver.im_stack.GetLastImage();
      InrImage* res;
      res = AMIFluid::Func_GeoCoordinates(im);
      if (res!=NULL) driver.im_stack.AddImage(res);
      delete im;
    }
    | T_ComputeAltitudes T_OP_PAR expr_image T_COMMA expr_image  T_CL_PAR
    {
    /**

        description:
          Compute the altitude to the sea level based on the
          infrared channel.

        parameters:
          (3) image containing the infrared channel
          (5) image containing 5 coefficients for the computation
              of the temperature and of the altitude,

        keywords:
          Fluid

        **/
      InrImage::ptr coeff = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr input = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage* res;

      res = AMIFluid::Func_ComputeAltitudes(input.get(),coeff.get());
      if (res!=NULL) driver.im_stack.AddImage(res);

    }
    | T_Temp2Altitudes T_OP_PAR expr_image  T_CL_PAR
    {
    /**

        description:
        Compute the altitude to the sea level based on the
        temperature channel.

        params:
        (3) image containing the temperature at the top of the clouds
        in Kelvin.

        **/
      InrImage::ptr input = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage* res;

      res = AMIFluid::Func_Temp2Altitudes(input.get());
      if (res!=NULL) driver.im_stack.AddImage(res);

        }
        | T_ReadFlow T_OP_PAR expr_string   T_CL_PAR
        {
      InrImage* res;
      res= AMIFluid::Func_ReadFlow((char*)$3);
      if (res!=NULL) driver.im_stack.AddImage(res);
      delete [] $3;
    }
    |
    T_slice T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**

      description:
        Trying the slicing procedure to incorporate into the
        image drawing class

      params:
        (3) image to slice
        (5) width orientation 1,2,3 for XY, XZ, ZY
        (7) height orientation
        (9,11,13) cursor position
        (15) expected width
        (17) expected height

        **/
        InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());
        InrImage* res;

        if (im->_format==WT_UNSIGNED_CHAR) {
          ImageDraw<unsigned char> imdraw;
          imdraw.SetInput((unsigned char*)im->GetData(),im->DimX(),im->DimY(),im->DimZ());
          imdraw.SetVoxelSize(im->VoxSizeX(),im->VoxSizeY(),im->VoxSizeZ());
          imdraw.SetCursorPosition((int)$9,(int)$11,(int)$13);
          imdraw.Apply((int)$5,(int)$7,(int)$15,(int)$17);
          // copy to RGB image
          res = new InrImage(imdraw.RGB_width, imdraw.RGB_height, 1, WT_RGB);
          memcpy(res->GetData(),imdraw.RGB_image,imdraw.RGB_width*imdraw.RGB_height*3);
          driver.im_stack.AddImage(res);
        } else
          fprintf(stderr,"only UCHAR format for now \n");
        }
    |
    T_LineRecons T_OP_PAR var_surface T_COMMA var_image T_COMMA expr_image T_CL_PAR
    {
    /**
    Parameters:
      (3) input PolyData containing lines to reconstruct
      (5) reference image for reconstruction
      (7) image of the radii associated to each point of the input PolyData (1D image)
    Description:
      Tubular reconstruction based on a set of lines and an estimated radius
      size for each point
    **/
      InrImage*         res;

      SurfacePoly::ptr  surf = *(SurfacePoly::ptr*)
                                  $3->Pointer();
      InrImage::ptr ref = *(InrImage::ptr*) $5->Pointer();
      InrImage::ptr rad = InrImage::ptr(
                                driver.im_stack.GetLastImage());

      res = LineRecons( surf.get(), ref.get(), rad.get());
      driver.im_stack.AddImage(res);
    }
    |
    T_ReadCTALineRadii T_OP_PAR var_surface T_COMMA expr_string T_CL_PAR
    {
    /**
    Parameters:
      (3) input line read with ReadCTALine
      (5) name of the file
    Description:
      Reads the radius information and save it to an image,
      returns this image.
    **/
      InrImage*         res;

      SurfacePoly::ptr  surf = *(SurfacePoly::ptr*)
                                  $3->Pointer();

      res = Func_ReadCTALineRadii( surf.get(), $5);
      driver.im_stack.AddImage(res);
    }
    ;

primary_image:  image | T_OP_PAR expr_image T_CL_PAR;

postfix_image:  primary_image;

unary_image  :    postfix_image
                | unary_operator cast_image
                | T_SUB  cast_image { UNARYOP_IMAGE(-)               }
                | T_ADD  cast_image
        | SIN   cast_image { UNARYOP_IMAGE(sin)             }
        | COS   cast_image { UNARYOP_IMAGE(cos)             }
        | SQRT  cast_image { UNARYOP_IMAGE(sqrt)            }
        | ABS   cast_image { UNARYOP_IMAGE(fabs)            }
        | ROUND cast_image { UNARYOP_IMAGE(round)           }
        | FLOOR cast_image { UNARYOP_IMAGE(floor)           }
        | TAN   cast_image { UNARYOP_IMAGE(tan)             }
        | ASIN  cast_image { UNARYOP_IMAGE(asin)            }
        | ACOS  cast_image { UNARYOP_IMAGE(acos)            }
        | ATAN  cast_image { UNARYOP_IMAGE(atan)            }
        | EXP   cast_image { UNARYOP_IMAGE(exp)             }
        | LOG  cast_image { UNARYOP_IMAGE(1.0/log(10.0)*log) }
        | LN   cast_image { UNARYOP_IMAGE(log)             }
        | NORM cast_image
        {
          InrImage* res;

          InrImage::ptr im1 = InrImage::ptr(driver.im_stack.GetLastImage());
          res = Norm(*im1);
          if (res!=NULL)
            driver.im_stack.AddImage(res);
          else
            fprintf(stderr,"Error computing the norm |image| \n");
        }
               ;

cast_image:
        unary_image
        | T_OP_PAR basic_type T_CL_PAR unary_image
                  {
        /**
        description:
                  The image conversion is done using the cast operator
                  where basic_type can be one of the basic type accepted,
                  currently:
                  CHAR UCHAR SHORT USHORT FLOAT DOUBLE RGB FLOAT_VECTOR


                Example:
                  i = Image(FLOAT,10,10,10)
                  j = (RGB) i
        **/
            InrImage* im;
            InrImage::ptr im1 = InrImage::ptr(driver.im_stack.GetLastImage());
            im  = new InrImage( (WORDTYPE) $2, "tmp.inr.gz", im1.get());
            (*im) = (*im1);
            driver.im_stack.AddImage(im);
          }
;

multiplicative_image: cast_image
                | multiplicative_image T_MULT cast_expr  { IMAGE_OP_EXPR(*,$3) }
// to allow expressions like Image*(n*n) the parser needs to know the type of (n*n)
// to resolve the ambiguities
// probably need to have a common class that can contain either number of images,
// or any other object that accepts arithmetic operations
                //|  unary_expr  T_MULT T_MULT multiplicative_image  { IMAGE_OP_EXPR(*,$1) }
                | multiplicative_image T_DIV cast_expr  { IMAGE_OP_EXPR(/,$3) }
//                |  unary_expr  T_DIV multiplicative_image  { EXPR_OP_IMAGE(/,$1) }
        | multiplicative_image T_MULT cast_image {  IMAGE_OP_IMAGE_2(*)   }
        | multiplicative_image T_DIV cast_image { IMAGE_OP_IMAGE_2(/)   }
        | multiplicative_image T_EXP cast_image { IMAGE_OP_IMAGE_2(^)   }
;

additive_image2: multiplicative_image
//       | multiplicative_expr T_ADD additive_image2  {  IMAGE_OP_EXPR(+,$1) }
//       | multiplicative_expr T_SUB additive_image2  {  IMAGE_OP_EXPR(-,$1) }
;

additive_image: additive_image2
       | additive_image T_ADD multiplicative_expr  { IMAGE_OP_EXPR(+,$3) }
       | additive_image T_SUB multiplicative_expr  { IMAGE_OP_EXPR(-,$3) }
       | additive_image T_ADD multiplicative_image { IMAGE_OP_IMAGE_2(+)   }
       | additive_image T_SUB multiplicative_image { IMAGE_OP_IMAGE_2(-)   }
;

shift_image: additive_image
;

relational_image:
       shift_image
       | relational_image T_LT shift_image   { IMAGE_OP_IMAGE(<)    }
       | relational_image T_GT shift_image   { IMAGE_OP_IMAGE(>)    }
       | relational_image LE_OP shift_image { IMAGE_OP_IMAGE(<=)   }
       | relational_image GE_OP shift_image { IMAGE_OP_IMAGE(>=)   }
       | relational_image T_LT shift_expr    { IMAGE_OP_EXPR(<, $3) }
       | relational_image T_GT shift_expr    { IMAGE_OP_EXPR(>, $3) }
       | relational_image LE_OP shift_expr  { IMAGE_OP_EXPR(<=,$3) }
       | relational_image GE_OP shift_expr  { IMAGE_OP_EXPR(>=,$3) }
;

equality_image:
    relational_image
        | equality_image EQ_OP relational_image { IMAGE_OP_IMAGE(==)   }
        | equality_image NE_OP relational_image { IMAGE_OP_IMAGE(!=)   }
        | equality_image EQ_OP shift_expr { IMAGE_OP_EXPR(==,$3)   }
        | equality_image NE_OP shift_expr { IMAGE_OP_EXPR(!=,$3)   }
        ;

and_image:
    equality_image
        | and_image T_AND equality_image
        ;


exclusive_or_image:
    and_image
    ;

inclusive_or_image:
    exclusive_or_image
        | inclusive_or_image T_OR exclusive_or_image
    ;

logical_and_image:
    inclusive_or_image
        | logical_and_image AND_OP inclusive_or_image
    ;

logical_or_image:
    logical_and_image
        | logical_or_image OR_OP logical_and_image
    ;

conditional_image:
    logical_or_image
        | logical_or_image T_QUEST logical_or_image T_COLON conditional_image
    ;

assignment_image:
    conditional_image
    | unary_image ASSIGN_OP assignment_image
    ;

expr_image : assignment_image
;


gltransform: VAR_GLTRANSFORM {
         GLTransfMatrix* newglt;
         GLTransfMatrix_ptr glt = *(GLTransfMatrix_ptr*) $1->Pointer();

         newglt = new GLTransfMatrix();
         (*newglt) = (*glt);
         driver.gltransf_stack.AddMatrix(newglt);

           }
           |
           VAR_SURFDRAW T_POINT T_GetTransform
           {
         GLTransfMatrix glt;
         GLTransfMatrix* newglt;

         printf("GetTransform begin \n");
         newglt = new GLTransfMatrix();
             glt = (*(Viewer3D_ptr*) $1->Pointer())->GetCanvas()->GetObjectTransform();
         (*newglt) = (glt);
         driver.gltransf_stack.AddMatrix(newglt);
         printf("GetTransform \n");
           }
           |
       T_Interpolate T_OP_PAR VAR_GLTRANSFORM T_COMMA VAR_GLTRANSFORM T_COMMA expr T_CL_PAR
           {
         GLTransfMatrix* newglt = NULL;
         GLTransfMatrix_ptr glt1 = *(GLTransfMatrix_ptr*) $3->Pointer();
         GLTransfMatrix_ptr glt2 = *(GLTransfMatrix_ptr*) $5->Pointer();
         float coeff = $7;

         newglt = Func_InterpolateTransform(glt1.get(),glt2.get(),coeff);
         driver.gltransf_stack.AddMatrix(newglt);
       }
           |
       T_Transform T_OP_PAR expr_string T_CL_PAR
           {
         GLTransfMatrix* newglt;
         newglt = Func_ReadTransform($3);
         if (newglt!=NULL)
           driver.gltransf_stack.AddMatrix(newglt);
         else {
           fprintf(stderr,"TRANSFORM() Error reading file ...\n");
           driver.err_print("TRANSFORM() Error reading file ...\n");
           driver.gltransf_stack.AddMatrix(NULL);
           //          yyiperror(
           //          YYABORT;
         }
         delete [] $3;
           }
;

matrix: T_Matrix T_OP_PAR expr T_COMMA expr T_CL_PAR
       {
         FloatMatrix* m;
         m = new FloatMatrix((int)$3,(int)$5);
         driver.matrix_stack.AddMatrix(m);
       }
       |
       VAR_MATRIX
       {
      FloatMatrix* newmat;
      FloatMatrix::ptr mat = *(FloatMatrix::ptr*) $1->Pointer();

      newmat = new FloatMatrix( (*mat));

          driver.matrix_stack.AddMatrix(newmat);
       }
        |
        T_Invert T_OP_PAR expr_matrix T_CL_PAR
        {
        /**
        Description:
         Inversion of a symmetric matrix
        **/
          FloatMatrix* mat;
          FloatMatrix* res;
          mat=driver.matrix_stack.GetLastMatrix();
          res = mat->Transpose();
          delete mat;
          driver.matrix_stack.AddMatrix(res);
        }
;

primary_matrix: matrix | T_OP_PAR expr_matrix T_CL_PAR;

postfix_matrix: primary_matrix;

unary_matrix  :    postfix_matrix
                | unary_operator cast_matrix
                | T_SUB  cast_matrix { UNARYOP_MATRIX(-)               }
                | T_ADD  cast_matrix
                | cast_matrix TRANSPOSE_OP
                {
          FloatMatrix* mat;
          FloatMatrix* res;
          mat=driver.matrix_stack.GetLastMatrix();
          res = mat->Transpose();
          delete mat;
          driver.matrix_stack.AddMatrix(res);
        }
        | SIN   cast_matrix { UNARYOP_MATRIX(sin)             }
        | COS   cast_matrix { UNARYOP_MATRIX(cos)             }
        | SQRT  cast_matrix { UNARYOP_MATRIX(sqrt)            }
        | ABS   cast_matrix { UNARYOP_MATRIX(fabs)            }
        | ROUND cast_matrix { UNARYOP_MATRIX(round)           }
        | FLOOR cast_matrix { UNARYOP_MATRIX(floor)           }
        | TAN   cast_matrix { UNARYOP_MATRIX(tan)             }
        | ASIN  cast_matrix { UNARYOP_MATRIX(asin)            }
        | ACOS  cast_matrix { UNARYOP_MATRIX(acos)            }
        | ATAN  cast_matrix { UNARYOP_MATRIX(atan)            }
        | EXP   cast_matrix { UNARYOP_MATRIX(exp)             }
                | LOG  cast_matrix { UNARYOP_MATRIX(1.0/log(10.0)*log) }
                | LN   cast_matrix { UNARYOP_MATRIX(log)             }
               ;

cast_matrix:
        unary_matrix;

multiplicative_matrix: cast_matrix
           | multiplicative_matrix T_MULT cast_expr  { MATRIX_OP_EXPR(*,$3) }
       | multiplicative_matrix POINTWISE_MULT cast_matrix { MATRIX_OP_MATRIX_2(*)   }
       | multiplicative_matrix T_MULT cast_matrix
           {
         FloatMatrix* m2 = driver.matrix_stack.GetLastMatrix();
         FloatMatrix* m1 = driver.matrix_stack.GetLastMatrix();
             FloatMatrix* res = Multiply(m1, m2) ;
         driver.matrix_stack.AddMatrix(res);
         delete m1;
         delete m2;
           }

additive_matrix: multiplicative_matrix
       | additive_matrix T_ADD multiplicative_expr  { MATRIX_OP_EXPR(+,$3) }
       | additive_matrix T_SUB multiplicative_expr  { MATRIX_OP_EXPR(-,$3) }
       | additive_matrix T_ADD multiplicative_matrix { MATRIX_OP_MATRIX_2(+)   }
       | additive_matrix T_SUB multiplicative_matrix { MATRIX_OP_MATRIX_2(-)   }
;

shift_matrix: additive_matrix
;

relational_matrix:
       shift_matrix
;

equality_matrix:
    relational_matrix
        ;

and_matrix:
    equality_matrix
        ;


exclusive_or_matrix:
    and_matrix
    ;

inclusive_or_matrix:
    exclusive_or_matrix
    ;

logical_and_matrix:
    inclusive_or_matrix
    ;

logical_or_matrix:
    logical_and_matrix
    ;

conditional_matrix:
    logical_or_matrix
    ;

assignment_matrix:
    conditional_matrix
    ;

expr_matrix : assignment_matrix
;


var_surface:
        VAR_SURFACE
        {
          $$=$1;
        }
        |
        VAR_ARRAY_SURFACE T_OP_BR expr T_CL_BR
        {
          VarArray::ptr array;
          int  i = (int) $3;

          array = *(VarArray::ptr*) ($1->Pointer());
          if (array->GetVar(i).Pointer()==NULL) {
            // initialize the surface
            SurfacePoly* surf = new SurfacePoly();
            char name[256];
            sprintf(name,"%s[%d]",$1->Name(),i);
            array->InitElement(i,surf,name);
          }
          $$=&(array->GetVar(i));
        }

surface:
        T_isosurf T_OP_PAR expr_image T_COMMA expr T_CL_PAR
        {
          SurfacePoly* surf;
          InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());
          surf = Func_isosurf(im,
                  $5,
                  NULL);
          Si surf != NULL Alors
            driver.surf_stack.AddSurf(surf);
          FinSi
        }
        |
        T_isosurf_ras T_OP_PAR var_image T_COMMA expr T_CL_PAR
        {
          SurfacePoly* surf;
          surf = Func_isosurf((*(InrImage::ptr*) $3->Pointer()),
                  $5,
                  NULL,
                  2);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |
    T_isosurf T_OP_PAR expr_image T_COMMA expr T_COMMA var_image T_CL_PAR
    {
        InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());
        SurfacePoly* surf;
        surf = Func_isosurf(im,
                $5,
                ((InrImage::ptr*) $7->Pointer())->get());
    Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
    FinSi
    }
    |
    T_isoline T_OP_PAR expr_image T_COMMA expr T_COMMA expr_image T_CL_PAR
    {
    /**
     Parameters:
        (3) input image
        (5) Gaussian standard deviation
        (7) mask

     Description:
        Computes the centerlines of bright tubular structures
        as zero-crossing of the gradient vector field in the planes
        of the 2 eigenvectors of the Hessian matrix that
        correspond to the lowest and negative eigenvalues
     **/
      InrImage::ptr mask = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr im   = InrImage::ptr(driver.im_stack.GetLastImage());
      vtkPolyData* vtklines;
      CreeCrest* crestlines;
      SurfacePoly* lines;

      crestlines = Func_IsoLine(im.get(), $5, mask.get());
      printf("running conversion to vtkPolyData ...");
      vtklines = (vtkPolyData*) (*crestlines);

      lines = new SurfacePoly(vtklines);
      if (lines != NULL)
        driver.surf_stack.AddSurf(lines);

      //vtklines->Delete();
      delete crestlines;

    }
    |
    T_vtkDecimate T_OP_PAR var_surface T_CL_PAR
        {
          SurfacePoly* surf;
          surf = Func_decimate(((SurfacePoly::ptr*) $3->Pointer())->get());
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |
    T_vtkDecimate T_OP_PAR var_surface T_COMMA expr T_CL_PAR
        {
          SurfacePoly* surf;
          surf = Func_decimate(((SurfacePoly::ptr*) $3->Pointer())->get(), $5 );
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |
    T_vtkMarchingCubes T_OP_PAR var_image T_COMMA expr T_CL_PAR
        {
          SurfacePoly* surf;
          surf = Func_vtkMarchingCubes(((InrImage::ptr*) $3->Pointer())->get(),$5);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |
    T_vtkSmooth T_OP_PAR var_surface T_COMMA expr T_CL_PAR
        {
          SurfacePoly* surf;
          surf = Func_vtkSmooth(((SurfacePoly::ptr*) $3->Pointer())->get(), (int) $5);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |
    T_vtkWindowedSinc T_OP_PAR var_surface T_COMMA expr T_CL_PAR
    {
          SurfacePoly* surf;
          surf = Func_vtkWindowedSinc(((SurfacePoly::ptr*) $3->Pointer())->get(), (int) $5);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |
    T_Surface T_OP_PAR T_CL_PAR
    {
      SurfacePoly* surf = new SurfacePoly();
      driver.surf_stack.AddSurf(surf);
    }
    |
    T_Surface expr_string
    {
      driver.surf_stack.AddSurf($2);
      delete [] $2;
    }
    |
    T_Surface T_OP_PAR expr_string T_CL_PAR
    {
      driver.surf_stack.AddSurf($3);
      delete [] $3;
    }
    |
    T_Surface
    {
          int res;
          string name;
          string inc_cmd; // increment the command line string

          res=AskSurface(name);
          if (!res) {
            driver.yyiperror(" Need Surface \n");
            YYABORT;
          }
          driver.surf_stack.AddSurf((char*)name.c_str());

          wxFileName filename(GetwxStr(name));
          filename.Normalize(wxPATH_NORM_ALL,wxEmptyString,wxPATH_UNIX);
          wxString newname(   filename.GetVolume()+filename.GetVolumeSeparator()+
                              filename.GetPath(wxPATH_GET_VOLUME,wxPATH_UNIX)+
                              filename.GetPathSeparator(wxPATH_UNIX)+
                              filename.GetFullName());


          inc_cmd = str(format(" \"%1%\"  // from browser ") % newname.mb_str());
          if (driver.in_console)
            GB_main_wxFrame->GetConsole()->IncCommand(inc_cmd);
        }
        |
        T_ReadCTALine T_OP_PAR expr_string T_CL_PAR
        {
        /**
        Parameters:
            (3): input filename (text file)
        Description:
            Reads a line given described in a text file
            format used in the CTA coronary segmentation challenge
        **/
          SurfacePoly* surf;
          surf = Func_ReadCTALine($3);
          driver.surf_stack.AddSurf(surf);
      }
      |
      T_ReadCTALine T_OP_PAR expr_string T_COMMA expr T_CL_PAR
      {
        /**
        Parameters:
            (3): input filename (text file)
            (5) line type:  0: point + radius + standard dev
                            1: point
        Description:
            Reads a line given described in a text file
            format used in the CTA coronary segmentation challenge
        **/
          SurfacePoly* surf;
          surf = Func_ReadCTALine($3, (int) $5);
          driver.surf_stack.AddSurf(surf);
      }
      |
      var_surface
      {
      SurfacePoly* newsurf;
      SurfacePoly::ptr surf = *(SurfacePoly::ptr*) $1->Pointer();

      newsurf = new SurfacePoly( (*surf) );

          driver.surf_stack.AddSurf(newsurf);
      }
      |
      T_Skeleton2lines T_OP_PAR var_image  T_CL_PAR
      {
        /**
        Description:
          Creates lines from a skeleton image
        **/
          SurfacePoly* surf;

      surf = Func_Skeleton2lines( ((InrImage::ptr*) $3->Pointer())->get()  );

      Si surf==NULL Alors
        driver.err_print("Skeleton2lines() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_SmoothLines T_OP_PAR var_surface  T_CL_PAR
    {
    /**
    Parameters:
      (3) input polydata
    Description:
      Smooth lines based on a simple scheme of heat diffusion
      with data attachment (applied to each coordinate)
      using default parameters of
        smoothing coeff 0.1
        data coeff      0.01
        iterations      10
    **/
          SurfacePoly* surf;

      surf = Func_SmoothLines( ((SurfacePoly::ptr*) $3->Pointer())->get(),
                      0.1,
                      0.01,
                      10);

      Si surf==NULL Alors
        driver.err_print("SmoothLines() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_SmoothLines T_OP_PAR var_surface  T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3) input polydata
      (5) smoothing coefficient
      (7) data attachment coefficient
      (9) number of iterations
    Description:
      Smooth lines based on a simple scheme of heat diffusion
      with data attachment
    **/
          SurfacePoly* surf;

      surf = Func_SmoothLines( ((SurfacePoly::ptr*) $3->Pointer())->get(),
                      $5,
                      $7,
                      (int) $9);

      Si surf==NULL Alors
        driver.err_print("SmoothLines() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_ResampleLines T_OP_PAR var_surface T_COMMA expr  T_CL_PAR
    {
      SurfacePoly* surf;

      surf = Func_ResampleLines( ((SurfacePoly::ptr*) $3->Pointer())->get(),
                     $5);

      Si surf==NULL Alors
        driver.err_print("ResampleLines() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |
    T_ShortestPath T_OP_PAR var_surface T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA
                                       expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
      Parameters:
        - input polydata containing lines
        - point 1: x,y,z
        - point 2: x,y,z 
      Description:
        Finds the shortest path within the lines of the polydata
    */
      SurfacePoly* surf;

      surf = Func_shortestpath( ((SurfacePoly::ptr*) $3->Pointer())->get(),
                      $5, $7, $9,
                      $11,$13,$15);

      Si surf==NULL Alors
        driver.err_print("Func_shortestpath () error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_ShortestPathImage T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA
                                       expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3) input image
      (5) threshold to discard voxels
      (7)  X position of the first point
      (9)  Y position of the first point
      (11) Z position of the first point
      (13) X position of the second point
      (15) Y position of the second point
      (17) Z position of the second point
    Description:
      Finds the shortest path within the image voxels
      where the image intensity values are used to weight the edges of the graph,
      voxels are linked if their intensities are lower than the given threshold
      creates a path between the first and the second points if it exists
    **/
      InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());
      SurfacePoly* surf;

      surf = Func_shortestpath_image(  im.get(),$5,
                                      $7, $9, $11,
                                      $13,$15,$17);

      Si surf==NULL Alors
        driver.err_print("Func_shortestpath_image () error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_PathFromDispl T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3) input image containing the tracks as indices:
          voxel index of the preceding voxel
      (5) X coord of the starting point
      (7) Y coord of the starting point
      (9) Z coord of the starting point

    Description:
      Creates a path starting at a point in voxel coordinates
      and following the (integer) displacements given by the input vector field
      image
    **/
      InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());
      SurfacePoly* surf;

      surf = Func_path_from_displ(  im.get(),
          (int) round($5),
          (int) round($7),
          (int) round($9)
          );

      Si surf==NULL Alors
        driver.err_print("Func_path_from_displ() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_PathFromVectField T_OP_PAR     expr_image
                            T_COMMA expr T_COMMA expr
                            T_COMMA expr T_COMMA expr T_COMMA expr
                            T_COMMA expr T_COMMA expr T_COMMA expr
                          T_CL_PAR
    {
    /**
    Parameters:
      (3)  input image as a vector field in spatial coordinates
            or as a scalar potential
      (5) time step for the evolution
      (7) maximal Euclidean distance of the path
      (9)  X coord of the starting point (in spatial coord.)
      (11)  Y coord ---
      (13)  Z coord ---
      (15)  X coord of the expected end point (in spatial coord.)
      (17)  Y coord  ---
      (19)  Z coord  ---

    Description:
      Creates a path starting at a point in spatial coordinates
      and following the displacements given by the input vector field
      image
      if the input is scalar the corresponding vector field is computed
      from its gradient by local linear interpolation
      the tracking stops in one of the following cases:
        - the maximal distance is reached
        - the closest voxel to the current location has a negative intensity
        - the current gradient is very low
    **/
      InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());
      SurfacePoly* surf;

      double start[3] = {$9,$11,$13};
      double end[3] = {$15,$17,$19};
      surf = Func_path_from_vectfield(  im.get(),
                                        start,end,
                                        $5, $7);

      Si surf==NULL Alors
        driver.err_print("Func_path_from_vectfield() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | var_surface T_POINT  T_ConnectLines T_OP_PAR  expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (1) input polydata
      (5) maximal distance (square distance between extremities)
      (7) maximal angle (square length of the sum of the
                         normalized extremity vectors)
    Description:
      Connecting close lines
    **/
          SurfacePoly* surf;

      surf = Func_ConnectLines( ((SurfacePoly::ptr*) $1->Pointer())->get(),
                      $5,
                      $7);

      Si surf==NULL Alors
        driver.err_print("ConnectLines() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateFlatMesh T_OP_PAR expr_image T_CL_PAR
    {
    InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());
      SurfacePoly* surf;

      surf = AMIFluid::Func_CreateFlatMesh(im.get());
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    | T_CreateFlatMesh T_OP_PAR expr_image T_COMMA expr T_CL_PAR
    {
          /**

        description:
      creates a flat triangulates mesh from the image domain,
      discarding pixels with null intensity.

        parameters:
        (3) input image
        (5) triangle orientation:
            1: following X^Y
            other value: following -X^Y

          **/
      InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());
          SurfacePoly* surf;

      surf = AMIFluid::Func_CreateFlatMesh(im.get(), (int) $5 );
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateFlatMesh T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_CL_PAR
    {
      InrImage::ptr im = InrImage::ptr(driver.im_stack.GetLastImage());
      float minth = $5;
      float maxth = $7;
          SurfacePoly* surf;

      surf = AMIFluid::Func_CreateFlatMesh(im.get(),minth,maxth);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_vtkCreateFlatMesh T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_CL_PAR
    {
      InrImage* im = (InrImage*) driver.im_stack.GetLastImage();
          SurfacePoly* surf;
      float minth = $5;
      float maxth = $7;

      surf = AMIFluid::Func_vtkCreateFlatMesh(im,minth,maxth);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
     delete im;
        }
        |  T_CreateVolume T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr_image T_COMMA expr_image T_CL_PAR
        {
        /**
        description:
          CreateVolume creates a close surface composed of 2 surfaces:
          a top and a bottom, where each surface is calculated by converting
          the pixel position of 3D positions based on the 2 last parameters.
          It scans all the points of the 2D image,
          and uses their coordinates (x,y) to deduce a position in
          the input image, and interpolate a value.
            - the 2 last parameters are 2D images of 3D vectors, those vectors are used
            to set new positions (x,y,z) for each vertex of the mesh.

        parameters:
        (3) input surface
        (5) minimal intensity value of the region of interest
        (7) maximal intensity value of the region of interest
        (9) 3D vector field image for the lower positions
        (11) 3D vector fiels image for the higher positions

       Others:
         CreateFlatMesh, ElevateMesh
         changes the position of the nodes of a 3D mesh

        **/
      InrImage::ptr highpos = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr lowpos  = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr input   = InrImage::ptr(driver.im_stack.GetLastImage());
      SurfacePoly* surf;
      float minth = $5;
      float maxth = $7;

      surf = AMIFluid::Func_CreateVolume(input.get(), minth, maxth, lowpos.get(), highpos.get());
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |  T_CreateVolume T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_CL_PAR
    {
        /**
        description:
          CreateVolume creates a closed surface composed of 2 surfaces:
          a top and a bottom, where each surface is calculated by converting
          the pixel position of 3D positions based on the 2 last parameters.
          It scans all the points of the 2D image,
          and uses their coordinates (x,y) to deduce a position in
          the input image, and interpolate a value.
            - the 2 last parameters are 2D images of 3D vectors, those vectors are used
            to set new positions (x,y,z) for each vertex of the mesh.

        parameters:
        (3) input surface
        (5) minimal intensity value of the region of interest
        (7) maximal intensity value of the region of interest
        (9) 3D vector field image for the lower positions
        (11) 3D vector fiels image for the higher positions
        (13) RGB image to color the top surface or NULL if not used
        (15) alpha opacity value (in [0,1], 0 is fully transparent)


       Others:
         CreateFlatMesh, ElevateMesh
         changes the position of the nodes of a 3D mesh

        **/
      InrImage::ptr colors  = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr highpos = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr lowpos  = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr input  = InrImage::ptr(driver.im_stack.GetLastImage());
      SurfacePoly* surf;
      float minth = $5;
      float maxth = $7;
      float alpha = $15;

      surf = AMIFluid::Func_CreateVolume(input.get(), minth, maxth, 
                                          lowpos.get(), highpos.get(), colors.get(), alpha);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateVectors T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_CL_PAR
    {
        /**
        Parameters
          #1 expr_image:        altitudes1
          #2 expr_image:        displacement
          #3 expr_image:        altitudes2
          #4 expr:              stepx
          #5 expr:              stepy
          #6 expr:              scale
          #7 expr:              type

        description:
        Creates a 3D vector field for visualization of the displacement of clouds
        between times t1 and t2.
        description of the input parameters:
        - altitudes1:    scalar image,    altitudes of the clouds at time t1
        - displacement:  vectorial image, displacement as a 2D vector field
        - altitudes2:    scalar image,    altitudes of the clouds at time t2
        - stepx:         spacing in pixels between successive vectors in X direction
        - stepy:         spacing in pixels between successive vectors in Y direction
        - scale:         scaling of the vectors
        - type:          0 for Altantic, 1 for Africa.

        Example(s):

        vects = CreateVectors(alt1,displ,alt2,8,8,3,1)


        See Also:
                CreateFlatMesh, ElevateMesh, ComputeAltitudes, Altitudes2Position
      **/

      InrImage::ptr alt2  = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr displ = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr alt1  = InrImage::ptr(driver.im_stack.GetLastImage());
      int stepx   = (int) $9;
      int stepy   = (int) $11;
      float scale = $13;
      int   type  = (int) $15;
          SurfacePoly* surf;

      surf = AMIFluid::Func_CreateVectors(alt1.get(),displ.get(),alt2.get(), 
                                          stepx, stepy, scale, type);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    | T_CreateVectors T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
        /**
        Parameters
          #1 expr_image:        altitudes1
          #2 expr_image:        displacement
          #3 expr_image:        altitudes2
          #4 expr:              stepx
          #5 expr:              stepy
          #6 expr:              scale
          #7 expr:              type
          expr:                 vector_style (in {0,1})

        description:
        Creates a 3D vector field for visualization of the displacement of clouds
        between times t1 and t2.
        description of the input parameters:
        - altitudes1:    scalar image,    altitudes of the clouds at time t1
        - displacement:  vectorial image, displacement as a 2D vector field
        - altitudes2:    scalar image,    altitudes of the clouds at time t2
        - stepx:         spacing in pixels between successive vectors in X direction
        - stepy:         spacing in pixels between successive vectors in Y direction
        - scale:         scaling of the vectors
        - type:          0 for Altantic, 1 for Africa.
        - vector style   0: simple line, 1: 3D vector composed of 2 tetrahedra

        Example(s):

        vects = CreateVectors(alt1,displ,alt2,8,8,3,1,1)


        See Also:
                CreateFlatMesh, ElevateMesh, ComputeAltitudes, Altitudes2Position
      **/

      InrImage::ptr alt2  = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr displ = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr alt1  = InrImage::ptr(driver.im_stack.GetLastImage());
      int stepx   = (int) $9;
      int stepy   = (int) $11;
      float scale = $13;
      int   type   = (int) $15;
      int   style  = (int) $17;
          SurfacePoly* surf;

      surf = AMIFluid::Func_CreateVectors(alt1.get(),
          displ.get(),
          alt2.get(), stepx, stepy, scale, type,style);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateVectors T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_CL_PAR
    {
        /**
        Parameters
          #1 expr_image:        altitudes1
          #2 expr_image:        displacement
          #3 expr_image:        altitudes2
          #4 expr:              stepx
          #5 expr:              stepy
          #6 expr:              scale

        description:
        Creates a 3D vector field for visualization of the displacement of clouds
        between times t1 and t2.
        description of the input parameters:
        - altitudes1:    scalar image,    altitudes of the clouds at time t1
        - displacement:  vectorial image, displacement as a 2D vector field
        - altitudes2:    scalar image,    altitudes of the clouds at time t2
        - stepx:         spacing in pixels between successive vectors in X direction
        - stepy:         spacing in pixels between successive vectors in Y direction
        - scale:         scaling of the vectors

        Example(s):

        vects = CreateVectors(alt1,displ,alt2,8,8,3)


        See Also:
                CreateFlatMesh, ElevateMesh, ComputeAltitudes, Altitudes2Position
      **/
      InrImage::ptr alt2  = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr displ = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr alt1  = InrImage::ptr(driver.im_stack.GetLastImage());
      int stepx   = (int) $9;
      int stepy   = (int) $11;
      float scale = $13;
          SurfacePoly* surf;

      surf = AMIFluid::Func_CreateVectors(alt1.get(),displ.get(),alt2.get(), stepx, stepy, scale);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateVectors T_OP_PAR expr_image  T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr  T_COMMA expr T_CL_PAR
    {
        /**
        Parameters
          (3) expr_image:        displacement field in voxel coordinates
          (5) expr:              spacing between vectors in X direction
          (7) expr:              spacing between vectors in Y direction
          (9) expr:              spacing between vectors in Z direction
          (11) expr:             scale
          (13) vector style   0: simple line, 1: 3D vector composed of 2 tetrahedra

        description:
        Creates a 3D vector field for visualization.

      **/
      InrImage::ptr displ = InrImage::ptr(driver.im_stack.GetLastImage());
      int stepx   = (int) $5;
      int stepy   = (int) $7;
      int stepz   = (int) $9;
      float scale = $11;
      int style = (int) $13;
      SurfacePoly* surf;

       surf = AMIFluid::Func_CreateVectors(displ.get(), stepx, stepy, stepz,  scale, style);
       Si surf != NULL Alors
         driver.surf_stack.AddSurf(surf);
       FinSi
    }
    | T_CreateEllipsoids T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
        (3)  First  vector field v1
        (5)  Second vector field v2
        (7)  Third  vector field v3
        (9)  step in X dimension
        (11) step in Y dimension
        (13) step in Z dimension
        (15) resolution

    Description:
        Create 3D ellipsoids based on 3 vector fields
    **/
      InrImage::ptr v3  = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr v2  = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr v1  = InrImage::ptr(driver.im_stack.GetLastImage());
      int stepx   = (int) $9;
      int stepy   = (int) $11;
      int stepz   = (int) $13;
      int res     = (int) $15;

          SurfacePoly* surf;

      surf = Func_CreateEllipsoids(v1.get(),
              v2.get(),
              v3.get(),
              stepx,stepy,stepz,res);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateEllipsoids T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_COMMA expr_image T_COMMA  expr_image T_CL_PAR
    {
    /**
    Parameters:
        (3)  First  vector field v1
        (5)  Second vector field v2
        (7)  Third  vector field v3
        (9)  step in X dimension
        (11) step in Y dimension
        (13) step in Z dimension
        (15) resolution
        (17) RGB image for the colors
        (19) mask image

    Description:
        Create 3D ellipsoids based on 3 vector fields
    **/
      InrImage::ptr mask   = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr colors = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr v3     = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr v2     = InrImage::ptr(driver.im_stack.GetLastImage());
      InrImage::ptr v1     = InrImage::ptr(driver.im_stack.GetLastImage());

      int stepx   = (int) $9;
      int stepy   = (int) $11;
      int stepz   = (int) $13;
      int res     = (int) $15;

          SurfacePoly* surf;

      surf = Func_CreateEllipsoids( v1.get(),
                                    v2.get(),
                                    v3.get(),stepx,stepy,stepz,res,
                                    colors.get(),
                                    mask.get());
      if (surf != NULL) {
        driver.surf_stack.AddSurf(surf);
      }
    }
;


identifier
        : IDENTIFIER
        ;

variable:
          VAR_INT
        | VAR_FLOAT
        | var_image
        {
          $$=$1;
        }
        | VAR_IMAGEDRAW
        | VAR_SURFACE
        | VAR_SURFDRAW
        | VAR_FILE
        | VAR_C_FUNCTION
        | VAR_C_PROCEDURE
        | VAR_C_IMAGE_FUNCTION
        | VAR_AMI_FUNCTION
        | VAR_AMI_CLASS
        | VAR_AMI_OBJECT
        | VAR_STRING
        | VAR_MATRIX
        | VAR_GLTRANSFORM
        | VAR_PARAMWIN
        | VAR_ARRAY_SURFACE
        | VAR_ARRAY_IMAGE
          ;


image_extent:
        expr T_COLON expr T_COMMA  expr T_COLON expr T_COMMA  expr T_COLON expr
        {
          ImageExtent<float>* extent=new ImageExtent<float>( (float)$1,(float)$3,(float)$5,
                              (float)$7,(float)$9,(float)$11);
          extent->SetMode(1); // relative
          $$=extent;
        }
        |
        expr T_COLON expr T_COMMA  expr T_COLON expr
        {
          ImageExtent<float>* extent=new ImageExtent<float>((float)$1,(float)$3,(float)$5,(float)$7);
          extent->SetMode(1); // relative
          $$=extent;
        }
        |
        var_image
        {
          InrImage::ptr im = *(InrImage::ptr*) $1->Pointer();

          ImageExtent<float>* extent=new ImageExtent<float>();
          extent->SetMode(0); // absolute
          extent->SetXmin( im->SpacePosX(0));
          extent->SetXmax( im->SpacePosX(im->DimX()-1));
          extent->SetYmin( im->SpacePosY(0));
          extent->SetYmax( im->SpacePosY(im->DimY()-1));
          extent->SetZmin( im->SpacePosZ(0));
          extent->SetZmax( im->SpacePosZ(im->DimZ()-1));
          extent->print();
          $$=extent;
       }
       |
       VAR_IMAGEDRAW
       {
        DessinImage::ptr draw = *(DessinImage::ptr*) ($1->Pointer());

        int xmin,xmax;
        int ymin,ymax;
        int zmin,zmax;
        string comment;

        draw->GetZoom(xmin,ymin,zmin,xmax,ymax,zmax);
        ImageExtent<float>* extent=new ImageExtent<float>(xmin,xmax,ymin,ymax,zmin,zmax);
        extent->SetMode(1); // relative extent

        comment = str(format(" //  subvolume [%3d:%3d, %3d:%3d, %3d:%3d] ")
            % xmin % xmax % ymin % ymax % zmin % zmax);
        if (GB_debug) cerr << "********* extent ****" << endl;
        if (driver.in_console) GB_main_wxFrame->GetConsole()->IncCommand(comment);

        $$=extent;
       }
%%
#include <stdio.h>



int is_space(char c)
{
  return ((c==' ')||(c=='\n')||(c=='\t'));
}




void yyip::Parser::error(const Parser::location_type& l,
          const std::string& m)
{
    driver.error(l, m);
}

void CB_delete_imagedraw( void* var)
{
  Variable* vartodelete = (Variable*) var;

  FILE_MESSAGE(boost::format("deleting %1%") % vartodelete->Name());
  if (Vars.deleteVar(vartodelete)==0)
    FILE_ERROR("Could not delete variable "); 

// deleting is risky, use smart pointers instead ...
//  delete name;
}

void CB_delete_surfdraw( void* varid)
{
  fprintf(stderr," CB_delete_surfdraw begin \n");
  Variable* v = (Variable*) varid;
  fprintf(stderr," Delete var %s \n", v->Name());
  if (Vars.deleteVar( v->Name())==0)
    fprintf(stderr,"CB_delete_surfdraw() could not delete variable '%s' !!! \n",v->Name());
  fprintf(stderr," CB_delete_surfdraw end \n");
}


//------------------------------------------------------
void wxScheduleTimer::Notify()
//   -----------------------
{
  //cout << "Notify()" << endl;
  CB_ParamWin(&f);

  std::list<wxScheduleTimer::ptr>::iterator Iter;
  for (Iter  = schedule_timers.begin();
       Iter != schedule_timers.end()  ; Iter++ )
  {
    if ((*Iter).use_count()) {
      if (Iter->get() == this) {
        Iter = schedule_timers.erase(Iter);
     }
    }
  }
} // wxScheduleTimer::Notify()




