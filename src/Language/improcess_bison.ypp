/*

    IMAGE PROCESSING LANGUAGE

    Karl Krissian
    ULPGC
    06 02 2001
 */


%{
 /*** C/C++ Declarations ***/
  //#include <stdlib.h>
  //#include <stdio.h>

// use NOMINMAX to avoid conflicts between windows.h min,max and std::min std::max ...
#define NOMINMAX

#include "driver.h"
#include "CoutwxString.h"
#include "MainFrame.h"
#include <locale.h>
#include "fonctions.h"
#include "func_isoline.hpp"

#include "ami_function.h"
#include "ami_class.h"
#include "ami_object.h"
#include "IdentifierInfo.h"

#include "localstats.h"
//#include "dist_squared.hpp"
#include "improcess_bison.tab.hpp"
#include "wrapAMIFluid.h"
#include "wrapVTK.h"
#include "wrapITK.h"
#include "wrap_mainframe.h"
#include "wrap_imagedraw.h"
#include "itkCannyEdgeDetector.h"
#include "wrapWII.h"
#include "wrapFilters.h"
#include "wrapSystem.h"
#include <cstdlib>

//#include "myscan.h"
#include "ImageDraw.hpp"
#include "Func_ReadCTALine.h"
#include "LineRecons.h"
//#include "PruneLines.h"

#include "wrapfunction_class.h"


#ifndef __FLEX_LEXER_H
#define yyFlexLexer yyipFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif


#include "Viewer3D.hpp"

//#include "Erreurs.Main.hpp"
 // #include "Graphique.hpp"
#include "Viewer3D.hpp"
#include "DessinImage.hpp"
#include "CompareImage.hpp"
#include "bruit.hpp"
#include "CalculAireSection.hpp"
#include "reponse_cercle.hpp"
#include "func_shortestpath.h"
#include "Wrap_AnisoGS.h"
#include "LevelSetsCURVES.h"
#include "vtkwrap.h"

#include "gnuplot.hpp"

#include "xmtext.hpp"
#include "StringUtils.hpp"
//#include "histo.hpp"

#ifndef WIN32
#include <unistd.h>
#endif

#include <iostream>

#include "VarContexts.hpp"
#include "VarArray.h"
//#include "Duree.hpp"

#include "DefineClass.hpp"

#include "Variable.hpp"

/*
#include <boost/shared_ptr.hpp>
//--- string formatting using boost
#include <iostream>
#include <iomanip>
#include <cassert>
#include "boost/format.hpp"
namespace MyNS_ForOutput {
  using std::cout; using std::cerr;
  using std::string;
  using std::endl; using std::flush;

  using boost::format;
  using boost::io::group;
}
using namespace MyNS_ForOutput;
*/

//-------

#include "wx/evtloop.h"
#include "driver.h"

extern VarContexts       Vars;

//Duree            IP_time;

extern MainFrame*   GB_main_wxFrame;
extern wxApp*       GB_wxApp;
extern int          GB_argc;

extern int       GB_num_arg_parsed;
extern wxString  GB_scripts_dir;
extern wxString  GB_help_dir;


namespace AMIFluid {
extern char* FLUID_NAVIGATION_FILE;
}


DessinImage* CreateIDraw(  const std::string& title, InrImage::ptr image);
// Creation of a DessinImage pointer
// this function is distinct if compiling with all amilab

extern yyip::Driver GB_driver;

extern unsigned char        GB_debug;
extern unsigned char        GB_verbose;
extern unsigned char        verbose;
extern unsigned char        GB_nofile;

extern char program[80];

extern unsigned char DELETE_IDRAW;

//-------------------------------------------------------
class wxWaitTimer : public wxTimer
//    -----------
{
  public:
    bool finished;

    wxWaitTimer() : finished(false) {}
    //Called each time the timer's timeout expires
    void Notify()     { finished = true; }
};



//------------------------------------------------------
class wxScheduleTimer : public wxTimer
//    ---------------
{
  DEFINE_CLASS(wxScheduleTimer)
  public:
    wxScheduleTimer( Variable<AMIFunction>::ptr callback)
    {
      var = Variable<AMIFunction>::ptr(callback);
    }

    ~wxScheduleTimer()
    { 
      //cout << "~wxScheduleTimer()" << endl; 
    }

    //Called each time the timer's timeout expires
    void Notify();

  private:
    // variable of type type_ami_function
    Variable<AMIFunction>::ptr var;
};

// create a array of shared pointers
// to delete the wxScheduleTimer when necessary
static std::list<wxScheduleTimer::ptr> schedule_timers;

void CB_ParamWin( void* cd );


//static void ( void* cd, long unsigned int *) {
//  CB_ParamWin(cd);
//}

/*
static void CB_Button(  void* cd) {
  CB_ParamWin(cd);
}
*/

void CB_delete_variable( void* var);


//------------------------------------------------------
void CB_update_imagelist( void* imagelist_gui);


#define GET_VARSTACK_VALUE(type,newvar) \
  boost::shared_ptr<type> newvar( \
    driver.var_stack.GetLastVar<type>()->Pointer());

#define GET_VARSTACK_VAR_VAL(type,newvar, newval) \
  Variable<type>::ptr newvar(driver.var_stack.GetLastVar<type>()); \
  boost::shared_ptr<type> newval(newvar->Pointer());


#define UNARYOP_EXPR(operator,val,res)           \
  res=operator(val);


#define UNARYOP_IMAGE(operator)        {   \
  InrImage::ptr im(driver.im_stack.GetLastImage());     \
  InrImage::ptr res;                           \
  if (im.use_count()==1) res = im; \
  else {\
    res = InrImage::ptr(new InrImage( im->GetFormat(),\
                                      im->GetVDim(),\
                                      (std::string("unaryop_")+im->GetName()).c_str(),\
                                      im.get()));\
    (*res) = (*im);\
  }\
  int       i;                            \
  res->InitBuffer();                       \
  Si res->ScalarFormat() Alors             \
    Repeter                                \
     res->FixeValeur( operator(res->ValeurBuffer()) );   \
    JusquA Non(res->IncBuffer()) FinRepeter             \
  Sinon                                                \
    Pour(i,0,res->GetVDim()-1)                 \
      res->InitBuffer();                       \
      Repeter                                 \
       res->VectFixeValeur( i, operator(res->VectValeurBuffer(i)) );   \
      JusquA Non(res->IncBuffer()) FinRepeter  \
    FinPour                                   \
  FinSi                                       \
  driver.im_stack.AddImage(res); }


#define IMAGE_OP_EXPR(operator,expr)              {       \
  InrImage::ptr im(driver.im_stack.GetLastImage());            \
  InrImage::ptr res;                           \
  if (im.use_count()==1) res = im; \
  else {\
    res = InrImage::ptr(new InrImage( im->GetFormat(),\
                                      im->GetVDim(),\
                                      (im->GetName()+std::string("_op_expression")).c_str(),\
                                      im.get()));\
    (*res) = (*im);\
  }\
  int       i;                                           \
  double    val = expr;                                  \
  res->InitBuffer();                                     \
  Si res->ScalarFormat() Alors                           \
    Repeter                                              \
      res->FixeValeur(res->ValeurBuffer() operator val); \
    JusquA Non(res->IncBuffer()) FinRepeter              \
  Sinon                                                  \
    Repeter                                              \
      Pour(i,0,res->GetVDim()-1)                         \
        res->VectFixeValeur(i,res->VectValeurBuffer(i) operator val);  \
      FinPour                                            \
    JusquA Non(res->IncBuffer()) FinRepeter              \
  FinSi                                                  \
  driver.im_stack.AddImage(res); }

#define EXPR_OP_IMAGE(operator,expr)    {                 \
  InrImage::ptr im(driver.im_stack.GetLastImage());            \
  InrImage::ptr res;                           \
  if (im.use_count()==1) res = im; \
  else {\
    res = InrImage::ptr(new InrImage( im->GetFormat(),\
                                      im->GetVDim(),\
                                      (std::string("expr_op_")+im->GetName()).c_str(),\
                                      im.get()));\
    (*res) = (*im);\
  }\
  int       i;                                           \
  double    val = expr;                                  \
  res->InitBuffer();                                     \
  Si res->ScalarFormat() Alors                           \
    Repeter                                              \
      res->FixeValeur(val operator res->ValeurBuffer() ); \
    JusquA Non(res->IncBuffer()) FinRepeter              \
  Sinon                                                  \
    Repeter                                              \
      Pour(i,0,res->GetVDim()-1)                         \
        res->VectFixeValeur(i, val operator res->VectValeurBuffer(i));  \
      FinPour                                            \
    JusquA Non(res->IncBuffer()) FinRepeter              \
  FinSi                                                  \
  driver.im_stack.AddImage(res); }

#define IMAGE_OP_IMAGE(operator)    \
  {\
  InrImage::ptr im2(driver.im_stack.GetLastImage());      \
  InrImage::ptr im1(driver.im_stack.GetLastImage());      \
  if (im1->ScalarFormat()&&im2->ScalarFormat()) { \
    std::string newname = (boost::format("%1%_%2%_%3%")%im1->GetName()%#operator%im2->GetName()).str(); \
    InrImage::ptr res = InrImage::ptr(new InrImage(im1->_format,newname.c_str(),im1.get()));\
    im1->InitBuffer();                \
    im2->InitBuffer();                \
    res->InitBuffer();                \
    Repeter                           \
      res->FixeValeur(im1->ValeurBuffer() operator im2->ValeurBuffer()); \
      im1->IncBuffer();               \
      im2->IncBuffer();               \
    JusquA Non(res->IncBuffer())      \
    FinRepeter                        \
    driver.im_stack.AddImage(res);    \
  } else \
    driver.err_print((boost::format("Both images should be scalar for operator %1%.") % #operator ).str()); \
  }

#define IMAGE_OP_IMAGE_2(operator) { \
  InrImage::ptr im1;                    \
  InrImage::ptr im2;                    \
  InrImage* res;                    \
  im2 = driver.im_stack.GetLastImage();    \
  im1 = driver.im_stack.GetLastImage();    \
  res = (*im1) operator (*im2);     \
  Si res == NULL Alors              \
    driver.err_print((boost::format("Error in operation %s \t IMAGE_OP_IMAGE_2 \n") % #operator).str().c_str()); \
  FinSi                             \
  driver.im_stack.AddImagePointer(res); \
  }

#define UNARYOP_MATRIX(operator)           \
  FloatMatrix* mat;                         \
  int       i,j;                            \
  mat = driver.matrix_stack.GetLastMatrix();       \
  for (i=0;i<mat->Rows();i++)               \
  for (j=0;j<mat->Cols();j++) {             \
    (*mat)[i][j]=operator((*mat)[i][j]);               \
  }                                         \
  driver.matrix_stack.AddMatrix(mat);

#define MATRIX_OP_EXPR(operator,expr)        \
  FloatMatrix* mat;                          \
  int       i,j;                             \
  float     val = expr;                      \
  mat = driver.matrix_stack.GetLastMatrix();        \
  for (i=0;i<mat->Rows();i++)               \
  for (j=0;j<mat->Cols();j++) {             \
    (*mat)[i][j]=(*mat)[i][j] operator val;            \
  }                                         \
  driver.matrix_stack.AddMatrix(mat);

#define MATRIX_OP_MATRIX_2(operator)        \
  FloatMatrix* mat1;                          \
  FloatMatrix* mat2;                          \
  FloatMatrix* mat;                          \
  int       i,j;                             \
  mat2 = driver.matrix_stack.GetLastMatrix();        \
  mat1 = driver.matrix_stack.GetLastMatrix();        \
  if ((mat1->Rows()==mat2->Rows())&&(mat1->Cols()==mat2->Cols())) { \
    mat=new FloatMatrix(mat1->Rows(),mat1->Cols()); \
    for (i=0;i<mat1->Rows();i++)               \
    for (j=0;j<mat1->Cols();j++)              \
      (*mat)[i][j]=(*mat1)[i][j] operator (*mat2)[i][j];            \
    driver.matrix_stack.AddMatrix(mat);                 \
    delete mat1;                                    \
    delete mat2;                                    \
  }                                              \
  else {                                         \
    delete mat2;                                    \
    driver.matrix_stack.AddMatrix(mat1);                \
  }


%}

/* write out a header file containing the token defines */
%defines

/* start symbol is named "start" */
%start start

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%name-prefix="yyip"



/* set the parser's class identifier */
%define "parser_class_name" "Parser"

/* keep track of the current position within the input */
%locations

%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class Driver& driver }

/* verbose error messages */
%error-verbose


%union {
  IdentifierInfo*         ident;
  char*                   astring;
  AmiInstructionBlock*    ablock;
  float                   afloat;
  double                  adouble;
  int                     aint;
  ParamList*              paramlist; // here smart pointer
                            // not allowed in union ...
  ParamListDecl*          paramlistdecl;
  ImageExtent<float>*     imageextent;
  std::list<std::string>* string_list;
}

%token LEX_ERROR

%token      END      0  "end of file"

%token T_EXP
%token T_GT
%token T_LT
%token T_MULT
%token T_DIV
%token T_FACT
%token T_ADD
%token T_SUB
%token T_MOD

%token T_OP_PAR
%token T_CL_PAR
%token T_OP_BR
%token T_CL_BR

%token T_AND
%token T_OR

%token T_POINT
%token T_COMMA
%token T_QUEST
%token T_COLON

%token T_SEMICOLON


%token T_SetDebugOn
%token T_SetDebugOff
%token T_SetVerboseOn
%token T_SetVerboseOff
%token T_AddMenuScript
%token T_SetProgress
%token T_SetStatusText
%token T_GetScriptsDir

%token T_argc
%token T_emptyargs

%token END_INSTRUCTION

%token T_Image
%token T_ReadRawImages
%token T_Transform
%token SHOW HELP QUIT T_HIDE
%token PRINT PRINTN
%token T_InfoDialog
%token T_boost_format
%token T_SPRINT
%token ASHELL LS

%token T_SetName
%token T_GetName
%token T_GetObjectName
%token T_GetOutput
%token T_GetDiffCoeff

%token ASTRING ABLOCK NUMBER
%token IDENTIFIER
%token VAR_IMAGE   VAR_FLOAT VAR_INT VAR_UCHAR VAR_STRING VAR_IMAGEDRAW
%token VAR_SURFACE VAR_SURFDRAW VAR_MATRIX
%token VAR_FILE
%token VAR_C_FUNCTION
%token VAR_C_PROCEDURE
%token VAR_CLASS_MEMBER
%token VAR_C_IMAGE_FUNCTION
%token VAR_AMI_FUNCTION
%token VAR_AMI_CLASS
%token VAR_AMI_OBJECT
%token VAR_GLTRANSFORM
%token VAR_ARRAY_SURFACE
%token VAR_ARRAY_IMAGE
%token T_del
%token T_delvars
%token T_Comments
%token ENDOP

%token T_global
%token T_local
%token T_global_new
%token T_local_new

%token T_wait
%token T_schedule

%token RIGHT_ASSIGN LEFT_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN
%token MOD_ASSIGN AND_ASSIGN XOR_ASSIGN
%token OR_ASSIGN RIGHT_OP  INC_OP
%token DEC_OP PTR_OP AND_OP OR_OP LE_OP
%token GE_OP EQ_OP NE_OP
%token TRANSPOSE_OP POINTWISE_MULT
%token ASSIGN_OP

%token T_COUNT
%token T_MAX
%token T_argmax
%token T_MIN
%token T_MEDIAN

%token OpImage  FILTER NormGrad T_DiscNormGrad T_gradient
%token SecDerGrad SecDerGrad2 SubImage PutImage
%token T_AutoCrop
%token T_DiscSecDerGrad
%token T_EDPdilate T_EDPerode T_EDPopen T_EDPclose
%token AnisoGS AnisoSmoothGS T_vtkAnisoGS
%token T_SetDistMap
%token T_DiscMeanCurvature
%token T_vtkMedian3D

%token T_NULL

%token T_RestartTime
%token T_InitTime
%token T_TimeSpent
%token T_EndTime

%token T_LevelSetsCURV
%token T_UpdateResult
%token T_SetMeanCurv
%token T_SetAffineCurv
%token T_SetBalloonScheme
%token T_SetVelocity
%token T_SetExpansion
%token T_SetExpansionImage
%token T_SetAdvectionField
%token T_SetCurvWeights
%token T_GetAttachVect
%token T_GetCurvature
%token T_GetDistMap
%token T_GetAdvection
%token T_GetVelocity
%token T_GetExpansion
%token T_GetSkeleton
%token T_SetDistMethod
%token T_SetParam
%token T_SetIsoContourBin
%token T_SetBandTube
%token T_SetThreads

%token T_SaveDistMap
%token T_SaveSecDerGrad

%token T_SetNumGaussians
%token T_SetGaussian
%token T_SetProbThreshold

%token T_SetILowTh
%token T_SetIHighTh
%token T_SetProbHighTh

%token T_SetNumInitPoints
%token T_SetInitPoint

%token T_vtkFastMarching
%token T_vtkFastMarchingTarget

%token T_FluxDiffusion
%token T_AnisoWeickert T_AnisoCW
%token T_SRAD_qcoeff
%token T_AnisoSRAD
%token T_AnisoSRAD2
%token T_AnisoLeeAdd2
%token T_AnisoDPAD
%token T_AnisoDPAD2
%token T_AnisoNRAD
%token T_AnisoRudinMult
%token TInit TSetCoeff TIterate TEnd TAddGaussNoise T_SNR
%token T_SetNoiseType
%token T_SetNoiseSD
%token T_GetNoiseSD
%token T_GetDAcoeff
%token T_SetMask
%token T_SetSRADROI
%token T_SetRNRADROI
%token T_SetRNRADROI_NEW
%token T_SetLocalStruct
%token T_SetEigenMode
%token T_Setdt
%token T_Setneighborhood
%token T_info T_NbPoints T_NbPolys
%token T_save
%token T_normalize
%token T_OrientField
%token T_OrientPositive
%token T_2DFlux
%token T_OutFlux
%token T_OutFluxScalar
%token T_OrientationRatio
%token T_Skeleton
%token T_SimplePoints
%token T_CircleIntegral
%token T_CircleIntegralExc
%token T_CircleIntSdExc
%token T_CircleMinIntSdExc
%token T_LocalExtrema
%token T_NormalField
%token T_DirConnectivity
%token T_eccentricity
%token T_rot2D
%token T_mean
%token T_SUM
%token T_localmean
%token T_localmean2
%token T_localSD
%token T_localSD2
%token T_struct_tensor
%token T_StructTensorH
%token T_HessianMatrix
%token T_HessianEVal
%token T_Derivatives
%token T_curvatures
%token T_Laplacian
%token T_setvoxelsize
%token T_settranslation
%token T_setendianness

%token T_Skeleton2lines
%token T_SmoothLines
%token T_ResampleLines
%token T_RemoveLine
%token T_ConnectLines
%token T_threscross
%token T_IsocontourPoints
%token T_IsosurfDist
%token T_vtkIsoContourDist
%token T_ShortestPath
%token T_ShortestPathImage
%token T_PathFromDispl
%token T_PathFromVectField
%token T_LineRecons
%token T_GetNumberOfLines
%token T_GetLine

%token T_ReadCTALine
%token T_ReadCTALineRadii
%token T_WriteCTALine

%token T_SetIsoContour
%token T_SetIsoContourParam
%token T_DrawIsoContour
%token T_SetIsoContourColor
%token T_DrawAllContours
%token T_AllContoursParam

%token T_GetZmin
%token T_GetZmax
%token T_GetYmin
%token T_GetYmax
%token T_GetXmin
%token T_GetXmax
%token T_GetXPos
%token T_GetYPos
%token T_GetZPos

%token T_vtkDicomRead T_vtkMINCRead

%token T_Convolve
%token T_ConvolveMask
%token T_Pad
%token T_Eigen2D
%token T_Eigen3D
%token T_ChamferDT
%token T_Chamfer2DT
%token T_BorgeforsDT
%token T_BorgeforsSDT
%token T_vtkSignedBorgefors
%token T_vtkSignedFMDist
%token T_PropagationDist
%token T_PropagationDist2
%token T_PropDanielsson
%token T_vtkPropDanielsson
%token T_vtkPropDaniel2
%token T_CC

%token T_ProcessXEvents
%token T_ProcessEvents

%token T_isoarea2D T_posarea

%token T_isosurf T_isosurf_inv T_isosurf_ijk T_isosurf_ras
%token T_vtkDecimate T_vtkMarchingCubes T_vtkSmooth T_Recompute
%token T_vtkWindowedSinc

%token T_isoline

%token T_vtkDist T_AndreDist
%token T_Surface
%token T_getimage
%token T_GetImageFromX
%token T_rotate
%token T_computeCC T_drawCC T_setminCC
%token T_addobj T_setcurrentobj
%token T_writeVRML T_writeVTK
%token T_OwnMaterial T_SetColor T_SetColors
%token T_SetColorOpacity
%token T_Paint
%token T_SetLight T_SetLightPos
%token T_SetLightAmbient T_SetLightDiffuse T_SetLightSpecular
%token T_SetBackground
%token T_Normalize T_Center

%token T_Remove
%token T_SwapBuffers

%token T_SetAmbient
%token T_SetDiffuse
%token T_SetSpecular
%token T_SetShininess
%token T_SetOpacity
%token T_SetOpacityImage
%token T_SetVisible
%token T_SetColorMaterial

%token T_Statistics T_GetIntensities
%token T_GetLinesLength
%token T_GetLinesExtremities
%token T_GetConnections
%token T_SelectLines
%token T_RemoveSelection
%token T_mergepoints T_Triangulate T_Displace T_Normals T_InvertNormals
%token T_Translate
%token T_Scale
%token T_SetPointsColors
%token T_SetLineWidth
%token T_AddPoint T_NewLine T_EndLine T_LineAddPointNumber
%token T_GetTransform T_SetTransform
%token T_Interpolate

%token T_Matrix
%token T_Invert

%token T_PrintMatrices

%token SET SETPOS SHOWCURSOR T_update COMPARE SETVECTOR
%token T_lininterp
%token T_SetCompareDisplacement
%token T_DrawVector
%token T_DisplayVectors
%token T_SetVectParam
%token T_SetVectColor
%token T_SetVectStyle
%token T_SetLineThickness
%token T_SetZoom
%token T_SetWindowSize
%token T_SetColormap
%token T_drawcircle
%token T_setGLwin
%token T_initvalue
%token T_ShowSection
%token T_HideSection


%token T_Xpos T_Ypos T_Zpos T_SpacePos

%token T_CHAR T_UCHAR T_SHORT T_USHORT T_INT T_UINT
%token T_FLOAT T_DOUBLE
%token T_RGB  T_FLOAT_VECTOR
%token T_GetFormat

%token T_atof

%token T_gnuplot
%token T_histo
%token T_cumhisto
%token T_DisplayHisto

%token T_OPEN
%token T_CLOSE
%token T_scan_float
%token T_read
%token T_rewind

%token T_LineNumber
%token CONST_PI
%token SIN  COS  TAN
%token ASIN ACOS ATAN
%token SINH COSH
%token EXP LN LOG
%token SQRT ABS ROUND FLOOR
%token NORM

%token FOR TO STEP ENDFOR T_IN
%token T_REPEAT T_UNTIL
%token T_WHILE
%token T_BREAK
%token IF THEN ELSE

%token VARIABLES
%token FUNCTION
%token T_eval

%token T_exists
%token T_FileExists
%token T_slice

%token T_GenRead

%token T_IMAGE
%token T_IMAGEDRAW
%token T_SURFACE
%token T_NUM
%token T_STRING
%token T_TRANSFORM
%token T_OBJECT

%token T_PROC
%token T_Class

%token T_MeanHalfSize
%token T_Resize
%token T_ReSlice
%token T_Flip
%token T_SetCompTransf

%token T_ConvexHull


%token T_itk
%token T_CannyEdgeDetector

%token T_CreateFlatMesh
%token T_CreateVolume
%token T_vtkCreateFlatMesh
%token T_Altitude2Position
%token T_GeoCoordinates
%token T_ElevateMesh
%token T_CreateVectors
%token T_Set3DArrowParam
%token T_CreateEllipsoids
%token T_ComputeAltitudes
%token T_Temp2Altitudes
%token T_ReadFlow
%token T_SetFluidNavFile
%token T_DrawEarthCoord
%token T_PaintCallback

%token T_SaveStructuredGrid

%token T_import_vtk
%token T_import_wii
%token T_import_filters

%token T_amiOFCorr2D
%token T_amiOFVar2D
//%token T_amiOFVar2DZoom

%type <ident>          identifier
%type <ident>          IDENTIFIER
%type <aint>           basic_type
%type <astring>        ASTRING
%type <astring>        primary_expr_string
%type <astring>        postfix_expr_string
%type <astring>        additive_expr_string
%type <astring>        expr_string
%type <ablock>         ABLOCK
%type <ablock>         instr_block
%type <adouble>         primary_expr
%type <adouble>         postfix_expr
%type <adouble>         unary_expr
%type <adouble>         cast_expr
%type <adouble>         multiplicative_expr
%type <adouble>         additive_expr
%type <adouble>         shift_expr
%type <adouble>         relational_expr
%type <adouble>         equality_expr
%type <adouble>         and_expr
%type <adouble>         exclusive_or_expr
%type <adouble>         inclusive_or_expr
%type <adouble>         logical_or_expr
%type <adouble>         logical_and_expr
%type <adouble>         conditional_expr
%type <adouble>         assignment_expr
%type <adouble>         expr
%type <adouble>         NUMBER
%type <aint>           command
%type <paramlist>      param_list
%type <paramlistdecl>  param_list_decl
%type <imageextent>    image_extent
%type <string_list>     stringlist
%type <string_list>     exprstringlist

%destructor { delete [] $$; } ASTRING primary_expr_string postfix_expr_string additive_expr_string expr_string
%destructor { delete  $$; } identifier IDENTIFIER
%destructor { delete  $$; } instr_block
%destructor { delete  $$; } image_extent
%destructor { delete  $$; } exprstringlist



%{

#include "driver.h"
#include "scanner.h"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lex

%}

%%

start : /* empty */
    | list_commands END;

list_commands
          :
         end_instr | list_commands end_instr |
         command end_instr
         | list_commands command end_instr
         | loop_inst   | list_commands loop_inst
         | cond_inst   | list_commands cond_inst
         | func_inst   | list_commands func_inst
         | proc_decl   | list_commands proc_decl;
         | class_decl  | list_commands class_decl;
         | object_decl | list_commands object_decl;

end_instr :
        END_INSTRUCTION
        | T_SEMICOLON
        ;


loop_inst :
    FOR identifier ASSIGN_OP expr TO expr
    instr_block end_instr
    {
      int  previous_lineno=driver.yyiplineno;
      AmiInstructionBlock::ptr block($7);
      IdentifierInfo::ptr ident($2);

      int_ptr varint(new int);
      Vars.AddVar<int>(ident,varint);

      for(*varint = (int) $4; *varint <= (int) $6; (*varint)++)
        {
          driver.yyiplineno = block->GetStartingLine();
          driver.parse_block(block);
        }
      Vars.deleteVar(ident->GetName().c_str());
      driver.yyiplineno=previous_lineno;
    }
    |
    FOR identifier ASSIGN_OP expr TO expr STEP expr
    instr_block end_instr
    {
      int  previous_lineno=driver.yyiplineno;
      AmiInstructionBlock::ptr block($9);
      IdentifierInfo::ptr ident($2);

      float_ptr var(new float);
      Vars.AddVar<float>(ident,var);

      for(*var = $4; *var <= $6; (*var)+=$8)
      {
        driver.yyiplineno = block->GetStartingLine();
        //driver.yyiplineno=previous_lineno;
        driver.parse_block(block);
      }
      Vars.deleteVar(ident->GetName().c_str());
      driver.yyiplineno=previous_lineno;
    }
    |
    FOR identifier T_IN exprstringlist
      instr_block end_instr
    {
    /**
      Description: 
          Iteration through a list of strings.
    **/

      std::list<std::string>* sl = $4;

      int  previous_lineno=driver.yyiplineno;
      AmiInstructionBlock::ptr block($5);
      IdentifierInfo::ptr ident($2);

      // create the variable
      string_ptr tmp(new string());
      Variable<string>::ptr var = Vars.AddVar<string>(ident,tmp);
      //cout << " *** Create temporary variable " << ident->GetName() << endl;

      std::list<std::string>::iterator sl_it;
      for (sl_it=sl->begin(); sl_it!=sl->end(); sl_it++) {

        // assign new value to the variable
        //string_ptr newval( new std::string(*sl_it));
        (*var->Pointer()) = (*sl_it);

        driver.yyiplineno = block->GetStartingLine();
        //driver.yyiplineno=previous_lineno;
        driver.parse_block(block);

      }
      // should not delete based on the name !!!
      bool res = Vars.deleteVar(ident->GetName().c_str());
      //cout << " *** Delete temporary variable " << ident->GetName() << endl;
      if (!res) {
        cout << "**********" << endl;
        cout << "**** Could not delete variable in loop"  << ident->GetName() << endl;
        cout << "**********" << endl;
      }
      driver.yyiplineno=previous_lineno;

      // forced to delete the pointer to the list here
      delete $4;

    }
    |
    T_REPEAT instr_block
    {
    /**
      Description:
        Repeats a block of instructions, and stop when an error is generated.
        Use the command 'break' to leave the loop
      See Also:
        break
     **/
        int  previous_lineno=driver.yyiplineno;
        AmiInstructionBlock::ptr block($2);
        int res;
    
        do {
  
            //driver.yyiplineno=previous_lineno;
            driver.yyiplineno = block->GetStartingLine();
            res=driver.parse_block(block);
  
        } while (res);
        driver.yyiplineno = previous_lineno;
      }
      |
      T_WHILE variable instr_block
      {
      /**
        Description:
          Repeats the block while the variable value is higher than 0.5
      **/
        int  previous_lineno=driver.yyiplineno;
        AmiInstructionBlock::ptr block($3);
        BasicVariable::ptr  var(driver.var_stack.GetLastBasicVar());
  
        float res;
        if (var->Type() == type_float) 
          res = *(boost::dynamic_pointer_cast<Variable<float> >(var))->Pointer();
        else
        if (var->Type() == type_int) 
          res = *(boost::dynamic_pointer_cast<Variable<int> >  (var))->Pointer();
        else
        if (var->Type() == type_uchar) 
          res = *(boost::dynamic_pointer_cast<Variable<unsigned char> >  (var))->Pointer();
        else {
          res = 0;
          driver.yyiperror(" while needs a numerical variable as condition \n");
        }
  
        while (res) {
  
          //driver.yyiplineno=previous_lineno;
          driver.yyiplineno = block->GetStartingLine();
          res=driver.parse_block(block);

          if (var->Type() == type_float) 
            res = *(boost::dynamic_pointer_cast<Variable<float> >(var))->Pointer();
          else
          if (var->Type() == type_int) 
            res = *(boost::dynamic_pointer_cast<Variable<int> >  (var))->Pointer();
          else
          if (var->Type() == type_uchar) 
            res = *(boost::dynamic_pointer_cast<Variable<unsigned char> >  (var))->Pointer();
          else {
            res = 0;
            driver.yyiperror(" while needs a numerical variable as condition \n");
          }
        } 
        driver.yyiplineno = previous_lineno;
      }
      ;


cond_inst :
    IF expr   instr_block end_instr
    {
      int  previous_lineno;
      AmiInstructionBlock::ptr block($3);

      // Pb with line numbers
      previous_lineno=driver.yyiplineno;

        if ($2>0.5)
        {
          //driver.yyiplineno=previous_lineno;
          if (!driver.parse_block(block)) YYABORT;
          driver.yyiplineno = previous_lineno;
        }
    }
    | IF expr  instr_block ELSE instr_block  end_instr
    {
       int  previous_lineno = driver.yyiplineno;

      AmiInstructionBlock::ptr block_if(  $3);
      AmiInstructionBlock::ptr block_else($5);

      // Pb with line numbers
      previous_lineno=driver.yyiplineno;

      bool res;
      if ($2>0.5)
        res = driver.parse_block(block_if);
      else
        res = driver.parse_block(block_else);
      if (!res) YYABORT;
      driver.yyiplineno = previous_lineno;

    };


proc_decl:
    T_PROC  identifier
    {
      GB_driver.procedure_declaration = true;
    }
        T_OP_PAR param_list_decl T_CL_PAR
        instr_block end_instr
    {
      AmiInstructionBlock::ptr body($7);
      IdentifierInfo::ptr ident($2);

      AMIFunction::ptr amifunc(new AMIFunction);

      amifunc->SetName(ident->GetName().c_str());
      amifunc->SetFileName(driver.current_file);
      amifunc->SetParamList($5);
      amifunc->SetBody(     body);

      if (GB_debug)
        cout  << ident->GetName()
              << " body = "
              << body->GetBody()  << endl;

      BasicVariable::ptr newvar = Vars.AddVar<AMIFunction>( ident, amifunc);
      if (newvar.get())
        amifunc->SetContext(newvar->GetContext());

      // desactivate the flag procedure_declaration
      // which allows not to accept variables as identifiers
      GB_driver.procedure_declaration = false;
    } 
    |
    T_PROC  VAR_AMI_FUNCTION
    {
      // allow overriding current functions
      GB_driver.procedure_declaration = true;
    }
        T_OP_PAR param_list_decl T_CL_PAR
        instr_block end_instr
    {
      AmiInstructionBlock::ptr body($7);

      GET_VARSTACK_VAR_VAL(AMIFunction, var, func);

      // delete previous variable
      std::string varname = var->Name();
      int context = Vars.GetContext(boost::static_pointer_cast<BasicVariable>(var));
      Vars.deleteVar(var);

      FILE_MESSAGE(boost::format("Redefining procedure %1%") % varname); 

      AMIFunction::ptr amifunc( new AMIFunction);

      amifunc->SetName(varname.c_str());
      amifunc->SetFileName(driver.current_file);
      amifunc->SetParamList($5);
      amifunc->SetBody(     body);
      FILE_MESSAGE(boost::format("%1%: body = %2%")
                    % varname  % body->GetBody());

      // add the variable in the same context ...
      BasicVariable::ptr newvar =
        Vars.AddVar<AMIFunction>(
                      varname,
                      amifunc,
                      context);
      if (newvar.get())
        amifunc->SetContext(newvar->GetContext());

      // desactivate the flag procedure_declaration
      // which allows not to accept variables as identifiers
      GB_driver.procedure_declaration = false;
    };


class_decl:
    T_Class  identifier
        instr_block end_instr
    {
      AmiInstructionBlock::ptr body($3);
      IdentifierInfo::ptr ident($2);

      AMIClass::ptr amiclass( new AMIClass);

      amiclass->SetName(ident->GetName());
      amiclass->SetFileName(driver.current_file);
      amiclass->SetBody(     body);
      if (GB_debug) printf("%s body = %s\n", ident->GetName().c_str(),body->GetBody().c_str());

      Vars.AddVar<AMIClass>(ident, amiclass);

    };

object_decl:
    VAR_AMI_CLASS  identifier
    {
      Variable<AMIClass>::ptr var(driver.var_stack.GetLastVar<AMIClass>());
      AMIClass::ptr ac = var->Pointer();
      IdentifierInfo::ptr ident($2);

      //AMIObject::ptr amiobject;
      //amiobject = AMIObject::ptr(new AMIObject);
      AMIObject::ptr amiobject( new AMIObject);

      amiobject->SetName(ident->GetName());
      amiobject->SetClass(ac);

      // execute the code of the class with the variables of the object
      driver.yyip_instanciate_object(ac,amiobject.get());

      Vars.AddVar<AMIObject>(ident, amiobject);

    };

func_inst :
    FUNCTION expr_string end_instr
    {
       //driver.res_print($2);
       driver.parse_script($2);
       delete [] $2;
     }
    |
    FUNCTION end_instr
    {
          int res;
          string name;
          string inc_cmd; // increment the command line string

          //cout << "current wd = "  <<  wxGetCwd() << endl;
          res=AskScript(name);
          if (!res) {
            driver.yyiperror(" Need script \n");
            YYABORT;
          }
          //cout << "current wd = "  <<  wxGetCwd() << endl;

        driver.res_print(name.c_str());
        driver.res_print("\n");
        driver.parse_file(name.c_str());

        // convert path delimiters to avoid pbs with \ character
        wxFileName filename(GetwxStr(name.c_str()),wxPATH_NATIVE);
        filename.Normalize(wxPATH_NORM_ALL,wxEmptyString,wxPATH_UNIX);

        wxString newname(   filename.GetVolume()+filename.GetVolumeSeparator()+
                            filename.GetPath(wxPATH_GET_VOLUME,wxPATH_UNIX)+
                            filename.GetPathSeparator(wxPATH_UNIX)+
                            filename.GetFullName());

        driver.res_print( newname.mb_str());
        driver.res_print("\n");
        inc_cmd = str(format(" \"%1%\" // from browser ") % newname.mb_str());
        if (driver.InConsole())
          GB_main_wxFrame->GetConsole()
                          ->IncCommand(wxString::FromAscii(inc_cmd.c_str()));
      }
    |
    T_eval expr_string
    {
      boost::shared_array<char> input($2);
      string inputstring( input.get());
      driver.parse_string( inputstring,
                          "'eval string' command");
    }
;

command:
        variable 
        {
          /**
            Description:
              Empty instruction.
          **/
          BasicVariable::ptr       var(driver.var_stack.GetLastBasicVar());
          if (var.get()) {
            switch (var->Type()) {
              // TODO: ad hoc fix to improve here, result should be a usable variable ??
              /// C++ wrapped member
              case type_class_member: {
                DYNAMIC_CAST_VARIABLE(WrapClassMember,var,m);
                m->Pointer()->CallMember(NULL);
               }
              break;
              /// language function without parameters.
              case type_ami_function: {
                DYNAMIC_CAST_VARIABLE(AMIFunction,var,vf);
                AMIFunction::ptr f(vf->Pointer());
                driver.yyip_call_function(f);
               }
              break;
              default:;
                // TODO: only do it from the command line ???
                //cout << "display var info" << endl;
                if (driver.InConsole())
                  var->display();
            }
          }

        }
        |
        expr_var 
        {
          /**
            Description:
              Empty instruction.
          **/
          BasicVariable::ptr       var(driver.var_stack.GetLastBasicVar());
          if (var.get()) {
            switch (var->Type()) {
              // TODO: ad hoc fix to improve here, result should be a usable variable ??
              /// C++ wrapped member
              case type_class_member: {
                DYNAMIC_CAST_VARIABLE(WrapClassMember,var,m);
                m->Pointer()->CallMember(NULL);
               }
              break;
              /// language function without parameters.
              case type_ami_function: {
                DYNAMIC_CAST_VARIABLE(AMIFunction,var,vf);
                AMIFunction::ptr f(vf->Pointer());
                driver.yyip_call_function(f);
               }
              break;
              default:;
                // TODO: only do it from the command line ???
                //cout << "display var info" << endl;
                if (driver.InConsole())
                  var->display();
            }
          }

        }
        |
         T_emptyargs {
         /**
          Description:
            Sets the number of command line arguments to 1 (name of the program)
          **/
          GB_argc = 1;
         }
         |
         T_BREAK {
          /**
            Description:
              Calls YYABORT to leave the current instruction block.
            See Also:
              repeat
          **/
           YYABORT;
         }
         |
         T_global
         {
         /**
         Description:
          Set a global context for variables,
          creates new variables as global and can only
          access global variables

         See also:
          local, global_new
         **/
       Vars.SetGlobalContext();
         }
         |
         T_global_new
         {
         /**
         Description:
          Set a global context for new variables,
          creates new variables as global,
          but allow access to lobal variables

         See also:
          local, global
         **/
       Vars.SetGlobalNew(1);
         }
         |
         T_local_new
         {
         /**
         Description:
          Set a local context for new variables,
          creates new variables as local,
          and allow access to local variables

         See also:
          local, global, global_new
         **/
       Vars.SetGlobalNew(0);
         }
         |
         T_local
         {
         /**
         Description:
         Set a local context for variables
         **/
       Vars.SetLastContext();
       Vars.SetGlobalNew(0);
         }
         |
     T_wait T_OP_PAR expr T_CL_PAR
     {
        /**
        Description: waits the time given in milliseconds
        **/

        int ms = (int) $3;
        wxWaitTimer w;
        w.Start(ms,wxTIMER_ONE_SHOT);
        while (!w.finished) {
          if (GB_wxApp->Pending()) {
            GB_wxApp->Dispatch();
          }
        } // end while
      }
      |
      T_schedule T_OP_PAR expr T_COMMA VAR_AMI_FUNCTION T_CL_PAR
      {
        /**
        Parameters:
            (3) time in ms
            (5) function to schedule
        **/

        int ms = (int) $3;
        GET_VARSTACK_VAR_VAL(AMIFunction,var,val);

        wxScheduleTimer::ptr w = wxScheduleTimer::ptr(new wxScheduleTimer( var ));
        // add to the list of schedule timers
        schedule_timers.push_back(w);
        w->Start(ms,wxTIMER_ONE_SHOT);

      }
      |
      identifier ASSIGN_OP T_AND variable
      {
        /**
          Description:
            Creates a new variable that is a reference to an existing one.
          Parameters:
            - new variable name;
            - existing variable name.
        **/
          BasicVariable::ptr  var(driver.var_stack.GetLastBasicVar());
          IdentifierInfo::ptr ident($1);
          BasicVariable::ptr newvar( var->NewReference());
          Vars.AddVar(ident,newvar);
      }
      |
      identifier ASSIGN_OP expr_var
      {
        /**
          Description:
            Creates a new variable that is a copy of an existing one.
          Parameters:
            - new variable name;
            - existing variable name.
        **/
          BasicVariable::ptr  var(driver.var_stack.GetLastBasicVar());
          if (var.use_count()==1) {
            IdentifierInfo::ptr ident($1);
            Vars.AddVar(ident,var);
          } else
          {
            if (var.get()) {
              BasicVariable::ptr copy = var->NewCopy();
              IdentifierInfo::ptr ident($1);
              Vars.AddVar(ident,copy);
            } else {
              driver.err_print("identifier = variable, no variable value");
            }
          }
      }
      |
      identifier ASSIGN_OP variable
      {
        /**
          Description:
            Creates a new variable that is a copy of an existing one.
          Parameters:
            - new variable name;
            - existing variable name.
        **/
          BasicVariable::ptr  var(driver.var_stack.GetLastBasicVar());
          if (var.use_count()==1) {
            IdentifierInfo::ptr ident($1);
            Vars.AddVar(ident,var);
          } else
          {
            if (var.get()) {
              BasicVariable::ptr copy = var->NewCopy();
              IdentifierInfo::ptr ident($1);
              Vars.AddVar(ident,copy);
            } else {
              driver.err_print("identifier = variable, no variable value");
            }
          }
      }
      |
      identifier ASSIGN_OP T_Surface T_OP_BR expr T_CL_BR
      {
        IdentifierInfo::ptr ident($1);

        int size = (int) $5;
        if (size<1) size = 1;
        VarArray::ptr arraysurf(new VarArray());
        arraysurf->Init(type_surface,size);
        Vars.AddVar<VarArray>(ident,arraysurf);
      }
      |
      identifier LEFT_ASSIGN T_Surface T_OP_BR expr T_CL_BR
      {
        IdentifierInfo::ptr ident($1);
        int size = (int) $5;
        if (size<1) size = 1;
        VarArray::ptr arraysurf( new VarArray());
        arraysurf->Init(type_surface,size);
        Vars.AddVar<VarArray>(ident,arraysurf);
      }
      |
      identifier ASSIGN_OP T_Image T_OP_BR expr T_CL_BR
      {
            IdentifierInfo::ptr ident($1);
            int size = (int) $5;
            if (size<1) size = 1;
            VarArray::ptr array(new VarArray());
            array->Init(type_image,size);
            Vars.AddVar<VarArray>(ident,array);
          }
         |
          identifier ASSIGN_OP expr_image
          {
          InrImage::ptr imptr;
          InrImage::ptr res;
          IdentifierInfo::ptr ident($1);

          imptr = driver.im_stack.GetLastImage();
          if (imptr.get()) {
            // check how many references it has, if only one, move pointer, else create new image
            if (imptr.use_count()==1) 
              res = imptr;
            else {
              // Create a copy since the image is already in use
              res = InrImage::ptr(new InrImage( imptr->GetFormat(),
                                                imptr->GetVDim(),
                                                ident->GetName().c_str(),
                                                imptr.get()));
              (*res) = (*imptr);
            }
            // this should be safe to avoid deleting the image, since the variable will copy the shared pointer
            Vars.AddVar<InrImage>(ident,res);
          }
          else
            driver.err_print((boost::format("assignment of NULL image for %1%  \n") % $1).str().c_str() );;
        }
         |
          identifier LEFT_ASSIGN expr_image
          {
          InrImage::ptr imptr(driver.im_stack.GetLastImage());
          IdentifierInfo::ptr ident($1);
          InrImage::ptr res;

          if (imptr.get()) {
            // check how many references it has, if only one, move pointer, else create new image
            if (imptr.use_count()==1) 
              res = imptr;
            else {
              // Create a copy since the image is already in use
              res = InrImage::ptr(new InrImage( imptr->GetFormat(),
                                                imptr->GetVDim(),
                                                ident->GetName().c_str(),
                                                imptr.get()));
              (*res) = (*imptr);
            }
            // this should be safe to avoid deleting the image, since the variable will copy the shared pointer
            Vars.AddVar<InrImage>(ident,res);
          }
          else
            driver.err_print((boost::format("assignment of NULL image for %1%  \n") %$1).str().c_str() );;
        }
        | identifier ASSIGN_OP VAR_C_FUNCTION  T_OP_PAR param_list T_CL_PAR
        {
        /**
          Description:
            Calls a wrapped function that returns a smart pointer to a variable, requires a new variable name as a result
        **/
          GET_VARSTACK_VAR_VAL(C_wrap_varfunction, var, func);
          ParamList::ptr param($5);
          BasicVariable::ptr  res;
          IdentifierInfo::ptr ident($1);

          res = (*func)(param.get());
          if (!res.use_count()) {
            driver.yyiperror(" function returns NULL \n");
            YYABORT;
          }
          res->Rename(ident->GetName().c_str());
          Vars.AddVar(res,ident->GetCreationContext());
        }
        | identifier ASSIGN_OP VAR_CLASS_MEMBER  T_OP_PAR param_list T_CL_PAR
        {
        /**
          Description:
            Calls a wrapped class member function that returns a smart pointer to a variable, requires a new variable name as a result.
        **/
          GET_VARSTACK_VAR_VAL(WrapClassMember, var, m);
          ParamList::ptr param($5);
          BasicVariable::ptr  res;
          IdentifierInfo::ptr ident($1);

          res = m->CallMember(param.get());
          if (!res.get()) {
            driver.yyiperror("Class member does not return a variable \n");
            YYABORT;
          }
          res->Rename(ident->GetName().c_str());
          Vars.AddVar(res,ident->GetCreationContext());
        }
        | identifier ASSIGN_OP VAR_CLASS_MEMBER  
        {
        /**
          Description:
            Calls a wrapped class member function that returns a smart pointer to a variable, requires a new variable name as a result.
        **/
          GET_VARSTACK_VAR_VAL(WrapClassMember, var, m);

          ParamList::ptr param((ParamList*)NULL);
          IdentifierInfo::ptr ident($1);

          BasicVariable::ptr res( m->CallMember(param.get()));
          if (!res.get()) {
            driver.yyiperror("Class member does not return a variable \n");
            YYABORT;
          }
          res->Rename(ident->GetName().c_str());
          Vars.AddVar(res,ident->GetCreationContext());
        }
        |
        VAR_ARRAY_IMAGE T_OP_BR expr T_CL_BR ASSIGN_OP expr_image
        {
          GET_VARSTACK_VAR_VAL(VarArray, vararray, array);

          InrImage::ptr imptr(driver.im_stack.GetLastImage());
          int  i = (int) $3;
          std::string name;

          if (imptr.get()) {
            BasicVariable::ptr var = array->GetVar(i);
            if (var.get()) {
              Variable<InrImage>::ptr varim(boost::dynamic_pointer_cast<Variable<InrImage> >(var));
              if (varim->Pointer().get())
                  driver.err_print("array element already assigned\n");
            }
            else 
            {
                  name = (boost::format("%s[%d]") % (vararray->Name().c_str()) %i).str();
                  // should be OK
                  array->InitElement<InrImage>( i, imptr, name.c_str());
            }
          }
          else
            driver.err_print("assignment of NULL image\n");
      }
      |
      identifier ASSIGN_OP expr_matrix
      {
        IdentifierInfo::ptr ident($1);

        FloatMatrix::ptr mat(driver.matrix_stack.GetLastMatrix());
        if (mat.get())
          Vars.AddVar<FloatMatrix>(ident,mat);
        else
          driver.err_print("assignment of NULL matrix\n");
      }
      |
      identifier ASSIGN_OP gltransform
      {
          GLTransfMatrix::ptr imptr( 
            driver.gltransf_stack.GetLastMatrix());
          IdentifierInfo::ptr ident($1);

          if (imptr.get())
            Vars.AddVar<GLTransfMatrix>(ident,imptr);
          else
            driver.err_print("assignment of NULL matrix\n");
        }
       | VAR_MATRIX ASSIGN_OP expr
       {
          Variable<FloatMatrix>::ptr varmat(driver.var_stack.GetLastVar<FloatMatrix>());
          FloatMatrix::ptr m1(varmat->Pointer());
          (*m1) = $3;
       }
       | VAR_MATRIX ASSIGN_OP expr_matrix
       {
          Variable<FloatMatrix>::ptr varmat(driver.var_stack.GetLastVar<FloatMatrix>());
          FloatMatrix::ptr m1 = varmat->Pointer();
          FloatMatrix* m2 = driver.matrix_stack.GetLastMatrix();
          (*m1) = m2;
          printf("delete m2\n");
          delete m2;
          printf("delete m2 end\n");
       }
        |
        VAR_ARRAY_SURFACE T_OP_BR expr T_CL_BR ASSIGN_OP surface
        {
          GET_VARSTACK_VAR_VAL(VarArray,vararray,array)

          int  i = (int) $3;
          char name[256];

          SurfacePoly::ptr surfptr (driver.surf_stack.GetLastSurf());
          if (surfptr.get()) {
            if (!array->GetVar(i).get()) {
              sprintf(name,"%s[%d]",vararray->Name().c_str(),i);
              array->InitElement<SurfacePoly>(i,surfptr,name);
            }
            else
            {
              driver.err_print("array element already assigned\n");
            }
          }
          else
            driver.err_print("assignment of NULL surface\n");
        }
        |
        identifier ASSIGN_OP surface
        {
          IdentifierInfo::ptr ident($1);
          // TODO: use smart pointers in surf_stack ...
          SurfacePoly::ptr surfptr (driver.surf_stack.GetLastSurf());

          if (surfptr != NULL)
            Vars.AddVar<SurfacePoly>(ident, surfptr);
          else
            driver.err_print("assignment of NULL surface\n");
        }
        |
        var_surface LEFT_ASSIGN surface
        {
          GET_VARSTACK_VAR_VAL(SurfacePoly,var,val)

          SurfacePoly::ptr surfptr( driver.surf_stack.GetLastSurf());

          // instead of deleting and creating,
          // replace the pointer and the information
          if (surfptr.get()) {
            var->Delete();
            var->Init(var->Name().c_str(),
                      surfptr);
          }
          else
            driver.err_print("assignment of NULL surface\n");

        }
        |
        VAR_ARRAY_SURFACE LEFT_ASSIGN T_Surface T_OP_BR expr T_CL_BR
        {
          GET_VARSTACK_VAR_VAL(VarArray,var,array)
          int size = (int) $5;
          if (size<1) size = 1;
          VarArray::ptr arraysurf( new VarArray());
          arraysurf->Init(type_surface,size);

          // instead of deleting and creating,
          // replace the pointer and the information
          if (arraysurf != NULL) {
            var->Delete();
            var->Init(var->Name().c_str(),
                      arraysurf);
          }
          else
            driver.err_print("not able to create surface array !\n");

      }
      |
      identifier ASSIGN_OP T_INT T_OP_PAR expr T_CL_PAR
      {
      /**
        Description: 
          Creates a variable of type int
      **/
        IdentifierInfo::ptr ident($1);

        int_ptr varint (new int((int)$5));
        Vars.AddVar<int>(ident,varint);
      }
      |
      identifier ASSIGN_OP T_INT T_OP_PAR expr T_CL_PAR T_COMMA expr_string
      {
      /**
      Parameters:
        - identifier: name of the new variable
        - expr: value of the new variable
        - expr_string: short description of the new variable
        Description: 
          Creates a variable of type int
      **/
        IdentifierInfo::ptr ident($1);
        boost::shared_array<char> comments( $8);
  
        int_ptr varint( new int((int)$5));
        BasicVariable::ptr var=Vars.AddVar<int>(ident,varint);
        if (var.get())
          var->SetComments(comments.get());
      }
      |
      identifier ASSIGN_OP T_UCHAR T_OP_PAR expr T_CL_PAR
      {
      /**
        Description: 
          Creates a variable of type unsigned char (used for boolean type too)
      **/
        IdentifierInfo::ptr ident($1);
        uchar_ptr varuchar( new unsigned char((unsigned char)$5));
        Vars.AddVar<unsigned char>(ident,varuchar);
      }
      |
      identifier ASSIGN_OP T_UCHAR T_OP_PAR expr  T_CL_PAR T_COMMA expr_string
      {
      /**
      Parameters:
        - identifier: name of the new variable
        - expr: value of the new variable
        - expr_string: short description of the new variable
      Description: 
        creates a variable of type unsigned char (used for boolean type too)
      **/
        IdentifierInfo::ptr ident($1);
        boost::shared_array<char> comments( $8);

        uchar_ptr varuchar(new unsigned char((unsigned char)$5));
        BasicVariable::ptr var=Vars.AddVar<unsigned char>(ident,varuchar);
        if (var.get())
          var->SetComments(comments.get());
      }
      |
        identifier ASSIGN_OP expr
      {
      /**
        Description: 
          Creation of a new floating point number variable
      **/
          IdentifierInfo::ptr ident($1);
          float_ptr varfloat( new float($3));

          Vars.AddVar<float>(ident,varfloat);
        }
      |
      identifier ASSIGN_OP expr T_COMMA expr_string
      {
      /**
        Parameters:
          - identifier: name of the new variable
          - expr: value of the new variable
          - expr_string: short description of the new variable
        Description: 
          Creation of a new floating point number variable
      **/
        IdentifierInfo::ptr ident($1);
        boost::shared_array<char> comments( $5);
        float_ptr varfloat(new float($3));

        BasicVariable::ptr var = Vars.AddVar<float>(ident,varfloat);
        if (var.get())
          var->SetComments(comments.get());
      }
      |
      identifier ASSIGN_OP expr_string
      {
      /**
        Description: 
          Creation of a new string variable
      **/
        IdentifierInfo::ptr ident($1);
        boost::shared_array<char> strval( $3);
        string_ptr varstring(new string(strval.get()));

        Vars.AddVar<string>(ident,varstring);
      }
      |
      identifier ASSIGN_OP expr_string T_COMMA expr_string
      {
      /**
        Parameters:
          - identifier: name of the new variable
          - expr_string: value of the new variable
          - expr_string: short description of the new variable
        Description: 
          Creation of a new string variable
      **/
        boost::shared_array<char> value( $3);
        boost::shared_array<char> comments( $5);
        string_ptr varstring( new string(value.get()));
        IdentifierInfo::ptr ident($1);

        BasicVariable::ptr var = Vars.AddVar<string>(ident,varstring);
        var->SetComments(comments.get());
      }
      |
      identifier ASSIGN_OP T_OPEN T_OP_PAR  expr_string T_COMMA ASTRING T_CL_PAR
      {
          IdentifierInfo::ptr ident($1);
          boost::shared_array<char> filename( $5);
          boost::shared_array<char> rights( $7);

          FILE_ptr file(fopen(filename.get(),rights.get()),file_deleter());
          if (file.get()) {
            Vars.AddVar<FILE>(ident,file);
          } else {
            fprintf(stderr,"error opening file '%s' in mode '%s'\n",
                      filename.get(),rights.get());
          /*
          switch (errno) {
          case EEXIST: fprintf(stderr,"EEXIST \n"); break;
          case EISDIR: fprintf(stderr,"EISDIR \n"); break;
          case ETXTBSY:fprintf(stderr,"ETXTBSY \n"); break;
          case EFAULT: fprintf(stderr,"EFAULT \n"); break;
          case EACCES: fprintf(stderr,"EACCES \n"); break;
          case ENAMETOOLONG: fprintf(stderr,"ENAMETOOLONG \n"); break;
          case ENOENT: fprintf(stderr,"ENOENT \n"); break;
          case ENOTDIR:fprintf(stderr,"ENOTDIR \n"); break;
          case EMFILE: fprintf(stderr,"EMFILE \n"); break;
          case ENFILE: fprintf(stderr,"ENFILE \n"); break;
          case ENOMEM: fprintf(stderr,"ENOMEM \n"); break;
          case EROFS:  fprintf(stderr,"EROFS \n"); break;
          case ELOOP:  fprintf(stderr,"ELOOP \n"); break;
          case ENOSPC: fprintf(stderr,"ENOSPC \n"); break;
                  default: fprintf("unknown error \n");
          }
          */
          }
        }
        |
        VAR_FILE ASSIGN_OP T_OPEN T_OP_PAR  expr_string T_COMMA ASTRING T_CL_PAR
        {
          Variable<FILE>::ptr varfile(driver.var_stack.GetLastVar<FILE>());
          std::string filename(varfile->Name());

          if (Vars.GetVar(filename.c_str()).get())
              Vars.deleteVar(filename.c_str());

          FILE_ptr file(fopen($5,$7),file_deleter());
          if (file.get()) {
              Vars.AddVar<FILE>(filename.c_str(),file);
          } else {
            fprintf(stderr,"error opening file '%s' in mode '%s'\n",
                    $5,$7);
          }
        }
        | VAR_FILE T_POINT T_rewind
        {
          Variable<FILE>::ptr varfile(driver.var_stack.GetLastVar<FILE>());
          FILE_ptr file(varfile->Pointer());
          rewind(file.get());
        }
        |  T_SetDebugOn
        {
      GB_debug = 1;
        }
        |  T_SetDebugOff
        {
      GB_debug = 0;
        }
        |  T_SetVerboseOn
        {
      GB_verbose = 1;
      verbose = 1;
    }
    |  T_SetVerboseOff
    {
      GB_verbose = 0;
    }
    |  T_AddMenuScript T_OP_PAR expr_string T_COMMA expr_string T_COMMA expr_string T_CL_PAR
    {
    /**
      Description:
        Adds a new link to a script from the menus
      Parameters:
        - string expression: category of the script
        - string expression: menu label
        - string expression: script name
   **/
          boost::shared_array<char> category( $3);
          boost::shared_array<char> label(    $5);
          boost::shared_array<char> script(   $7);
          GB_main_wxFrame->AddMenuScript(category.get(),label.get(),script.get());
    }
    |  T_SetProgress T_OP_PAR expr T_CL_PAR
    {
    /**
      Parameter:
        Number: percentage of the current process that has been processed.
      Description:
        Sets the Progress bar in the Main window to the given percentage (between 0 and 100).
    **/
          GB_main_wxFrame->SetProgress((int)($3+0.5));
    }
    |  T_SetStatusText T_OP_PAR expr_string T_CL_PAR
    {
    /**
      Parameter:
        String: input text
      Description:
        Set the given text in the status bar
    **/
        boost::shared_array<char> text( $3);
        GB_main_wxFrame->SetStatusText( text.get() );
    }
    |  QUIT  {
          GB_main_wxFrame->Close(true);
        }
        |  SHOW var_image
        {
          std::string titre;
          GET_VARSTACK_VAR_VAL(InrImage, imagevar, im);
          Variable<DessinImage>::ptr var;
          int var_context = Vars.GetContext(imagevar);

          Variables::ptr previous_ocontext = Vars.GetObjectContext();
          if (var_context==OBJECT_CONTEXT_NUMBER) {
            // set new object context
            Vars.SetObjectContext(imagevar->GetContext());
          }

          if ((var_context>=0)||
              (var_context==OBJECT_CONTEXT_NUMBER)) {
            titre = (boost::format("%s_draw") % imagevar->Name().c_str()).str();
            FILE_MESSAGE(boost::format("SHOW var_image  title %s") % titre);
            //if (Vars.GetCurrentContext()->GetVar(titre,&var)) {
            var = boost::dynamic_pointer_cast<Variable<DessinImage> >(Vars.GetVar(titre.c_str(),var_context));
            if (var.get()) {
              DessinImageParametres* param;
              DessinImage::ptr di( var->Pointer());
              param = di->GetParam();
              param->_MAJ.MAJCoupes();
              di->Paint();
            }
            else
            {
              FILE_MESSAGE(boost::format("SHOW var_image creating title %s ") % titre);
              DessinImage::ptr di;

              std::string varname(titre);

              di = DessinImage::Create_ptr( CreateIDraw( varname,  im));

              BasicVariable::ptr newvar = 
                Vars.AddVar<DessinImage>(titre.c_str(), di, var_context);
              di->SetCloseFunction(
                (void*) CB_delete_variable,
                (void*) (newvar.get()));
            }
          } // var_context >=0

          if (var_context==OBJECT_CONTEXT_NUMBER) {
            // Restore the object context
            Vars.SetObjectContext(previous_ocontext);
          }

        }
        |  T_HIDE var_image
        {
          GET_VARSTACK_VAR_VAL(InrImage, varim, im)
          string title;
          BasicVariable::ptr var;

          title = (boost::format("%s_draw") % varim->Name().c_str()).str();
          var = Vars.GetVar(title.c_str());
          if (var.get()) {
            if (var->Type() == type_imagedraw) {
                Variable<DessinImage>::ptr vard (boost::dynamic_pointer_cast<Variable<DessinImage> >(var));
                driver.err_print("Hide window \n");
                
                vard->Pointer()->Hide();
            }
            else
              fprintf(stderr,"Variable %s_draw not of type imagedraw \n",
                varim->Name().c_str());
          } else
            fprintf(stderr,"Image %s not visible \n",
          varim->Name().c_str());

        }
        |  SHOW var_surface
        {
          GET_VARSTACK_VAR_VAL(SurfacePoly,surfvar,surf)
          string    titre;
          Viewer3D::ptr surfdraw;
          BasicVariable::ptr var;
          int var_context = Vars.GetContext(surfvar);

          Variables::ptr previous_ocontext = Vars.GetObjectContext();
          if (var_context==OBJECT_CONTEXT_NUMBER) {
            // set new object context
            Vars.SetObjectContext(surfvar->GetContext());
          }

          if ((var_context>=0)||
              (var_context==OBJECT_CONTEXT_NUMBER)) {
            titre = str(format("%s_draw") % surfvar->Name());
            var = Vars.GetVar(titre.c_str(),var_context);
            if (!var.get()) {
              surfdraw = Viewer3D::Create_ptr(
                            new Viewer3D( GB_main_wxFrame,
                                          wxString::FromAscii(titre.c_str())));

              BasicVariable::ptr newvar = 
                Vars.AddVar<Viewer3D>(  titre.c_str(),
                                        surfdraw,
                                        var_context);
              surfdraw->SetCloseFunction(
                              (void*) CB_delete_variable,
                              (void*) (newvar.get()));

              surfdraw->Show(true);
              // Add the surface to the OpenGL Object
              surfdraw->GetCanvas()->AddSurface( surf);
              surfdraw->Paint();
              surfdraw->GetCanvas()->Normalize();
              surfdraw->GetCanvas()->Center();
            } else
              cerr << " variable " << titre << " already exists " << endl;
          } // var_context >=0

          // Restore the object context
          if (var_context==OBJECT_CONTEXT_NUMBER) {
            Vars.SetObjectContext(previous_ocontext);
          }

        }
        |  var_image ASSIGN_OP expr_image
        {
          GET_VARSTACK_VALUE(InrImage, i1);
          InrImage::ptr i2 (driver.im_stack.GetLastImage());

          if (i2.get()) {
            // copy option
            if (!((*i1)=(*i2))) driver.err_print(" Error in images assignement\n");
          } else {
            if (driver.err_print("Error\n")==wxID_YES) YYABORT;
          }
        }
        |  var_image ADD_ASSIGN expr_image
        {
          GET_VARSTACK_VALUE(InrImage, i1);
          InrImage::ptr i2 (driver.im_stack.GetLastImage());

          if (i2.get()) {
            // copy option
            (*i1)+=(*i2);
          } else {
            driver.err_print("Error\n");
          }
        }
        |  var_image LEFT_ASSIGN expr_image
        {
        /**
        Description:
          Replacing the previous image by the new one.
        **/
          GET_VARSTACK_VAR_VAL(InrImage, var, i1);
          InrImage::ptr imptr  (driver.im_stack.GetLastImage());
          bool can_skip_allocation = false;

          if (i1.get()!=imptr.get()) {
            can_skip_allocation = (i1->GetFormat()==imptr->GetFormat());
            if (can_skip_allocation) {
              // first try the standard data copy
              can_skip_allocation = ((*i1)=(*imptr));
              if (can_skip_allocation) {
                // copy additional information here
                i1->SetTranslation(imptr->TrX(), imptr->TrY(), imptr->TrZ());
                i1->SetVoxelSize( imptr->VoxSizeX(), 
                                  imptr->VoxSizeY(),
                                  imptr->VoxSizeZ());
              }
            }
            if (!can_skip_allocation) {
              // instead of deleting and creating,
              // replace the pointer and the information
              if (imptr != NULL) {
                var->Delete();
                // should be OK
                var->Init( var->Name().c_str(), imptr);
              }
              else
                driver.err_print("assignment of NULL image\n");
            } // end if (!can_skip_allocation)
          } // end if (i1.get()!=imptr)
        }
        |  var_image ASSIGN_OP expr
        {
        /**
        Parameters:
        (1) image
        (3) expression

        Description:
        Sets the whole image to a constant value given by expression.
        **/
          GET_VARSTACK_VALUE(InrImage, i1);
          i1->InitImage($3);
        }
        |  var_image T_OP_BR expr T_CL_BR ASSIGN_OP expr_image
        {
        /**
        Parameters:
        (1) image: vectorial or RGB input image
        (3) n: component index
        (6) imageval: image expression

        Description:
        assigns imageval to the component 'n' of the input image
        **/
          int comp = (int) $3;

          GET_VARSTACK_VALUE(InrImage, i1);
          InrImage::ptr i2 ( driver.im_stack.GetLastImage());

          Si (comp<0) Ou (comp>i1->GetVDim()) Alors
            fprintf(stderr,"image[n]=image error index too high, reset to 0 \n");
            comp = 0;
          FinSi

          Si i2->ScalarFormat()  Alors
             i1->InitBuffer();
             i2->InitBuffer();
             Repeter
                i1->VectFixeValeur(comp,i2->ValeurBuffer());
                i2->IncBuffer();
             JusquA Non(i1->IncBuffer()) FinRepeter
          Sinon
            driver.yyiperror("image[]=image\t second image has to be scalar \n");
            YYABORT;
          FinSi

        }
        |  var_image T_OP_BR expr T_CL_BR ASSIGN_OP expr
        {
        /**
        Parameters:
        (1) image: vectorial or RGB input image
        (3) n: component index
        (6) val: numerical expression

        Description:
        assigns the value val to every component 'n' of the input image
        **/
          GET_VARSTACK_VALUE(InrImage, i1);
          int comp = (int) $3;
  
          Si (comp<0) Ou (comp>i1->GetVDim()) Alors
            fprintf(stderr,"image[n]=image error \n");
            comp = 0;
          FinSi
  
  
            Si i1->VectorialFormat()  Alors
  
              i1->InitBuffer();
              Repeter
            i1->VectFixeValeur(comp,$6);
              JusquA Non(i1->IncBuffer()) FinRepeter
  
        FinSi
  
        }
        |  var_image T_OP_PAR expr T_COLON expr T_COMMA expr T_COLON expr T_COMMA expr T_COLON expr T_CL_PAR ASSIGN_OP expr_image
        {
        /**
          Description: Pads the image ...
        **/
          GET_VARSTACK_VALUE(InrImage, i1);
          int posx  = (int) $3;
          int stepx = (int) $5;
          int posy  = (int) $7;
          int stepy = (int) $9;
          int posz  = (int) $11;
          int stepz = (int) $13;

          InrImage::ptr i2 (driver.im_stack.GetLastImage());

          Func_Pad(i1.get(),i2.get(),stepx,posx,stepy,posy,stepz,posz);


        }
        |  VAR_FLOAT INC_OP
        {
          (*driver.var_stack.GetLastVar<float>()->Pointer())++;
        }
        |  VAR_FLOAT DEC_OP
        {
          (*driver.var_stack.GetLastVar<float>()->Pointer())--;
        }
        |  VAR_FLOAT ASSIGN_OP expr
        {
          (*driver.var_stack.GetLastVar<float>()->Pointer()) = $3;
        }
        |  VAR_INT INC_OP
        {
          (*driver.var_stack.GetLastVar<int>()->Pointer())++;
        }
        |  VAR_INT DEC_OP
        {
          (*driver.var_stack.GetLastVar<int>()->Pointer())--;
        }
        |  VAR_INT ASSIGN_OP expr
        {
          (*driver.var_stack.GetLastVar<int>()->Pointer()) = (int) $3;
        }
        |  VAR_UCHAR ASSIGN_OP expr
        {
          (*driver.var_stack.GetLastVar<unsigned char>()->Pointer())  = (unsigned char) $3;
        }
        |  VAR_UCHAR INC_OP
        {
          (*driver.var_stack.GetLastVar<unsigned char>()->Pointer())++;
        }
        |  VAR_UCHAR DEC_OP
        {
          (*driver.var_stack.GetLastVar<unsigned char>()->Pointer())--;
        }
        |  VAR_STRING ASSIGN_OP expr_string
        {
          GET_VARSTACK_VALUE(std::string, st);
          boost::shared_array<char> newname( $3);
          (*st) = newname.get();
        }
        | SHOW VARIABLES
        {
          Vars.display();
        }
        | variable T_POINT T_Comments T_OP_PAR expr_string T_CL_PAR
        {
        /**
          Parameters:
              variable: input variable
              string expression: comments
          Description: Set comments for a variable
        **/
          BasicVariable::ptr  var(driver.var_stack.GetLastBasicVar());
          boost::shared_array<char> comments( $5);
          var->SetComments(comments.get());
        }
        | T_del variable
        {
        /**
          Description: 
            Delete the given variable
        **/
         /*Variable* var;

         if (Vars.GetVar($2->Name(),&var))
         Vars.deleteVar($2->Name());
         */
         BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
         Vars.deleteVar(var);
        }
        | T_delvars expr_string
        {
        /**
          Description: 
            Delete all variables that match the expression, where the expression can contain 
            '*' and '?' characters
        **/
        boost::shared_array<char> varmatch( $2);
         Vars.deleteVars( varmatch.get());
        }
        | T_del VAR_ARRAY_SURFACE T_OP_BR expr T_CL_BR
        {
          Variable<VarArray>::ptr vararray(driver.var_stack.GetLastVar<VarArray>());
          VarArray::ptr array (vararray->Pointer());
          int  i = (int) $4;

          if (array->GetVar(i).get()) {
            array->GetVar(i) = BasicVariable::ptr();
          }
      }
      | ASHELL expr_string
      {
      /**
        Parameters:
          - string expression: command to call
        Description:
          calls a command from the system using std::system()
      **/
        boost::shared_array<char> cmd( $2);
        std::system( cmd.get());
      }
      | LS
      {
      /**
        Description:
        Calls system 'ls' command (for unix systems)
      **/
         std::system("ls");
           }
        | HELP
          {
        driver.res_print("Topics: \n");
        driver.res_print("\t var:  variables                 \n");
            driver.res_print("\t     image:     Help for image     variables\n");
            driver.res_print("\t     imagedraw: Help for imagedraw variables\n");
        driver.res_print("\t cmd:  commands                  \n");
        driver.res_print("\t fnc:  functions                 \n");
        driver.res_print("\t loop: loops                     \n");
        driver.res_print("\t cond: conditions                \n");
            driver.res_print("\t arit: arithmetical expressions  \n");
      }
        | HELP identifier
         {
          IdentifierInfo::ptr ident($2);
       if (strcmp(ident->GetName().c_str(),"var")==0) {
         driver.res_print("var types: void image float int string imagedraw surface surfacedraw \n");
         driver.res_print("\t del varname\n");
         driver.res_print("\t\t\t - deletes a variable and frees its contents from memory \n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"cmd")==0) {
         driver.res_print("commands:\n");
         driver.res_print("\t sh Quit Image Show Help ls print func filter normgrad discnormgrad OpImage EDPdilate EDPerode EDPopen EDPclose\n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"fnc")==0) {
         driver.res_print("functions:\n");
         driver.res_print("\t  filter normgrad gradient OpImage secdergrad ");
             driver.res_print("subimage putimage\n");
         driver.res_print("\t       OpImage( var_image, string ) \n");
         driver.res_print("\t       OpImage( var_image, var_image, string ) \n");
         driver.res_print("\t       OpImage( var_image, var_image, var_image, string ) \n");
         driver.res_print("\t       filter( var_image, expr, number, number, number ) \n");
         driver.res_print("\t       normgrad(   var_image, expr ) \n");
         driver.res_print("\t       discnormgrad(   var_image ) \n");
         driver.res_print("\t       gradient(   var_image, expr ) \n");
         driver.res_print("\t       secdergrad( var_image, expr ) \n");
         driver.res_print("\t       subimage( var_image, expr, expr, expr, expr, expr, expr ) \n");
         driver.res_print("\t       putimage( var_image, var_image, expr, expr, expr  ) \n");
         driver.res_print("\t       EDPdilate( var_image, expr, expr) \n");
         driver.res_print("\t       EDPerode(  var_image, expr, expr) \n");
         driver.res_print("\t       EDPopen(   var_image, expr, expr) \n");
         driver.res_print("\t       EDPclose(  var_image, expr, expr) \n");

         driver.res_print("\t       AnisoGS(   var_image, expr, expr, expr, expr) \n");
         driver.res_print("\t\t  expr 1: standard deviation of the Gaussian convolution  \n");
         driver.res_print("\t\t  expr 2: threshold on the gradient norm \n");
         driver.res_print("\t\t  expr 3: data attachment coefficient \n");
         driver.res_print("\t\t  expr 4: number of iterations \n");
             driver.res_print("\t       StructTensor( var_image, expr, expr ) \n");
             driver.res_print("\t       Curvatures(   var_image, expr ) \n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"loop")==0) {
         driver.res_print("loops:\n");
         driver.res_print("\t  for var=expr to expr { instructions } \n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"cond")==0) {
         driver.res_print("loops:\n");
         driver.res_print("\t  if expr  { instructions } \n");
         driver.res_print("\t\t  [ else { instructions } ]\n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"arit")==0) {
         driver.res_print("arithmetical expressions:\n");
         driver.res_print("\t  constants: Pi\n");
         driver.res_print("\n");
         driver.res_print("\t  functions:  cos()  sin()  tan() \n");
         driver.res_print("\t             acos() asin() atan() \n");
         driver.res_print("\t              exp()   ln()  log() \n");
         driver.res_print("\t             sinh() cosh()        \n");
         driver.res_print("\t  operators:\n");
         driver.res_print("\t            *, /\n");
         driver.res_print("\t            +, -\n");
         driver.res_print("\t            <, >, <=, >=\n");
         driver.res_print("\t            ==, != \n");
         driver.res_print("\t            & \n");
         driver.res_print("\t            ^ \n");
         driver.res_print("\t            | \n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"image")==0) {
         driver.res_print("variable Image\n");
         driver.res_print(" Creation:\n");
         driver.res_print("\t Image \"filename\"\n");
         driver.res_print("\t\t\t - reads an image file \n");
         driver.res_print("\t Image \n");
         driver.res_print("\t\t\t -  open browsing window for choosing the image\n");
         driver.res_print("\t Image(basic_type, size_x , size_y, size_z) \n");
         driver.res_print("\t\t\t - create an image of a basic type and the given dimensions\n");
         driver.res_print("\t\t\t - basic_type are CHAR UCHAR SHORT USHORT FLOAT DOUBLE RGB FLOAT_VECTOR \n");
         driver.res_print("\t\t\t - size_x, size_y, size_z: float expressions \n");
         driver.res_print(" Functions that return a new image: \n");
         driver.res_print("\t OpImage( var_image, string ) \n");
         driver.res_print("\t\t\t - applies point to point operations to 1 image\n");
         driver.res_print("\t OpImage( var_image, var_image, string ) \n");
         driver.res_print("\t\t\t - applies point to point operations to 2 images\n");
         driver.res_print("\t OpImage( var_image, var_image, var_image, string ) \n");
         driver.res_print("\t\t\t - applies point to point operations to 3 images\n");
         driver.res_print("\t filter( var_image, size, number, number, number ) \n");
         driver.res_print("\t\t\t - applies Gaussian (or derivatives) convolution of sd size \n");
         driver.res_print("\t\t\t - number represent the derivation order:\n");
         driver.res_print("\t\t\t\t 0: no           derivation in this dimension\n");
         driver.res_print("\t\t\t\t 1: first order  derivation in this dimension\n");
         driver.res_print("\t\t\t\t 2: second order derivation in this dimension\n");
         driver.res_print("\t normgrad(   var_image, expr ) \n");
         driver.res_print("\t\t\t - applies Gaussian (or derivatives) convolution of sd size \n");

         driver.res_print("\t discnormgrad(   var_image ) \n");
         driver.res_print("\t\t\t - Discrete gradient norm without Gaussian convolution \n");

         driver.res_print("\t gradient(   var_image, expr ) \n");
         driver.res_print("\t\t\t - Gradient of the image using  Gaussian (and derivatives) convolution of sd size \n");

         driver.res_print("\t secdergrad( var_image, expr ) \n");
             driver.res_print("\t\t\t - Compute the second order derivative in the gradient direction.\n");


         driver.res_print("\t subimage( var_image, expr, expr, expr,");
         driver.res_print(" expr, expr, expr ) \n");
             driver.res_print("\t\t\t - extract a subimage \n");

         driver.res_print("\t AddGaussNoise( var_image, expr, expr) \n");
             driver.res_print("\t\t\t - add a Gaussian noise to the image \n");
             driver.res_print("\t\t\t - param 2: mean \n");
             driver.res_print("\t\t\t - param 3: standard deviation \n");

         driver.res_print("\t eccentricity( var_image) \n");
             driver.res_print("\t\t\t - Compute a expression of eccentricity  \n");
             driver.res_print("\t\t\t - of the image, returns an 'expr'  \n");

         driver.res_print("\t isoarea2D( var_image, expr, expr, expr) \n");
             driver.res_print("\t\t\t - Compute the surface area of the region\n");
             driver.res_print("\t\t\t   of positive intensity containing the point\n");
             driver.res_print("\t\t\t   (x,y)\n");
             driver.res_print("\t\t\t expr 1: resolution  \n");
             driver.res_print("\t\t\t expr 2: x  \n");
             driver.res_print("\t\t\t expr 3: y  \n");

         driver.res_print("\t EDPdilate( var_image, expr, expr) \n");
         driver.res_print("\t EDPerode(  var_image, expr, expr) \n");
         driver.res_print("\t EDPopen(   var_image, expr, expr) \n");
         driver.res_print("\t EDPclose(  var_image, expr, expr) \n");

         driver.res_print("\t AnisoGS(   var_image, expr, expr, expr, expr) \n");
         driver.res_print("\t\t  expr 1: sigma     \n");
         driver.res_print("\t\t  expr 2: threshold \n");
         driver.res_print("\t\t  expr 3: data attachment coefficient \n");
         driver.res_print("\t\t  expr 4: number of iterations \n");


         driver.res_print("\t image = AnisoGS.init( var_image, expr, expr, expr )\n");
         driver.res_print("\t\t  expr 1:    sigma  \n");
         driver.res_print("\t\t  expr 2:    theshold  \n");
         driver.res_print("\t\t  expr 3:    data attachment coeff  \n");
         driver.res_print("\t AnisoGS.setcoeff( expr )\n");
         driver.res_print("\t\t  expr 1:    tangential coeff  \n");
         driver.res_print("\t AnisoGS.setcoeff( expr, expr )\n");
         driver.res_print("\t\t  expr 1:    min curv coeff  \n");
         driver.res_print("\t\t  expr 2:    max curv coeff  \n");
         driver.res_print("\t AnisoGS.iterate\n");
         driver.res_print("\t AnisoGS.end\n");

         driver.res_print("\t image = AnisoWeickert.init( var_image, expr, expr, expr )\n");
         driver.res_print("\t\t  expr 1:    sigma  \n");
         driver.res_print("\t\t  expr 2:    theshold  \n");
         driver.res_print("\t\t  expr 3:    evolution step dt  \n");
         driver.res_print("\t AnisoWeickert.iterate\n");
         driver.res_print("\t AnisoWeickert.end\n");

         driver.res_print("\t image = AnisoCW.init( var_image, expr, expr, expr,expr, expr )\n");
         driver.res_print("\t\t  expr 1:    sigma  first Gaussian convolution\n");
         driver.res_print("\t\t  expr 2:    rho    second Gaussian convolution\n");
         driver.res_print("\t\t  expr 2:    C      threshold for the coherence\n");
         driver.res_print("\t\t  expr 2:    alpha  lowest diffusion coefficient\n");
         driver.res_print("\t\t  expr 3:    dt     evolution step \n");
         driver.res_print("\t AnisoCW.iterate\n");
         driver.res_print("\t AnisoCW.end\n");

         driver.res_print(" Operations: \n");

         driver.res_print("\t Show var_image \n");
         driver.res_print("\t\t\t - displays the image \n");

         driver.res_print("\t var_image = var_image \n");
         driver.res_print("\t\t\t - makes a copy \n");

         driver.res_print("\t var_image.initvalue( expr ) \n");
             driver.res_print("\t\t\t - initialize every point to a scalar value \n");

         driver.res_print("\t var_image.initvalue( expr, expr, expr ) \n");
             driver.res_print("\t\t\t - initialization every point to a vector or RGB value \n");

         driver.res_print("\t var_image.set( expr ) \n");
         driver.res_print("\t\t\t - change the value a the current point \n");

         driver.res_print("\t var_image.set( expr, expr, expr ) \n");
         driver.res_print("\t\t\t - change the value a the current point \n");
         driver.res_print("\t\t\t - for RGB or VECTOR FIELD images \n");

         driver.res_print("\t var_image.setpos(expr,expr,expr) \n");
         driver.res_print("\t\t\t - set the current position \n");

         driver.res_print("\t var_image.putimage(var_image,expr,expr,expr) \n");
         driver.res_print("\t\t\t - put an image at the specified position \n");

         driver.res_print("\t var_image(expr,expr) \n");
         driver.res_print("\t\t\t - return the value at a 2D position \n");

         driver.res_print("\t var_image(expr,expr,expr) \n");
         driver.res_print("\t\t\t - return the value at a 3D position \n");

         driver.res_print("\t var_image.tx \n");
         driver.res_print("\t\t\t - return size in X \n");

         driver.res_print("\t var_image.ty \n");
         driver.res_print("\t\t\t - return size in Y \n");

         driver.res_print("\t var_image.tz \n");
         driver.res_print("\t\t\t - return size in Z \n");

         driver.res_print("\t var_image.init \n");
         driver.res_print("\t\t\t - init the current position to (0,0,0) \n");

         driver.res_print("\t var_image.info \n");
         driver.res_print("\t\t\t - print information on the image \n");

         driver.res_print("\t var_image.save \"filename\" \n");
         driver.res_print("\t\t\t - save the image \n");

         driver.res_print("\t var_image.normalize \n");
         driver.res_print("\t\t\t - normalizes a vector field image \n");
       }
       else
       if (strcmp(ident->GetName().c_str(),"imagedraw")==0) {
         driver.res_print("variable imagedraw\n");
         driver.res_print(" Creation:");
         driver.res_print("\t show var_image \n");
         driver.res_print("\t\t\t - displays an image and creates a new variable\n");
         driver.res_print("\t\t\t   of type imagedraw and the name ending by _draw \n");
         driver.res_print(" Functions:\n");

         driver.res_print(" var_imagedraw.setpos( expr, expr, expr) \n");
         driver.res_print("\t\t\t   set the cursor position \n");

         driver.res_print(" var_imagedraw.showcursor( expr) \n");
         driver.res_print("\t\t\t   expr=1-->shows cursor   0-->hides cursor \n");

         driver.res_print(" var_imagedraw.update \n");
         driver.res_print("\t\t\t   update the displayed images \n");

         driver.res_print(" var_imagedraw.compare(var_image) \n");
         driver.res_print("\t\t\t   add a comparison image \n");

         driver.res_print(" var_imagedraw.setvector( number, var_image) \n");
         driver.res_print("\t\t\t   set var_image a the vector image with number \n");
         driver.res_print("\t\t\t   between 1 and 3 \n");
       }
     }
    | HELP VAR_C_IMAGE_FUNCTION
    {
    /**
      Description: 
        Displays the documentation relative to the wrapped image function.
    **/
      GET_VARSTACK_VALUE(C_wrap_imagefunction, func);
      // call with NULL paramlist pointer to trigger help message
      (*func)(NULL);
    }
    | HELP VAR_C_FUNCTION
    {
    /**
      Description: 
        Displays the documentation relative to the wrapped image function.
    **/
      GET_VARSTACK_VALUE(C_wrap_varfunction, func);
      // call with NULL paramlist pointer to trigger help message
      (*func)(NULL);
    }
    | HELP VAR_C_PROCEDURE
    {
    /**
      Description: 
        Displays the documentation relative to the wrapped image function.
    **/
      GET_VARSTACK_VALUE(C_wrap_procedure, proc);
      // call with NULL paramlist pointer to trigger help message
      (*proc)(NULL);
    }
    | HELP VAR_CLASS_MEMBER
    {
    /**
      Description: 
        Displays the documentation relative to the wrapped c++ member.
    **/
      GET_VARSTACK_VALUE(WrapClassMember, m);
      m->ShowHelp();
    }
    | HELP ASTRING
    {
      string  help_cmd;
      string  help_file;


      // Check for directory
      help_file = str( format("%s/%s") % GB_help_dir.c_str() % $2);

      Si GB_debug AlorsFait fprintf(stderr,"3\n");
          help_cmd = str(format("test -d %s") % help_file.c_str());
          Si (std::system(help_cmd.c_str()) == 0) Alors
            printf("\nAvailable help files in %s:\n",$2);
            help_cmd = str( format("cd %s; ls *.amih ") % help_file.c_str());
            std::system(help_cmd.c_str());
          Sinon

         Si GB_debug AlorsFait fprintf(stderr,"4\n");
            // Check for file
            help_file = str( format("%s/%s.amih") % GB_help_dir.c_str() %$2);

            help_cmd = str(format("test -r %s") % help_file.c_str());
            Si (std::system(help_cmd.c_str()) == 0) Alors
              help_cmd = str( format("more %s") % help_file.c_str());
              std::system(help_cmd.c_str());
            Sinon
              Si GB_debug AlorsFait fprintf(stderr,"5\n");
              // Try to find it in any subdirectory of the help dir
              help_cmd = str(format("test -r `find %s -name \"%s.amih\"` 2> /dev/null")
                            % GB_help_dir.c_str()
                            % $2);
              Si std::system(help_cmd.c_str())==0 Alors
                help_cmd = str(format("find %s -name \"%s.amih\" -exec ls {} \\; -exec more {} \\;")
                  % GB_help_dir.c_str()
                  % $2);
                std::system(help_cmd.c_str());
              Sinon
                fprintf(stderr,"\nNo help file (%s) found for this command \n",
            help_file.c_str());
            printf("\nAvailable help directories:\n");
            help_cmd = str(format("cd %s; find . -type d  ") % GB_help_dir.c_str());
                std::system(help_cmd.c_str());

                printf("\nAvailable help files:\n");
            help_cmd = str(format("ls *.amih ") %
                std::system(help_cmd.c_str()));
          FinSi
            FinSi

          FinSi

      Si GB_debug AlorsFait fprintf(stderr,"6\n");

        }
        | VAR_FILE T_POINT PRINT expr_string
        {
          Variable<FILE>::ptr varfile(driver.var_stack.GetLastVar<FILE>());
          FILE_ptr file (varfile->Pointer());
          boost::shared_array<char> text( $4);

          fprintf(file.get(),"%s",text.get());
          fflush(file.get());
        }
        | VAR_FILE T_POINT PRINTN expr_string
        {
          Variable<FILE>::ptr varfile(driver.var_stack.GetLastVar<FILE>());
          FILE_ptr file (varfile->Pointer());
          boost::shared_array<char> text( $4);

          fprintf(file.get(),"%s\n",text.get());
          fflush(file.get());
        }
        | PRINT expr_var
        {
         /**
          Description:
            Print a value of a variable, if the string conversion is defined, a message otherwise
          **/
          BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
          if (var.get())
            driver.res_print(var->GetValueAsString());
          else
            driver.err_print("empty variable");
        }
        | PRINTN expr_var
        {
         /**
          Description:
            Print a value of a variable + newline, if the string conversion is defined, a message otherwise
          **/
          BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
          if (var.get())
            driver.res_print(var->GetValueAsString()+"\n");
          else
            driver.err_print("empty variable");
        }
        | PRINT expr_string
        {
         /**
          Description:
            Print a string
          **/
          driver.res_print($2);
          delete [] $2;
        }
        | PRINTN expr_string
          {
         /**
          Description:
            Print a string and newline
          **/
        driver.res_print($2);
        driver.res_print("\n");
        delete [] $2;
      }
      | PRINT expr_matrix
      {
        FloatMatrix* mat=driver.matrix_stack.GetLastMatrix();
        mat->PrintSelf();
        delete mat;
      }
      | T_InfoDialog expr_string
      {
         /**
          Parameters:
            string expression: information text
          Description:
            Popup an Information Dialog with the given message
          **/
          driver.info_print($2);
          delete [] $2;
      }
      | expr_matrix
      {
        FloatMatrix* mat=driver.matrix_stack.GetLastMatrix();
        mat->PrintSelf();
        delete mat;
          }
        | VAR_FILE T_POINT PRINT expr
        {
          Variable<FILE>::ptr varfile(driver.var_stack.GetLastVar<FILE>());
          FILE_ptr file (varfile->Pointer());

          fprintf(file.get(),"%5.10f",$4);
          fflush(file.get());
        }
        | VAR_FILE T_POINT T_CLOSE
        {
          driver.var_stack.GetLastBasicVar();
          printf("Deprecated: No need to close files explicitly, since we use smart pointers, they will be closed when the variable is deleted. \n");
        }
        | PRINT expr
        {
        /**
          Description:
            Prints a numerical value.
        **/
          string st;
          st = str(format("%5.10f") % $2);
          driver.res_print(st.c_str());
        }
        | PRINTN expr
        {
        /**
          Description:
            Prints a numerical value and a newline.
        **/
          string st;
          st = str(format("%5.10f\n") %$2);
          driver.res_print(st.c_str());
        }
        | VAR_IMAGEDRAW T_POINT SETPOS T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;
          DessinImageParametres* param;

          draw = DessinImage::ptr(varimd->Pointer());
          param = draw->GetParam();
          param->_pos._x = (int) $5;
          param->_pos._y = (int) $7;
          param->_pos._z = (int) $9;
          //      param->_pos.Check();
          param->_MAJ.MAJCoupes();

          draw->Paint();

        }
        | VAR_IMAGEDRAW T_POINT SHOWCURSOR T_OP_PAR expr T_CL_PAR
        {
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;
          DessinImageParametres* param;

          draw = DessinImage::ptr(varimd->Pointer());
          param = draw->GetParam();
          param->_curseur._visible = (int) ($5>0.5);
          //      param->_MAJ.MAJCoupes();

          draw->Paint();
        }
        | VAR_IMAGEDRAW T_POINT T_update
        {
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;
          DessinImageParametres* param;

          draw = DessinImage::ptr(varimd->Pointer());
          param = draw->GetParam();
          param->_MAJ.MAJCoupes();
          draw->Paint();
        }
        | VAR_IMAGEDRAW T_POINT COMPARE T_OP_PAR var_image T_CL_PAR
        {
          GET_VARSTACK_VAR_VAL(InrImage,    varim,  im);
          GET_VARSTACK_VAR_VAL(DessinImage, varimd, draw);
          char title[255];

            sprintf(title,"%s_draw",varim->Name().c_str());

            BasicVariable::ptr var = Vars.GetCurrentContext()->GetVar(title);
            if (var.get()) {
              Variable<DessinImage>::ptr vardi ( boost::dynamic_pointer_cast<Variable<DessinImage> >(var));
              DessinImage::ptr di(vardi->Pointer());
              DessinImageParametres* param;
              param = di->GetParam();
              param->_MAJ.MAJCoupes();
              di->Paint();

              /* already done at window creation
              std::string* varname = new std::string(title);
              di->SetCloseFunction(
                  (void*) CB_delete_imagedraw,
                  (void*) varname);
              */
              draw->CreeCompare2Image(di);
            }
            else
            {
              std::string varname(title);
              DessinImage::ptr di = 
                DessinImage::Create_ptr(CreateIDraw( varname, im));

              Variable<DessinImage>::ptr newvar = Vars.AddVar<DessinImage>(title, di);

              di->SetCloseFunction(
                  (void*) CB_delete_variable,
                  (void*) (newvar.get()));
              // get the pointer to the newly created
              // variable
              //BasicVariable::ptr var = Vars.GetVar(title);
              if (var.get())
                draw->CreeCompare2Image(newvar->Pointer());
              else
                fprintf(stderr,"Image comparison: Variable %s not found !\n",title);
            }

        }
        | VAR_IMAGEDRAW T_POINT COMPARE T_OP_PAR VAR_IMAGEDRAW T_CL_PAR
        {
          GET_VARSTACK_VALUE(DessinImage, draw2);
          GET_VARSTACK_VALUE(DessinImage, draw1);

          draw1->CreeCompare2Image(draw2);
        }
        | VAR_IMAGEDRAW T_POINT T_SetCompareDisplacement T_OP_PAR VAR_IMAGEDRAW T_COMMA var_image T_CL_PAR
        {
        /**
        Parameters:
            (1) Image Draw Window
            (5)  comparison window
            (7) Vectorial image

        Description:
            Defines a displacement to apply to the cursor when
            comparing 2 image drawing windows
        **/
          GET_VARSTACK_VALUE(InrImage,    displ);
          GET_VARSTACK_VALUE(DessinImage, draw2);
          GET_VARSTACK_VALUE(DessinImage, draw);

          // TODO: check for SetCompareDisplacement, does it really work?
          draw->SetCompareDisplacement(draw2,displ);
        }
        | VAR_IMAGEDRAW T_POINT T_SetCompTransf T_OP_PAR
           expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA
           expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA
           expr T_COMMA expr T_COMMA expr T_COMMA expr
         T_CL_PAR
        {

          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
        driver.yyiperror( "SetCompTransf is not available at the moment");
/*
        DessinImage::ptr draw;
        FloatMatrix* mat;

        draw = *(DessinImage::ptr*) ($1->Pointer());

        mat = new FloatMatrix(4,4);
        (*mat)[0][0] = $5;
        (*mat)[0][1] = $7;
        (*mat)[0][2] = $9;
        (*mat)[0][3] = $11;
        (*mat)[1][0] = $13;
        (*mat)[1][1] = $15;
        (*mat)[1][2] = $17;
        (*mat)[1][3] = $19;
        (*mat)[2][0] = $21;
        (*mat)[2][1] = $23;
        (*mat)[2][2] = $25;
        (*mat)[2][3] = $27;

            if (draw->GetCompareWindow(0)!=NULL)
          draw->GetCompareWindow(0)->SetTransformationMatrix(mat);
        // PB: the matrix is never freed from memory ...
        // TODO use smart pointer management !!!
*/
        }
        | VAR_IMAGEDRAW T_POINT SETVECTOR T_OP_PAR NUMBER T_COMMA var_image T_CL_PAR
        {
          /**
            Parameters:
                (1) Image Drawing window
                (5) Index of the vector field to be drawned (between 1 and 3)
                (7) Vector field image
            Description:
                Assign a vector field to be draw in the given image drawing window.
          **/
          GET_VARSTACK_VALUE(InrImage,    im);
          GET_VARSTACK_VALUE(DessinImage, draw);

          draw->LoadVectImage( (int) $5, im);
        }
        | VAR_IMAGEDRAW T_POINT T_DrawVector T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;

          draw = DessinImage::ptr(varimd->Pointer());
          draw->SetVectorVisible( (int) $5, (int) $7);
        }
        | VAR_IMAGEDRAW T_POINT T_DisplayVectors
        {
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;

          draw = DessinImage::ptr(varimd->Pointer());
          draw->CB_AfficheChampVect(draw.get(),NULL);
        }
        | VAR_IMAGEDRAW T_POINT T_SetVectParam T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
          /**
          Parameters:
            (5) expression: vector size
            (7) expression: vector spacing

          Description:
            Sets the size and spacing of the vector drawing interface in the given
            image drawing window.
          **/
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;
          float size    = $5;
          int   spacing = (int)$7;

          draw = DessinImage::ptr(varimd->Pointer());
          draw->SetVectParam( size, spacing);
        }
        | VAR_IMAGEDRAW T_POINT T_SetVectColor T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          /** 
            Parameters:
            (5)  expression: vector id
            (7)  expression: red component (0-255)
            (9)  expression: green component (0-255)
            (11) expression: blue component (0-255)

            Description:
            Sets the color of the given vector field (given by vector id),
            the color is set as (R,G,B) components, each component has a value
            between 0 and 255.
          **/
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;
          int vectid = (int) $5;
          unsigned char red   = (unsigned char) $7;
          unsigned char green = (unsigned char) $9;
          unsigned char blue  = (unsigned char) $11;

          draw = DessinImage::ptr(varimd->Pointer());
          draw->SetVectColor( vectid,red,green,blue);
        }
        | VAR_IMAGEDRAW T_POINT T_SetVectStyle T_OP_PAR expr T_CL_PAR
        {
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw= DessinImage::ptr(varimd->Pointer());
          draw->SetVectType((int)$5);
        }
        | VAR_IMAGEDRAW T_POINT T_SetLineThickness T_OP_PAR expr T_CL_PAR
        {
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw= DessinImage::ptr(varimd->Pointer());
          draw->SetLineThickness((int)$5);
        }
        | VAR_IMAGEDRAW T_POINT T_SetZoom T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          int xmin = (int)  $5;
          int ymin = (int)  $7;
          int zmin = (int)  $9;
          int xmax = (int) $11;
          int ymax = (int) $13;
          int zmax = (int) $15;

          DessinImage::ptr draw= DessinImage::ptr(varimd->Pointer());
          draw->SetZoom(xmin,ymin,zmin,xmax,ymax,zmax);

        }
        | VAR_IMAGEDRAW T_POINT T_SetWindowSize T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          int width  = (int) $5;
          int height = (int) $7;

          DessinImage::ptr draw= DessinImage::ptr(varimd->Pointer());
          draw->SetSize(width,height);
          draw->Update();


        }
        | VAR_IMAGEDRAW T_POINT T_drawcircle T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          DessinImage::ptr draw;
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          ClasseCouleur c;

          draw = DessinImage::ptr(varimd->Pointer());
          c.FixeValeur((int)$11,(int)$13,(int)$15);
          draw->DessineCercle( (int) $5, (int) $7, (int) $9, c);
        }
        | VAR_IMAGEDRAW T_POINT T_SetColormap T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
          Description: Set a user-defined colormap.
         **/
          GET_VARSTACK_VALUE(DessinImage, draw);
          InrImage::ptr colmap(driver.im_stack.GetLastImage());

          draw->SetUserColormap( colmap,  $7,  $9);
        }
        | VAR_IMAGEDRAW T_POINT T_setGLwin T_OP_PAR VAR_SURFDRAW T_CL_PAR
        {
          GET_VARSTACK_VALUE(Viewer3D,    surfd);
          GET_VARSTACK_VALUE(DessinImage, draw);

          draw->SetGLWindow(surfd);
        }
        | VAR_IMAGEDRAW T_POINT T_SetIsoContour T_OP_PAR expr T_COMMA var_image T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) isocontour index (0,1 or 2)
                (7) image to use for the isocontour
                (9) intensity value of the isocontour

            Description:
                Sets the image and intensity value of an isocontour in an 'image_draw' window.
            **/
          GET_VARSTACK_VALUE(InrImage,    im);
          GET_VARSTACK_VALUE(DessinImage, draw);

          draw->InitIsoContour( im, $9 , (int) $5 );
          draw->DrawIsoContour( (int) $5, true );
        }
        | VAR_IMAGEDRAW T_POINT T_SetIsoContour T_OP_PAR var_image T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) image to use for the isocontour
                (7) intensity value of the isocontour

            Description:
                Sets the image and intensity value of the isocontour number 0 in an 'image_draw' window.
            **/
          GET_VARSTACK_VALUE(InrImage,    im);
          GET_VARSTACK_VALUE(DessinImage, draw);

          draw->InitIsoContour( im, $7 , 0 );
          draw->DrawIsoContour( 0, true );
        }
        | VAR_IMAGEDRAW T_POINT T_SetIsoContourParam T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) isocontour index (0,1 or 2)
                (7) isocontour thickness
                (9) isocontour style

            Description:
                Sets the parameters (line style and thickeness)
                of an isocontour in an 'image_draw' window.
            **/
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;

          draw = DessinImage::ptr(varimd->Pointer());
          draw->SetIsoContourParam( (int)$5, (int)$7, (int)$9 );
        }
        | VAR_IMAGEDRAW T_POINT T_SetIsoContourParam T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5)  isocontour index (0,1 or 2)
                (7)  isocontour thickness
                (9)  isocontour style (0,1,2 for LineSolid, LineOnOffDash, or LineDoubleDash)
                (11) cap_style (0:CapNotLast, 1:CapButt, 2:CapRound, or 3:CapProjecting)
                (13) join_style (0:JoinMiter, 1:JoinRound, or 2:JoinBevel)

            Description:
                Sets the parameters (line style and thickeness)
                of an isocontour in an 'image_draw' window.
            **/
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;

          draw = DessinImage::ptr(varimd->Pointer());
          draw->SetIsoContourParam( (int)$5, (int)$7, (int)$9 );
          draw->SetLineAttributes( (int)$11, (int)$13);
        }
        | VAR_IMAGEDRAW T_POINT T_DrawIsoContour T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) isocontour index (0,1 or 2)
                (7) visible or not (0 or 1)

            Description:
                Sets the visibility of an isocontour in an 'image_draw' window.
            **/
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;

          draw = DessinImage::ptr(varimd->Pointer());
          draw->DrawIsoContour( (int) $5, (int) $7 );
        }
        | VAR_IMAGEDRAW T_POINT T_SetIsoContourColor T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) isocontour index (0,1 or 2)
                (7)  Red   component in [0,255]
                (9)  Green component in [0,255]
                (11) Blue  component in [0,255]

            Description:
                Sets the color as RGB of an isocontour in an 'image_draw' window.
            **/
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;
          draw = DessinImage::ptr(varimd->Pointer());
          draw->SetIsoContourColor( (int) $5, (unsigned char) $7,
                                              (unsigned char) $9,
                                              (unsigned char) $11);
        }
        | VAR_IMAGEDRAW T_POINT T_DrawAllContours T_OP_PAR expr T_CL_PAR
        {
            /**
            Parameters:
                (5) boolean parameter

            Description:
                Activates or desactivates the drawing of a series of isocontours.
            **/
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;
          draw = DessinImage::ptr(varimd->Pointer());
          draw->SetDrawAllContours( (int) $5 );
        }
        | VAR_IMAGEDRAW T_POINT T_AllContoursParam T_OP_PAR expr  T_COMMA expr T_CL_PAR
        {
            /**
            Parameters:
                (5) intensity step between isocontours
                (7) half size of the intensity range where to draw isocontours

            Description:
                Parameters for drawing a series of isocontours around the main isocontour.
            **/
          Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
          DessinImage::ptr draw;
          draw = DessinImage::ptr(varimd->Pointer());
          draw->AllContoursParam(  $5 , $7 );
        }
        | VAR_IMAGEDRAW T_POINT T_PaintCallback T_OP_PAR VAR_AMI_FUNCTION T_CL_PAR
        {
          GET_VARSTACK_VALUE(AMIFunction, func);
          GET_VARSTACK_VALUE(DessinImage, draw);

          draw->SetPaintCallback( (void*) CB_ParamWin, 
                                  (void*) func.get() );
          // may be a pb to call Paint() here since it will start another interpreter ??? to check
          //draw->Paint();
        }
        | VAR_IMAGEDRAW T_POINT T_SetOpacityImage T_OP_PAR var_image T_CL_PAR
        {
        /**
         Description:
            Setting the opacity image for the volume rendering.
            This image should have unsigned char values.
         **/
          GET_VARSTACK_VALUE(InrImage,    im);
          GET_VARSTACK_VALUE(DessinImage, imdraw);

          imdraw->SetVolRenOpacity( im.get());
        }
        | var_image T_POINT T_initvalue T_OP_PAR expr T_CL_PAR
        {
        /**
        Parameters:
          (5) expr:  value to init the image

        Description:
          Set the whole image to the same vector value .
        **/
          GET_VARSTACK_VALUE(InrImage, im);
          (im)->InitImage($5);
        }
        | var_image T_POINT T_initvalue T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
          (5) expr:  X coord of the init vector
          (7) expr:  Y coord of the init vector
          (9) expr:  Z coord of the init vector

        Description:
          Set the whole image to the same value.
        **/
          GET_VARSTACK_VALUE(InrImage,    im);
          im->InitImage($5,$7,$9);
        }
        | var_image T_POINT SET T_OP_PAR expr T_CL_PAR
        {
        /**
        Parameters:
          #1 expr:  scalar value

        Description:
        Set the current voxel (or pixel)
        to the specified value.
        The position of the current voxel can be set
        using 'setpos'.


        See also:
                setpos
        **/
          GET_VARSTACK_VALUE(InrImage, im);
          im->FixeValeur($5);
        }
        | var_image T_POINT SET T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {

        /**
        Parameters:
          #1 expr:  X coord of the vector value
          #2 expr:  Y coord of the vector value
          #3 expr:  Z coord of the vector value

        Description:
        Set the current voxel (or pixel)
        to the specified value.
        The position of the current voxel can be set
        using 'setpos'.


        See also:
                setpos
        **/
          GET_VARSTACK_VALUE(InrImage, im);
          im->VectFixeValeurs($5,$7,$9);
        }
        | var_image T_POINT SETPOS T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
          (5) expr:  X position
          (7) expr:  Y position
          (9) expr:  Z position

        Description:
          Set the current voxel (or pixel) of the image
          to the specified position.

        See also:
          set
        **/
          GET_VARSTACK_VALUE(InrImage, im);
          int x = (int) round((double)$5);
          int y = (int) round((double)$7);
          int z = (int) round((double)$9);
          Si im->CoordOK( x,y,z)
          Alors
            im->BufferPos(x,y,z);
          Sinon
            std::string tmp_string;
            tmp_string = (boost::format("setpos \t coord = (%1% %2% %3%) from (%4% %5% %6%) \n")%x%y%z % $5 % $7 % $9).str();
          driver.err_print(tmp_string);
          FinSi
        }
        |
        var_image T_POINT PutImage
        T_OP_PAR  var_image T_COMMA
           expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
          (1)  var_image: image to modify
          (5)  var_image: image to insert
          (7)  expr:      X position of inserted image
          (9)  expr:      Y position
          (11) expr:      Z position

        Description:
          Insert an image (#2) in a given image (#1)
          at the specified position in voxel coordinates,
          does not use the translation information from the image.

        Example(s):
          i = Image(FLOAT,10,10,10)
          j = Image(FLOAT,5,5,5)
          i.putimage(j,2,2,2)
        **/
          Variable<InrImage>::ptr  varim2( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim1( driver.var_stack.GetLastVar<InrImage>());
          InrImage::ptr  i1(varim1->Pointer());
          InrImage::ptr  i2(varim2->Pointer());
          Func_PutImage( i1.get(), i2.get(), (int) $7, (int) $9, (int) $11);
        }
        |
        var_image T_POINT PutImage  T_OP_PAR  var_image T_CL_PAR
        {
        /**
        Parameters:
          (1)  var_image: image to modify
          (5)  var_image: image to insert

        Description:
          Insert an image  in a given image,
          uses the translation and the voxel size information
          to calculate where to insert the image.

        Example(s):
          i = Image(FLOAT,10,10,10)
          j = Image(FLOAT,5,5,5)
          i.putimage(j,2,2,2)
        **/
          Variable<InrImage>::ptr  varim2( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim1( driver.var_stack.GetLastVar<InrImage>());
          InrImage::ptr  i1(varim1->Pointer());
          InrImage::ptr  i2(varim2->Pointer());
          float tx1,ty1,tz1;
          float tx2,ty2,tz2;

          i1->GetTranslation(tx1,ty1,tz1);
          i2->GetTranslation(tx2,ty2,tz2);
          Func_PutImage( i1.get(), i2.get(),
             (int) round((double)(tx2-tx1)/i1->VoxSizeX()),
             (int) round((double)(ty2-ty1)/i1->VoxSizeY()),
             (int) round((double)(tz2-tz1)/i1->VoxSizeZ()));
    }
    |
    var_image T_POINT T_SetName T_OP_PAR expr_string T_CL_PAR 
    {
      boost::shared_array<char> name($5);
      GET_VARSTACK_VALUE(InrImage, im);
      im->FixeNom( name.get());
    }
    |
    AnisoGS T_POINT TInit  T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
        /**
        Parameters:
            (5)  var_image: input image
            (7)  expr: sigma, standard deviation of the Gaussian smoothing used
                        to compute the gradient and principal curvature directions
            (9)  expr:  threshold on the magnitude of the gradient
            (11) expr: data attachment coefficient

        Description:
            Sets parameters for the anisotropic diffusion algorithm using
            Gauss-Seidel scheme.
        **/
        GET_VARSTACK_VALUE(InrImage, im);
        Func_InitAnisoGS( im.get(),
                          $7,  $9, $11);
        }
        |
        AnisoGS T_POINT TSetCoeff T_OP_PAR expr T_CL_PAR
        {
          Func_SetCoeffAnisoGS($5);
        }
        |
        AnisoGS T_POINT T_SetDistMap T_OP_PAR expr T_CL_PAR
        {
          Func_AnisoGS_SetDistanceMap((int)$5);
        }
        |
        AnisoGS T_POINT T_SetNoiseType T_OP_PAR expr T_CL_PAR
        {
          Func_AnisoGS_SetNoiseType((int)$5);
        }
        |
        AnisoGS T_POINT T_SetNoiseSD T_OP_PAR expr T_CL_PAR
        {
          Func_AnisoGS_SetNoiseSD($5);
        }
        |
        AnisoGS T_POINT T_SetMask T_OP_PAR var_image T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage, im);
          Func_AnisoGS_SetMask(im.get());
        }
        |
        AnisoGS T_POINT T_SetSRADROI T_OP_PAR var_image T_CL_PAR
        {
        /**
         Parameters:
            (5) image which defines a region of interest used
                to estimate the noise parameters in the
                Oriented Speckle Reducing Anisotropic Diffusion
         Description:
            Sets the region of interest (region of constant tissue in the image)
            and activates the Oriented Speckle Reducing Anisotropic Diffusion
         **/
          GET_VARSTACK_VALUE(InrImage, im);
          Func_AnisoGS_SetSRAD_ROI(im.get());
        }
        |
        AnisoGS T_POINT T_SetRNRADROI T_OP_PAR var_image T_CL_PAR
        {
        /**
         Parameters:
            (5) image which defines a region of interest used
                to estimate the noise parameters in the
                Rician Noise Reducing Anisotropic Diffusion
         Description:
            Sets the region of interest (region of constant tissue in the image)
            and activates the Rician Noise Reducing Anisotropic Diffusion
            used to reduce noise in MRI data.
         **/
          GET_VARSTACK_VALUE(InrImage, im);
          Func_AnisoGS_SetRNRAD_ROI(im.get());
        }
        |
        AnisoGS T_POINT T_SetRNRADROI_NEW T_OP_PAR var_image T_CL_PAR
        {
        /**
         Parameters:
            (5) image which defines a region of interest used
                to estimate the noise parameters in the
                Rician Noise Reducing Anisotropic Diffusion
         Description:
            Sets the region of interest (region of constant tissue in the image)
            and activates the Rician Noise Reducing Anisotropic Diffusion
            used to reduce noise in MRI data.
            New version of the filter, using local directional mean and variance
            for the diffusion matrix.
         **/
          GET_VARSTACK_VALUE(InrImage, im);
          Func_AnisoGS_SetRNRAD_ROI_NEW(im.get());
        }
        |
        AnisoGS T_POINT T_SetLocalStruct T_OP_PAR expr T_CL_PAR
        {
        /**
          Parameters:
            (5) expr: determine the local structure description
              0 for smoothed gradient and principal curv. directions
              1 for the local structure tensor

          Description:
            Sets the local structure mode.
         **/
      Func_SetLocalStructureMode((int)$5);
        }
        |
    AnisoGS T_POINT T_SetEigenMode T_OP_PAR expr T_CL_PAR
        {
        /**
          Parameters:
            (5) expr: option for selecting the eigenvalues for the
              diffusion matrix
              0: sums the 3D, 2D and 1D diffusions
                - lambda1 will depend on a coefficient based on a
                    3D neighborhood
                - lambda2 will be the sum of lambda1 + a coeff based
                    on a 2D neighborhood
                - lambda3 = lambda2 + coeff based on a linear neigh.
              1: take the maximum instead of the sum

          Description:
            Choose a way to select the diffusion matrix eigenvalues.
         **/
      Func_SetEigenvaluesMode((int)$5);
        }
        |
    AnisoGS T_POINT T_Setdt T_OP_PAR expr T_CL_PAR
        {
      Func_AnisoGS_Setdt($5);
        }
        |
    AnisoGS T_POINT T_Setneighborhood T_OP_PAR expr T_CL_PAR
        {
      Func_AnisoGS_Setneighborhood((int)$5);
        }
        |
        AnisoGS T_POINT TSetCoeff T_OP_PAR expr T_COMMA expr T_CL_PAR
        {

      Func_SetCoeffAnisoGS3D($5,$7);

    }
        |
        AnisoGS T_POINT TIterate
        {
      float  error;

      error = Func_ItereAnisoGS();

      //driver.res_print("Error in AnisoGS.Iterate ");
    }
        |
    AnisoGS T_POINT TEnd
        {
      int res;

      res = Func_EndAnisoGS();

    }
        |
        T_AnisoWeickert T_POINT TIterate
        {
      Func_IterateWeickert();
    }
        |
    T_AnisoWeickert T_POINT TEnd
        {

      Func_EndWeickert();

    }
        |
        T_AnisoCW T_POINT TIterate
        {
      Func_IterateWeickert();
    }
        |
    T_AnisoCW T_POINT TEnd
        {
      Func_EndWeickert();
    }
        |
        T_LevelSetsCURV T_POINT T_SetParam T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr  T_CL_PAR
        {
    //
    // Parameters:
    // 1. number of iterations
    // 2. coefficient of the data attachment
    // 3. curvature coefficient
    // 4. reinitialization frequency for the distance map

    Func_LevelSets_InitParam(
                 0.8,
                 (int) $5,
                 $7,
                 $9,
                 1,
                 (int) $11
                 );

        }
        |
        T_LevelSetsCURV T_POINT T_SetParam T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA
                                           expr T_COMMA expr T_COMMA expr  T_CL_PAR
        {
    //
    // Parameters:
    // 1. threshold on the cumulative histo of the grad norm for data attachment
    // 2. number of iterations
    // 3. coefficient of the data attachment
    // 4. curvature coefficient
    // 5. evolution step dt
    // 6. reinitialization frequency for the distance map


      Func_LevelSets_InitParam(
                   $5,
                   (int) $7,
                   $9,
                   $11,
                   $13,
                   (int) $15
                   );

        }
        |
        T_LevelSetsCURV T_POINT T_SetMeanCurv T_OP_PAR expr T_CL_PAR
        {
      Func_LevelSets_SetMeanCurv( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT T_SetAffineCurv T_OP_PAR expr T_CL_PAR
        {
      Func_LevelSets_SetAffineCurvature( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT T_SetBalloonScheme T_OP_PAR expr T_CL_PAR
        {
      Func_LevelSets_SetBalloonScheme( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT T_SetDistMethod T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetDMmethod( (int) $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetThreads T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetThreads( (int) $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetProbThreshold T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetProbThreshold( $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetILowTh T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetIntensityLowThreshold( $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetIHighTh T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetIntensityHighThreshold( $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetProbHighTh T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetProbabilityHighThreshold( $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetNumGaussians T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetNumGaussians( (int) $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetGaussian T_OP_PAR  expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      Func_LevelSets_SetGaussian( (int) $5, $7, $9);
    }
        |
        T_LevelSetsCURV T_POINT T_SetNumInitPoints T_OP_PAR  expr T_CL_PAR
        {
      Func_LevelSets_SetNumInitPoints( (int) $5);
    }
        |
        T_LevelSetsCURV T_POINT T_SetInitPoint T_OP_PAR  expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      Func_LevelSets_SetInitPoint( (int) $5, (int) $7, (int) $9, (int) $11, (int) $13);
    }
        |
        T_LevelSetsCURV T_POINT T_SetIsoContourBin T_OP_PAR  expr T_CL_PAR
        {
          Func_LevelSets_SetIsoContourBin( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT T_SetVelocity T_OP_PAR var_image T_COMMA expr T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage, im);
          Func_LevelSetsVelocity(im.get(),$7);
        }
        |
        T_LevelSetsCURV T_POINT T_SetExpansion T_OP_PAR  expr T_CL_PAR
        {
          Func_LevelSetsExpansion($5);
        }
        |
        T_LevelSetsCURV T_POINT T_SetExpansionImage T_OP_PAR  var_image T_CL_PAR
        {
          /** 
            Parameters:
              - input image: expansion image, expansion force for the level set evolution
            Description:
              Set the expansion to be the given image instead of a combination of Gaussian functions
              The expansion will then be multiplied by the expansion coefficient during the evolution.
              
          **/
          GET_VARSTACK_VALUE(InrImage, im);
          Func_LevelSetsExpansionImage( im.get());
        }
        |
        T_LevelSetsCURV T_POINT T_SetBandTube T_OP_PAR  expr T_COMMA expr T_CL_PAR
        {
          Func_LevelSetsBandAndTube((int)$5,(int)$7);
        }
        |
        T_LevelSetsCURV T_POINT T_SetCurvWeights T_OP_PAR var_image T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage, im);
          Func_LevelSetsSetCurvWeights( im.get());
        }
        |
        T_LevelSetsCURV T_POINT T_SetAdvectionField T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_CL_PAR
        {
          Variable<InrImage>::ptr  varim3( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim2( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim1( driver.var_stack.GetLastVar<InrImage>());
          Func_LevelSetsSetAdvectionField(
                varim1->Pointer().get(),
                varim2->Pointer().get(),
                varim3->Pointer().get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetCurvature T_OP_PAR var_image T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage, im);
          Func_LevelSetsGetCurvatureData( im.get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetDistMap T_OP_PAR var_image T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage, im);
          Func_LevelSetsGetDistanceMap( im.get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetAdvection T_OP_PAR var_image T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage, im);
          Func_LevelSetsGetAdvectionData( im.get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetSkeleton T_OP_PAR var_image T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage, im);
          Func_LevelSetsGetSkeleton( im.get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetVelocity T_OP_PAR var_image T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage, im);
          Func_LevelSetsGetVelocityData( im.get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetExpansion T_OP_PAR var_image T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage, im);
          Func_LevelSetsGetExpansionData( im.get());
        }
        |
        T_LevelSetsCURV T_POINT T_GetCurvature T_OP_PAR T_NULL T_CL_PAR
        {
          Func_LevelSetsGetCurvatureData( NULL );
        }
        |
        T_LevelSetsCURV T_POINT T_GetAdvection T_OP_PAR T_NULL T_CL_PAR
        {
          Func_LevelSetsGetAdvectionData( NULL);
        }
        |
        T_LevelSetsCURV T_POINT T_GetVelocity T_OP_PAR T_NULL T_CL_PAR
        {
          Func_LevelSetsGetVelocityData( NULL);
        }
        |
        T_LevelSetsCURV T_POINT T_SaveDistMap T_OP_PAR expr T_CL_PAR
        {
          Func_LevelSetsSaveDistMap( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT T_SaveSecDerGrad T_OP_PAR expr T_CL_PAR
        {
          Func_LevelSetsSaveSecDerGrad( (int) $5);
        }
        |
        T_LevelSetsCURV T_POINT TIterate
        {
          $$ = Func_LevelSets_Iterate();
        }
        |
        T_LevelSetsCURV T_POINT TEnd
        {
          Func_LevelSets_End();
        }
        | var_image T_POINT T_save expr_string
        {
        /**
        Parameters
          (4) expr_string:  image name

        Description:
          Save the image to the disk, using the specified
          image name.
          The output format depends on the image type
          and on the filename extension.
          For saving images with standard 2D image format
          (jpeg, gif, etc...) you need to have a RGB image.


        Example(s):

          rgb_im = (RGB) im
          im.save "image.jpg"


        See also:
          image_cast
        **/
          GET_VARSTACK_VALUE(InrImage, im);
          boost::shared_array<char> filename($4);
          im->Sauve(filename.get());
        }
        | var_image T_POINT T_normalize
        {
        /**
        Description:
          Normalizes a vector field given by a vectorial image.

        Example(s):
          v1.normalize

        **/
      GET_VARSTACK_VALUE(InrImage, im);
      Func_Normalize((im.get()));
    }
    |
    var_image T_POINT T_OrientField T_OP_PAR var_image T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im2);
      GET_VARSTACK_VALUE(InrImage, im1);
      Func_OrientField( im1.get() , im2.get() );
    }
    |
    var_image T_POINT T_OrientPositive T_OP_PAR var_image T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im2);
      GET_VARSTACK_VALUE(InrImage, im1);
      Func_OrientPositive( im1.get(), im2.get());
    }
    | var_surface T_POINT T_save expr_string
    {
      boost::shared_array<char> filename($4);
      GET_VARSTACK_VALUE(SurfacePoly, s);

      s->Write(filename.get());
    }
    |
    var_surface T_POINT T_WriteCTALine  expr_string
    {
    /**
    Parameters:
        (1) input polydata
        (4) filename
    Description:
        Save the first line of the polydata in text format
    **/
      boost::shared_array<char> filename($4);
      GET_VARSTACK_VALUE(SurfacePoly, surf);
      Func_WriteCTALine(surf.get(),filename.get());

    }
    | var_surface T_POINT T_OwnMaterial T_OP_PAR expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(SurfacePoly, s);

      s->SetOwnMaterial( (int) $5);

    }
    | var_surface T_POINT T_SetAmbient T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(SurfacePoly, s);
      s->GetMaterial()._ambient.FixeValeur((int) $5,(int) $7,(int) $9);

    }
    | var_surface T_POINT T_SetDiffuse T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {

      GET_VARSTACK_VALUE(SurfacePoly, s);
      s->GetMaterial()._diffuse.FixeValeur((int) $5,(int) $7,(int) $9);

    }
    | var_surface T_POINT T_SetSpecular T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {

      GET_VARSTACK_VALUE(SurfacePoly, s);
      s->GetMaterial()._specular.FixeValeur((int) $5,(int) $7,(int) $9);

    }
    |
    var_surface T_POINT T_SetShininess T_OP_PAR expr T_CL_PAR
    {

      GET_VARSTACK_VALUE(SurfacePoly, s);
      s->GetMaterial()._shininess= $5;

    }
    |
    var_surface T_POINT T_SetOpacity T_OP_PAR expr T_CL_PAR
    {

      GET_VARSTACK_VALUE(SurfacePoly, s);
      s->GetMaterial()._opacity= $5;

    }
    |
    var_surface T_POINT T_SetVisible T_OP_PAR expr T_CL_PAR
    {
      /**
      Description:
        Sets the object visible or not visible in the scene.
      **/
      GET_VARSTACK_VALUE(SurfacePoly, s);
      s->SetVisible( (int) $5);
    }
    |
    var_surface T_POINT T_SetColorMaterial T_OP_PAR expr T_CL_PAR
    {
        /**
        Description:
          Enable/Disable colormaterial for the associated surface.
        **/

      GET_VARSTACK_VALUE(SurfacePoly, s);

      s->GetMaterial()._colormaterial = (unsigned char) ($5>0.5);

    }
    |
      var_surface T_POINT T_SetColorOpacity T_OP_PAR expr T_CL_PAR
    {
      /**
      Parameters:
        (1) surface object
        (5) alpha value
    
      Description:
        to define the transparency to the RGB color
        associated per each vertex (actived with Enable ColorMaterial)
      **/

      GET_VARSTACK_VALUE(SurfacePoly, s);

      s->SetColorOpacity($5);

    }
    | var_surface T_POINT T_SetColor T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(SurfacePoly, s);

      int n;
      Pour(n,0,s->NbPoints()-1)
        (*s)[n].SetColor((unsigned char) $5,
                 (unsigned char) $7,
                 (unsigned char) $9);
      FinPour

      s->SetColorMaterial(true);
      s->GLRecomputeList(  );

    }
    | var_surface T_POINT T_SetPointsColors T_OP_PAR var_image  T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage,    im);
      GET_VARSTACK_VALUE(SurfacePoly, s);

      s->SetPointsColors( im.get() );

    }
    | var_surface T_POINT T_SetColors T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      InrImage::ptr i (driver.im_stack.GetLastImage());
      // TODO: use smart pointer to image in SetColors ...
      s->SetColors( i.get() , $7, $9);
    }
    | var_surface T_POINT T_SetColors T_OP_PAR expr_image  T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      InrImage::ptr i (driver.im_stack.GetLastImage());
      s->SetColors( i.get() );

    }
    | var_surface T_POINT T_Statistics T_OP_PAR var_image  T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im);
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      s->Statistics( im.get() );

    }
    | var_surface T_POINT T_mergepoints T_OP_PAR expr T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      s->MergePoints($5);
    }
    | var_surface T_POINT T_Triangulate
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      s->Triangulate();
    }
    | var_surface T_POINT T_curvatures T_OP_PAR expr T_CL_PAR
    {

      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr surf (surfdraw->Pointer());

      float        depth = $5;
      std::string  name;
      int          n;

      // param 1: depth (neighborhood)
      //

      // Create images for the curvatures and their directions
      InrImage::ptr Icmin;
      InrImage::ptr Icmax;
      InrImage::ptr Idmin;
      InrImage::ptr Idmax;

      n = surf->GetNumberOfPoints();

      Icmin = InrImage::ptr(new InrImage(n,1,1,WT_FLOAT,"mincurv.ami.gz"));
      Icmax = InrImage::ptr(new InrImage(n,1,1,WT_FLOAT,"maxcurv.ami.gz"));

      Idmin = InrImage::ptr(new InrImage(n,1,1,3,WT_FLOAT,"mincurvdir.ami.gz"));
      Idmax = InrImage::ptr(new InrImage(n,1,1,3,WT_FLOAT,"maxcurvdir.ami.gz"));

      surf->ComputeCurvatures(Icmin.get(),Icmax.get(),
                              Idmin.get(),Idmax.get(), 
                              (int) depth);

      BasicVariable::ptr var;

      name = (boost::format("%s_cmin") % surfdraw->Name()).str();
      Vars.AddVar<InrImage>(name,Icmin);

      name = (boost::format("%s_cmax") % surfdraw->Name()).str();
      Vars.AddVar<InrImage>(name,Icmax);

      name = (boost::format("%s_dmin") % surfdraw->Name()).str();
      Vars.AddVar<InrImage>(name,Idmin);

      name = (boost::format("%s_dmax") % surfdraw->Name()).str();
      Vars.AddVar<InrImage>(name,Idmax);

    }
    | var_surface T_POINT T_Displace T_OP_PAR expr_image T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());

      InrImage::ptr i (driver.im_stack.GetLastImage());
      s->DisplacePoints( i.get() );
    }
    | var_surface T_POINT T_Translate T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());

      s->Translate( $5,$7,$9 );

    }
    | var_surface T_POINT T_Scale T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());

      s->Scale( $5,$7,$9,0 );

    }
    | var_surface T_POINT T_SetLineWidth T_OP_PAR expr T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      int          w = (int) $5;

      Si w<1  AlorsFait w=1;
      Si w>10 AlorsFait w=10;

      s->_line_width = w;

    }
    | var_surface T_POINT  T_RemoveLine T_OP_PAR  expr T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());

      s->RemoveLine((int)$5);
      s->GLRecomputeList();

    }
    | var_surface T_POINT T_SelectLines T_OP_PAR expr_image T_CL_PAR
    {
    /**
      Parameters:
        image expression
      Description:
        Select lines based on an image
        The image is 1D of size the number of lines
        if the value is > 0.5, then select the corresponding line
    **/

      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      InrImage::ptr im (driver.im_stack.GetLastImage());

      s->SelectLines(im.get());
      s->GLRecomputeList();
    }
    | var_surface T_POINT T_RemoveSelection
    {
    /**
      Description: Remove selected lines
    **/
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());

      s->RemoveSelection();
      s->GLRecomputeList();
    }
    | var_surface T_POINT T_Recompute
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      s->GLRecomputeList();

    }
    | var_surface T_POINT T_Normals
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      s->RecomputeNormals();

    }
    | var_surface T_POINT T_InvertNormals
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());

      s->InvertNormals();

    }
    | var_surface T_POINT  T_vtkSmooth T_OP_PAR  expr T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());

      Func_ApplyvtkSmooth(s.get(), (int) $5);
      //      s->GLRecomputeList();

    }
    | var_surface T_POINT  T_vtkWindowedSinc T_OP_PAR  expr T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());

      Func_vtkWindowedSinc(s.get(), (int) $5);
      //      s->GLRecomputeList();

    }
    | var_surface T_POINT  T_vtkDecimate
    {

      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      SurfacePoly* surf;

      surf = Func_decimate(s.get());
      Si surf != NULL Alors

        // Non correct: supprimer la variable et la re-creer:
        // car pb si la variable est deja utilisee ...
        //          $1->Init(type_surface,$1->Name(), surf);
        //      delete surf_init;
      Sinon
        fprintf(stderr,"improcess.y: var_surface.T_vtkDecimate \t error \n ");
          FinSi


      }
      | var_surface T_POINT T_setminCC T_OP_PAR expr T_CL_PAR
      {
        /**
        Description:
          Sets a threshold for drawing connected components
          bigger.
        **/
          Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
          SurfacePoly::ptr s (surfdraw->Pointer());
          GLuint _SURFACE;

          Si Non(s->_cc_calculees) Alors
            s->CalculCC();
          FinSi
          s->GLSurfaceMinThCC( _SURFACE, (int) $5);

        }
        | var_surface T_POINT T_drawCC T_OP_PAR expr T_CL_PAR
        {
        /**
        Description:
        Draw one connected component only
        **/
          Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
          SurfacePoly::ptr s (surfdraw->Pointer());
          GLuint _SURFACE;

            //          Si _type_surface == SURFACE_POLY Alors
            Si Non(s->_cc_calculees) Alors
              s->CalculCC();
            FinSi
            s->GLSurfaceDrawOnlyCC( _SURFACE, (int) $5);
            //          FinSi

        }
        | var_surface T_POINT T_drawCC T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
        /**
        Description:
        Activate/Desactivate Drawing of one connected components
        **/
          Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
          SurfacePoly::ptr s (surfdraw->Pointer());
          GLuint _SURFACE;

      //          Si _type_surface == SURFACE_POLY Alors
            Si Non(s->_cc_calculees) Alors
              s->CalculCC();
            FinSi
            s->GLSurfaceSetDrawCC( _SURFACE, (int) $5,(int) $7);
        //          FinSi

    }
    | var_surface T_POINT T_AddPoint T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      s->AddPoint($5,$7,$9);
    }
    | var_surface T_POINT T_NewLine
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      s->NewLine();
    }
    | var_surface T_POINT T_LineAddPointNumber T_OP_PAR expr T_CL_PAR
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      s->LineAddPointNumber( (int) $5 );
    }
    | var_surface T_POINT T_EndLine
    {
      Variable<SurfacePoly>::ptr surfdraw(driver.var_stack.GetLastVar<SurfacePoly>());
      SurfacePoly::ptr s (surfdraw->Pointer());
      s->EndLine();
    }
    | T_SetFluidNavFile T_OP_PAR expr_string T_CL_PAR
    {
      if (strlen($3)<255) {
        strcpy(AMIFluid::FLUID_NAVIGATION_FILE,$3);
      } else
        fprintf(stderr,"SetFluidNavFile() \t File too long \n");
      delete [] $3;
    }
    | T_DrawEarthCoord T_OP_PAR VAR_IMAGEDRAW T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA
                                              expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(DessinImage,di);
      float minlat  = $5;
      float maxlat  = $7;
      float latstep = $9;
      float latsmallsteps = $11;
      float minlon  = $13;
      float maxlon  = $15;
      float lonstep = $17;
      float lonsmallsteps = $19;

      float  lat,lon;
      float  X,Y;
      float  posx1=0,posy1=0;
      int    pos1_OK,pos2_OK;
      float  posx2=0,posy2=0;
      int    len;
      AMIFluid::TNavig nav_params;
      int    i_offset, j_offset;
      int    type=1; // Africa
      char typestring[2][255] = {"NAtl","AfGG"};

      InrImage::ptr           im    = di->GetImage();
      DessinImageParametres* param = di->GetParam();

      AMIFluid::InitCoordinates(i_offset,j_offset,nav_params, typestring[type]);
      minlat  *= PI/180.0;
      maxlat  *= PI/180.0;
      minlon  *= PI/180.0;
      maxlon  *= PI/180.0;
      latstep *= PI/180.0;
      lonstep *= PI/180.0;

      latsmallsteps *= PI/180.0;
      lonsmallsteps *= PI/180.0;

      // Lattitude lines
      for(lat=minlat;lat<=maxlat;lat+=latstep) {
        pos1_OK=0;
        for(lon=minlon;lon<=maxlon;lon+=lonsmallsteps)
          {
        AMIFluid::COOCAR1(lat,lon,X,Y,len,nav_params);
        if (len==0) {
          //          printf("len==0\n");
          X=X-i_offset;
          Y=Y-j_offset;
          posx2=(X-im->TrX())/im->VoxSizeX();
          posy2=(Y-im->TrY())/im->VoxSizeY();

          pos2_OK =  ((posx2>=param->_Zoom._xmin)&&(posx2<=param->_Zoom._xmax)&&
                  (posy2>=param->_Zoom._ymin)&&(posy2<=param->_Zoom._ymax));
          if (pos1_OK&&pos2_OK) {
            if (fabsf(lat)>1E-5)
              di->FixeParametresLigne( 1, wxSOLID, wxCAP_ROUND, wxJOIN_MITER);
            else
              di->FixeParametresLigne( 1, wxDOT, wxCAP_ROUND, wxJOIN_MITER);
            di->DrawLineZ(posx1,posy1,posx2,posy2);
          }
        }
        else pos2_OK=0;

        posx1=posx2;
        posy1=posy2;
        pos1_OK=pos2_OK;
          }
      }

      // Longitude Lines
      for(lon=minlon;lon<=maxlon;lon+=lonstep) {
        pos1_OK=0;
        for(lat=minlat;lat<=maxlat;lat+=latsmallsteps)
          {
        AMIFluid::COOCAR1(lat,lon,X,Y,len,nav_params);
        if (len==0) {
          //          printf("len==0\n");
          X=X-i_offset;
          Y=Y-j_offset;
          posx2=(X-im->TrX())/im->VoxSizeX();
          posy2=(Y-im->TrY())/im->VoxSizeY();

          pos2_OK =  ((posx2>=param->_Zoom._xmin)&&(posx2<=param->_Zoom._xmax)&&
                  (posy2>=param->_Zoom._ymin)&&(posy2<=param->_Zoom._ymax));
          if (pos1_OK&&pos2_OK) {
            if (fabsf(lon)>1E-5)
              di->FixeParametresLigne( 1, wxSOLID, wxCAP_ROUND, wxJOIN_MITER);
            else
              di->FixeParametresLigne( 1, wxDOT, wxCAP_ROUND, wxJOIN_MITER);
            di->DrawLineZ(posx1,posy1,posx2,posy2);
          }
        }
        else pos2_OK=0;

        posx1=posx2;
        posy1=posy2;
        pos1_OK=pos2_OK;
          }
      }

      }
      | var_surface T_POINT T_ElevateMesh T_OP_PAR expr_image T_CL_PAR
      {
      /**
      Description:
        ElevateMesh can have different behaviors depending on the type of
        the input image. In any case, it scans all the points of the mesh,
        and uses their 2 first coordinates (x,y) to deduce a position in
        the input image, and interpolate a value.
          - if the image is scalar, the value of the image at position
          (x,y) is used to set the elevation of the mesh (z coordinate).
          - if the image contains 2D vectors, the vectors are used to set
          the (x,y) coordinates of each vertex of the mesh.
          - if the image contains 3D vectors, those vectors are used
          to set new positions (x,y,z) for each vertex of the mesh.

      Parameters:
      (1) input surface
      (5) input image

      Example(s):
        s = CreateFlatMesh(i)
        ipos = Altitude2Postion(i,1)
        s.ElevateMesh(ipos)

      See also:
        CreateFlatMesh, ElevateMesh
        changes the position of the nodes of a 3D mesh

      **/
          GET_VARSTACK_VALUE(SurfacePoly,s);
          InrImage::ptr im ( driver.im_stack.GetLastImage());
          AMIFluid::Func_ElevateMesh(s.get(),im.get());
        }
        | VAR_SURFDRAW T_POINT T_rotate T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          GET_VARSTACK_VALUE(Viewer3D,sdraw);

          sdraw->GetCanvas()->UserRotate($5,$7,$9);
          sdraw->Paint();
        }
        | VAR_SURFDRAW T_POINT T_addobj T_OP_PAR surface T_CL_PAR
        {
          GET_VARSTACK_VALUE(Viewer3D,sdraw);
          SurfacePoly::ptr surf = SurfacePoly::ptr(driver.surf_stack.GetLastSurf());

          sdraw->GetCanvas()->AddSurface(surf);
          sdraw->Paint();
        }
        | VAR_SURFDRAW ADD_ASSIGN var_surface
        {
          GET_VARSTACK_VALUE(SurfacePoly,surf);
          GET_VARSTACK_VALUE(Viewer3D,   sdraw);

          sdraw->GetCanvas()->AddSurface( surf);
          //sdraw->Paint();
        }
        | VAR_SURFDRAW SUB_ASSIGN var_surface
        {
          GET_VARSTACK_VALUE(SurfacePoly,surf);
          GET_VARSTACK_VALUE(Viewer3D,   sdraw);

          sdraw->GetCanvas()->RemoveSurface(surf);
          sdraw->Paint();
        }
        | VAR_SURFDRAW T_POINT T_Remove T_OP_PAR var_surface T_CL_PAR
        {
          /**
            Description: Removes the surface without swapping the 3D buffer
          **/
          GET_VARSTACK_VALUE(SurfacePoly,surf);
          GET_VARSTACK_VALUE(Viewer3D,   sdraw);

          sdraw->GetCanvas()->RemoveSurface(surf);
          sdraw->Paint(false);
        }
        | VAR_SURFDRAW T_POINT T_SwapBuffers
        {
          /**
            Description:  Swaps the 3D buffer
          **/
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw(varsurfd->Pointer());

          sdraw->GetCanvas()->AfficheBuffer();
        }
        | VAR_SURFDRAW T_POINT T_drawCC T_OP_PAR expr T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());

          sdraw->GetCanvas()->DessineSurfaceCC ( (int) $5 );
          sdraw->Paint();
        }
        | VAR_SURFDRAW T_POINT T_drawCC T_OP_PAR expr T_COMMA expr T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());

          sdraw->GetCanvas()->DessineSurfaceCC( (int) $5, (int) $7);
          sdraw->Paint();
        }
        | VAR_SURFDRAW T_POINT T_setcurrentobj T_OP_PAR expr T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());

          Si sdraw->GetCanvas()->SetCurrentObject( (int) $5 ) Alors
            sdraw->Paint();
          Sinon
            fprintf(stderr," Incorrect index \n");
          FinSi
        }
        | VAR_SURFDRAW T_POINT COMPARE T_OP_PAR VAR_SURFDRAW T_CL_PAR
        {
          GET_VARSTACK_VALUE(Viewer3D,sdraw2);
          GET_VARSTACK_VALUE(Viewer3D,sdraw1);

          sdraw1->AddCompSurf(sdraw2);
        }
        | VAR_SURFDRAW T_POINT SETVECTOR T_OP_PAR NUMBER T_COMMA var_image T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage,im);
          GET_VARSTACK_VALUE(Viewer3D,draw);

          switch ((int) $5) {
          case 1:
            draw->GetCanvas()->SetVectors1( im);
            break;
          case 2:
            draw->GetCanvas()->SetVectors2( im);
            break;
          }
        }
        | VAR_SURFDRAW T_POINT T_ShowSection T_OP_PAR expr T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr draw (varsurfd->Pointer());
          int num = (int) $5;
          InrImage::ptr im ( driver.im_stack.GetLastImage());
          int orientation = (int) $9;
          int pos = (int) $11;
          float Imin = $13;
          float Imax = $15;

          draw->GetCanvas()->ShowFreeSection(num,im.get(),orientation,pos,Imin,Imax);

        }
        | VAR_SURFDRAW T_POINT T_HideSection T_OP_PAR expr T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr draw (varsurfd->Pointer());
          int num = (int) $5;
    
          draw->GetCanvas()->HideFreeSection(num);
    
        }
        | VAR_SURFDRAW T_POINT T_PrintMatrices
        {
          GET_VARSTACK_VALUE(Viewer3D,v);
          v->GetCanvas()->PrintMatrices();
        }
        | VAR_SURFDRAW T_POINT T_SetTransform T_OP_PAR gltransform T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          GLTransfMatrix* tr = (GLTransfMatrix*) driver.gltransf_stack.GetLastMatrix();
          Viewer3D_ptr sdraw (varsurfd->Pointer());
          sdraw->GetCanvas()->SetObjectTransform(*tr);
              sdraw->Paint();
          delete tr;
        }
        | VAR_SURFDRAW T_POINT T_SetTransform T_OP_PAR gltransform T_COMMA expr T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          GLTransfMatrix* tr = (GLTransfMatrix*) driver.gltransf_stack.GetLastMatrix();
          Viewer3D_ptr sdraw (varsurfd->Pointer());
          sdraw->GetCanvas()->SetObjectTransform(*tr);
          if ($7>0.5) sdraw->Paint();
          delete tr;
        }
        | VAR_SURFDRAW T_POINT T_Paint
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());
          sdraw->Paint();
          sdraw->Update();
          // process all pending events ...
          while (GB_wxApp->Pending()) {
            if (GB_verbose) printf("Dispatching event on GB_wxApp \n");
            GB_wxApp->Dispatch();
          }
        }
        | VAR_SURFDRAW T_POINT T_SetLightAmbient T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());
          int lightnumber = (int) $5;
          int r = (int) $7;
          int g = (int) $9;
          int b = (int) $11;
          if (lightnumber<MAX_LIGHTS) {
                sdraw->GetCanvas()->GetLight(lightnumber)._ambient.FixeValeur(r,g,b);
            sdraw->Paint();
          }
        }
        | VAR_SURFDRAW T_POINT T_SetLightDiffuse T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());
          int lightnumber = (int) $5;
          int r = (int) $7;
          int g = (int) $9;
          int b = (int) $11;
          if (lightnumber<MAX_LIGHTS) {
                sdraw->GetCanvas()->GetLight(lightnumber)._diffuse.FixeValeur(r,g,b);
            sdraw->Paint();
          }
        }
        | VAR_SURFDRAW T_POINT T_SetLightSpecular T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());
          int lightnumber = (int) $5;
          int r = (int) $7;
          int g = (int) $9;
          int b = (int) $11;
          if (lightnumber<MAX_LIGHTS) {
                sdraw->GetCanvas()->GetLight(lightnumber)._specular.FixeValeur(r,g,b);
            sdraw->Paint();
          }
        }
        | VAR_SURFDRAW T_POINT T_SetBackground T_OP_PAR expr T_COMMA expr T_COMMA expr  T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());
          sdraw->GetCanvas()->SetBG((int)$5,(int)$7,(int)$9);
          sdraw->Paint();
        }
        | VAR_SURFDRAW T_POINT T_Normalize
        {
        /**
          Description:
            Normalizes the 3D view based on the limits in space of the current objects
        **/
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());
          sdraw->GetCanvas()->Normalize();
        }
        | VAR_SURFDRAW T_POINT T_Center
        {
        /**
          Description:
            Centers the 3D view based on the limits in space of the current objects
        **/
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());
          sdraw->GetCanvas()->Center();
        }
        | VAR_SURFDRAW T_POINT T_SetWindowSize T_OP_PAR expr T_COMMA expr   T_CL_PAR
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          Viewer3D_ptr sdraw (varsurfd->Pointer());
          sdraw->SetSize((int) $5, (int) $7);
          sdraw->Paint();
          sdraw->Update();
          // process all pending events ...
          while (GB_wxApp->Pending()) {
            if (GB_verbose) printf("Dispatching event on GB_wxApp \n");
            GB_wxApp->Dispatch();
          }
        }
        |
        T_struct_tensor T_OP_PAR var_image T_COMMA expr T_COMMA expr T_CL_PAR
        {
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          Func_StructureTensor(im.get(),
                   varim->Name().c_str(),
                   $5, $7, NULL);
        }
        |
        T_struct_tensor T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr_image T_CL_PAR
        {
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          InrImage::ptr mask ( driver.im_stack.GetLastImage());

          Func_StructureTensor(
            im.get(),
            varim->Name().c_str(),
            $5, $7, mask.get());
        }
        |
        T_StructTensorH T_OP_PAR var_image T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
            (3) Input image
            (5) Numerical expression: sigma, Gaussian standard deviation
            (7) Numerical expression: beta, Hessian matrix coefficient
        Description:
            Computation of a Tensor that combines the standard
            gradient based structure tensor and the square
            of the Hessian matrix
            Computes eigenvalues and eigenvectors of the tensor
            and saves them in images:
            i_STHvap1, i_STHvap2, i_STHvap3
            i_STHvep1, i_STHvep2, i_STHvep3
        **/
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          Func_StructureTensorHessian(
            im.get(),
            varim->Name().c_str(),
            $5, $7, NULL);
        }
        |
        T_StructTensorH T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr_image T_CL_PAR
        {
        /**
        Parameters:
            (3) Input image
            (5) Numerical expression: sigma, Gaussian standard deviation
            (7) Numerical expression: beta, Hessian matrix coefficient
            (9) IMAGE: mask of the places to compute the tensor
        Description:
            Computation of a Tensor that combines the standard
            gradient based structure tensor and the square
            of the Hessian matrix
            Computes eigenvalues and eigenvectors of the tensor
            and saves them in images:
            i_STHvap1, i_STHvap2, i_STHvap3
            i_STHvep1, i_STHvep2, i_STHvep3
        **/
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          InrImage::ptr mask ( driver.im_stack.GetLastImage());

          Func_StructureTensorHessian(
            im.get(),
            varim->Name().c_str(),
            $5, $7, mask.get());
        }
        |
        T_StructTensorH T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr_image T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
            (3) Input image
            (5) Numerical expression: sigma, Gaussian standard deviation
            (7) Numerical expression: beta, Hessian matrix coefficient
            (9) IMAGE: mask of the places to compute the tensor
            (11) NUM: boolean for saving the gradient vector
        Description:
            Computation of a Tensor that combines the standard
            gradient based structure tensor and the square
            of the Hessian matrix
            Computes eigenvalues and eigenvectors of the tensor
            and saves them in images:
            i_STHvap1, i_STHvap2, i_STHvap3
            i_STHvep1, i_STHvep2, i_STHvep3
            i_STHgrad
        **/
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          InrImage::ptr mask (driver.im_stack.GetLastImage());
          int save_grad = (int) $11;

          Func_StructureTensorHessian(im.get(),
                   varim->Name().c_str(),
                   $5, $7, mask.get(), save_grad);
        }
        |
        T_HessianMatrix T_OP_PAR var_image T_COMMA expr  T_CL_PAR
        {
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          Func_HessianMatrix(im.get(),
                 varim->Name().c_str(),
                 $5,   // sigma
                 0,   // gamma
                 NULL  // mask
                 );
        }
        |
        T_HessianMatrix T_OP_PAR var_image T_COMMA expr  T_COMMA expr_image T_CL_PAR
        {
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          InrImage::ptr mask ( driver.im_stack.GetLastImage());

          Func_HessianMatrix(im.get(),
                 varim->Name().c_str(),
                 $5,   // sigma
                 0,   // gamma
                 mask.get()  // mask
                 );
        }
        |
        T_HessianMatrix T_OP_PAR var_image T_COMMA expr T_COMMA expr T_CL_PAR
        {
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          Func_HessianMatrix(im.get(),
                 varim->Name().c_str(),
                 $5,   // sigma
                 $7,   // gamma
                 NULL  // mask
                 );
        }
        |
        T_HessianMatrix T_OP_PAR var_image T_COMMA expr T_COMMA expr  T_COMMA expr_image T_CL_PAR
        {
      /**
        Description:
          Computes the Hessian Matrix in 3D
        Parameters:
          - input image
          - Gaussian kernel standard deviation
          - Gamma normalization parameter
          - Mask image
      **/
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          InrImage::ptr mask (driver.im_stack.GetLastImage());

          Func_HessianMatrix(im.get(),
                 varim->Name().c_str(),
                 $5,   // sigma
                 $7,   // gamma
                 mask.get()  // mask
                 );
        }
        |
        T_Derivatives T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr  T_CL_PAR
        {
        /**
        Parameters:
          (3)  input image
          (5)  expr: Gaussian standard deviation
          (7)  expr: normalization parameter gamma
          (9)  choose for 1st eigenvalue/eigenvector
          (11) choose for 1st eigenvalue/eigenvector
          (13) choose for 1st eigenvalue/eigenvector
          (15) choose for gradient vector


        Description:
            Compute information for local first and second order derivatives
         **/
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          Func_Derivatives(im.get(),
               varim->Name().c_str(),
               $5,   // sigma
               $7,   // gamma
               NULL,
               (int)$9,   // 1st eigenvalue | eigenvector?
               (int)$11,  // 2nd eigenvalue | eigenvector?
               (int)$13,  // 3rd eigenvalue | eigenvector?
               (int)$15  // Gradient vector?
               );
        }
        |
        T_Derivatives T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr_image T_CL_PAR
        {
          GET_VARSTACK_VAR_VAL(InrImage,varim,im);
          InrImage::ptr mask (driver.im_stack.GetLastImage());

          Func_Derivatives(im.get(),
               varim->Name().c_str(),
               $5,   // sigma
               $7,   // gamma
               mask.get(),  // mask
               (int)$9,   // 1st eigenvalue | eigenvector?
               (int)$11,   // 2nd eigenvalue | eigenvector?
               (int)$13,   // 3rd eigenvalue | eigenvector?
               (int)$15   // Gradient vector?
               );
        }
        |
        T_HessianEVal T_OP_PAR var_image T_COMMA expr T_COMMA
                      expr  T_COMMA expr_image T_COMMA expr T_CL_PAR
        {
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          InrImage::ptr mask (driver.im_stack.GetLastImage());

          Func_HessianVap(im.get(),
              varim->Name().c_str(),
              $5,   // sigma
              $7,   // gamma
              mask.get(),
              (int) $11 // eigenvalue number
              );
        }
        |
        T_curvatures T_OP_PAR var_image T_COMMA expr  T_CL_PAR
        {
          GET_VARSTACK_VAR_VAL(InrImage, varim, im);
          Func_Curvatures(im.get(), varim->Name().c_str(), $5);
        }
        |
        T_Eigen3D T_OP_PAR ASTRING T_COMMA
                      var_image T_COMMA var_image T_COMMA
                  var_image T_COMMA var_image T_COMMA
                  var_image T_COMMA var_image T_COMMA
                      expr_image
                  T_CL_PAR
        {
          Variable<InrImage>::ptr  varim6( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim5( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim4( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim3( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim2( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim1( driver.var_stack.GetLastVar<InrImage>());
          InrImage::ptr mask ( driver.im_stack.GetLastImage());

          Func_Eigen3D(
               (char*) $3,
               varim1 ->Pointer().get(),
               varim2 ->Pointer().get(),
               varim3 ->Pointer().get(),
               varim4 ->Pointer().get(),
               varim5 ->Pointer().get(),
               varim6 ->Pointer().get(),
               mask.get()  // mask
               );
        }
        |
        T_Eigen3D T_OP_PAR ASTRING T_COMMA
                      var_image T_COMMA var_image T_COMMA
                  var_image T_COMMA var_image T_COMMA
                  var_image T_COMMA var_image
                  T_CL_PAR
        {

          Variable<InrImage>::ptr  varim6( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim5( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim4( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim3( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim2( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim1( driver.var_stack.GetLastVar<InrImage>());

          Func_Eigen3D(
               (char*) $3,
               varim1 ->Pointer().get(),
               varim2 ->Pointer().get(),
               varim3 ->Pointer().get(),
               varim4 ->Pointer().get(),
               varim5 ->Pointer().get(),
               varim6 ->Pointer().get(),
               NULL
               );
        }
        |
        T_Eigen2D T_OP_PAR ASTRING T_COMMA
                      var_image T_COMMA var_image T_COMMA
                  var_image T_COMMA
                      expr_image
                  T_CL_PAR
        {
          Variable<InrImage>::ptr  varim3( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim2( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim1( driver.var_stack.GetLastVar<InrImage>());
      InrImage::ptr mask ( driver.im_stack.GetLastImage());

          Func_Eigen2D(
               (char*) $3,
               varim1 ->Pointer().get(),
               varim2 ->Pointer().get(),
               varim3 ->Pointer().get(),
               mask.get()  // mask
               );
        }
        |
        T_Eigen2D T_OP_PAR ASTRING T_COMMA
                      var_image T_COMMA var_image T_COMMA
                  var_image
                  T_CL_PAR
        {
          Variable<InrImage>::ptr  varim3( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim2( driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim1( driver.var_stack.GetLastVar<InrImage>());
          Func_Eigen2D(
               (char*) $3,
               varim1 ->Pointer().get(),
               varim2 ->Pointer().get(),
               varim3 ->Pointer().get(),
               NULL
               );
        }
    |
    T_setvoxelsize T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage,im);
      im->SetVoxelSize($5, $7, $9);
    }
    |
    var_image T_POINT T_setvoxelsize T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im);
      im->SetVoxelSize($5, $7, $9);
    }
    |
    var_image T_POINT T_setvoxelsize T_OP_PAR var_image T_CL_PAR
    {
      Variable<InrImage>::ptr  varim2( driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1( driver.var_stack.GetLastVar<InrImage>());
      InrImage::ptr im (varim2->Pointer());
      varim1->Pointer()->SetVoxelSize(
                                   im->VoxSizeX(),
                                   im->VoxSizeY(),
                                   im->VoxSizeZ());
    }
    |
    var_image T_POINT T_settranslation T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage,im);
      im->SetTranslation($5, $7, $9);
    }
    |
    var_image T_POINT T_settranslation T_OP_PAR var_image T_CL_PAR
    {
      Variable<InrImage>::ptr  varim2( driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1( driver.var_stack.GetLastVar<InrImage>());
      InrImage::ptr im (varim2->Pointer());
      varim1->Pointer()->SetVoxelSize( im->TrX(), im->TrY(), im->TrZ());
    }
    |
    var_image T_POINT T_setendianness T_OP_PAR expr  T_CL_PAR
    {
    /**
      Parameters:
        (5) boolean, 0 little endianness, 1 big endianness

      Description:
        Forces the endianness of the image, usually before writting it to a file.
        If the endianness is different from the one of the architecture, the bytes
        are swapped before writting, and there are swapped back after.
    **/
      GET_VARSTACK_VALUE(InrImage, im);
      ((amimage*) (*(im)) )->SetEndianness((AMIENDIANNESS)(int)$5);
    }
    |
    T_DiscSecDerGrad T_OP_PAR var_image T_COMMA var_image T_CL_PAR
    {
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
      Func_DiscSecDerGrad(
        varim1->Pointer().get(),
        varim2->Pointer().get());
    }
    |
    T_DiscSecDerGrad T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_CL_PAR
    {
      Variable<InrImage>::ptr  varim3(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
      Func_DiscSecDerGrad(
                varim1->Pointer().get(),
                varim2->Pointer().get(),
                varim3->Pointer().get());
    }
    | expr  { $$=1;}
    |
    T_ProcessXEvents T_OP_PAR expr T_CL_PAR
    {
      /**
        Description: dispatches the given number of events
      **/
      int nb_event;

      nb_event = 0;
      while (nb_event<(int)$3) {
        if (GB_wxApp->Pending()) {
          GB_wxApp->Dispatch();
        }
        nb_event++;
      } // end while

    }
    |
    T_ProcessEvents T_OP_PAR expr T_CL_PAR
    {
      /**
        Description: dispatch the given number of events
      **/
      int nb_event;

      nb_event = 0;
      while (nb_event<(int)$3) {
        if (GB_wxApp->Pending()) {
          GB_wxApp->Dispatch();
        }
        nb_event++;
      } // end while

    }
    | T_gnuplot T_OP_PAR expr_image T_COMMA expr_string T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
            (3) IMAGE: 1D image to plot, where the voxel size in X is used,
            if 2D image, plot several functions, one per line
            (5) String: plot title
            (7) NUM: delay
        Description:
            Plots a 1D image using gnuplot.
        **/
      InrImage::ptr   image (driver.im_stack.GetLastImage());
      float* tabx;
      float* taby;
      GnuPlot   gnuplot;
      int x,num_courbe;
      std::string name;

      tabx = new float[image->_tx];
      taby = new float[image->_tx];

      for (int y=0; y<image->DimY(); y++) {
        Pour(x,0,image->_tx-1)
          tabx[x] = image->SpacePosX(x);
          taby[x] = (*image)(x,y,0);
          //cout << boost::format("%1%,%2% --> %3%")%x%y%taby[x] << endl;
        FinPour
        name =  (boost::format("%s_%02d")%$5%y).str();
        num_courbe = gnuplot.AddCourbe( image->_tx, tabx, taby, name.c_str());
      }

      name =  (boost::format("%s.gnuplot")%$5).str();
      gnuplot.XPlot(name.c_str(),(int)$7);

      delete [] tabx;
      delete [] taby;
      delete [] $5;
    }
    | T_DisplayHisto T_OP_PAR var_image  T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im);
      cerr << "Feature not available, needs to be updated ! " << endl;
      /*
            InrImage::ptr   image = *(InrImage::ptr*) $3->Pointer();
            Histogramme* histo;
      
            histo = new Histogramme(GB_main_window,"histo",
                        image.get(),
                        CREATE_TOPLEVEL_SHELL);
      */
      }
      |
      T_Pad T_OP_PAR var_image T_COMMA var_image T_COMMA
            expr T_COMMA expr T_COMMA
            expr T_COMMA expr T_COMMA
            expr T_COMMA expr
            T_CL_PAR
      {
        /**
        Parameters:
            (3)  IMAGE1: image to change
            (5)  IMAGE2: input image
            (7)  expression: step x
            (9)  expression: position x
            (11) expression: step y
            (13) expression: position y
            (15) expression: step z
            (17) expression: position z

        Description:
            Pads the output image (IMAGE1) using the input image (IMAGE2),
            starting from position (posx,posy,posz) in IMAGE1,
            tries to fill all the values of IMAGE2 with a voxel lattice of size
            (step x, step y, step z).
            Works for scalar or vectorial images, both images must be of the same
            type (scalar or vectorial).
        **/

            int step_x = (int) $7;
            int step_y = (int) $11;
            int step_z = (int) $15;
        int pos_x  = (int) $9;
        int pos_y  = (int) $13;
        int pos_z  = (int) $17;

      // pad the first image with the second one
      //
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());

      Func_Pad(
        varim1->Pointer().get(),
        varim2->Pointer().get(),
           step_x,step_y,step_z,
           pos_x,pos_y,pos_z);


        }
        |
    T_GenRead T_OP_PAR ASTRING T_CL_PAR
    {
      boost::shared_array<char> filename( $3);
      Func_GenRead(filename.get());
    }
    |
    T_RestartTime
    {
      driver.IP_time.InitCumul();
    }
    |
    T_InitTime
    {
      driver.IP_time.Debut();
    }
    |
    T_EndTime
    {
      driver.IP_time.Fin();
      cout << "time spent = " << driver.IP_time << endl;
    }
    |
    T_SaveStructuredGrid T_OP_PAR var_image T_COMMA expr_string T_CL_PAR
    {
          boost::shared_array<char> filename( $5);
          GET_VARSTACK_VALUE(InrImage, i);
          Func_VectorImage2StructuredGrid(i.get(),filename.get());
        }
        |
        VAR_GLTRANSFORM T_POINT PRINT
        {
          GET_VARSTACK_VALUE(GLTransfMatrix, glmat);
          glmat->Print();
        }
        |
        VAR_GLTRANSFORM T_POINT T_save expr_string
        {
          boost::shared_array<char> filename( $4);
          GET_VARSTACK_VALUE(GLTransfMatrix, glmat);
          Func_SaveTransform(glmat.get(),filename.get());
        }
        |
        T_import_vtk
        {
          AddWrapVTK();
        }
        |
        T_import_wii
        {
          AddWrapWII();
        }
        |
        T_import_filters
        {
          AddWrapFilters();
        }
        |
        T_amiOFCorr2D T_OP_PAR var_image T_COMMA var_image T_COMMA
        var_image  T_COMMA var_image T_COMMA
        var_image  T_COMMA
        var_image T_COMMA var_image T_COMMA
        expr T_COMMA expr T_COMMA
        expr T_COMMA  expr T_COMMA
        expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
          Variable<InrImage>::ptr  varim7(driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim6(driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim5(driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim4(driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim3(driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
          Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());

          InrImage::ptr im1    (varim1->Pointer());
          InrImage::ptr im2    (varim2->Pointer());
          InrImage::ptr u      (varim3->Pointer());
          InrImage::ptr v      (varim4->Pointer());
          InrImage::ptr corr   (varim5->Pointer());
          InrImage::ptr conf_x (varim6->Pointer());
          InrImage::ptr conf_y (varim7->Pointer());
          int initx= (int) $17;
          int inity= (int) $19;
          int displx= (int) $21;
          int disply= (int) $23;
          int sizex= (int) $25;
          int sizey= (int) $27;
          int deform = (int) $29;
      
          amiOpticFlowCorrelation2D(
            im1.get(),
            im2.get(),
            u.get(),
            v.get(),
            corr.get(),
            conf_x.get(),
            conf_y.get(),
            initx,inity,
            displx,disply,sizex,sizey,deform);
        }
      |
      T_amiOFVar2D T_OP_PAR var_image T_COMMA var_image T_COMMA
      expr T_COMMA expr T_COMMA expr T_COMMA
          expr T_COMMA expr T_COMMA expr T_COMMA
      var_image  T_COMMA var_image T_COMMA  expr  T_CL_PAR
      {
        GET_VARSTACK_VALUE(InrImage,v); // x component of the flow
        GET_VARSTACK_VALUE(InrImage,u); // y component of the flow
        GET_VARSTACK_VALUE(InrImage,im2);
        GET_VARSTACK_VALUE(InrImage,im1);
        float     sigma = $7;
        float     T     = $9;
        float     alpha = $11;
        long      dtype = (long) $13;      /* type of smoothness term */
        float     quantile = $15;          /* isotropy fraction */
        float     ht       = $17;          /* time step size */
        int       Niter    = (int)  $23;   /* Number of Iterations for Gauss-Seidel */

        amiOpticFlowVariational2D(
          im1.get(),
          im2.get(),
          sigma,T,alpha,dtype,quantile,ht,
          u.get(),
          v.get(),
          Niter);

        }
        |
        VAR_C_PROCEDURE  T_OP_PAR param_list T_CL_PAR
        {
          GET_VARSTACK_VALUE(C_wrap_procedure, proc);
          ParamList::ptr param($3);
          (*proc)(param.get());
        }
        |
        VAR_CLASS_MEMBER  T_OP_PAR param_list T_CL_PAR
        {
          GET_VARSTACK_VALUE(WrapClassMember, m);
          ParamList::ptr param($3);
          m->CallMember(param.get());
        }
        |
        VAR_CLASS_MEMBER  
        {
          GET_VARSTACK_VALUE(WrapClassMember, m);
          ParamList::ptr param((ParamList*) NULL);
          m->CallMember(param.get());
        }
        |
        T_Set3DArrowParam T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
          (3) size of the 3D arrow basis (def: 0.05)
          (5) size of the 3D arrow head (def: 0.1)
          (7) position of the 3D arrow (def: 0.85)

        Description:
          Parameters for 3D arrows created by CreateVectors() when the vector style is 1.
          Each arrow is composed of 2 tetrahedra:
            - the basis size in proportion to the arrow size is given by the 1st parameter,
            - the head size by the 2nd parameter,
            - the lower position of the head along the arrow by the 3rd parameter.
        **/
          AMIFluid::Func_SetArrowParameters((float)$3,(float)$5,(float)$7);
        }
        ;



exprstringlist: 
        expr_string 
        {
            std::list<std::string>* sl = new std::list<std::string>();
            sl->push_back(string($1));
            delete [] $1;
            $$ = sl;
        }
        |
        exprstringlist T_COMMA expr_string 
        {
            std::list<std::string>* sl = $1;
            sl->push_back(string($3));
            delete [] $3;
            $$ = sl;
        }


stringlist:
      T_OP_BR exprstringlist T_CL_BR
      {
        $$=$2;
      }


param_list:
        {
          ParamList* pl = new ParamList();
          $$ = pl;
        }
        | VAR_AMI_FUNCTION
        {
        /**
          Description: temporary rule, added to simplify convertion of scripts.
         **/
          BasicVariable::ptr       var(driver.var_stack.GetLastBasicVar());
          ParamList* pl = new ParamList();
          // Creating a new variable that points to the same value, and a slightly different name (with added "_ref"), comments are also copied.
          BasicVariable::ptr newvar(var->NewReference());
          pl->AddParam(newvar);
          $$ = pl;
        }
        | param_list T_COMMA  VAR_AMI_FUNCTION
        {
        /**
          Description: temporary rule, added to simplify convertion of scripts.
         **/
          BasicVariable::ptr       var(driver.var_stack.GetLastBasicVar());
          ParamList* pl =  $1;

          // Creating a new variable that points to the same value, and a slightly different name (with added "_ref"), comments are also copied.
          BasicVariable::ptr newvar(var->NewReference());

          pl->AddParam(newvar);
          $$ = pl;
        }
        | T_AND variable
        {
          BasicVariable::ptr       var(driver.var_stack.GetLastBasicVar());

          ParamList* pl = new ParamList();

          // Creating a new variable that points to the same value, and a slightly different name (with added "_ref"), comments are also copied.
          BasicVariable::ptr newvar(var->NewReference());

          pl->AddParam(newvar);
          $$ = pl;
        }
        | param_list T_COMMA T_AND variable
        {
          BasicVariable::ptr       var(driver.var_stack.GetLastBasicVar());
          ParamList* pl =  $1;

          // Creating a new variable that points to the same value, and a slightly different name (with added "_ref"), comments are also copied.
          BasicVariable::ptr newvar(var->NewReference());

          pl->AddParam(newvar);
          $$ = pl;
        }
        | expr
        {
          ParamList* pl(new ParamList);
          float_ptr x(new float($1));
          Variable<float>::ptr newvar(
            new Variable<float>("Param0", x));
          pl->AddParam(newvar);
          $$ = pl;
        }
        | param_list T_COMMA expr
        {
          ParamList* pl =  $1;
          std::string paramname = (boost::format("Param%1%")%pl->GetNumParam()).str();
          float_ptr x(new float($3));

          Variable<float>::ptr newvar(
            new Variable<float>(paramname.c_str(), x));
          pl->AddParam(newvar);
          $$ = pl;
        }
        | expr_string
        {
          ParamList* pl = new ParamList();
          boost::shared_array<char> name($1);

          string_ptr x(new string(name.get()));
          Variable<std::string>::ptr newvar(
            new Variable<std::string>("Param0", x));
          pl->AddParam(newvar);
          $$ = pl;
        }
        | param_list T_COMMA expr_string
        {
          boost::shared_array<char> st($3);
          ParamList* pl =  $1;
          std::string paramname = (boost::format("Param%1%")%pl->GetNumParam()).str();
          string_ptr x(new string(st.get()));

          Variable<std::string>::ptr newvar(
              new Variable<std::string>(paramname,x));
          pl->AddParam(newvar);
          $$ = pl;
        }
        | expr_image
        {
          ParamList* pl = new ParamList();
          InrImage::ptr i ( driver.im_stack.GetLastImage());
          Variable<InrImage>::ptr newvar(
            new Variable<InrImage>("Param0",i));
          pl->AddParam(newvar);
          $$ = pl;
        }
        | param_list T_COMMA expr_image
        {
          ParamList* pl =  $1;
          std::string paramname = (boost::format("Param%1%")%pl->GetNumParam()).str();
          InrImage::ptr i(driver.im_stack.GetLastImage());

          Variable<InrImage>::ptr newvar(
            new Variable<InrImage>(paramname,i));
          pl->AddParam(newvar);
          $$ = pl;
        }
        ;

param_list_decl:
        {
      //      printf("no parameters \n");
      ParamListDecl* pl = new ParamListDecl;
      $$ = pl;
    }
    | T_NUM IDENTIFIER
    {
      IdentifierInfo::ptr ident($2);
      cout << "param_list_decl: T_NUM IDENTIFIER" << endl;
      cout << ident->GetName().c_str() << endl;
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName(),type_float);
      $$ = pl;
    }
    | T_OBJECT IDENTIFIER
    {
      IdentifierInfo::ptr ident($2);
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName(),type_ami_object);
      $$ = pl;
    }
    | T_STRING IDENTIFIER
    {
      IdentifierInfo::ptr ident($2);
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName(),type_string);
      $$ = pl;
    }
    | T_IMAGE IDENTIFIER
    {
      IdentifierInfo::ptr ident($2);
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName(),type_image);
      $$ = pl;
        }
    | T_IMAGEDRAW IDENTIFIER
        {
      IdentifierInfo::ptr ident($2);
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName(),type_imagedraw);
      $$ = pl;
        }
    | T_SURFACE IDENTIFIER
        {
      IdentifierInfo::ptr ident($2);
      ParamListDecl* pl = new ParamListDecl;
      pl->AddParam(ident->GetName(),type_surface);
      $$ = pl;
        }
    | param_list_decl T_COMMA T_NUM IDENTIFIER
        {
      IdentifierInfo::ptr ident($4);
      ParamListDecl* pl = (ParamListDecl*) $1;
      pl->AddParam(ident->GetName(),type_float);
      $$ = pl;
        }
    | param_list_decl T_COMMA T_STRING IDENTIFIER
        {
      IdentifierInfo::ptr ident($4);
      ParamListDecl* pl = (ParamListDecl*) $1;
      pl->AddParam(ident->GetName(),type_string);
      $$ = pl;
        }
    | param_list_decl T_COMMA T_IMAGE IDENTIFIER
        {
      IdentifierInfo::ptr ident($4);
      ParamListDecl* pl = (ParamListDecl*) $1;
      pl->AddParam(ident->GetName(),type_image);
      $$ = pl;
        }
    | param_list_decl T_COMMA T_IMAGEDRAW IDENTIFIER
        {
      IdentifierInfo::ptr ident($4);
      ParamListDecl* pl = (ParamListDecl*) $1;
      pl->AddParam(ident->GetName(),type_imagedraw);
      $$ = pl;
        }
    | param_list_decl T_COMMA T_SURFACE IDENTIFIER
        {
      IdentifierInfo::ptr ident($4);
      ParamListDecl* pl = (ParamListDecl*) $1;
      pl->AddParam(ident->GetName(),type_surface);
      $$ = pl;
        };

primary_expr_string: ASTRING
      {
      $$=$1;
      }
      |
      VAR_STRING
      {
        //
        // TODO: replace string expression to use std::string !!!
        //
        GET_VARSTACK_VALUE(std::string,st);
        char* res;
  
        res = new char[st->length()+1];
        strcpy(res,st->c_str());
        $$= res;
      }
;


postfix_expr_string
        : primary_expr_string
        {
          $$=$1;
          //fflush(stdout);
        }
        |
        T_SPRINT T_OP_PAR expr_string T_COMMA expr T_CL_PAR
        {
      char* res;

      //printf("expr_string=%s*\n",$3);
      //printf("expr=%f*\n",$5);
      res = new char[strlen($3)+20];
      sprintf(res,$3,$5);
      //          res[strlen($3)]=0;
      delete [] $3;
      //printf("res=%s*\n",res);
      $$=res;
    }
    |
    T_boost_format T_OP_PAR expr_string T_CL_PAR T_MOD expr
    {
    /**
      Description: 
        Uses the class boost::format to create the result of 
        the format as a string, only one numerical parameter 
        is accepted.
    **/
      boost::format bf($3);
      delete [] $3;
      std::string resstr = (bf % $6).str();
      char* res = new char[resstr.length()+1];
      strcpy(res,resstr.c_str());
      $$= res;
    }
    |
    T_boost_format T_OP_PAR expr_string T_CL_PAR T_MOD expr_string
    {
    /**
      Description: 
        Uses the class boost::format to create the result of 
        the format as a string, using a string expression as a parameter.
    **/
      boost::format bf($3);
      delete [] $3;
      std::string resstr = (bf % $6).str();
      char* res = new char[resstr.length()+1];
      strcpy(res,resstr.c_str());
      $$= res;
      delete [] $6;
    }
    |
    primary_expr_string T_MOD expr_string
    {
    /** 
      Description: 
        Uses the class boost::format to create the result of 
        the format as a string, using a string expression as a parameter.
    **/
      boost::format bf($1);
      delete [] $1;
      std::string resstr = (bf % $3).str();
      char* res = new char[resstr.length()+1];
      strcpy(res,resstr.c_str());
      $$= res;
      delete [] $3;
    }
    |
    primary_expr_string  T_MOD expr
    {
    /**
      Description: 
        Uses the class boost::format to create the result of 
        the format as a string, only one numerical parameter 
        is accepted.
    **/
      boost::format bf($1);
      delete [] $1;
      std::string resstr = (bf % $3).str();
      char* res = new char[resstr.length()+1];
      strcpy(res,resstr.c_str());
      $$= res;
    }
    |
    T_TimeSpent
    {
      long min,hour;
      float sec;

      driver.IP_time.Fin();
      driver.IP_time.AddCumul();
      driver.IP_time.GetCumul(hour,min,sec);
      std::string res;
      if (hour>0) {
        res = (boost::format("%3d h %2d min %2d sec")%(int)hour
                        %(int)min %(int)sec).str();
      } else
        res = (boost::format("%2d min %2d sec")
                        %(int)min %(int)sec).str();
        if (min>0) {
        } else
          res = (boost::format("%2.2f sec") %sec).str();

      char* reschar = new char[res.size()+1];
      strcpy(reschar,res.c_str());
      $$= reschar;
    }
    |
    var_image T_POINT T_GetName {
      GET_VARSTACK_VALUE(InrImage, im);
      $$=(char*) (im)->GetName();
    }
    |
    T_GetName T_OP_PAR variable T_CL_PAR 
    {
    /**
      Description:
        Returns the name of the variable as a string
    **/
      BasicVariable::ptr  var(driver.var_stack.GetLastBasicVar());
      char* resstr = (char*) var->Name().c_str();
      char* res = new char[strlen(resstr)+1];
      strcpy(res,resstr);
      $$= res;
    }
    |
    T_GetObjectName T_OP_PAR variable T_CL_PAR {
    /**
      Description:
        Returns the name of the object instance to which this variable belongs. If this variable does not belong to an object, returns an empty string.
    **/
      BasicVariable::ptr  var(driver.var_stack.GetLastBasicVar());
      boost::shared_ptr<Variables> context = var->GetContext();
      if (context.get()) {
        char* res = new char[strlen(context->GetName().c_str())+1];
        strcpy(res,context->GetName().c_str());
        $$= res;
      } else {
        char* empty_string;
        empty_string = new char[1];
        empty_string[0] = '\0';
        $$ = empty_string;
      }
    }
    |
    T_GetScriptsDir
    {
      char* res = new char[GB_scripts_dir.Len()+1];
      strcpy(res,(const char*)GB_scripts_dir.mb_str(wxConvUTF8));
      $$= res;
    }
;


additive_expr_string
        : postfix_expr_string
        | additive_expr_string T_ADD postfix_expr_string
        {
          boost::shared_array<char> exp1( $1);
          boost::shared_array<char> exp2( $3);
          char* res;
          res = new char[strlen(exp1.get())+strlen(exp2.get())+1];
          strcpy(res,exp1.get());
          strcat(res,exp2.get());
          $$=res;
        }
        | additive_expr_string T_SUB postfix_expr_string
        {
          boost::shared_array<char> exp2( $3);
          RemoveEndString($1,exp2.get());
          $$=$1;
        }
        ;

expr_string
        : additive_expr_string
        ;

instr_block: begin_block
               ABLOCK
             end_block
          {
        $$=$2;
        if (GB_debug)
          cerr << format("ablock : %s")
                  % $2->GetBody()
                << endl;
          };

begin_block: ;
end_block: ;

primary_expr: 
    NUMBER
    | T_argc
    {
    /**
    Description:
      returns the number of arguments in the command line
    **/
      $$=GB_argc-GB_num_arg_parsed;
    }
    | T_LineNumber
    {
    /**
    Description:
      Line number in the current script
    **/
      $$=driver.yyiplineno;
    }
    | CONST_PI
    {
      /**
      Description:
        the constant Pi is set to
         3.14159265358979323846
      **/
      $$= 3.14159265358979323846;
    }
    | VAR_FLOAT
    {
      GET_VARSTACK_VALUE(float,n);
      $$ = (double) *n.get();
    }
    | VAR_INT
    {
      GET_VARSTACK_VALUE(int,n);
      $$ = (double) *n.get();
    }
    | VAR_UCHAR
    {
      GET_VARSTACK_VALUE(unsigned char,n);
      $$ = (double) *n.get();
    }
    | T_OP_PAR expr T_CL_PAR
    {
      $$=$2;
      fflush(stdout);
    }
    ;

postfix_expr
        : primary_expr
        | var_image T_OP_PAR expr T_CL_PAR
        {
        /**
        Parameters:
        (1) input_image
        (3) x

        Description:
        returns the image value at pixel (x,y=0,z=0).

        return:
        float value
        **/
      GET_VARSTACK_VALUE(InrImage, im);
      $$=(*im)((int) $3,0);
    }
        | var_image T_OP_PAR expr T_COMMA expr  T_CL_PAR
        {
        /**
        Parameters:
        (1) input_image
        (3) x
        (5) y

        Description:
        returns the image value at pixel (x,y,z=0) by default

        return:
        float value
        **/
      GET_VARSTACK_VALUE(InrImage, im);
      $$=(*im)((int) $3,(int) ( $5));
    }
    | var_image T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      /**
        Parameters:
          - input image variable
          - pixel position x,y,z
        Description:
          returns the pixel intensity at the given position
          the position value are rounded to the closest integer
      **/
      GET_VARSTACK_VALUE(InrImage, im);
      $$=(*im)((int) round($3),
          (int) round( $5), 
          (int) round($7));
    }
    | var_image T_POINT T_lininterp T_OP_PAR expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      /**
        Parameters:
          - input image variable
          - pixel position x,y,z
        Description:
          returns the pixel intensity at the given position
          the position using linear interpolation
      **/
      GET_VARSTACK_VALUE(InrImage, im);
      $$=im->InterpLinIntensite(
          $5,
          $7, 
          $9);
    }
    | var_image T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      /**
      Description:
      get image component value at a given 3D voxel position.
      same as image(expr,expr,expr;expr)
      **/
      GET_VARSTACK_VALUE(InrImage, im);
      Si im->CoordOK((int) $3, (int) $5, (int) $7)
          Et ((int) $9 >=0) Et ((int)$9 <im->GetVDim()) Alors

        $$=(*im)((int) $3,(int) $5, (int) $7,
                    (int) $9 );
      Sinon
        driver.err_print("var_image(expr,expr,expr,expr) \t err coord \n");
          FinSi
    }
    | var_image T_OP_PAR expr T_COMMA expr T_COMMA expr T_SEMICOLON expr T_CL_PAR
    {
      /**
      Description:
      get image component value at a given 3D voxel position.
      **/
      GET_VARSTACK_VALUE(InrImage, im);
      Si im->CoordOK((int) $3, (int) $5, (int) $7)
          Et ((int) $9 >=0) Et ((int)$9 <im->GetVDim()) Alors

        $$=(*im)((int) $3,(int) $5, (int) $7,
                      (int) $9 );
      Sinon
        driver.err_print("var_image(expr,expr,expr;expr) \t err coord \n");
      FinSi
    }
    | var_image T_OP_PAR expr  T_COMMA expr T_SEMICOLON expr T_CL_PAR
    {
      /**
      Description:
      get image component value at a given 2D  position. ( z component set to 0)
      **/
      GET_VARSTACK_VALUE(InrImage, im);
      Si (im->CoordOK((int) $3,   (int $5),   0  )
        Et ((int) $7 >=0) Et ((int)$7 <im->GetVDim())) Alors
        $$=(*im)((int) $3,(int) $5,0, (int) $7 );
      Sinon
        driver.err_print("var_image(expr,expr;expr) \t err coord \n");
          FinSi
    }
    | var_image T_OP_PAR expr  T_SEMICOLON expr T_CL_PAR
    {
      /**
      Description:
      get image component value at a given 1D  position. (y and z components set to 0)
      **/
      GET_VARSTACK_VALUE(InrImage, im);
      Si im->CoordOK((int) $3,   0,   0  )
        Et ((int) $5 >=0) Et ((int)$5 <3) Alors
        $$=(*im)((int) $3,0,0, (int) $5 );
      Sinon
        driver.err_print("var_image(expr;expr) \t err coord \n");
          FinSi
    }
    | var_image T_POINT TInit
    {
      /**
      Description:
      Init the image buffer to the first voxel or pixel:
      at coordinates (0,0,0).

      See also:
              inc val

      Example(s):

      i.init
      for x=0 to i.tx-1 {
        print "value at x = "; print x; print ": ";
        print i.val; print "\n";
        i.inc
      }
      **/
      GET_VARSTACK_VALUE(InrImage, im);
      im->InitBuffer();
    }
    | var_image T_POINT identifier
    {
      GET_VARSTACK_VAR_VAL(InrImage,varim, im);
      IdentifierInfo::ptr ident($3);
      if (strcmp(ident->GetName().c_str(),"tx")==0) {
        $$=im->_tx;
      }
      else
      if (strcmp(ident->GetName().c_str(),"ty")==0) {
        $$=im->_ty;
      }
      else
      if (strcmp(ident->GetName().c_str(),"tz")==0) {
        $$=im->_tz;
      }
      else
      if (strcmp(ident->GetName().c_str(),"trx")==0) {
        $$=im->_translation_x;
      }
      else
      if (strcmp(ident->GetName().c_str(),"vdim")==0) {
        $$=im->GetVDim();
      }
      else
      if (strcmp(ident->GetName().c_str(),"try")==0) {
        $$=im->_translation_y;
      }
      else
      if (strcmp(ident->GetName().c_str(),"trz")==0) {
        $$=im->_translation_z;
      }
      else
      if (strcmp(ident->GetName().c_str(),"vx")==0) {
        $$=im->_size_x;
      }
      else
      if (strcmp(ident->GetName().c_str(),"vy")==0) {
        $$=im->_size_y;
      }
      else
      if (strcmp(ident->GetName().c_str(),"vz")==0) {
        $$=im->_size_z;
      }
      else
      if (strcmp(ident->GetName().c_str(),"inc")==0) {
        (im)->IncBuffer();
      }
      else
      if (strcmp(ident->GetName().c_str(),"val")==0) {
        $$=(im)->ValeurBuffer();
      }
      else
        {
          char tmp_string[255];
          sprintf(tmp_string," %s.%s identifier not recognized \n",
              varim->Name().c_str(), ident->GetName().c_str());
          strcat(tmp_string," known identifiers {tx, ty, tz, vdim, trx, try, trz, vx, vy, vz, init, inc, val, info} \n");
          driver.err_print(tmp_string);
        }

      }
      | var_image T_POINT T_info
      {
        /**
          Description:
            Prints the image information
        **/
        GET_VARSTACK_VAR_VAL(InrImage, varim, im);
        std::string tmp_string;
        tmp_string = (boost::format(" %s: format=%s  dim=(%d,%d,%d)x%d  vox=(%f,%f,%f) \
  translation =(%f,%f,%f) \n")
            % varim->Name()
            % im->FormatName().c_str()
            % im->_tx
            % im->_ty
            % im->_tz
            % im->GetVDim()
            % im->_size_x
            % im->_size_y
            % im->_size_z
            % im->_translation_x
            % im->_translation_y
            % im->_translation_z).str();
        driver.res_print(tmp_string);
    }
    | VAR_AMI_OBJECT  T_info
    {
      /**
        Description:
          Prints the object information
      **/
      GET_VARSTACK_VAR_VAL(AMIObject,varamio,o);
      
      if (o.get()) {
        cout << "var   name = " << varamio->Name() <<endl;
        if (o->GetClass().get()) {
          cout << "class name = " << o->GetClass()->GetName() <<endl;
        }
        o->GetContext()->display();
      }
/*      std::string tmp_string;
      tmp_string = (boost::format("Object '%1%' instance of class '%2% \n")
          % $1->Name() % o->GetClass()->GetName() ).str();
      driver.res_print(tmp_string);
      o->GetContext()->display();
*/
    }
    | var_surface T_POINT T_info
    {
      GET_VARSTACK_VAR_VAL(SurfacePoly,var,s);

      std::string tmp_string;
      tmp_string = (boost::format(" %s: %d points %d lines %d polygons  \n")
        % var->Name()
        % s->GetNumberOfPoints()
        % s->GetNumberOfLines()
        % s->GetNumberOfPolys ()
        ).str();
      driver.res_print(tmp_string);
      tmp_string = (boost::format(" limits X:[%4.2f %4.2f] Y:[%4.2f %4.2f]  Z:[%4.2f %4.2f]  \n")
        % s->_xmin % s->_xmax
        % s->_ymin % s->_ymax
        % s->_zmin % s->_zmax).str();
      driver.res_print(tmp_string);
    }
    |
    var_surface T_POINT T_NbPoints
    {
      GET_VARSTACK_VALUE(SurfacePoly,s);
      $$ = s->GetNumberOfPoints();
    }
    |
    var_surface T_POINT T_NbPolys
    {
      GET_VARSTACK_VALUE(SurfacePoly,s);
      $$ = s->GetNumberOfPolys();
    }
    |
    T_SNR T_OP_PAR var_image  T_COMMA var_image T_CL_PAR
    {
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
      $$=Func_SNR(varim1->Pointer().get(),
                  varim2->Pointer().get());
    }
    |
    T_eccentricity T_OP_PAR var_image T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im);
      $$=Func_eccentricity(im.get());
    }
    |
    T_isoarea2D T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      float   resolution = $5;
      int     cx = (int) $7;
      int     cy = (int) $9;
      float    surf_inf[1];
      float    surf_sup[1];
      float    surf_interp[1];
      Point3D point;
      Vect3D<float> v1,v2;
      CalculAireSection* compute_area;

      GET_VARSTACK_VALUE(InrImage, im);

      compute_area = new CalculAireSection( im.get(),
                    resolution);
      compute_area->InitImagesSurf((InrImage*) NULL, (InrImage*) NULL,
                       (InrImage*) NULL, (InrImage*) NULL);
      surf_inf[0]  = surf_sup[0] = surf_interp[0] = 0.0;
      v1.Init( 1.0, 0.0, 0.0);
      v2.Init( 0.0, 1.0, 0.0);
      point.Init( cx,cy,0);

      $$=compute_area->Aire( 0, point, v1, v2,
                  surf_inf, surf_sup, surf_interp);

      delete compute_area;

    }
    |
    T_posarea T_OP_PAR var_image T_CL_PAR
    {

      GET_VARSTACK_VALUE(InrImage, im);
      $$=Func_ComputePositiveArea( im.get() );
    }
    |
    T_posarea T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      float val[4];

      val[0] = $3;
      val[1] = $5;
      val[2] = $7;
      val[3] = $9;
      $$=Func_PositiveArea(val);
    }
    |
    T_COUNT T_OP_PAR expr_image  T_CL_PAR
    {
    /**
          Description:
          returns the of pixels (or voxels) with intensity higher than 0.5

          Parameters:
            (3) image expression

        Keywords:

        See also:
            max, mean, min, median

    **/
      InrImage::ptr im  (driver.im_stack.GetLastImage());
      $$=Func_count( im.get() );
    }
    |
    T_mean T_OP_PAR expr_image  T_CL_PAR
    {
        /**
             Description:
             returns the average value of an image

             Parameters:
               (3) image expression

            Keywords:

            See also:
                min, max, median

        **/
      InrImage::ptr im  (driver.im_stack.GetLastImage());
      $$=Func_mean( im.get());
    }
    |
    T_MAX T_OP_PAR expr_image  T_CL_PAR
    {
        /**
             Description: 
             returns the maximal value of an image

             Parameters:
               (3) image variable

            Keywords:

            See also:
                min, mean, median

        **/
      InrImage::ptr im  (driver.im_stack.GetLastImage());
      $$=Func_max( im.get(),NULL);
    }
    |
    T_argmax T_OP_PAR expr_image  T_CL_PAR
    {
        /**
             Description:
             returns the position of the maximal value of an image, the 3D position is returned as a single integer value of the position of the vector of the image intensity, where the voxels are ordered in X first,Y second and Z.

             Parameters:
               (3) image expression

            Keywords:

            See also:
                min, mean, median, max

        **/
      InrImage::ptr im  (driver.im_stack.GetLastImage());
      $$=Func_argmax( im.get());
    }
    |
    T_MIN T_OP_PAR expr_image  T_CL_PAR
    {
      /**
            Description:
            returns the minimal value of an image

            Parameters:
              (3) image variable

          Keywords:

          See also:
              max, mean, median

      **/
      InrImage::ptr im  (driver.im_stack.GetLastImage());
      $$=Func_min( im.get(),NULL);
    }
    |
    T_MEDIAN T_OP_PAR expr_image  T_CL_PAR
    {
      /**
            Description:
            returns the median value of an image

            Parameters:
              (3) image expression

          Keywords:

          See also:
              min, max, mean, count

      **/
        InrImage::ptr im  (driver.im_stack.GetLastImage());
        $$=Func_med( im.get(),0.5,NULL);
      }
      |
      T_MAX T_OP_BR expr_image T_CL_BR T_OP_PAR expr_image  T_CL_PAR
      {
        /**
             Description:
             returns the maximal value of an image in a region of
             interest defined by pixels (or voxels) of intensity
             higher than 0.5 in the image between []

             Parameters:
               (3) image expression: mask
               (5) image expression: input

            Keywords:

            See also:
                min, max, mean, median, count

        **/
          InrImage::ptr im  (driver.im_stack.GetLastImage());
          InrImage::ptr mask  (driver.im_stack.GetLastImage());
          $$=Func_max( im.get(),mask.get());
        }
        |
        T_MIN T_OP_BR expr_image T_CL_BR T_OP_PAR var_image  T_CL_PAR
        {
        /**
             Description:
             returns the minimal value of an image in a region of
             interest defined by pixels (or voxels) of intensity
             higher than 0.5 in the image between []

             Parameters:
               (3) image expression
               (5) image variable

            Keywords:

            See also:
                min, max, mean, median, count

        **/
          GET_VARSTACK_VALUE(InrImage, im);
          InrImage::ptr mask  (driver.im_stack.GetLastImage());
          $$=Func_min( im.get(),mask.get());
        }
        |
        T_MEDIAN T_OP_BR expr_image T_CL_BR T_OP_PAR var_image  T_CL_PAR
        {
        /**
             Description:
             returns the median value of an image in a region of
             interest defined by pixels (or voxels) of intensity
             higher than 0.5 in the image between []

             Parameters:
               (3) image expression
               (5) image variable

            Keywords:

            See also:
                min, max, mean, median, count

        **/
          GET_VARSTACK_VALUE(InrImage, im);
          InrImage::ptr mask ( driver.im_stack.GetLastImage());
          $$=Func_med( im.get(),0.5,mask.get());
        }
        |
        T_MEDIAN T_OP_BR expr_image T_CL_BR T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {
          GET_VARSTACK_VALUE(InrImage, im);
          InrImage::ptr mask( driver.im_stack.GetLastImage());
          $$=Func_med( im.get(),(float) $8,mask.get());
        }
        |
        T_mean T_OP_BR expr_image T_CL_BR T_OP_PAR expr_image  T_CL_PAR
        {
        /**
             Description:
             returns the average value of an image in a region of
             interest defined by pixels (or voxels) of intensity
             higher than 0.5 in the image between []

             Parameters:
               (3) image expression: defines the Region of Interest
               (5) image expression: image from which to compute the mean intensity value.

            Keywords:

            See also:
                min, max, mean, median, count

        **/
      InrImage::ptr input  (driver.im_stack.GetLastImage());
      InrImage::ptr mask  (driver.im_stack.GetLastImage());

          $$=Func_mean( input.get(),mask.get());
        }
        |
        T_mean T_OP_PAR var_image T_COMMA expr_image T_CL_PAR
        {
        /**
             Description:
             returns the maximal value of an image in a region of
             interest

             Parameters:
               (3) image variable
               (5) image expression: the pixels (or voxels) higher than 0.5
               define the Region of Interest

            Keywords:

            See also:
                min, max, mean, median, count

        **/
          GET_VARSTACK_VALUE(InrImage, im);
          InrImage::ptr mask (driver.im_stack.GetLastImage());

          $$=Func_mean( im.get(), mask.get());
    }
    |  T_atof T_OP_PAR expr_string T_CL_PAR
    {
//    setlocale(LC_NUMERIC,"C");
      setlocale(LC_NUMERIC, "C");
      $$=atof($3);
      delete [] $3;
    }
    |
    VAR_IMAGEDRAW T_POINT T_GetXmin
    {
      Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = DessinImage::ptr(varimd->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._xmin;
    }
    |
    VAR_IMAGEDRAW T_POINT T_GetXmax
    {
      Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = DessinImage::ptr(varimd->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._xmax;
    }
    |
    VAR_IMAGEDRAW T_POINT T_GetYmin
    {
      Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = DessinImage::ptr(varimd->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._ymin;
    }
    |
    VAR_IMAGEDRAW T_POINT T_GetYmax
    {
      Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = DessinImage::ptr(varimd->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._ymax;
    }
    |
    VAR_IMAGEDRAW T_POINT T_GetZmin
    {
      Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = DessinImage::ptr(varimd->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._zmin;
    }
    |
    VAR_IMAGEDRAW T_POINT T_GetZmax
    {
      Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
      DessinImage::ptr draw;
      DessinImageParametres* param;

      draw = DessinImage::ptr(varimd->Pointer());
      param = draw->GetParam();
      $$=param->_Zoom._zmax;
    }
    |
    VAR_IMAGEDRAW T_POINT T_GetXPos
    {
      Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
      DessinImage::ptr draw;
      DessinImageParametres* param;
      string comment;
      draw = DessinImage::ptr(varimd->Pointer());
      param = draw->GetParam();
      $$=param->_pos._x;
      comment = str(format(" //  xpos=%3d") % param->_pos._x);
      if (driver.InConsole())
        GB_main_wxFrame->GetConsole()
                        ->IncCommand(wxString::FromAscii(comment.c_str()));
    }
    |
    VAR_IMAGEDRAW T_POINT T_GetYPos
    {
      Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
      DessinImage::ptr draw;
      DessinImageParametres* param;
      string comment;

      draw = DessinImage::ptr(varimd->Pointer());
      param = draw->GetParam();
      $$=param->_pos._y;

      comment = str( format(" //  ypos=%3d") % param->_pos._y);
      if (driver.InConsole())
        GB_main_wxFrame->GetConsole()
                       ->IncCommand(wxString::FromAscii(comment.c_str()));

    }
    |
    VAR_IMAGEDRAW T_POINT T_GetZPos
    {
      Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
      DessinImage::ptr draw;
      DessinImageParametres* param;
      string comment;

      draw = DessinImage::ptr(varimd->Pointer());
      param = draw->GetParam();
      $$=param->_pos._z;

      comment = str( format(" //  xpos=%3d") % param->_pos._z);
      if (driver.InConsole())
        GB_main_wxFrame->GetConsole()
                        ->IncCommand(wxString::FromAscii(comment.c_str()));
    }
    |
    AnisoGS T_POINT T_GetNoiseSD
    {
      $$=Func_AnisoGS_GetNoiseSD();
    }
    |
    AnisoGS T_POINT T_GetDAcoeff
    {
      $$=Func_AnisoGS_GetDAcoeff();
    }
    |
    T_LevelSetsCURV T_POINT T_UpdateResult
    {
      $$ = Func_LevelSets_UpdateResult();
    }
    | VAR_MATRIX T_OP_PAR expr T_COMMA expr T_CL_PAR
    {
      Variable<FloatMatrix>::ptr varmat(driver.var_stack.GetLastVar<FloatMatrix>());
      FloatMatrix::ptr mat (varmat->Pointer());
      int i = (int)$3;
      int j = (int)$5;
      $$ = (*mat)[i][j];
    }
    | VAR_MATRIX T_OP_PAR expr T_COMMA expr T_CL_PAR ASSIGN_OP expr
    {
      Variable<FloatMatrix>::ptr varmat(driver.var_stack.GetLastVar<FloatMatrix>());
      FloatMatrix::ptr mat (varmat->Pointer());
      int i = (int)$3;
      int j = (int)$5;
      $$  =  ((*mat)[i][j] = $8);
    }
    | T_exists T_OP_PAR identifier T_CL_PAR
    {
    /**
    Description:
    Check for the existence of a variable, returns 0
    **/
        IdentifierInfo::ptr ident($3);
        $$=0;
    }
    | T_exists T_OP_PAR variable T_CL_PAR
    {
    /**
    Description: 
    Check for the existence of a variable, returns 1
    **/
        BasicVariable::ptr  var(driver.var_stack.GetLastBasicVar());
        $$=1;
    }
    | T_FileExists T_OP_PAR expr_string T_CL_PAR
    {
    /**
    Parameters:
      string: input filename
    Description:
      Check for the existence of the given filename
    **/
      boost::shared_array<char> name( $3);

      $$ = wxFileExists(wxString(name.get(),wxConvUTF8));
    }
    | basic_type
    {
          $$ = (int) $1;
    }
    | VAR_FILE T_POINT T_scan_float T_OP_PAR expr_string T_CL_PAR
    {
    /**
      Description:
        Scans a float number in the given file and based on the
        given formatting expression.
    **/
        float res;
        GET_VARSTACK_VALUE(FILE,file);
        boost::shared_array<char> format( $5);

        setlocale(LC_NUMERIC, "C");
        fscanf(file.get(),format.get(),&res);
        $$ =  res;
    }
    | VAR_FILE T_POINT T_read T_OP_PAR VAR_FLOAT T_CL_PAR
    {
      GET_VARSTACK_VALUE(float,val_ptr);
      GET_VARSTACK_VALUE(FILE,file);

      float*  var = val_ptr.get();
      setlocale(LC_NUMERIC, "C");
      if (var!=NULL) {
        $$ = fscanf(file.get(),"%f",var);
      } else {
        // TODO: error message here ...
        $$ = 0;
      }
    }
    | VAR_FILE T_POINT T_read T_OP_PAR VAR_STRING T_CL_PAR
    {
      GET_VARSTACK_VALUE(std::string,st);
      GET_VARSTACK_VALUE(FILE,file);
      setlocale(LC_NUMERIC, "C");
      // not safe, TODO: use iostream or boost for files here ...
      char res[100];
      $$ = fscanf(file.get(),"%s",res);
      //string_ptr var( new std::string(res));
      (*st) = res;
    }
    | var_surface T_POINT T_GetNumberOfLines 
    {
    /**
      Parameters:
        - input polydata
      Description: 
        Returns the number of lines of the polydata structure
    **/
      GET_VARSTACK_VALUE(SurfacePoly,s);

      $$ = s->GetNumberOfLines(  );
    }
    | T_MAX  T_OP_PAR expr T_COMMA expr T_CL_PAR
    {
    /**
      Parameters:
        - 2 numbers
      Description: 
        Returns the maximal value
    **/
      $$ = macro_max($3,$5);
    }
    ;

unary_expr
        : postfix_expr
        | unary_operator cast_expr { $$=$2; }
        | T_FACT cast_expr  { UNARYOP_EXPR(!,              $2,$$) }
        | T_SUB cast_expr  { UNARYOP_EXPR(-,              $2,$$) }
        | T_ADD cast_expr  { UNARYOP_EXPR(+,              $2,$$) }
        | SIN cast_expr  { UNARYOP_EXPR(sin,            $2,$$) }
        | COS cast_expr  { UNARYOP_EXPR(cos,            $2,$$) }
        | SQRT cast_expr { UNARYOP_EXPR(sqrt,           $2,$$) }
        | ABS   cast_expr { UNARYOP_EXPR(fabs,           $2,$$) }
        | ROUND cast_expr { UNARYOP_EXPR(round,           $2,$$) }
        | FLOOR cast_expr
        {
          /**
            Description:
                return the closest integer smaller than the given expression value.
           **/
          UNARYOP_EXPR(floor,           $2,$$)
        }
        | TAN   cast_expr  { UNARYOP_EXPR(tan,            $2,$$) }
        | ASIN cast_expr { UNARYOP_EXPR(asin,           $2,$$) }
        | ACOS cast_expr { UNARYOP_EXPR(acos,           $2,$$) }
        | ATAN cast_expr { UNARYOP_EXPR(atan,           $2,$$) }
        | EXP cast_expr  
        { 
        /**
          Parameters:
            - input expression
          Description:
            Returns exponiential of the input (e^input).
          See also:
            ln, log
        **/
          UNARYOP_EXPR(exp,            $2,$$) 
        }
        | LOG cast_expr  
        { 
        /**
          Parameters:
            - input expression
          Description:
            Returns logarithm base 10 of the input.
          See also:
            ln, exp
        **/
          UNARYOP_EXPR(1.0/log(10.0)*log,$2,$$) 
        }
        | LN cast_expr   
        { 
        /**
          Parameters:
            - input expression
          Description:
            Returns natural logarithm of the input.
          See also:
            log, exp
        **/
            UNARYOP_EXPR(log,            $2,$$) 
        }
        ;

unary_operator
        :
          T_MULT |
          '~'
        ;

cast_expr:
        unary_expr
        |
         T_OP_PAR basic_type T_CL_PAR unary_expr
        {
      switch((WORDTYPE) $2) {
      case WT_UNSIGNED_CHAR:  $$=(unsigned char) $4; break;
      case WT_SIGNED_SHORT:   $$=(short) $4;  break;
      case WT_UNSIGNED_SHORT: $$=(unsigned short) $4;  break;
      case WT_SIGNED_INT:     $$=(int) $4;  break;
      case WT_UNSIGNED_INT:   $$=(unsigned int) $4;  break;
      case WT_FLOAT:          $$=(float) $4;  break;
      default:
        fprintf(stderr,"Conversion not available\n");
      }
        }
        ;

multiplicative_expr
        : cast_expr
        | multiplicative_expr T_MULT cast_expr { $$=$1*$3; }
        | multiplicative_expr T_DIV cast_expr { $$=$1/$3; }
        | multiplicative_expr T_MOD cast_expr { $$= ((int) round($1)) % ((int) round($3)); }
        ;

additive_expr
        : multiplicative_expr
        | additive_expr T_ADD multiplicative_expr {  $$=$1+$3; }
        | additive_expr T_SUB multiplicative_expr {  $$=$1-$3; }
        ;

shift_expr
        : additive_expr
        ;


relational_expr
        : shift_expr
        | relational_expr T_LT shift_expr   {  $$=($1<$3);  }
        | relational_expr T_GT shift_expr   {  $$=($1>$3);  }
        | relational_expr LE_OP shift_expr {  $$=($1<=$3); }
        | relational_expr GE_OP shift_expr {  $$=($1>=$3); }
        ;

equality_expr
        : relational_expr
        | equality_expr EQ_OP relational_expr  { $$=($1==$3); }
        | equality_expr NE_OP relational_expr  { $$=($1!=$3); }
        | expr_string   EQ_OP expr_string      
        { 
          boost::shared_array<char> st1( $1);
          boost::shared_array<char> st2( $3);
          $$=(strcmp(st1.get(),st2.get())==0); 
        }
        | expr_string   NE_OP expr_string      
        { 
          boost::shared_array<char> st1( $1);
          boost::shared_array<char> st2( $3);
          $$=(strcmp(st1.get(),st2.get())!=0); 
        }
        ;

and_expr
        : equality_expr
        | and_expr T_AND equality_expr
        {
      $$ = ((int)$1) & ((int)$3);
    }
        ;


exclusive_or_expr
        : and_expr
        | exclusive_or_expr T_EXP and_expr
        ;

inclusive_or_expr
        : exclusive_or_expr
        {
          $$=$1;
        }
        | inclusive_or_expr T_OR exclusive_or_expr
        {
      $$ = ((int)$1) | ((int)$3);
        }
        ;

logical_and_expr
        : inclusive_or_expr
        {
           $$=$1;
        }
        | logical_and_expr AND_OP inclusive_or_expr
        {
          $$=$1&&$3;
        }
        ;

logical_or_expr
        : logical_and_expr
        {
      $$=$1;
    }
        | logical_or_expr OR_OP logical_and_expr
        {
      $$=$1||$3;
    }
        ;

conditional_expr
        : logical_or_expr
        | logical_or_expr T_QUEST logical_or_expr T_COLON conditional_expr
        {
      $$=($1?$3:$5);
        }
        ;

assignment_expr
        : conditional_expr
        ;

expr
        : assignment_expr
        ;



basic_type:
         T_CHAR
        {
      driver.err_print(" char format is not available: use unsigned char \n");
      $$=WT_UNSIGNED_CHAR;
    }
       | T_UCHAR
       {
          $$=WT_UNSIGNED_CHAR;
       }
       | T_SHORT
       {
     $$=WT_SIGNED_SHORT;
       }
       | T_USHORT
       {
     $$=WT_UNSIGNED_SHORT;
       }
       | T_INT
       {
     $$=WT_SIGNED_INT;
       }
       | T_UINT
       {
     $$=WT_UNSIGNED_INT;
       }
       | T_FLOAT
       {
     $$=WT_FLOAT;
       }
       | T_DOUBLE
       {
     $$=WT_DOUBLE;
       }
       | T_RGB
       {
     $$=WT_RGB;
       }
       | T_FLOAT_VECTOR
       {
     $$=WT_FLOAT_VECTOR;
       }
       | var_image T_POINT T_GetFormat
      {
       //        printf("format %d \n",(int) ( *(InrImage::ptr*) $1->Pointer())->GetFormat());
      GET_VARSTACK_VALUE(InrImage, im);
        $$ = (int) im->GetFormat();
      };

var_image:
        VAR_IMAGE
        |
        VAR_ARRAY_IMAGE T_OP_BR expr T_CL_BR
        {
          // TODO: get rid of VAR_ARRAY ...
          GET_VARSTACK_VAR_VAL(VarArray,var,array);
          int  i = (int) $3;

          BasicVariable::ptr arrayvar = array->GetVar(i);
          if (!array.get()) {
            // create a small image to avoid problems
            InrImage::ptr im (new InrImage(1,1,1,WT_UNSIGNED_CHAR));
            string name = str(format("%s[%d]") % var->Name() % i);
            array->InitElement<InrImage>( i, im, name.c_str());
          }
          driver.var_stack.AddVar(array->GetVar(i));
          //$$=array->GetVar(i).get();
        }


image:
      T_Image  expr_string
      {
        boost::shared_array<char> st( $2);
        driver.im_stack.AddFileImage(st.get());
      }
      |
      T_Image T_OP_PAR expr_string T_CL_PAR
      {
        boost::shared_array<char> st( $3);
        driver.im_stack.AddFileImage(st.get());
      }
      |
      T_ReadRawImages T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA
                          expr T_COMMA expr_string T_COMMA expr T_COMMA expr T_CL_PAR
      {
       /**
       Parameters:
         (3)  dimension in X
         (5)  dimension in Y
         (7)  image type, one of: CHAR, UCHAR, SHORT,
                                 USHORT, FLOAT, DOUBLE, RGB, FLOAT_VECTOR.
         (9)  endianess: 0 for little, 1 for big.
         (11) filename or file format
         (13) first slice number
         (15) last slice number

       Description:
         Read 2D raw data (or a sequence of 2D raw data) as an image.
         The program can read raw data compressed with gzip:
         if the file is not found, it looks for the same filename with a '.gz' extention. If
         it can find it, it will open the file using the 'popen' (pipe open) command and the 'gunzip' program.

       Example(s):
          i = ReadRawImages(1024,1024,USHORT,0,"AfGG.%d",48,48)
       **/
      InrImage::ptr im (new InrImage());
      boost::shared_ptr<amimage> amim(new amimage());
      int dimx                    = (int)           $3;
      int dimy                    = (int)           $5;
      WORDTYPE inr_format         = (WORDTYPE)    (int)  $7;
      int endianness              = (int)           $9;
      boost::shared_array<char> file_format( $11);
      unsigned short first_slice  = (unsigned short)$13;
      unsigned short last_slice   = (unsigned short)$15;

         amim->SetDim(dimx,dimy,1);
     if (endianness)
       amim->endianness = BIG_END;
     else
       amim->endianness = LITTLE_END;

         im->AMIFromWT(1,inr_format,amim);
     amim->datafile    = AMI_DATAEXT;
     amim->file_format = file_format.get();
     amim->first_slice = first_slice;
     amim->last_slice  =  last_slice;

     if (amim->readdata_ext()) {
       im->SetAMImage(amim);
       driver.im_stack.AddImage(im);
     } else {
       // Error message
       driver.err_print("ReadRawImages() failed ... \n");
       driver.im_stack.AddImage(InrImage::ptr());
     }
      }
      |
      T_ReadRawImages T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA
                          expr T_COMMA expr_string  T_CL_PAR
      {
       /**
       Parameters:
         (3)  dimension in X
         (5)  dimension in Y
         (7)  dimension in Z
         (9)  image type, one of: CHAR, UCHAR, SHORT,
                                 USHORT, FLOAT, DOUBLE, RGB, FLOAT_VECTOR.
         (11)  endianess: 0 for little, 1 for big.
         (13) filename or file format

       Description:
         Read 3D raw data as an image.
         The program can read raw data compressed with gzip:
         if the file is not found, it looks for the same filename with a '.gz' extention. If
         it can find it, it will open the file using the 'popen' (pipe open) command and the 'gunzip' program.

       Example(s):
          i = ReadRawImages(256,256,256,USHORT,0,"data.raw")
       **/
      InrImage::ptr im ( new InrImage());
      boost::shared_ptr<amimage> amim(new amimage());
      int dimx                    = (int)           $3;
      int dimy                    = (int)           $5;
      int dimz                    = (int)           $7;
      WORDTYPE inr_format         = (WORDTYPE)   (int)   $9;
      int endianness              = (int)           $11;
      boost::shared_array<char> file_format( $13);

         amim->SetDim(dimx,dimy,dimz);
     if (endianness)
       amim->endianness = BIG_END;
     else
       amim->endianness = LITTLE_END;

     im->AMIFromWT(1,inr_format,amim);
     amim->datafile    = AMI_DATAEXT;
     amim->file_format = file_format.get();

     if (amim->readdata3D_ext()) {
       im->SetAMImage(amim);
       driver.im_stack.AddImage(im);
     } else {
       // Error message
       driver.err_print("ReadRawImages() failed ... \n");
       driver.im_stack.AddImage(InrImage::ptr());
     }
       }
       |
       T_ReadRawImages T_OP_PAR expr T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_COMMA
                           expr T_COMMA expr_string  T_CL_PAR
       {
       /**
       Parameters:
         (3)  dimension in X
         (5)  dimension in Y
         (7)  dimension in Z
         (9)  image type, one of: CHAR, UCHAR, SHORT,
                                 USHORT, FLOAT, DOUBLE, RGB,
         (11) Vectorial dimension
         (13)  endianess: 0 for little, 1 for big.
         (15) filename or file format

       Description:
         Read 3D raw data as an image.
         The program can read raw data compressed with gzip:
         if the file is not found, it looks for the same filename with a '.gz' extention. If
         it can find it, it will open the file using the 'popen' (pipe open) command and the 'gunzip' program.

       Example(s):
          i = ReadRawImages(256,256,256,FLOAT,3,0,"3dvectorfielddata.raw")
       **/
      InrImage::ptr im  = InrImage::ptr(new InrImage());
      boost::shared_ptr<amimage> amim(new amimage());
      int dimx                    = (int)           $3;
      int dimy                    = (int)           $5;
      int dimz                    = (int)           $7;
      WORDTYPE inr_format         = (WORDTYPE)     (int) $9;
      int vdim                    = (int)           $11;
      int endianness              = (int)           $13;
      boost::shared_array<char> file_format( $15);

     amim->SetDim(dimx,dimy,dimz);
     amim->SetVDim(vdim);
     if (endianness)
       amim->endianness = BIG_END;
     else
       amim->endianness = LITTLE_END;

     im->AMIFromWT(vdim,inr_format,amim);
     amim->datafile    = AMI_DATAEXT;
     amim->file_format = file_format.get();

     if (amim->readdata3D_ext()) {
       im->SetAMImage(amim);
       driver.im_stack.AddImage(im);
     } else {
       // Error message
       driver.err_print("ReadRawImages() failed ... \n");
       driver.im_stack.AddImage(InrImage::ptr());
     }
       }
       | T_vtkDicomRead T_OP_PAR expr_string T_CL_PAR
       {
       /**
       Parameters:
        (3) STRING EXPRESSION: dicom directory

       Description:
         Reads a dicom file using VTK
       **/
        InrImage::ptr  res;
        boost::shared_array<char> filename( $3);

        res = InrImage::ptr(Func_vtkDicomRead( filename.get()));

        Si (!res.get()) Alors
            driver.err_print("vtkDicomRead() error ... \n");
        FinSi

        driver.im_stack.AddImage(res);
      }
      | T_vtkMINCRead T_OP_PAR expr_string T_CL_PAR
      {
      /**
      Parameters:
      (3) STRING EXPRESSION: filename in minc format

      Description:
        Reads a file in minc format using vtk reader for MINC.
      **/
        boost::shared_array<char> filename( $3);

        InrImage::ptr res(Func_vtkMINCRead( filename.get()));

        Si (!res.get()) Alors
            driver.err_print("vtkMINCRead() error ... \n");
        FinSi

        driver.im_stack.AddImage(res);
      }
      | VAR_C_IMAGE_FUNCTION  T_OP_PAR param_list T_CL_PAR
      {
        GET_VARSTACK_VALUE(C_wrap_imagefunction,func);
        ParamList::ptr param($3);
        InrImage::ptr  im;
  
        im = InrImage::ptr( (*func)(param.get()));
        if (!im.get()) {
          driver.yyiperror(" image function returns NULL \n");
          YYABORT;
        }
        driver.im_stack.AddImage(im);
      }
      |
      T_Image
      {
          int res;
          string name;
          string inc_cmd; // increment the command line string

          res=AskImage(name);
          if (!res) {
            driver.yyiperror(" Need Image \n");
            YYABORT;
          }
          driver.im_stack.AddFileImage((char*)name.c_str());


          wxFileName filename(GetwxStr(name));
          filename.Normalize(wxPATH_NORM_ALL,wxEmptyString,wxPATH_UNIX);
          wxString newname(   filename.GetVolume()+filename.GetVolumeSeparator()+
                              filename.GetPath(wxPATH_GET_VOLUME,wxPATH_UNIX)+
                              filename.GetPathSeparator(wxPATH_UNIX)+
                              filename.GetFullName());
          driver.res_print(newname.mb_str());
          driver.res_print("\n");
          inc_cmd = str(format(" \"%1%\" // from browser ") % newname.mb_str());

          if (driver.InConsole())
            GB_main_wxFrame->GetConsole()
                            ->IncCommand(wxString::FromAscii(inc_cmd.c_str()));
      }
      |
      T_Image T_OP_PAR basic_type T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
        //printf(" ********** %d %f %f %f\n", $3, $5, $7, $9);
        InrImage::ptr im (new InrImage( (int) $5, (int) $7, (int) $9, (WORDTYPE) $3));
        driver.im_stack.AddImage(im);
      }
      |
      T_Image T_OP_PAR basic_type T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      /**
    Parameters:
      (3)  image type
      (5)  dimension in X
      (7)  dimension in Y
      (9)  dimension in Z
      (11) dimension in V: size of the vectors

    Description:
      Creates a new image
      **/
    //printf(" ********** %d %f %f %f\n", $3, $5, $7, $9);
    InrImage::ptr im( new InrImage( (int) $5, (int) $7, (int) $9, (int) $11, (WORDTYPE) $3));
    driver.im_stack.AddImage(im);
    }
    |
    T_Image T_OP_PAR basic_type T_COMMA expr T_COMMA var_image T_CL_PAR
    {
    /**
    Parameters:
      (3) image type
      (5) dimension in V: size of the vectors
      (7) reference image variable for the size,
            translation and voxel size.

    Description:
      Creates a new image from a reference image
    **/
      GET_VARSTACK_VAR_VAL(InrImage,var,varim);
      WORDTYPE imformat = (WORDTYPE) $3;
      int vdim   = (int) $5;
      string  imname;

      imname = str(format("newimagefrom_%s.ami.gz")
                  % var->Name());

      InrImage::ptr im (new InrImage(imformat,vdim,
                        imname.c_str(),varim.get()));
      driver.im_stack.AddImage(im);
    }
    |
    var_image
    {
      GET_VARSTACK_VAR_VAL(InrImage,var,varim);
      InrImage::ptr im;
      std::string  imname;

      // do we need a copy here ???
      // Yes, it is safer to start with a copy and it simplifies the following operations
      // otherwise, we need to have a const pointer to avoid modifying the image ...
      imname = (boost::format("copy_%s") % var->Name().c_str()).str();
      im = InrImage::ptr(new InrImage(varim->GetFormat(),varim->GetVDim(),imname.c_str(),varim.get()));
      (*im)=(*varim);
      driver.im_stack.AddImage(im);
      // driver.im_stack.AddImage(varim);
    }
    |
    var_image T_OP_BR expr T_CL_BR
    {
       /**
        Description:
          Applied on RGB or vectorial images,
          returns one component of the image:
          expr=0 returns Red   if RGB or the X coordinate if vectorial
          expr=1 returns Green if RGB or the Y coordinate if vectorial
          expr=2 returns Blue  if RGB or the Z coordinate if vectorial

        Example(s):
          i = Image "test.jpg"
          ired   = i[0]
          igreen = i[1]
          iblue  = i[2]

          print ired(i.tx/2,i.ty/2); print "\n"
          print i(i.tx/2,i.ty/2,0,0); print "\n"
       **/
        GET_VARSTACK_VAR_VAL(InrImage,var,im1);
        InrImage::ptr im;
        char  imname[200];
        int i;


        i = (int) $3;
        Si i<0               AlorsFait i = 0;
        Si i>=im1->GetVDim() AlorsFait i = im1->GetVDim()-1;
        sprintf(imname,"C%d_%s",i,var->Name().c_str());

         switch ( im1->_format ){
          case WT_RGB:
          case WT_RGBA:
             im = InrImage::ptr(new InrImage(WT_UNSIGNED_CHAR,1,imname,im1.get()));
          break;
          case WT_FLOAT_VECTOR:
             im = InrImage::ptr(new InrImage(WT_FLOAT,1,imname,im1.get()));
          break;

          case WT_UNSIGNED_CHAR:
          case WT_UNSIGNED_INT:
          case WT_SIGNED_INT:
          case WT_UNSIGNED_SHORT:
          case WT_SIGNED_SHORT:
          case WT_FLOAT:
          case WT_DOUBLE:
             im = InrImage::ptr(new InrImage(im1->_format,1,imname,im1.get()));
          break;

          default:
            driver.yyiperror(" operator [] does not handle this format \n");
            YYABORT;
          }
          im->InitBuffer();
          im1->InitBuffer();
          Repeter
            im->FixeValeur(im1->VectValeurBuffer(i));
                im1->IncBuffer();
          JusquA Non(im->IncBuffer()) FinRepeter
          driver.im_stack.AddImage(im);

       }
       |
       T_SUM T_OP_PAR expr_image  T_COMMA expr T_CL_PAR
       {
        /**
             Description:
             returns the sum of the values of an image along the specified dimension
             0 for X, 1 for Y, 2 for Z

             Parameters:
               (3) image expression
               (5) expr

            Keywords:

            See also:
                min, max, median

        **/
          InrImage::ptr im ( driver.im_stack.GetLastImage());
          InrImage* res = NULL;
          int dim = (int) $5;
          int i,j,k;
          double sum;
          // check that the image is scalar
          if (im->ScalarFormat()) {
          switch (dim) {
            case 0:
              res = new InrImage(1,im->DimY(),im->DimZ(),1,WT_FLOAT,"sumX.ami.gz");
              for(j=0;j<=im->DimY()-1;j++)
              for(k=0;k<=im->DimZ()-1;k++) {
                sum=0;
                for(i=0;i<=im->DimX()-1;i++)
                sum += (*im)(i,j,k);
                res->BufferPos(0,j,k);
                res->FixeValeur(sum);
              }
            break;
            case 1:
              res = new InrImage(im->DimX(),1,im->DimZ(),1,WT_FLOAT,"sumY.ami.gz");
              for(i=0;i<=im->DimX()-1;i++)
              for(k=0;k<=im->DimZ()-1;k++) {
                sum=0;
                for(j=0;j<=im->DimY()-1;j++)
                sum += (*im)(i,j,k);
                res->BufferPos(i,0,k);
                res->FixeValeur(sum);
              }
            break;
            case 2:
              res = new InrImage(im->DimX(),im->DimY(),1,1,WT_FLOAT,"sumZ.ami.gz");
              for(i=0;i<=im->DimX()-1;i++)
              for(j=0;j<=im->DimY()-1;j++) {
                sum=0;
                for(k=0;k<=im->DimZ()-1;k++)
          sum += (*im)(i,j,k);
                res->BufferPos(i,j,0);
                res->FixeValeur(sum);
              }
            break;
        } // end switch
      } else
      {
        driver.err_print("sum operator only for scalar images ... \n");
    }
      driver.im_stack.AddImagePointer(res);
    }
    |
    T_localmean T_OP_PAR expr_image  T_COMMA expr T_CL_PAR
    {
      InrImage::ptr im ( driver.im_stack.GetLastImage());
      InrImage* res =Func_localmean( im.get(), (int) $5);
      driver.im_stack.AddImagePointer(res);
    }
    |
    T_localmean2 T_OP_PAR expr_image  T_COMMA expr T_CL_PAR
    {
      InrImage::ptr im (driver.im_stack.GetLastImage());
      InrImage* res =Func_localmean2( im.get(), (int) $5);
      driver.im_stack.AddImagePointer(res);
    }
    |
    T_localSD T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr T_CL_PAR
    {
      InrImage::ptr mean    ( driver.im_stack.GetLastImage());
      InrImage::ptr im      ( driver.im_stack.GetLastImage());
      InrImage* res     = Func_localSD( im.get(), mean.get(), (int) $7);
      driver.im_stack.AddImagePointer(res);
    }
    |
    T_localSD2 T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr T_CL_PAR
    {
      InrImage::ptr mean  ( driver.im_stack.GetLastImage());
      InrImage::ptr im    ( driver.im_stack.GetLastImage());
      InrImage::ptr res(Func_localSD2( im.get(), mean.get(), (int) $7));
      driver.im_stack.AddImage(res);
    }
    |
    T_MAX T_OP_PAR expr_image T_COMMA expr_image T_CL_PAR
    {
      /**
      Description:
      Returns the image corresponding to the pointwise maximum between 2 images.


      See also:
              min, median
        **/
    InrImage::ptr im2(driver.im_stack.GetLastImage());
    InrImage::ptr im1(driver.im_stack.GetLastImage());
        float val1,val2;

    im1->InitBuffer();
    im2->InitBuffer();
    Repeter
          val1 = im1->ValeurBuffer();
      val2 = im2->ValeurBuffer();
      Si val2>val1 AlorsFait im1->FixeValeur(val2);
      im2->IncBuffer();
    JusquA Non(im1->IncBuffer())
    FinRepeter
    driver.im_stack.AddImage(im1);

      }
      |
      OpImage T_OP_PAR var_image T_COMMA ASTRING T_CL_PAR
      {

      GET_VARSTACK_VALUE(InrImage, im);
      InrImage::ptr res (Func_OpImage(im.get(),
                NULL,
                NULL,
                $5));
      Si (!res.get()) Alors
        driver.err_print("OpImage() erreur ... \n");
      FinSi
  
      driver.im_stack.AddImage(res);

      }
      |
      OpImage T_OP_PAR var_image T_COMMA ASTRING T_COMMA basic_type T_CL_PAR
      {

      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res( Func_OpImage(im.get(),
              NULL,
              NULL,
              $5,
              (WORDTYPE) $7));
    Si (!res.get()) Alors
      driver.err_print("OpImage() erreur ... \n");
    FinSi

    driver.im_stack.AddImage(res);


      }
      |
      OpImage T_OP_PAR var_image T_COMMA var_image T_COMMA ASTRING T_CL_PAR
      {

      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
    InrImage::ptr res ( Func_OpImage(
              varim1->Pointer().get(),
              varim2->Pointer().get(),
              NULL,
              $7));
    Si (!res.get()) Alors
      driver.err_print("OpImage() erreur ... \n");
    FinSi

    driver.im_stack.AddImage(res);

      }
      |
      OpImage T_OP_PAR var_image T_COMMA var_image T_COMMA ASTRING T_COMMA basic_type T_CL_PAR
      {

      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res (Func_OpImage(im.get(),
              im.get(),
              NULL,
              $7,
              $9));
    Si (!res.get()) Alors
      driver.err_print("OpImage() erreur ... \n");
    FinSi

    driver.im_stack.AddImage(res);

      }
      |
      OpImage T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA ASTRING T_CL_PAR
      {
      Variable<InrImage>::ptr  varim3(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
        InrImage::ptr  res ( Func_OpImage(
            varim1->Pointer().get(),
            varim2->Pointer().get(),
            varim3->Pointer().get(),
              $9));
        Si (!res.get()) Alors
          driver.err_print("OpImage() erreur ... \n");
        FinSi

        driver.im_stack.AddImage(res);
      }
      |
      OpImage T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA
                  ASTRING T_COMMA basic_type T_CL_PAR
      {
      Variable<InrImage>::ptr  varim3(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
        InrImage::ptr res (Func_OpImage(
            varim1->Pointer().get(),
            varim2->Pointer().get(),
            varim3->Pointer().get(),
              $9,
              $11));
        Si (!res.get()) Alors
          driver.err_print("OpImage() erreur ... \n");
        FinSi
        driver.im_stack.AddImage(res);
      }
      |
      FILTER
      T_OP_PAR expr_image
      T_COMMA expr
      T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      /**
        Parameters
          #1 expr_image: input image for the filter
          #2 expr:     standard deviation of the Gaussian kernel
          #3 expr:     derivation order in X coordinates
          #4 expr:     derivation order in Y coordinates
          #5 expr:     derivation order in Z coordinates

        Description:
        Apply a Gaussian filter of specified standard deviation to
        input image and returns a new image.

        Example(s):
        - Convolution with a Gaussian kernel:
        i = Image(FLOAT,10,10,10)
        j = filter(i,1,0,0,0)

     **/
        InrImage::ptr im (driver.im_stack.GetLastImage());

        InrImage::ptr res( Func_Filter( im.get(),
                  $5,
                  (int) $7,
                  (int) $9,
                  (int) $11));

        Si (!res.get()) Alors
          driver.err_print("Filter() erreur ... \n");
        FinSi
        driver.im_stack.AddImage(res);
      }
      | T_itk T_POINT T_CannyEdgeDetector T_OP_PAR var_image T_COMMA expr T_COMMA expr  T_CL_PAR
      {
        float var           = $7;
        float lowthreshold  = $9;
        //float highthreshold = $11;
        GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_itkCannyEdgeDetector(  im.get(), var, lowthreshold));
        Si (!res.get()) Alors
          driver.err_print("itk.CannyEdgeDetector() error ... \n");
        FinSi
        driver.im_stack.AddImage(res);
      }
      |
      T_vtkDist T_OP_PAR var_image T_CL_PAR
      {
        GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_vtkDist( im.get()));

        Si (!res.get()) Alors
          driver.err_print("vtkDist() erreur ... \n");
        FinSi
        driver.im_stack.AddImage(res);
      }
      |
      T_vtkMedian3D T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
        GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res (Func_vtkMedianFilter3D(
            im.get(),
            (int) $5,(int) $7,(int) $9));

        Si (!res.get()) Alors
          driver.err_print("vtkMedian3D() erreur ... \n");
        FinSi
        driver.im_stack.AddImage(res);
      }
      |
      T_AndreDist T_OP_PAR var_image T_CL_PAR
      {
        GET_VARSTACK_VALUE(InrImage, im);
        driver.err_print("The function AndreDist() has been removed for licence issues! \n");
/*
        InrImage::ptr  in = *(InrImage::ptr*) $3->Pointer();
        InrImage*  res;
        int ok;

        res = new InrImage(WT_FLOAT,"AndreDist.ami.gz", in.get());

        ok = dist_squared( in.get(),res);

        Si !ok Alors
          sprintf(tmp_string,"AndreDist() erreur ... \n");
          driver.err_print(tmp_string);
          delete res;
          res=NULL;
        Sinon
          driver.im_stack.AddImage(res);
        FinSi
*/
      }
      |
      T_2DFlux T_OP_PAR expr_image T_COMMA  expr T_CL_PAR
      {
    InrImage::ptr res (Func_2DFlux( driver.im_stack.GetLastImage().get(),$5));

    Si (res.get()) Alors
      driver.err_print("2DFlux() error ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_OutFlux T_OP_PAR var_image T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
      InrImage::ptr res ( Func_OutFlux( im.get()));

      Si (!res.get()) Alors
        driver.err_print("OutFlux() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
      }
      |
      T_OutFluxScalar T_OP_PAR var_image T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_OutFluxScalar( im.get()));
    Si (!res.get()) Alors
      driver.err_print("OutFluxScalar() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_OrientationRatio T_OP_PAR var_image T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_OrientationRatio2D( im.get()));
    Si (!res.get()) Alors
      driver.err_print("OrientationRatio() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_Skeleton T_OP_PAR var_image T_COMMA var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      /**
        Parameters:
          (3) IMAGE: input image
          (5) IMAGE: criterion for thinning
          (7) NUM: minimal threshold
          (9) NUM: maximal threshold
          (11) NUM: endpoint type 1: line 2: surface 3: line&surface
        Description:
          Creates a skeleton of the input image,
          the input image is considered binary (positive or 0 values)
          The skeletonization uses simple points.
          Usually the criterion image is an Euclidean distance
          transform to the boundaries of the object, and we
          can set than any point at distance lower than the minimal
          threshold shoud be removed automatically and any point
          at distance higher than the maximum should be kept.
      **/
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
    InrImage::ptr res ( Func_Thinning( varim1->Pointer().get(),
                 varim2->Pointer().get(),
                 $7,
                 $9,
                 $11));

    Si (!res.get()) Alors
      driver.err_print("Skeleton() error ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_SimplePoints T_OP_PAR var_image  T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res (Func_SimplePoints( im.get() ));

    Si !res.get() Alors
      driver.err_print("SimplePoints() error ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_CircleIntegral T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA
                           expr T_COMMA var_image T_CL_PAR
      {
      Variable<InrImage>::ptr  varim4(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim3(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
        InrImage::ptr res ( Func_CircleIntegration(
          varim1 ->Pointer().get(), // gradient
          varim2 ->Pointer().get(),  // first  vector
          varim3 ->Pointer().get(),  // second vector
          (float)     $9,              // radius
          CIRCLE_RESPONSE_MEAN,          // integration type
          varim4->Pointer().get())); // mask

        Si !res.get() Alors
          driver.err_print("CircleInt() error ... \n");
        FinSi
        driver.im_stack.AddImage(res);
      }
      |
      T_CircleIntegralExc T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA
                              expr T_COMMA var_image T_CL_PAR
      {
      Variable<InrImage>::ptr  varim4(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim3(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
      InrImage::ptr res ( Func_CircleIntegration(
        varim1 ->Pointer().get(),  // gradient
        varim2 ->Pointer().get(),  // first  vector
        varim3 ->Pointer().get(),  // second vector
        (float)     $9,              // radius
        CIRCLE_RESPONSE_MEAN,        // integration type
        varim4->Pointer().get())); // mask
      Si !res.get() Alors
        driver.err_print("CircleInt() error ... \n");
      FinSi
      driver.im_stack.AddImage(res);
      }
      |
      T_CircleIntSdExc T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA
                           expr T_COMMA var_image T_COMMA expr T_COMMA expr T_CL_PAR
      {
        /**
        Parameters:
          (3) gradient
          (5) first vector
          (7) second vector
          (9) radius
          (11) mask
          (13) threshold on standard deviation
          (15) threshold on excentricity

        Description:
          Compute integrations of the gradient vectors along circles
          in a plane defined by 2 vectors,
          with constraints on the standard deviation and the excentricity
          (see pub. Krissian et al. EMBS 2003)
        **/
      Variable<InrImage>::ptr  varim4(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim3(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
        InrImage::ptr res ( Func_CircleIntSdExc(
          varim1 ->Pointer().get(),  // gradient
          varim2 ->Pointer().get(),  // first  vector
          varim3 ->Pointer().get(),  // second vector
          (float)     $9,              // radius
          varim4->Pointer().get(),
          (float) $13,
          (float) $15,
          2, // pairs mode MEAN
          100, // keeps all points
          CIRCLE_RESPONSE_MEAN));

        Si !res.get() Alors
          driver.err_print("CircleIntSdExc() error ... \n");
        FinSi
        driver.im_stack.AddImage(res);
      }
      |
      T_CircleMinIntSdExc T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA
                           expr T_COMMA var_image T_COMMA expr T_COMMA expr T_COMMA expr  T_COMMA expr T_CL_PAR
      {
      /**
      Parameters:
        (3) gradient
        (5) first vector
        (7) second vector
        (9) radius
        (11) mask
        (13) threshold on standard deviation
        (15) threshold on excentricity
        (17) Pairs mode (0: MIN,1: MAX or 2:MEAN)
        (19) Highest percentage (Keeps only a percentage of highest boundary values)

      Description:
        Compute integrations of the gradient vectors along circles
        in a plane defined by 2 vectors,
        with constraints on the standard deviation and the excentricity
        (see pub. Krissian et al. EMBS 2003)
        with an additional constraint:
        it integrates half of the circle and takes the
        minimum between opposite values.
      **/
      Variable<InrImage>::ptr  varim4(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim3(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());

      InrImage::ptr res ( Func_CircleIntSdExc(
        varim1 ->Pointer().get(),  // gradient
        varim2 ->Pointer().get(),  // first  vector
        varim3 ->Pointer().get(),  // second vector
        (float)     $9,              // radius
        varim4->Pointer().get(),
        (float) $13,
        (float) $15,
        (int) $17,
        (int) $19,
        CIRCLE_RESPONSE_MEAN));

      Si !res.get() Alors
        driver.err_print("CircleIntSdExc() error ... \n");
      FinSi
      driver.im_stack.AddImage(res);
      }
      |
      T_LocalExtrema T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA var_image T_CL_PAR
      {

      Variable<InrImage>::ptr  varim4(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim3(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());

    InrImage::ptr res( Func_LocalExtrema( 
                  varim1->Pointer().get(),  // input image
                  varim2->Pointer().get(),  // first  vector
                  varim3->Pointer().get(),  // second vector
                  varim4->Pointer().get())); // mask
    Si !res.get() Alors
      driver.err_print("LocalExtrema() error ... \n");
    FinSi

    driver.im_stack.AddImage(res);
      }
      |
      T_LocalExtrema T_OP_PAR var_image T_COMMA var_image T_COMMA var_image T_COMMA var_image T_COMMA expr T_CL_PAR
      {
      Variable<InrImage>::ptr  varim4(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim3(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
    int samples = (int) $11;

    InrImage::ptr res( Func_LocalExtrema( 
                  varim1->Pointer().get(),  // input image
                  varim2->Pointer().get(),  // first  vector
                  varim3->Pointer().get(),  // second vector
                  varim4->Pointer().get(),  // mask
                 samples));                   // number of sample points around the circle

    Si !res.get() Alors
      driver.err_print("LocalExtrema() error ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
     |
      T_NormalField T_OP_PAR var_image  T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res( Func_NormalSmoothField( im.get() ));

    Si !res.get() Alors
      driver.err_print("NormalField() error ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_NormalField T_OP_PAR var_image T_COMMA var_image T_CL_PAR
      {
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
    InrImage::ptr res( Func_NormalSmoothField( 
                    varim1->Pointer().get() , 
                    varim2->Pointer().get() ));

    Si !res.get() Alors
      driver.err_print("NormalField() error ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_DirConnectivity T_OP_PAR var_image T_COMMA var_image T_CL_PAR
      {
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
    InrImage::ptr res( Func_DirConnectivity( 
        varim1->Pointer().get() ,
        varim2->Pointer().get() ));

    Si res.get() Alors
      driver.err_print("DirConnectivity() error ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
     |
      NormGrad
      T_OP_PAR expr_image
      T_COMMA expr T_CL_PAR
      {
    InrImage::ptr input ( driver.im_stack.GetLastImage());

    InrImage::ptr res ( Func_NormGrad( input.get(), $5));
    Si (!res.get()) Alors
      driver.err_print("NormGrad() error ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_DiscNormGrad
      T_OP_PAR var_image  T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res (Func_DiscNormGrad( im.get()));
    Si !res.get() Alors
      driver.err_print("discnormgrad() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_DiscMeanCurvature
      T_OP_PAR var_image  T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res (Func_DiscMeanCurvature( im.get()));
    Si !res.get() Alors
      driver.err_print("DiscMeanCurvature() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_gradient
      T_OP_PAR var_image
      T_COMMA expr T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res (Func_Gradient( im.get(),
                 $5));
    Si !res.get() Alors
      driver.err_print("Filter() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
        |
        T_Laplacian T_OP_PAR var_image  T_CL_PAR
        {
    /**
        Parameters:
            (3) input image.

        Description:
        Computes a discrete laplacian (sum of second order derivatives),
        in 2D or 3D depending on the image dimension.
    **/
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_Laplacian(im.get()));
    Si !res.get() Alors
      driver.err_print("Filter() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
        }
      |
      SecDerGrad
      T_OP_PAR var_image
      T_COMMA expr T_CL_PAR
      {
        GET_VARSTACK_VALUE(InrImage,im);
        InrImage::ptr res (Func_SecDerGrad( im.get(), $5));
        Si !res.get() Alors
          fprintf(stderr,"SecDerGrad() erreur ... \n");
        FinSi
        driver.im_stack.AddImage(res);
      }
      |
      SecDerGrad2
      T_OP_PAR var_image
      T_COMMA expr T_CL_PAR
      {
        GET_VARSTACK_VALUE(InrImage,im);
        InrImage::ptr res ( Func_SecDerGrad2( im.get(),
                 $5));
    Si !res.get() Alors
      fprintf(stderr,"SecDerGrad2() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
    }
    | T_AutoCrop T_OP_PAR expr_image T_COMMA expr T_CL_PAR
    {
        InrImage::ptr im ( driver.im_stack.GetLastImage());
        InrImage::ptr res ( Func_AutoCrop(im.get(),(int)$5));
        driver.im_stack.AddImage(res);
    }
    |
      var_image T_OP_BR image_extent T_CL_BR
    {
      GET_VARSTACK_VALUE(InrImage,im);
      ImageExtent<float>* extent = (ImageExtent<float>*) $3;
  
      //extent->print();
      extent->SetRelative(im.get());
  
      //extent->print();
      //cout << "xmax = " << (int)  extent->Xmax() << endl;
      //cout << "xmax = " << (int)  round((double)extent->Xmax()) << endl;
      InrImage::ptr res ( Func_SubImage( im.get(),
                  (int)  round((double)extent->Xmin()),
                  (int)  round((double)extent->Ymin()),
                  (int)  round((double)extent->Zmin()),
                  (int)  round((double)extent->Xmax()),
                  (int)  round((double)extent->Ymax()),
                  (int)  round((double)extent->Zmax())
                  ));
      delete extent;
      Si !res.get() Alors
        fprintf(stderr,"SubImage() erreur ... \n");
      FinSi
        driver.im_stack.AddImage(res);
    }
    |
    var_image
      T_OP_BR  T_COLON  T_COMMA
      T_COLON  T_COMMA
      expr T_COLON expr T_CL_BR
    {
      GET_VARSTACK_VALUE(InrImage, im);

      InrImage::ptr res (Func_SubImage( im.get(),
                  0, 0,  (int) round($7),
                  im->DimX()-1,  im->DimY()-1, (int) round($9)));
      Si !res.get() Alors
        fprintf(stderr,"SubImage() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
      }
      |
      SubImage
      T_OP_PAR var_image
      T_COMMA expr T_COMMA expr T_COMMA expr
      T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      /**
      Parameters
        #1 var_image: input image
        #2 expr:      X min
        #3 expr:      Y min
        #4 expr:      Z min
        #5 expr:      X max
        #6 expr:      Y max
        #7 expr:      Z max

      Extract a rectangular subimage from the input image, the subimage
      keeps the information of the translation and it can be put back
      at the same position using putimage command.
      The same operation can also be achieved using the [] operator.

      Example(s):

      - Extract a subimage of size 4x4x4

      i = Image(FLOAT,10,10,10)
      j = subimage(i,5,5,5,8,8,8)

      See also:
        putimage, []

      **/
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_SubImage( im.get(),
                 (int) $5, (int) $7, (int) $9,
                 (int) $11,(int) $13,(int) $15));
    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPdilate T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_EDP_dilate( im.get(),
                   $5,  $7, (int) $9));
    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPdilate T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_EDP_dilate( im.get(), $5,  $7));
    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPdilate T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    float Imin = $9;
    float Imax = $11;
    InrImage::ptr res ( Func_EDP_dilate( im.get(), $5,  $7, Imin, Imax));
    Si (!res.get()) Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPerode T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_EDP_erode( im.get(),
                  $5,  $7, (int) $9));
    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPerode T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_EDP_erode( im.get(), $5,  $7));
    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPerode T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
    /**
    Parameters:
      (3)  initial image
      (5)  total operation size
      (7)  time step
      (9)  minimal intensity
      (11) maximal intensity
    Description:
      Grayscale morphological erosion
      using Brockett and Maragos scheme with a given
      size and time step in voxel units
      minimal and maximal intensities allow to speed up the process
    **/
      GET_VARSTACK_VALUE(InrImage, im);
    float Imin = $9;
    float Imax = $11;
    InrImage::ptr res ( Func_EDP_erode( im.get(), $5,  $7, Imin, Imax));
    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPopen
      T_OP_PAR var_image
      T_COMMA expr T_COMMA expr T_CL_PAR
      {
    /**
    Parameters:
      (3)  initial image
      (5)  total operation size
      (7)  time step
    Description:
      Grayscale morphological opening
      using Brockett and Maragos scheme with a given
      size and time step in voxel units
    **/
      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_EDP_open( im.get(),
                    $5,  $7));
    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPopen
      T_OP_PAR var_image
      T_COMMA expr T_COMMA expr  T_COMMA expr T_COMMA expr T_CL_PAR
      {
    /**
    Parameters:
      (3)  initial image
      (5)  total operation size
      (7)  time step
      (9)  minimal intensity
      (11) maximal intensity
    Description:
      Grayscale morphological opening
      using Brockett and Maragos scheme with a given
      size and time step in voxel units
      minimal and maximal intensities allow to speed up the process
    **/
      GET_VARSTACK_VALUE(InrImage, im);
    float Imin = $9;
    float Imax = $11;
    InrImage::ptr res ( Func_EDP_open( im.get(),
                    $5,  $7, Imin, Imax));
    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPclose
      T_OP_PAR var_image
      T_COMMA expr T_COMMA expr T_CL_PAR
      {
        GET_VARSTACK_VALUE(InrImage,im);
    InrImage::ptr res ( Func_EDP_close( im.get(),
                   $5,  $7));

    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_EDPclose
      T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
    float Imin = $9;
    float Imax = $11;

      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_EDP_close( im.get(),
                   $5,  $7, Imin, Imax));

    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      AnisoGS T_POINT T_GetOutput
      {
    InrImage::ptr res ( Func_AnisoGS_GetOutput());
    Si !res.get() Alors
      fprintf(stderr,"SubImage() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      AnisoGS T_POINT T_GetDiffCoeff
      {
    InrImage::ptr res ( Func_AnisoGS_GetDiffusionCoeff());
    Si !res.get() Alors
      fprintf(stderr,"GetDiffCoeff() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_LevelSetsCURV T_POINT TInit T_OP_PAR var_image  T_COMMA expr  T_CL_PAR
      {
    //
    // Parameters:
    // 1. input image
    // 2. isosurface threshold on the input image

      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_LevelSets_Init( im.get(),
                   $7));
    Si !res.get() Alors
      fprintf(stderr,"Func_LevelSets_Init() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_LevelSetsCURV T_POINT TInit T_OP_PAR var_image T_COMMA var_image  T_CL_PAR
      {
    //
    // Parameters:
    // 1. input image
    // 2. Initial position of the level set a the zero-crossing of
    //    this image

      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
    InrImage::ptr res ( Func_LevelSets_Init(
           varim1->Pointer().get(),
           varim2->Pointer().get()
                   ));

    Si !res.get() Alors
      fprintf(stderr,"Func_LevelSets_Init() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
    }
    |
    T_LevelSetsCURV T_POINT T_GetOutput
    {

    InrImage::ptr res ( Func_LevelSets_GetCurrentOutput());
    Si (!res.get()) Alors
      fprintf(stderr,"Func_LevelSets_GetOutput() error ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
      |
      T_LevelSetsCURV T_POINT T_GetAttachVect  T_OP_PAR var_image T_CL_PAR
      {

      GET_VARSTACK_VALUE(InrImage, im);
    InrImage::ptr res ( Func_LevelSets_GetAttachVectors( im.get()));
    Si !res.get() Alors
      fprintf(stderr,"Func_GetAttachVect() erreur ... \n");
    FinSi
    driver.im_stack.AddImage(res);
      }
        |
        AnisoGS
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      /**
      Parameters:
        (1) input image
        (2) sigma: standard deviation of the Gaussian smoothing applied to compute the local structure orientations.
        (3) k: diffusion parameter that controls the diffusion depending on the local gradients.
        (4) beta: data attachment coefficient.
        (5) number of iterations
      Description:
        Runs an anisotropic diffusion filter using Gauss-Seidel numerical scheme, based on the Flux-diffusion algorithm [Krissian,IEEE TMI 2002].
      **/
      int        nb_iter,i;
      float       error;
      GET_VARSTACK_VALUE(InrImage, im);

      Func_InitAnisoGS( im.get(),
                  $5,  $7, $9);

          nb_iter = (int) $11;
      if (nb_iter < 1) nb_iter = 1;

      Pour(i,1,nb_iter)
        error = Func_ItereAnisoGS();
      FinPour

      driver.im_stack.AddImage(InrImage::ptr(Func_AnisoGS_GetOutput()));
      Func_EndAnisoGS();


    }
        |
        T_FluxDiffusion
        T_OP_PAR var_image T_COMMA var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      //
      // param 1: input image
      // 2: vector field
      // 3: data attachment coeff
      // 4: diffusion coeff
      // 5: number of iterations
      //
      int        nb_iter,i;
      float       error;

      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
      Func_InitAnisoGS( varim1->Pointer().get(),
                  1,  1, $7);


          nb_iter = (int) $11;
      if (nb_iter < 1) nb_iter = 1;

      Pour(i,1,nb_iter)
        error = Func_ItereFlux(varim2->Pointer().get(),$9);
      FinPour

      InrImage::ptr res ( Func_AnisoGS_GetOutput());
      Si !res.get() Alors
        fprintf(stderr,"AnisoGS() erreur ... \n");
      FinSi
      Func_EndAnisoGS();
      driver.im_stack.AddImage(res);

    }
    |
    T_vtkAnisoGS
    T_OP_PAR var_image
    T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      /**
        Parameters:
          (3)  input image
          (5)  standard deviation for Gaussian smoothing sigma
          (7)  threshold on the gradient magnitude
          (9)  data attachment coefficient
          (11) number of iterations
          (13) number of threads

        Description:
          Anisotropic diffusion filter based on the Flux diffusion paper
          (Krissian, 2002, IEEE TMI).
      **/
      GET_VARSTACK_VALUE(InrImage, im);
      float      sigma   = $5;
      float      k       = $7;
      float      beta    = $9;
      int        nb_iter    = (int) $11;
      int        nb_threads = (int) $13;

      InrImage::ptr  res ( Func_vtkAnisoGS(  im.get(), sigma, k, beta, nb_iter, nb_threads));

      Si !res.get() Alors
        fprintf(stderr,"Func_vtkAnisoGS() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);

    }
        |
        AnisoSmoothGS
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      int        nb_iter,i;
      float       error;

      GET_VARSTACK_VALUE(InrImage, im);
      Func_InitAnisoGS( im.get(), $5,  $7, $9);


      Func_SetSmoothedParam(1);

      nb_iter = (int) $11;
      if (nb_iter < 1) nb_iter = 1;

      Pour(i,1,nb_iter)
        error = Func_ItereAnisoGS();
      FinPour
      InrImage::ptr res ( Func_AnisoGS_GetOutput());
      Si !res.get() Alors
        fprintf(stderr,"AnisoGS() erreur ... \n");
      FinSi
      Func_EndAnisoGS();
      driver.im_stack.AddImage(res);

    }
        |
        T_AnisoWeickert T_POINT TInit
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
      InrImage::ptr res ( Func_InitWeickert( im.get(),
                $7,  $9, $11));

      Si !res.get() Alors
        fprintf(stderr,"Func_InitWeickert() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoCW        T_POINT TInit
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
      InrImage::ptr res ( Func_InitWeickertCoherence( im.get(),
                $7,  $9, $11, $13, $15));

      Si !res.get() Alors
        fprintf(stderr,"Func_InitWeickert() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
        }
        |
        T_SRAD_qcoeff T_OP_PAR var_image T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
      InrImage::ptr res ( Func_SRAD_qcoeff( im.get()));
      Si !res.get() Alors
        fprintf(stderr,"Func_SRAD_qcoeff() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoSRAD
        T_OP_PAR var_image
        T_COMMA expr T_COMMA expr T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
      float dt = (float) $5;
      int numit = (int) $7;

      InrImage::ptr res ( Func_SRAD( im.get(),dt,numit,
               0, // Lee mode
               0,  // Yu neighborhood
               NULL)); // no extent

      Si !res.get() Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoSRAD
        T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
      float dt = (float) $5;
      int numit = (int) $7;
      ImageExtent<float>* extent = (ImageExtent<float>*) $9;

      InrImage::ptr res ( Func_SRAD( im.get(),dt,numit,
               0, // Lee mode
               0, // Yu neighborhood
               extent));

      delete extent;

      Si !res.get() Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoSRAD
        T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
      float dt = (float) $5;
      int numit = (int) $7;
      int neighborhood = (int) $9;
      ImageExtent<float>* extent = (ImageExtent<float>*) $11;

      InrImage::ptr res ( Func_SRAD( im.get(),dt,numit,
               0, // Lee mode
               neighborhood,
               extent));

      delete extent;

      Si !res.get() Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoSRAD2
        T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
      float dt = (float) $5;
      int numit = (int) $7;
      ImageExtent<float>* extent = (ImageExtent<float>*) $9;


      InrImage::ptr res ( Func_SRAD2( im.get(),dt,numit,
                0, // Lee function
                0, // Yu neighborhood
                extent
                ));

      delete extent;

      Si !res.get() Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoSRAD2
        T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA
    expr T_COMMA image_extent T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
      float dt = (float) $5;
      int numit = (int) $7;
      int neighborhood = (int) $9;
      ImageExtent<float>* extent = (ImageExtent<float>*) $11;

      InrImage::ptr res ( Func_SRAD2( im.get(),dt,numit,
                0, // Lee function
                neighborhood, // neighborhood size
                extent // bounding box
                ));
      delete extent;

      Si !res.get() Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
      FinSi

      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoLeeAdd2 T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
      float dt = (float) $5;
      int numit = (int) $7;
      ImageExtent<float>* extent = (ImageExtent<float>*) $9;

      InrImage::ptr res ( Func_SRAD2( im.get(),dt,numit,
                2, // Additive mode
                0, // Yu neighborhood
                extent // constant region
                ));
      delete extent;

      Si !res.get() Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
        }
        |
        T_AnisoDPAD T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
      float dt         = (float) $5;
      int numit        = (int) $7;
      int neighborhood = (int) $9;
      ImageExtent<float>* extent = (ImageExtent<float>*) $11;

      InrImage::ptr res ( Func_SRAD( im.get(),dt,numit,
               1, // Kuan's function
               neighborhood, // Yu neighborhood
               extent));
      delete extent;

      Si !res.get() Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
    }
    |
    T_AnisoDPAD2
    T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im);
      float dt = (float) $5;
      int numit = (int) $7;
      int neighborhood = (int) $9;
      ImageExtent<float>* extent = (ImageExtent<float>*) $11;

      InrImage::ptr res ( Func_SRAD2( im.get(),dt,numit,
                1, // Kuan's function
                neighborhood, // Yu neighborhood
                extent
                ));
      delete extent;
      Si !res.get() Alors
        fprintf(stderr,"Func_AnisoSRAD() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
    }
    |
    T_AnisoNRAD
    T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA image_extent T_CL_PAR
    {
        /**
         Parameters:
            (3) var_image: input image
            (5) numerical expression: mode, 0 for Lee Filter, 1: Kuan Filter,
                 2: additive, 3: MRI denoising
            (7) numerical expression: dt, time step
            (9) numerical expression: numit, number of iterations
            (11) numerical expression: size of the neighborhood n, neighborhood is
                (2n+1)^N, where N is the dimension of the image domain.
            (13) image extent: area of interest to calculate the noise
                 standard deviation, usually a constant area, for MRI denoising: background area

         Description:
            Runs a noise reducing anisotropic diffusion, Lee and Kuan's mode are
            for speckle noise in ultrasound images, additive mode is for additive
            stationary noise and MRI is for MRI style noise. In the case of MRI,
            the filter is designed to run on the square of the image intensity.
         **/
       GET_VARSTACK_VALUE(InrImage, im);
           int mode = (int) $5;
            float dt = (float) $7;
            int numit = (int) $9;
            int neighborhood = (int) $11;
            ImageExtent<float>* extent = (ImageExtent<float>*) $13;

            InrImage::ptr res ( Func_SRAD2( im.get(),dt,numit,
                        mode, // fiter mode
                        neighborhood, //  neighborhood size
                        extent
                        ));
            delete extent;

            Si !res.get() Alors
                fprintf(stderr,"Func_AnisoNRAD() erreur ... \n");
            FinSi
            driver.im_stack.AddImage(res);
    }
    |
    T_AnisoRudinMult
    T_OP_PAR var_image
    T_COMMA expr T_COMMA expr  T_COMMA expr T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, initim);
      float dt = (float) $5;
      int numit = (int) $7;
      int attach = (int) $9;
      int scheme = (int) $11;
      InrImage::ptr res;

      if (initim->DimZ()==1)
        res = InrImage::ptr( Func_RudinMultiplicative2D( initim.get(),dt,numit,attach, scheme));
      else
        res = InrImage::ptr( Func_RudinMultiplicative3D( initim.get(),dt,numit,attach, scheme));

      Si !res.get() Alors
        fprintf(stderr,"Func_AnisoRudinMult() erreur ... \n");
      FinSi
      driver.im_stack.AddImage(res);
    }
    |
    TAddGaussNoise
    T_OP_PAR var_image
    T_COMMA expr T_COMMA expr T_CL_PAR
    {
      /**
        Description:
          Add Gaussian noise with specified mean and variance.
      **/

      GET_VARSTACK_VALUE(InrImage, im);
        AjouteBruit* addnoise;
        float mean;
        float sd;
        char  resname[256];

      mean = $5;
      sd   = $7;

      sprintf(resname,"%s.noise",im->GetName());
      InrImage::ptr res( new InrImage(WT_FLOAT, resname, im.get()));

      (*res)=(*im);
      addnoise = new AjouteBruit();
      addnoise->AjouteBruitGaussien(res.get(),mean,sd);
      delete addnoise;
      driver.im_stack.AddImage(res);

    }
        |
    T_rot2D T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA
                    expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
    /**
      Parameters:
        - input image
        - rotation center X,Y
        - rotation angle
        - dimensions of the resulting image
      Description:
        - Performs a 2D rotation of the image
    **/

      GET_VARSTACK_VALUE(InrImage, im);
          InrImage::ptr res ( Func_rot2D( im.get(),
                $5, $7,   // rotation center
                $9,       // angle of rotation
                $11, $13  // dimension of the new image
                ));

      driver.im_stack.AddImage(res);
        }
        | T_Xpos T_OP_PAR var_image  T_CL_PAR
        {
        /**
        Description:
        Creates an new USHORT image that contains
        the X coordinates of the given image.
        This can be very useful for arithmetic
        operations on images.

        Example(s):
        - Putting the image borders in X coordinates at 0:

        x = Xpos(i)
        i = i * (x>2) * ( x < i.tx-3)

        See also:
                Ypos, Zpos
       **/

          int x,y,z;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( new InrImage(WT_UNSIGNED_SHORT,1,
                   "tmp_X.inr.gz",
                   im.get()));
        res->InitBuffer();
        Pour(z,0,res->_tz-1)
        Pour(y,0,res->_ty-1)
        Pour(x,0,res->_tx-1)
          res->FixeValeur(x);
          res->IncBuffer();
            FinPour
            FinPour
            FinPour

        driver.im_stack.AddImage(res);
        }
        | T_Ypos T_OP_PAR var_image  T_CL_PAR
        {
        /**
        Description:
        Creates an new USHORT image that contains
        the Y coordinates of the given image.
        This can be very useful for arithmetic
        operations on images.

        Example(s):
        - Putting the image borders in X coordinates at 0:

        y = Ypos(i)
        i = i * (y>2) * ( y < i.tx-3)

        See also:
                Xpos, Zpos
       **/

          int x,y,z;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( new InrImage(WT_UNSIGNED_SHORT,1,
                   "tmp_X.inr.gz",
                   im.get()));
        res->InitBuffer();
        Pour(z,0,res->_tz-1)
        Pour(y,0,res->_ty-1)
        Pour(x,0,res->_tx-1)
          res->FixeValeur(y);
          res->IncBuffer();
            FinPour
            FinPour
            FinPour

        driver.im_stack.AddImage(res);
        }
        | T_Zpos T_OP_PAR var_image  T_CL_PAR
        {
        /**
        Description:
        Creates an new USHORT image that contains
        the Z coordinates of the given image.
        This can be very useful for arithmetic
        operations on images.

        Example(s):
        - Putting the image borders in Z coordinates at 0:

        z = Zpos(i)
        i = i * (z>2) * ( z < i.tx-3)

        See also:
                Xpos, Ypos
       **/

          int x,y,z;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( new InrImage(WT_UNSIGNED_SHORT,1,
                   "tmp_X.inr.gz",
                   im.get()));
        res->InitBuffer();
        Pour(z,0,res->_tz-1)
        Pour(y,0,res->_ty-1)
        Pour(x,0,res->_tx-1)
          res->FixeValeur(z);
          res->IncBuffer();
            FinPour
            FinPour
            FinPour

        driver.im_stack.AddImage(res);
        }
        | T_SpacePos T_OP_PAR var_image  T_CL_PAR
        {
        /**
        Description:
        Creates an new FLOAT vectorial image that contains
        the coordinates of the voxels (/pixels) of the given image.
        The coordinates are given in Real Coordinates (world),
        and are saved as vectors.


        See also:
                Xpos, Ypos, Zpos
       **/

          int x,y,z;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( new InrImage(WT_FLOAT,3,
                   "tmp_spacepos.inr.gz",
                   im.get()));
        res->InitBuffer();
        Pour(z,0,res->_tz-1)
        Pour(y,0,res->_ty-1)
        Pour(x,0,res->_tx-1)
          res->VectFixeValeurs(res->SpacePosX(x),
                               res->SpacePosY(y),
                               res->SpacePosZ(z));
          res->IncBuffer();
        FinPour
        FinPour
        FinPour
        driver.im_stack.AddImage(res);
        }
        |
        VAR_SURFDRAW T_POINT T_getimage
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          driver.im_stack.AddImage(InrImage::ptr(( varsurfd->Pointer())->GetCanvas()->GetGLImage()));
        }
        |
        VAR_SURFDRAW T_POINT T_GetImageFromX
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          driver.yyiperror("Not available in new wxwidgets version of the 3D viewer ! ");
          driver.im_stack.AddImage(InrImage::ptr());
/*
          driver.im_stack.AddImage((*(Viewer3D_ptr*) $1->Pointer())->GetInrImage());
*/
    }
    |
    VAR_IMAGEDRAW T_POINT T_getimage
    {
      GET_VARSTACK_VALUE(DessinImage, imdraw)
      driver.im_stack.AddImagePointer(imdraw->GetInrImage());
    }
    |
    T_threscross T_OP_PAR var_image T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im);
      InrImage::ptr res ( Func_ThresholdCrossing( im.get(), $5));
       driver.im_stack.AddImage(res);
    }
    |
    T_IsocontourPoints T_OP_PAR var_image T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im);
      InrImage::ptr res ( Func_IsocontourPoints( im.get(), $5));
      driver.im_stack.AddImage(res);
    }
    |
    T_IsosurfDist T_OP_PAR var_image T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im);
      InrImage::ptr res ( Func_IsosurfDist( im.get(), $5));
      driver.im_stack.AddImage(res);

    }
    |
    T_vtkIsoContourDist T_OP_PAR var_image T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im);
      InrImage::ptr res ( Func_vtkIsoContourDist( im.get(), $5));
      driver.im_stack.AddImage(res);
    }
    |
    T_vtkFastMarching T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3) input image
      (5) initialization image
      (7) maximal time
    Description:
      Runs the fast marching algorithm
     **/

        InrImage::ptr    init (driver.im_stack.GetLastImage()); // 2nd param
        InrImage::ptr    input(driver.im_stack.GetLastImage()); // 1st param
        float   maxtime = (float) $7;

        InrImage::ptr res ( Func_vtkFastMarching( input.get(), init.get(),  maxtime));
        driver.im_stack.AddImage(res);
    }
    |
    T_vtkFastMarchingTarget T_OP_PAR expr_image T_COMMA expr_image
                        T_COMMA expr
                        T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3) input image
      (5) initialization
      (7) maximal time
      (9)  target point X coord
      (11)               Y
      (13)              Z
    Description:
      Runs the fast marching algorithm
     **/

      InrImage::ptr init  (driver.im_stack.GetLastImage());
      InrImage::ptr input (driver.im_stack.GetLastImage());
      float   maxtime = (float) $7;

      InrImage::ptr res ( Func_vtkFastMarchingTarget( input.get(), init.get(),  maxtime,
              (int) round($9),
              (int) round($11),
              (int) round($13)
              ));
      driver.im_stack.AddImage(res);
    }
    |
    T_vtkFastMarching T_OP_PAR expr_image T_COMMA expr_image T_COMMA
                          expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3)  input image
      (5)  initialization
      (7)  mean
      (9)  standard deviation
      (11) maximal time
    Description:
      Runs the fast marching algorithm
     **/

      InrImage::ptr init  (driver.im_stack.GetLastImage());
      InrImage::ptr input (driver.im_stack.GetLastImage());
      float   mean    = (float) $7;
      float   sd      = (float) $9;
      float   maxtime = (float) $11;

      InrImage::ptr res ( Func_vtkFastMarching( input.get(), init.get(), mean, sd, maxtime));
      driver.im_stack.AddImage(res);
    }
    |
    T_vtkFastMarching T_OP_PAR expr_image T_COMMA expr_image T_COMMA
                          expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3)  input image
      (5)  initialization
      (7)  mean
      (9)  standard deviation
      (11) maximal time
      (13) initialization type
    Description:
      Runs the fast marching algorithm
     **/
      /* Version without initialization */

      InrImage::ptr init  (driver.im_stack.GetLastImage());
      InrImage::ptr input (driver.im_stack.GetLastImage());
      float   mean     = (float) $7;
      float   sd       = (float) $9;
      float   maxtime  = (float) $11;
      int     inittype = (int) $13;

      InrImage::ptr res ( Func_vtkFastMarching( input.get(), init.get(), mean, sd, maxtime,inittype));
      driver.im_stack.AddImage(res);
    }
    |
    T_vtkFastMarching T_OP_PAR expr_image T_COMMA expr_image T_COMMA
                          var_image T_COMMA
                          expr T_COMMA
                          expr  T_CL_PAR
    {
    /**
    Parameters:
      (3)  input image
      (5)  initialization
      (7)  track image, must be of format unsigned int
      (9)  maximal time
      (11) initialization type
    Description:
      Runs the fast marching algorithm using Dijkstra
      algorithm and tracking back the trajectories
     **/
      /* Version without initialization */

      InrImage::ptr init ( driver.im_stack.GetLastImage());
      InrImage::ptr input( driver.im_stack.GetLastImage());
      float   maxtime    = (float) $9;
      int     inittype   = (int)   $11;
      GET_VARSTACK_VALUE(InrImage, im);

      InrImage::ptr res ( Func_vtkFastMarching(
                  input.get(),
                  init.get(),
                  im.get(),
                  maxtime,inittype));
      driver.im_stack.AddImage(res);
    }
    |
    T_Convolve T_OP_PAR var_image T_COMMA var_image T_CL_PAR
    {
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
      InrImage::ptr res ( Func_Convolve(
                  varim1->Pointer().get(),
                  varim2->Pointer().get()));
      driver.im_stack.AddImage(res);

      }
      |
      T_ConvolveMask T_OP_PAR var_image T_COMMA var_image T_COMMA expr_image T_CL_PAR
      {
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());
        InrImage::ptr mask (driver.im_stack.GetLastImage());

        InrImage::ptr res ( Func_ConvolveMask(varim1->Pointer().get(),
                  varim2->Pointer().get(),
                  mask.get()));
        driver.im_stack.AddImage(res);

      }
      |
      T_ChamferDT T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
      {
      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_Chamfer(im.get(), $5, $7, $9));
        driver.im_stack.AddImage(res);
        }
        |
        T_Chamfer2DT T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
      GET_VARSTACK_VALUE(InrImage, im);
          InrImage::ptr res ( Func_Chamfer2(im.get(), $5, $7, $9));
          driver.im_stack.AddImage(res);

        }
        |
        T_Chamfer2DT T_OP_PAR var_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {

        float a = $5;
        float b = $7;
        float c = $9;
        float dmax = $11;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_Chamfer2(im.get(), a,b,c,dmax));
        driver.im_stack.AddImage(res);

        }
        |
        T_BorgeforsDT T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {
        float dmax = $5;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr  res ( Func_Chamfer2(im.get(),
                  0.92644, 1.34065, 1.65849,
                  dmax));
        driver.im_stack.AddImage(res);

        }
        |
        T_BorgeforsSDT T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {
        float dmax = $5;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_Chamfer2Signed(im.get(),
                    0.92644, 1.34065, 1.65849,
                    dmax));
        driver.im_stack.AddImage(res);

        }
        |
        T_vtkSignedBorgefors T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {
        float dmax = $5;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_vtkSignedBorgefors(im.get(),
                    dmax));
        driver.im_stack.AddImage(res);
        }
        |
        T_vtkSignedFMDist T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {
        float dmax = $5;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_vtkSignedFMDist(im.get(),
                     dmax));
        driver.im_stack.AddImage(res);

        }
        |
        T_PropagationDist T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {
        float dmax = $5;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_PropagationDistance(im.get(),
                      dmax));
        driver.im_stack.AddImage(res);
        }
        |
        T_PropagationDist2 T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {
        float dmax = $5;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_PropagationDistance2(im.get(),
                      dmax));
        driver.im_stack.AddImage(res);
        }
        |
        T_PropDanielsson T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {
        float dmax = $5;

        GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_PropagationDanielsson(im.get(),
                       dmax));

        driver.im_stack.AddImage(res);
        }
        |
        T_vtkPropDanielsson T_OP_PAR var_image  T_COMMA expr T_CL_PAR
        {
        float dmax = $5;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_vtkPropDanielsson(im.get(),
                       -dmax,dmax));
        driver.im_stack.AddImage(res);
        }
        |
        T_vtkPropDanielsson T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_CL_PAR
        {
        float dmin = $5;
        float dmax = $7;

      GET_VARSTACK_VALUE(InrImage, im);
        InrImage::ptr res ( Func_vtkPropDanielsson(im.get(),
                       dmin,dmax));
        driver.im_stack.AddImage(res);
        }
        |
        T_vtkPropDaniel2 T_OP_PAR var_image  T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
        {
        /**
        Parameters:
          (3) input image variable
          (5) threshold on the image intensity to define
              the object
          (7) minimal distance (<0)
          (9) maximal distance (>0)

        Description:
          Computes an Euclidean distance by propagation
          starting from the object, up to a given distance
          for positive and negative sides.
        **/
      GET_VARSTACK_VALUE(InrImage, im);
        float threshold = $5;
        float dmin      = $7;
        float dmax      = $9;

        printf("threshold = %f \n",threshold);
        InrImage::ptr res ( Func_vtkPropDaniel2(im.get(),
                    threshold,dmin,dmax));

        driver.im_stack.AddImage(res);
        }
         |
        T_CC T_OP_PAR expr_image T_CL_PAR
        {
        /**
        Parameters:
            (3) image expression: input image
        Description:
            Computes the connected components of the input image,
            considering the isosurface (or isocontour) of intensity value
            0 as the serapation between the components.
            The image background is supposed to have intensity values of 0.
            Returns an image of type INTEGER, and
            creates the following new variables:
                - reorder   : 1D image of the position position of the component
                    if sorted by size. The image size in X is the number of
                    components.
                    You can use image composition to get the image of the biggest
                    component, for example: reorder(cc_result) == 0.
                - inclusion :
                - cc_size   :
                - cc_sign   :
        Example(s):
            To analyze connected component from an isocontour value n for an image i,
            you can call i_cc=CC((FLOAT)i-n)
        **/
      InrImage::ptr im(driver.im_stack.GetLastImage());
      InrImage::ptr res ( Func_CC(im.get()));
      driver.im_stack.AddImage(res);
    }
    |
    var_image T_OP_PAR expr_image T_CL_PAR
        {
     /**
       Parameters:
         (1) image1: image variable
         (3) image2: image expression

       Description:
        Image Composition
        Several Cases:
         - scalar to scalar: transforms the intensity values
            of image 2 using image1 as a lookup table
         - vectorial to scalar
         - scalar to vectorial: returns the values of image1
            at the positions pointed by image2 (positions are converted
            to spatial coordinates)
         - vectorial to vectorial
      **/
      // image composition
      // Initialy for applying a RGB colormap to an image
      GET_VARSTACK_VALUE(InrImage, im1);
      InrImage::ptr im2( driver.im_stack.GetLastImage());
      int pos;

      InrImage::ptr res ( new InrImage(
                          im1->_format,
                          im1->GetVDim(),
                          "ImComp.ami.gz",
                          im2.get()));
 
      // Several Cases:
      // 1. scalar to scalar
      // 2. scalar to vectorial
      // 3. vectorial to scalar
      // 4. vectorial to vectorial
      if (res->ScalarFormat())
        res->InitImage(0);
      else
        res->InitImage(0,0,0);

      // im1 is a 1D image (colormap)
      //
      if (im1->VectorialFormat()&&im2->ScalarFormat()) {
        res->InitBuffer();
        im2->InitBuffer();

        Repeter

          pos = (int) im2->ValeurBuffer();
          Si (pos<0) AlorsFait pos = 0;
          Si (pos>=im1->DimX()) AlorsFait pos = im1->DimX()-1;
          im1->BufferPos(pos,0,0);

          res->VectFixeValeurs(im1->VectValeurBuffer(0),
                   im1->VectValeurBuffer(1),
                   im1->VectValeurBuffer(2));

          im2->IncBuffer();
            JusquA Non(res->IncBuffer()) FinRepeter
      } else
      // Greyscale colormap
      if (im1->ScalarFormat()&&im2->ScalarFormat()) {
        res->InitBuffer();
        im2->InitBuffer();
        Repeter
          //pos = (int) im2->ValeurBuffer();
          int pos = (int) (im1->SpaceToVoxelX(im2->ValeurBuffer())+0.5);
          //cout << boost::format(" im2->ValeurBuffer() = %1% pos = %2%")%im2->ValeurBuffer() % pos << endl;
          Si (pos<0)  AlorsFait pos = 0;
          Si (pos>=im1->DimX()) 
                      AlorsFait pos = im1->DimX()-1;
          // convert to space coordinates
          im1->BufferPos(pos,0,0);
          res->FixeValeur(im1->ValeurBuffer());
          im2->IncBuffer();
        JusquA Non(res->IncBuffer()) FinRepeter
      } else
      // Applying a transformation ...
      if (im1->VectorialFormat()&&im2->VectorialFormat()) {
        float posx, posy, posz;
        res->InitBuffer();
        im2->InitBuffer();
        Repeter
          // linear interpolation
          posx =  im1->SpaceToVoxelX(im2->VectValeurBuffer(0));
          posy =  im1->SpaceToVoxelY(im2->VectValeurBuffer(1));
          posz =  im1->SpaceToVoxelZ(im2->VectValeurBuffer(2));
          res->VectFixeValeurs(
            im1->InterpLinIntensite(posx,posy,posz,0),
            im1->InterpLinIntensite(posx,posy,posz,1),
            im1->InterpLinIntensite(posx,posy,posz,2));
          im2->IncBuffer();
        JusquA Non(res->IncBuffer()) FinRepeter
      } else
      // Applying a transformation ...
      if (im1->ScalarFormat()&&im2->VectorialFormat()) {
        float posx, posy, posz;
        res->InitBuffer();
        im2->InitBuffer();
        Repeter
          // linear interpolation
          posx =  im1->SpaceToVoxelX(im2->VectValeurBuffer(0));
          posy =  im1->SpaceToVoxelY(im2->VectValeurBuffer(1));
          posz =  im1->SpaceToVoxelZ(im2->VectValeurBuffer(2));
          res->FixeValeur(im1->InterpLinIntensite(posx,posy,posz));
          im2->IncBuffer();
            JusquA Non(res->IncBuffer()) FinRepeter
      } else
        fprintf(stderr," Image Composition: type of composition not implemented \n");

      driver.im_stack.AddImage(res);
    }
    | T_histo T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
       Parameters:
         (3) image: image to compute the histogram
         (5) expr: minimal value
         (7) expr: maximal value
         (9) expr: number of intervals

       Description:
         Compute the histogram of an image and returns it
         as a 1D image
    **/
      InrImage::ptr im( driver.im_stack.GetLastImage());
      float vmin  = $5;
      float vmax  = $7;
      int   nint = (int) $9; // number of intervals

      InrImage::ptr res ( Func_Histogram(im.get(),vmin,vmax,nint));
      driver.im_stack.AddImage(res);
    }
    | T_cumhisto T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
      InrImage::ptr im(driver.im_stack.GetLastImage());
      float vmin  = $5;
      float vmax  = $7;
      int   nint = (int) $9; // number of intervals

      int* numpts;
      int  n;
      float v;
      double total = 0;

      InrImage::ptr res ( new InrImage(nint,1,1,WT_SIGNED_INT));

      numpts = new int[nint];
      Pour(n,0,nint-1)
        numpts[n]=0;
      FinPour

        im->InitBuffer();
      Repeter
        v = im->ValeurBuffer();
        Si v>=vmin Et v<vmax Alors
          n = (int) ((v-vmin)/(vmax-vmin)*nint);
          Si n==nint AlorsFait n=nint-1;
          numpts[n]++;
        FinSi
          JusquA Non(im->IncBuffer()) FinRepeter

      res->InitBuffer();
      Pour(n,0,nint-1)
        total += numpts[n];
        res->FixeValeur(1.0*total/im->Size());
        res->IncBuffer();
          FinPour

      delete [] numpts;

      driver.im_stack.AddImage(res);
    }
    | T_MeanHalfSize T_OP_PAR expr_image T_CL_PAR
    {
      InrImage::ptr im (driver.im_stack.GetLastImage());
      InrImage::ptr res;
      if (im->DimZ()>1)
        res = InrImage::ptr( Func_MeanHalfSize(im.get(),3));
      else
        res = InrImage::ptr( Func_MeanHalfSize(im.get(),2));

      driver.im_stack.AddImage(res);
    }
    | T_MeanHalfSize T_OP_PAR expr_image T_COMMA expr T_CL_PAR
    {
      int dim = (int) $5;

      InrImage::ptr im (driver.im_stack.GetLastImage());
      InrImage::ptr res ( Func_MeanHalfSize(im.get(),dim));
      driver.im_stack.AddImage(res);
    }
    | T_Flip T_OP_PAR expr_image T_COMMA expr  T_CL_PAR
    {
        int axis=(int) $5;

        InrImage::ptr im (driver.im_stack.GetLastImage());
        InrImage::ptr res(Func_Flip(im,axis));
        driver.im_stack.AddImage(res);
    }
    | T_Resize T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_CL_PAR
    {
        /**
        Parameters:
            image to resize
            new dimension in X
            new dimension in Y
            new dimension in Z
            interpolation: 0: nearest neighbor, 1:linear, 2:spline
        Description:
          Image resize
        **/
            int sx = (int) $5;
            int sy = (int) $7;
            int sz = (int) $9;
            unsigned char interpolate=(unsigned char) $11;

            InrImage::ptr im (driver.im_stack.GetLastImage());
            InrImage::ptr res ( Func_Resize(im.get(),sx,sy,sz,interpolate));
            driver.im_stack.AddImage(res);
    }
    | T_ReSlice T_OP_PAR var_image T_COMMA var_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA  expr T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA  expr T_COMMA expr T_CL_PAR
    {
      Variable<InrImage>::ptr  varim2(driver.var_stack.GetLastVar<InrImage>());
      Variable<InrImage>::ptr  varim1(driver.var_stack.GetLastVar<InrImage>());

      FloatMatrix m(4,4);
      m[0][0] =  $7;
      m[0][1] =  $9;
      m[0][2] =  $11;
      m[0][3] =  $13;
      m[1][0] =  $15;
      m[1][1] =  $17;
      m[1][2] =  $19;
      m[1][3] =  $21;
      m[2][0] =  $23;
      m[2][1] =  $25;
      m[2][2] =  $27;
      m[2][3] =  $29;

      InrImage::ptr im1 ( varim1->Pointer());
      InrImage::ptr im2 ( varim2->Pointer());

      InrImage::ptr res ( Func_ReSlice(im1.get(),im2.get(),m));
      driver.im_stack.AddImage(res);

    }
    | T_ConvexHull T_OP_PAR expr_image T_COMMA expr  T_COMMA expr T_CL_PAR
    {
      int   order = (int) $5;
      float resolution = $7;
      InrImage::ptr input(driver.im_stack.GetLastImage());

      InrImage::ptr res ( Func_vtkConvexHull(input.get(),
                   order,resolution));

      driver.im_stack.AddImage(res);
    }
    | var_surface T_POINT T_GetLinesLength T_OP_PAR   T_CL_PAR
    {
      GET_VARSTACK_VALUE(SurfacePoly,s);

      InrImage::ptr res ( s->GetImageLinesLength(  ));
      driver.im_stack.AddImage(res);
    }
    | var_surface T_POINT T_GetLine T_OP_PAR expr  T_CL_PAR
    {
      /**
        Parameters:
          - input polydata
          - line number
        Description:
          Get the points of the given line as a vectorial 1D image of 
          the point positions.
      **/
      InrImage::ptr         res;
      GET_VARSTACK_VAR_VAL(SurfacePoly,var,s);
      int linenumber = (int) $5;
      
      if ((linenumber>=0)&&(linenumber<s->GetNumberOfLines())) {
        T_Line line=s->GetLine(linenumber);
        if (line.NbElts()>0) {
          // Create the image
          res = InrImage::ptr(new InrImage(line.NbElts(),1,1,3,WT_FLOAT,
            (boost::format("%1%_line%2%") 
              % var->Name()
              % linenumber
            ).str().c_str()));
          // fill it with the point positions
          for(int n=0;n<line.NbElts();n++) {
            res->BufferPos(n,0,0);
            Point_3D<float>  pt = s->GetPoint(line[n]).pt;
            res->VectFixeValeurs( pt.X(),pt.Y(),pt.Z());
          }
          driver.im_stack.AddImage(res);
        } else
          driver.err_print((boost::format("Line %1% has no point.") % linenumber).str());
      } else {
        driver.err_print("Invalid line number.");
      }

    }
    | var_surface T_POINT T_GetLinesExtremities T_OP_PAR   T_CL_PAR
    {
    /**
      Parameters:
        - input polydata containing lines
      Description:
        Returns an image Mx2 where M is the number of lines and 
        containing the point id of the 2 extremities of each 
        line
    **/
      GET_VARSTACK_VALUE(SurfacePoly,s);

      InrImage::ptr res ( s->GetImageLinesExtremities(  ));
      driver.im_stack.AddImage(res);
    }
    | var_surface T_POINT T_GetConnections T_OP_PAR   T_CL_PAR
    {
    /**
      Parameters:
        - input polydata containing lines
      Description:
        Get the number of lines connected to each point.
        The result is given as a 1D image of size the total
        number of points of the polydata
    **/

      GET_VARSTACK_VALUE(SurfacePoly,s);
      InrImage::ptr res ( s->GetImageConnections(  ));
      driver.im_stack.AddImage(res);
    }
    | var_surface T_POINT T_GetIntensities T_OP_PAR var_image  T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage,im);
      GET_VARSTACK_VALUE(SurfacePoly,s);

      InrImage::ptr res ( s->GetIntensities( im.get() ));
      driver.im_stack.AddImage(res);
    }
    | T_Altitude2Position T_OP_PAR expr_image T_COMMA expr  T_CL_PAR
    {
      InrImage::ptr im ( driver.im_stack.GetLastImage());

      InrImage::ptr res ( AMIFluid::Func_Altitude2Position(im.get(),(int)$5));
      driver.im_stack.AddImage(res);
    }
    | T_Altitude2Position T_OP_PAR expr_image T_CL_PAR
    {
      InrImage::ptr im (driver.im_stack.GetLastImage());
      InrImage::ptr res ( AMIFluid::Func_Altitude2Position(im.get()));
      driver.im_stack.AddImage(res);
    }
    | T_GeoCoordinates T_OP_PAR expr_image  T_COMMA expr T_CL_PAR
    {
      InrImage::ptr im( driver.im_stack.GetLastImage());
      InrImage::ptr res ( AMIFluid::Func_GeoCoordinates(im.get(),(int)$5));
      driver.im_stack.AddImage(res);
    }
    | T_GeoCoordinates T_OP_PAR expr_image  T_CL_PAR
    {
      InrImage::ptr im( driver.im_stack.GetLastImage());
      InrImage* res;
      res = AMIFluid::Func_GeoCoordinates(im.get());
      if (res!=NULL) driver.im_stack.AddImagePointer(res);
    }
    | T_ComputeAltitudes T_OP_PAR expr_image T_COMMA expr_image  T_CL_PAR
    {
    /**

        Description:
          Compute the altitude to the sea level based on the
          infrared channel.

        Parameters:
          (3) image containing the infrared channel
          (5) image containing 5 coefficients for the computation
              of the temperature and of the altitude,

        Keywords:
          Fluid

        **/
      InrImage::ptr coeff (driver.im_stack.GetLastImage());
      InrImage::ptr input (driver.im_stack.GetLastImage());
      InrImage* res;

      res = AMIFluid::Func_ComputeAltitudes(input.get(),coeff.get());
      driver.im_stack.AddImagePointer(res);

    }
    | T_Temp2Altitudes T_OP_PAR expr_image  T_CL_PAR
    {
    /**

        Description:
        Compute the altitude to the sea level based on the
        temperature channel.

        Parameters:
        (3) image containing the temperature at the top of the clouds
        in Kelvin.

        **/
      InrImage::ptr input (driver.im_stack.GetLastImage());
      InrImage::ptr res ( AMIFluid::Func_Temp2Altitudes(input.get()));
      driver.im_stack.AddImage(res);

    }
    | T_ReadFlow T_OP_PAR expr_string   T_CL_PAR
    {
      boost::shared_array<char> filename( $3);
      InrImage::ptr res( AMIFluid::Func_ReadFlow(filename.get()));
      driver.im_stack.AddImage(res);
    }
    |
    T_slice T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**

      Description:
        Trying the slicing procedure to incorporate into the
        image drawing class

      Parameters:
        (3) image to slice
        (5) width orientation 1,2,3 for XY, XZ, ZY
        (7) height orientation
        (9,11,13) cursor position
        (15) expected width
        (17) expected height

        **/
        InrImage::ptr im (driver.im_stack.GetLastImage());

        if (im->_format==WT_UNSIGNED_CHAR) {
          ImageDraw<unsigned char> imdraw;
          imdraw.SetInput((unsigned char*)im->GetData(),im->DimX(),im->DimY(),im->DimZ());
          imdraw.SetVoxelSize(im->VoxSizeX(),im->VoxSizeY(),im->VoxSizeZ());
          imdraw.SetCursorPosition((int)$9,(int)$11,(int)$13);
          imdraw.Apply((int)$5,(int)$7,(int)$15,(int)$17);
          // copy to RGB image
          InrImage::ptr res ( new InrImage(imdraw.RGB_width, imdraw.RGB_height, 1, WT_RGB));
          memcpy(res->GetData(),imdraw.RGB_image,imdraw.RGB_width*imdraw.RGB_height*3);
          driver.im_stack.AddImage(res);
        } else
          fprintf(stderr,"only UCHAR format for now \n");
        }
    |
    T_LineRecons T_OP_PAR var_surface T_COMMA var_image T_COMMA expr_image T_CL_PAR
    {
    /**
    Parameters:
      (3) input PolyData containing lines to reconstruct
      (5) reference image for reconstruction
      (7) image of the radii associated to each point of the input PolyData (1D image)
    Description:
      Tubular reconstruction based on a set of lines and an estimated radius
      size for each point
    **/
      GET_VARSTACK_VALUE(InrImage,ref);
      GET_VARSTACK_VALUE(SurfacePoly,surf);
      InrImage::ptr rad = InrImage::ptr(
                                driver.im_stack.GetLastImage());

      InrImage::ptr res ( LineRecons( surf.get(), ref.get(), rad.get()));
      driver.im_stack.AddImage(res);
    }
    |
    T_ReadCTALineRadii T_OP_PAR var_surface T_COMMA expr_string T_CL_PAR
    {
    /**
    Parameters:
      (3) input line read with ReadCTALine
      (5) name of the file
    Description:
      Reads the radius information and save it to an image,
      returns this image.
    **/
      GET_VARSTACK_VALUE(SurfacePoly,surf);
      boost::shared_array<char> filename( $5);

      InrImage::ptr res ( Func_ReadCTALineRadii( surf.get(), filename.get()));
      driver.im_stack.AddImage(res);
    }
    ;

primary_image:  image | T_OP_PAR expr_image T_CL_PAR;

postfix_image:  primary_image;

unary_image  :    postfix_image
                | unary_operator cast_image
                | T_SUB  cast_image { UNARYOP_IMAGE(-)               }
                | T_ADD  cast_image
        | SIN   cast_image { UNARYOP_IMAGE(sin)             }
        | COS   cast_image { UNARYOP_IMAGE(cos)             }
        | SQRT  cast_image { UNARYOP_IMAGE(sqrt)            }
        | ABS   cast_image { UNARYOP_IMAGE(fabs)            }
        | ROUND cast_image { UNARYOP_IMAGE(round)           }
        | FLOOR cast_image { UNARYOP_IMAGE(floor)           }
        | TAN   cast_image { UNARYOP_IMAGE(tan)             }
        | ASIN  cast_image { UNARYOP_IMAGE(asin)            }
        | ACOS  cast_image { UNARYOP_IMAGE(acos)            }
        | ATAN  cast_image { UNARYOP_IMAGE(atan)            }
        | EXP   cast_image { UNARYOP_IMAGE(exp)             }
        | LOG  cast_image { UNARYOP_IMAGE(1.0/log(10.0)*log) }
        | LN   cast_image { UNARYOP_IMAGE(log)             }
        | NORM cast_image
        {
          InrImage::ptr im1 (driver.im_stack.GetLastImage());
          InrImage::ptr res ( Norm(*im1));
          if (!res.get())
            fprintf(stderr,"Error computing the norm |image| \n");

          driver.im_stack.AddImage(res);
        }
               ;

cast_image:
        unary_image
        | T_OP_PAR basic_type T_CL_PAR unary_image
                  {
        /**
        Description:
                  The image conversion is done using the cast operator
                  where basic_type can be one of the basic type accepted,
                  currently:
                  CHAR UCHAR SHORT USHORT FLOAT DOUBLE RGB FLOAT_VECTOR


                Example(s):
                  i = Image(FLOAT,10,10,10)
                  j = (RGB) i
        **/
            InrImage::ptr im1 (driver.im_stack.GetLastImage());
            InrImage::ptr im  ( new InrImage( (WORDTYPE) $2, "tmp.inr.gz", im1.get()));
            (*im) = (*im1);
            driver.im_stack.AddImage(im);
          }
;

multiplicative_image: cast_image
                | multiplicative_image T_MULT cast_expr  { IMAGE_OP_EXPR(*,$3) }
// to allow expressions like Image*(n*n) the parser needs to know the type of (n*n)
// to resolve the ambiguities
// probably need to have a common class that can contain either number of images,
// or any other object that accepts arithmetic operations
                //|  unary_expr  T_MULT T_MULT multiplicative_image  { IMAGE_OP_EXPR(*,$1) }
                | multiplicative_image T_DIV cast_expr  { IMAGE_OP_EXPR(/,$3) }
//                |  unary_expr  T_DIV multiplicative_image  { EXPR_OP_IMAGE(/,$1) }
        | multiplicative_image T_MULT cast_image {  IMAGE_OP_IMAGE_2(*)   }
        | multiplicative_image T_DIV cast_image { IMAGE_OP_IMAGE_2(/)   }
        | multiplicative_image T_EXP cast_image { IMAGE_OP_IMAGE_2(^)   }
;

additive_image2: multiplicative_image
//       | multiplicative_expr T_ADD additive_image2  {  IMAGE_OP_EXPR(+,$1) }
//       | multiplicative_expr T_SUB additive_image2  {  IMAGE_OP_EXPR(-,$1) }
;

additive_image: additive_image2
       | additive_image T_ADD multiplicative_expr  { IMAGE_OP_EXPR(+,$3) }
       | additive_image T_SUB multiplicative_expr  { IMAGE_OP_EXPR(-,$3) }
       | additive_image T_ADD multiplicative_image { IMAGE_OP_IMAGE_2(+)   }
       | additive_image T_SUB multiplicative_image { IMAGE_OP_IMAGE_2(-)   }
;

shift_image: additive_image
;

relational_image:
       shift_image
       | relational_image T_LT shift_image   { IMAGE_OP_IMAGE(<)    }
       | relational_image T_GT shift_image   { IMAGE_OP_IMAGE(>)    }
       | relational_image LE_OP shift_image { IMAGE_OP_IMAGE(<=)   }
       | relational_image GE_OP shift_image { IMAGE_OP_IMAGE(>=)   }
       | relational_image T_LT shift_expr    { IMAGE_OP_EXPR(<, $3) }
       | relational_image T_GT shift_expr    { IMAGE_OP_EXPR(>, $3) }
       | relational_image LE_OP shift_expr  { IMAGE_OP_EXPR(<=,$3) }
       | relational_image GE_OP shift_expr  { IMAGE_OP_EXPR(>=,$3) }
;

equality_image:
    relational_image
        | equality_image EQ_OP relational_image { IMAGE_OP_IMAGE(==)   }
        | equality_image NE_OP relational_image { IMAGE_OP_IMAGE(!=)   }
        | equality_image EQ_OP shift_expr { IMAGE_OP_EXPR(==,$3)   }
        | equality_image NE_OP shift_expr { IMAGE_OP_EXPR(!=,$3)   }
        ;

and_image:
    equality_image
        | and_image T_AND equality_image
        ;


exclusive_or_image:
    and_image
    ;

inclusive_or_image:
    exclusive_or_image
        | inclusive_or_image T_OR exclusive_or_image
    ;

logical_and_image:
    inclusive_or_image
        | logical_and_image AND_OP inclusive_or_image
    ;

logical_or_image:
    logical_and_image
        | logical_or_image OR_OP logical_and_image
    ;

conditional_image:
    logical_or_image
        | logical_or_image T_QUEST logical_or_image T_COLON conditional_image
    ;

assignment_image:
    conditional_image
    | unary_image ASSIGN_OP assignment_image
    ;

expr_image : assignment_image
;



primary_var:
   T_COLON variable
  | T_COLON NUMBER
  {
    Variable<float>::ptr var(new Variable<float>(float_ptr(new float($2))));
    driver.var_stack.AddVar(var);
  }
  | T_OP_PAR expr_var T_CL_PAR;

postfix_var:
  primary_var
  | primary_var INC_OP 
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var)++);
  }
  | primary_var DEC_OP
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var)--);
  }
  ;

prefix_var:
  postfix_var
  | unary_operator postfix_var
  | T_SUB  postfix_var 
  {
    cout << "T_SUB  cast_var  " << endl;
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(-(*var));
  }
  | T_ADD  postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(+(*var));
  }
  | INC_OP  postfix_var 
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(++(*var));
  }
  | DEC_OP  postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(--(*var));
  }
  | T_OP_PAR basic_type T_CL_PAR postfix_var
  | SIN    postfix_var 
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_sin());
  }
  | COS    postfix_var 
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_cos());
  }
  | SQRT   postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_sqrt());
  }
  | ABS    postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_fabs());
  }
  | ROUND  postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_round());
  }
  | FLOOR  postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_floor());
  }
  | TAN    postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_tan());
  }
  | ASIN   postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_asin());
  }
  | ACOS   postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_acos());
  }
  | ATAN   postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_atan());
  }
  | EXP    postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_exp());
  }
  | LOG    postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_log());
  }
  | LN     postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_ln());
  }
  | NORM   postfix_var
  {
    BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar(var->m_norm());
  }
  ;


multiplicative_var: 
  prefix_var
  | multiplicative_var T_MULT prefix_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)*(*var2));
  }
  | multiplicative_var T_DIV  prefix_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)/(*var2));
  }
  | multiplicative_var T_MOD  prefix_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)%(*var2));
  }
  | multiplicative_var T_EXP  prefix_var
  ;

additive_var: 
  multiplicative_var
  | additive_var T_ADD multiplicative_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr res(*var1+*var2);
    driver.var_stack.AddVar(res);
  }
  | additive_var T_SUB multiplicative_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr res((*var1)-(*var2));
    driver.var_stack.AddVar(res);
  }
  ;

shift_var:
  additive_var
  ;

relational_var:
  shift_var
  | relational_var T_LT  shift_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)<(*var2));
  }
  | relational_var T_GT  shift_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)>(*var2));
  }
  | relational_var LE_OP shift_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)<=(*var2));
  }
  | relational_var GE_OP shift_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)>=(*var2));
  }
  ;

equality_var:
  relational_var
  | equality_var EQ_OP relational_var
  | equality_var NE_OP relational_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)!=(*var2));
  }
  ;

and_var:
  equality_var
  | and_var T_AND equality_var
  ;

exclusive_or_var:
  and_var
  ;

inclusive_or_var:
  exclusive_or_var
  | inclusive_or_var T_OR exclusive_or_var
  ;

logical_and_var:
  inclusive_or_var
  | logical_and_var AND_OP inclusive_or_var
  ;

logical_or_var:
  logical_and_var
  | logical_or_var OR_OP logical_and_var
  ;

conditional_var:
  logical_or_var
  | logical_or_var T_QUEST logical_or_var T_COLON conditional_var
  ;

assignment_var:
  conditional_var
  | prefix_var ASSIGN_OP assignment_var
  | prefix_var ADD_ASSIGN assignment_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)+=(*var2));
  }
  | prefix_var SUB_ASSIGN assignment_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)-=(*var2));
  }
  | prefix_var MUL_ASSIGN assignment_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)*=(*var2));
  }
  | prefix_var DIV_ASSIGN assignment_var
  {
    BasicVariable::ptr var2(driver.var_stack.GetLastBasicVar());
    BasicVariable::ptr var1(driver.var_stack.GetLastBasicVar());
    driver.var_stack.AddVar((*var1)/=(*var2));
  }
  ;

expr_var: 
  assignment_var
  ;


gltransform: VAR_GLTRANSFORM {
            GET_VARSTACK_VALUE(GLTransfMatrix,glt);
            GLTransfMatrix* newglt;

            newglt = new GLTransfMatrix();
            (*newglt) = (*glt);
            driver.gltransf_stack.AddMatrix(newglt);
    
        }
        |
        VAR_SURFDRAW T_POINT T_GetTransform
        {
          Variable<Viewer3D>::ptr  varsurfd(driver.var_stack.GetLastVar<Viewer3D>());
          GLTransfMatrix glt;
          GLTransfMatrix* newglt;
  
          printf("GetTransform begin \n");
          newglt = new GLTransfMatrix();
              glt = (varsurfd->Pointer())->GetCanvas()->GetObjectTransform();
          (*newglt) = (glt);
          driver.gltransf_stack.AddMatrix(newglt);
          printf("GetTransform \n");
      }
      |
      T_Interpolate T_OP_PAR VAR_GLTRANSFORM T_COMMA VAR_GLTRANSFORM T_COMMA expr T_CL_PAR
      {
        GET_VARSTACK_VALUE(GLTransfMatrix,glt2);
        GET_VARSTACK_VALUE(GLTransfMatrix,glt1);
        GLTransfMatrix* newglt = NULL;
        float coeff = $7;

        newglt = Func_InterpolateTransform(glt1.get(),glt2.get(),coeff);
        driver.gltransf_stack.AddMatrix(newglt);
      }
      |
      T_Transform T_OP_PAR expr_string T_CL_PAR
      {
        boost::shared_array<char> filename( $3);
         GLTransfMatrix* newglt;
         newglt = Func_ReadTransform(filename.get());
         if (newglt!=NULL)
           driver.gltransf_stack.AddMatrix(newglt);
         else {
           fprintf(stderr,"TRANSFORM() Error reading file ...\n");
           driver.err_print("TRANSFORM() Error reading file ...\n");
           driver.gltransf_stack.AddMatrix(NULL);
           //          yyiperror(
           //          YYABORT;
         }
      }
;

matrix: T_Matrix T_OP_PAR expr T_COMMA expr T_CL_PAR
       {
         FloatMatrix* m;
         m = new FloatMatrix((int)$3,(int)$5);
         driver.matrix_stack.AddMatrix(m);
       }
       |
       VAR_MATRIX
       {
          GET_VARSTACK_VALUE(FloatMatrix, mat);
          FloatMatrix* newmat;
    
          newmat = new FloatMatrix( (*mat));
          driver.matrix_stack.AddMatrix(newmat);
       }
        |
        T_Invert T_OP_PAR expr_matrix T_CL_PAR
        {
        /**
        Description:
         Inversion of a symmetric matrix
        **/
          FloatMatrix* mat;
          FloatMatrix* res;
          mat=driver.matrix_stack.GetLastMatrix();
          res = mat->Transpose();
          delete mat;
          driver.matrix_stack.AddMatrix(res);
        }
;

primary_matrix: matrix | T_OP_PAR expr_matrix T_CL_PAR;

postfix_matrix: primary_matrix;

unary_matrix  :    postfix_matrix
                | unary_operator cast_matrix
                | T_SUB  cast_matrix { UNARYOP_MATRIX(-)               }
                | T_ADD  cast_matrix
                | cast_matrix TRANSPOSE_OP
                {
          FloatMatrix* mat;
          FloatMatrix* res;
          mat=driver.matrix_stack.GetLastMatrix();
          res = mat->Transpose();
          delete mat;
          driver.matrix_stack.AddMatrix(res);
        }
        | SIN   cast_matrix { UNARYOP_MATRIX(sin)             }
        | COS   cast_matrix { UNARYOP_MATRIX(cos)             }
        | SQRT  cast_matrix { UNARYOP_MATRIX(sqrt)            }
        | ABS   cast_matrix { UNARYOP_MATRIX(fabs)            }
        | ROUND cast_matrix { UNARYOP_MATRIX(round)           }
        | FLOOR cast_matrix { UNARYOP_MATRIX(floor)           }
        | TAN   cast_matrix { UNARYOP_MATRIX(tan)             }
        | ASIN  cast_matrix { UNARYOP_MATRIX(asin)            }
        | ACOS  cast_matrix { UNARYOP_MATRIX(acos)            }
        | ATAN  cast_matrix { UNARYOP_MATRIX(atan)            }
        | EXP   cast_matrix { UNARYOP_MATRIX(exp)             }
                | LOG  cast_matrix { UNARYOP_MATRIX(1.0/log(10.0)*log) }
                | LN   cast_matrix { UNARYOP_MATRIX(log)             }
               ;

cast_matrix:
        unary_matrix;

multiplicative_matrix: cast_matrix
           | multiplicative_matrix T_MULT cast_expr  { MATRIX_OP_EXPR(*,$3) }
       | multiplicative_matrix POINTWISE_MULT cast_matrix { MATRIX_OP_MATRIX_2(*)   }
       | multiplicative_matrix T_MULT cast_matrix
           {
         FloatMatrix* m2 = driver.matrix_stack.GetLastMatrix();
         FloatMatrix* m1 = driver.matrix_stack.GetLastMatrix();
             FloatMatrix* res = Multiply(m1, m2) ;
         driver.matrix_stack.AddMatrix(res);
         delete m1;
         delete m2;
           }

additive_matrix: multiplicative_matrix
       | additive_matrix T_ADD multiplicative_expr  { MATRIX_OP_EXPR(+,$3) }
       | additive_matrix T_SUB multiplicative_expr  { MATRIX_OP_EXPR(-,$3) }
       | additive_matrix T_ADD multiplicative_matrix { MATRIX_OP_MATRIX_2(+)   }
       | additive_matrix T_SUB multiplicative_matrix { MATRIX_OP_MATRIX_2(-)   }
;

shift_matrix: additive_matrix
;

relational_matrix:
       shift_matrix
;

equality_matrix:
    relational_matrix
        ;

and_matrix:
    equality_matrix
        ;


exclusive_or_matrix:
    and_matrix
    ;

inclusive_or_matrix:
    exclusive_or_matrix
    ;

logical_and_matrix:
    inclusive_or_matrix
    ;

logical_or_matrix:
    logical_and_matrix
    ;

conditional_matrix:
    logical_or_matrix
    ;

assignment_matrix:
    conditional_matrix
    ;

expr_matrix : assignment_matrix
;


var_surface:
        VAR_SURFACE
        |
        VAR_ARRAY_SURFACE T_OP_BR expr T_CL_BR
        {
          GET_VARSTACK_VAR_VAL(VarArray,var,array);
          int  i = (int) $3;

          BasicVariable::ptr arrayvar = array->GetVar(i);
          if (!arrayvar.get()) {
            // initialize the surface
            SurfacePoly::ptr surf( new SurfacePoly());
            std::string name = (boost::format("%s[%d]") % var->Name().c_str() %i).str();
            array->InitElement(i,surf,name.c_str());
          }

          driver.var_stack.AddVar(array->GetVar(i));
        }


surface:
        T_isosurf T_OP_PAR expr_image T_COMMA expr T_CL_PAR
        {
          SurfacePoly* surf;
          InrImage::ptr im (driver.im_stack.GetLastImage());
          surf = Func_isosurf(im,
                  $5,
                  NULL);
          if (surf==NULL) driver.err_print("Isosurface failed!");
          driver.surf_stack.AddSurf(surf);
    }
    |
    T_isosurf_ras T_OP_PAR var_image T_COMMA expr T_CL_PAR
    {
      GET_VARSTACK_VALUE(InrImage, im);
        SurfacePoly* surf;
        surf = Func_isosurf(im,
                $5,
                NULL,
                2);
        driver.surf_stack.AddSurf(surf);
    }
    |
    T_isosurf T_OP_PAR expr_image T_COMMA expr T_COMMA var_image T_CL_PAR
    {
    /**
      Parameters:
        image expression: input image
        expression:       isosurface threshold
        image variable:   mask
      Description:
        Computed isosurface of the input image with a given threshold within a region
        defined by the mask image.
    **/
      GET_VARSTACK_VALUE(InrImage, mask);
        InrImage::ptr im (driver.im_stack.GetLastImage());
        SurfacePoly* surf;
        surf = Func_isosurf(im,
                $5,
                mask.get());
        if (surf==NULL) driver.err_print("Isosurface failed!");
        driver.surf_stack.AddSurf(surf);
    }
    |
    T_isoline T_OP_PAR expr_image T_COMMA expr T_COMMA expr_image T_CL_PAR
    {
    /**
     Parameters:
        (3) input image
        (5) Gaussian standard deviation
        (7) mask

     Description:
        Computes the centerlines of bright tubular structures
        as zero-crossing of the gradient vector field in the planes
        of the 2 eigenvectors of the Hessian matrix that
        correspond to the lowest and negative eigenvalues
     **/
      InrImage::ptr mask (driver.im_stack.GetLastImage());
      InrImage::ptr im   (driver.im_stack.GetLastImage());
      vtkPolyData* vtklines;
      CreeCrest* crestlines;
      SurfacePoly* lines;

      crestlines = Func_IsoLine(im.get(), $5, mask.get());
      printf("running conversion to vtkPolyData ...");
      vtklines = (vtkPolyData*) (*crestlines);

      lines = new SurfacePoly(vtklines);
      if (lines == NULL)
        driver.err_print("IsoLine failed!");
      driver.surf_stack.AddSurf(lines);

      //vtklines->Delete();
      delete crestlines;

    }
    |
    T_vtkDecimate T_OP_PAR var_surface T_CL_PAR
    {
      GET_VARSTACK_VALUE(SurfacePoly,varsurf);
      SurfacePoly* surf;
      surf = Func_decimate( varsurf.get());
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_vtkDecimate T_OP_PAR var_surface T_COMMA expr T_CL_PAR
    {
      SurfacePoly* newsurf;
      GET_VARSTACK_VALUE(SurfacePoly,surf);

      newsurf = Func_decimate( surf.get(), $5 );
      Si newsurf != NULL Alors
        driver.surf_stack.AddSurf(newsurf);
      FinSi
    }
    |
    T_vtkMarchingCubes T_OP_PAR var_image T_COMMA expr T_CL_PAR
    {
          SurfacePoly* surf;
      GET_VARSTACK_VALUE(InrImage, im);
          surf = Func_vtkMarchingCubes(im.get(),$5);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |
    T_vtkSmooth T_OP_PAR var_surface T_COMMA expr T_CL_PAR
    {
      SurfacePoly* newsurf;
      GET_VARSTACK_VALUE(SurfacePoly,surf);

      newsurf = Func_vtkSmooth(surf.get(), (int) $5);
      Si newsurf != NULL Alors
        driver.surf_stack.AddSurf(newsurf);
      FinSi
    }
    |
    T_vtkWindowedSinc T_OP_PAR var_surface T_COMMA expr T_CL_PAR
    {
        GET_VARSTACK_VALUE(SurfacePoly, surf);
        SurfacePoly* newsurf;

        newsurf = Func_vtkWindowedSinc( surf.get(), (int) $5);
        if (newsurf==NULL) driver.err_print("vtkWindowedSinc failed!");
        driver.surf_stack.AddSurf(newsurf);
    }
    |
    T_Surface T_OP_PAR T_CL_PAR
    {
      SurfacePoly* surf = new SurfacePoly();
      driver.surf_stack.AddSurf(surf);
    }
    |
    T_Surface expr_string
    {
      boost::shared_array<char> filename( $2);
      driver.surf_stack.AddSurf(filename.get());
    }
    |
    T_Surface T_OP_PAR expr_string T_CL_PAR
    {
      boost::shared_array<char> filename( $3);
      driver.surf_stack.AddSurf(filename.get());
    }
    |
    T_Surface
    {
          int res;
          string name;
          string inc_cmd; // increment the command line string

          res=AskSurface(name);
          if (!res) {
            driver.yyiperror(" Need Surface \n");
            YYABORT;
          }
          driver.surf_stack.AddSurf((char*)name.c_str());

          wxFileName filename(GetwxStr(name));
          filename.Normalize(wxPATH_NORM_ALL,wxEmptyString,wxPATH_UNIX);
          wxString newname(   filename.GetVolume()+filename.GetVolumeSeparator()+
                              filename.GetPath(wxPATH_GET_VOLUME,wxPATH_UNIX)+
                              filename.GetPathSeparator(wxPATH_UNIX)+
                              filename.GetFullName());


          inc_cmd = str(format(" \"%1%\"  // from browser ") % newname.mb_str());
          if (driver.InConsole())
            GB_main_wxFrame->GetConsole()->IncCommand(inc_cmd);
        }
        |
        T_ReadCTALine T_OP_PAR expr_string T_CL_PAR
        {
        /**
        Parameters:
            (3): input filename (text file)
        Description:
            Reads a line given described in a text file
            format used in the CTA coronary segmentation challenge
        **/
      boost::shared_array<char> filename( $3);
          SurfacePoly* surf;
          surf = Func_ReadCTALine(filename.get());
          driver.surf_stack.AddSurf(surf);
      }
      |
      T_ReadCTALine T_OP_PAR expr_string T_COMMA expr T_CL_PAR
      {
        /**
        Parameters:
            (3): input filename (text file)
            (5) line type:  0: point + radius + standard dev
                            1: point
        Description:
            Reads a line given described in a text file
            format used in the CTA coronary segmentation challenge
        **/
        SurfacePoly* surf;
        boost::shared_array<char> filename( $3);

          surf = Func_ReadCTALine(filename.get(), (int) $5);
          driver.surf_stack.AddSurf(surf);
      }
      |
      var_surface
      {
        GET_VARSTACK_VALUE(SurfacePoly,surf);
        SurfacePoly* newsurf;
  
        newsurf = new SurfacePoly( (*surf) );
        driver.surf_stack.AddSurf(newsurf);
      }
      |
      T_Skeleton2lines T_OP_PAR var_image  T_CL_PAR
      {
        /**
        Description:
          Creates lines from a skeleton image
        **/
          SurfacePoly* surf;

      GET_VARSTACK_VALUE(InrImage, im);
      surf = Func_Skeleton2lines( im.get()  );

      Si surf==NULL Alors
        driver.err_print("Skeleton2lines() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_SmoothLines T_OP_PAR var_surface  T_CL_PAR
    {
    /**
    Parameters:
      (3) input polydata
    Description:
      Smooth lines based on a simple scheme of heat diffusion
      with data attachment (applied to each coordinate)
      using default parameters of
        smoothing coeff 0.1
        data coeff      0.01
        iterations      10
    **/
      GET_VARSTACK_VALUE(SurfacePoly, insurf);
      SurfacePoly* surf;

      surf = Func_SmoothLines( insurf.get(),
                      0.1,
                      0.01,
                      10);

      Si surf==NULL Alors
        driver.err_print("SmoothLines() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_SmoothLines T_OP_PAR var_surface  T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3) input polydata
      (5) smoothing coefficient
      (7) data attachment coefficient
      (9) number of iterations
    Description:
      Smooth lines based on a simple scheme of heat diffusion
      with data attachment
    **/
      GET_VARSTACK_VALUE(SurfacePoly, insurf);
      SurfacePoly* surf;

      surf = Func_SmoothLines( insurf.get(),
                      $5,
                      $7,
                      (int) $9);

      Si surf==NULL Alors
        driver.err_print("SmoothLines() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_ResampleLines T_OP_PAR var_surface T_COMMA expr  T_CL_PAR
    {
      GET_VARSTACK_VALUE(SurfacePoly, insurf);
      SurfacePoly* surf;

      surf = Func_ResampleLines( insurf.get(),
                     $5);

      Si surf==NULL Alors
        driver.err_print("ResampleLines() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |
    T_ShortestPath T_OP_PAR var_surface T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA
                                       expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
      Parameters:
        - input polydata containing lines
        - point 1: x,y,z
        - point 2: x,y,z 
      Description:
        Finds the shortest path within the lines of the polydata
    **/
      GET_VARSTACK_VALUE(SurfacePoly, insurf);
      SurfacePoly* surf;

      surf = Func_shortestpath( insurf.get(),
                      $5, $7, $9,
                      $11,$13,$15);

      Si surf==NULL Alors
        driver.err_print("Func_shortestpath () error ... \n");
      FinSi
      driver.surf_stack.AddSurf(surf);
    }
    |
    T_ShortestPathImage T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA expr T_COMMA
                                       expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3) input image
      (5) threshold to discard voxels
      (7)  X position of the first point
      (9)  Y position of the first point
      (11) Z position of the first point
      (13) X position of the second point
      (15) Y position of the second point
      (17) Z position of the second point
    Description:
      Finds the shortest path within the image voxels
      where the image intensity values are used to weight the edges of the graph,
      voxels are linked if their intensities are lower than the given threshold
      creates a path between the first and the second points if it exists
    **/
      InrImage::ptr im (driver.im_stack.GetLastImage());
      SurfacePoly* surf;

      surf = Func_shortestpath_image(  im.get(),$5,
                                      $7, $9, $11,
                                      $13,$15,$17);

      Si surf==NULL Alors
        driver.err_print("Func_shortestpath_image () error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_PathFromDispl T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (3) input image containing the tracks as indices:
          voxel index of the preceding voxel
      (5) X coord of the starting point
      (7) Y coord of the starting point
      (9) Z coord of the starting point

    Description:
      Creates a path starting at a point in voxel coordinates
      and following the (integer) displacements given by the input vector field
      image
    **/
      InrImage::ptr im (driver.im_stack.GetLastImage());
      SurfacePoly* surf;

      surf = Func_path_from_displ(  im.get(),
          (int) round($5),
          (int) round($7),
          (int) round($9)
          );

      Si surf==NULL Alors
        driver.err_print("Func_path_from_displ() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_PathFromVectField T_OP_PAR     expr_image
                            T_COMMA expr T_COMMA expr
                            T_COMMA expr T_COMMA expr T_COMMA expr
                            T_COMMA expr T_COMMA expr T_COMMA expr
                          T_CL_PAR
    {
    /**
    Parameters:
      (3)  input image as a vector field in spatial coordinates
            or as a scalar potential
      (5) time step for the evolution
      (7) maximal Euclidean distance of the path
      (9)  X coord of the starting point (in spatial coord.)
      (11)  Y coord ---
      (13)  Z coord ---
      (15)  X coord of the expected end point (in spatial coord.)
      (17)  Y coord  ---
      (19)  Z coord  ---

    Description:
      Creates a path starting at a point in spatial coordinates
      and following the displacements given by the input vector field
      image
      if the input is scalar the corresponding vector field is computed
      from its gradient by local linear interpolation
      the tracking stops in one of the following cases:
        - the maximal distance is reached
        - the closest voxel to the current location has a negative intensity
        - the current gradient is very low
    **/
      InrImage::ptr im (driver.im_stack.GetLastImage());
      SurfacePoly* surf;

      double start[3] = {$9,$11,$13};
      double end[3] = {$15,$17,$19};
      surf = Func_path_from_vectfield(  im,
                                        start,end,
                                        $5, $7);

      Si surf==NULL Alors
        driver.err_print("Func_path_from_vectfield() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    |
    T_PathFromVectField T_OP_PAR     expr_image
                            T_COMMA expr T_COMMA expr
                            T_COMMA expr T_COMMA expr T_COMMA expr
                          T_CL_PAR
    {
    /**
    Parameters:
      (3)  input image as a vector field in spatial coordinates
            or as a scalar potential
      (5) time step for the evolution
      (7) maximal Euclidean distance of the path
      (9)  X coord of the starting point (in spatial coord.)
      (11)  Y coord ---
      (13)  Z coord ---

    Description:
      Creates a path starting at a point in spatial coordinates
      and following the displacements given by the input vector field
      image
      if the input is scalar the corresponding vector field is computed
      from its gradient by local linear interpolation
      the tracking stops in one of the following cases:
        - the maximal distance is reached
        - the closest voxel to the current location has a negative intensity
        - the current gradient is very low
    **/
      InrImage::ptr im (driver.im_stack.GetLastImage());
      SurfacePoly* surf;

      double start[3] = {$9,$11,$13};
      surf = Func_path_from_vectfield(  im,
                                        start,
                                        $5, $7);

      Si surf==NULL Alors
        driver.err_print("Func_path_from_vectfield() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | var_surface T_POINT  T_ConnectLines T_OP_PAR  expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
      (1) input polydata
      (5) maximal distance (square distance between extremities)
      (7) maximal angle (square length of the sum of the
                         normalized extremity vectors)
    Description:
      Connecting close lines
    **/
      GET_VARSTACK_VALUE(SurfacePoly, insurf);
      SurfacePoly* surf;
 
      surf = Func_ConnectLines( insurf.get(),
                      $5,
                      $7);

      Si surf==NULL Alors
        driver.err_print("ConnectLines() error ... \n");
      FinSi
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateFlatMesh T_OP_PAR expr_image T_CL_PAR
    {
    InrImage::ptr im (driver.im_stack.GetLastImage());
      SurfacePoly* surf;

      surf = AMIFluid::Func_CreateFlatMesh(im.get());
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    | T_CreateFlatMesh T_OP_PAR expr_image T_COMMA expr T_CL_PAR
    {
          /**

        Description:
      creates a flat triangulates mesh from the image domain,
      discarding pixels with null intensity.

        Parameters:
        (3) input image
        (5) triangle orientation:
            1: following X^Y
            other value: following -X^Y

          **/
      InrImage::ptr im (driver.im_stack.GetLastImage());
          SurfacePoly* surf;

      surf = AMIFluid::Func_CreateFlatMesh(im.get(), (int) $5 );
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateFlatMesh T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_CL_PAR
    {
      InrImage::ptr im (driver.im_stack.GetLastImage());
      float minth = $5;
      float maxth = $7;
          SurfacePoly* surf;

      surf = AMIFluid::Func_CreateFlatMesh(im.get(),minth,maxth);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_vtkCreateFlatMesh T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_CL_PAR
    {
      InrImage::ptr im ( driver.im_stack.GetLastImage());
      SurfacePoly* surf;
      float minth = $5;
      float maxth = $7;

      surf = AMIFluid::Func_vtkCreateFlatMesh(im.get(),minth,maxth);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
        |  T_CreateVolume T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr_image T_COMMA expr_image T_CL_PAR
        {
        /**
        Description:
          CreateVolume creates a close surface composed of 2 surfaces:
          a top and a bottom, where each surface is calculated by converting
          the pixel position of 3D positions based on the 2 last parameters.
          It scans all the points of the 2D image,
          and uses their coordinates (x,y) to deduce a position in
          the input image, and interpolate a value.
            - the 2 last parameters are 2D images of 3D vectors, those vectors are used
            to set new positions (x,y,z) for each vertex of the mesh.

        Parameters:
        (3) input surface
        (5) minimal intensity value of the region of interest
        (7) maximal intensity value of the region of interest
        (9) 3D vector field image for the lower positions
        (11) 3D vector fiels image for the higher positions

       See also:
         CreateFlatMesh, ElevateMesh
         changes the position of the nodes of a 3D mesh

        **/
      InrImage::ptr highpos (driver.im_stack.GetLastImage());
      InrImage::ptr lowpos  (driver.im_stack.GetLastImage());
      InrImage::ptr input   (driver.im_stack.GetLastImage());
      SurfacePoly* surf;
      float minth = $5;
      float maxth = $7;

      surf = AMIFluid::Func_CreateVolume(input.get(), minth, maxth, lowpos.get(), highpos.get());
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    |  T_CreateVolume T_OP_PAR expr_image T_COMMA expr T_COMMA expr T_COMMA expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_CL_PAR
    {
        /**
        Description:
          CreateVolume creates a closed surface composed of 2 surfaces:
          a top and a bottom, where each surface is calculated by converting
          the pixel position of 3D positions based on the 2 last parameters.
          It scans all the points of the 2D image,
          and uses their coordinates (x,y) to deduce a position in
          the input image, and interpolate a value.
            - the 2 last parameters are 2D images of 3D vectors, those vectors are used
            to set new positions (x,y,z) for each vertex of the mesh.

        Parameters:
        (3) input surface
        (5) minimal intensity value of the region of interest
        (7) maximal intensity value of the region of interest
        (9) 3D vector field image for the lower positions
        (11) 3D vector fiels image for the higher positions
        (13) RGB image to color the top surface or NULL if not used
        (15) alpha opacity value (in [0,1], 0 is fully transparent)


       See also:
         CreateFlatMesh, ElevateMesh
         changes the position of the nodes of a 3D mesh

        **/
      InrImage::ptr colors  (driver.im_stack.GetLastImage());
      InrImage::ptr highpos (driver.im_stack.GetLastImage());
      InrImage::ptr lowpos  (driver.im_stack.GetLastImage());
      InrImage::ptr input  (driver.im_stack.GetLastImage());
      SurfacePoly* surf;
      float minth = $5;
      float maxth = $7;
      float alpha = $15;

      surf = AMIFluid::Func_CreateVolume(input.get(), minth, maxth, 
                                          lowpos.get(), highpos.get(), colors.get(), alpha);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateVectors T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_CL_PAR
    {
        /**
        Parameters:
          #1 expr_image:        altitudes1
          #2 expr_image:        displacement
          #3 expr_image:        altitudes2
          #4 expr:              stepx
          #5 expr:              stepy
          #6 expr:              scale
          #7 expr:              type

        Description:
        Creates a 3D vector field for visualization of the displacement of clouds
        between times t1 and t2.
        description of the input parameters:
        - altitudes1:    scalar image,    altitudes of the clouds at time t1
        - displacement:  vectorial image, displacement as a 2D vector field
        - altitudes2:    scalar image,    altitudes of the clouds at time t2
        - stepx:         spacing in pixels between successive vectors in X direction
        - stepy:         spacing in pixels between successive vectors in Y direction
        - scale:         scaling of the vectors
        - type:          0 for Altantic, 1 for Africa.

        Example(s):

        vects = CreateVectors(alt1,displ,alt2,8,8,3,1)


        See also:
                CreateFlatMesh, ElevateMesh, ComputeAltitudes, Altitudes2Position
      **/

      InrImage::ptr alt2  (driver.im_stack.GetLastImage());
      InrImage::ptr displ (driver.im_stack.GetLastImage());
      InrImage::ptr alt1  (driver.im_stack.GetLastImage());
      int stepx   = (int) $9;
      int stepy   = (int) $11;
      float scale = $13;
      int   type  = (int) $15;
          SurfacePoly* surf;

      surf = AMIFluid::Func_CreateVectors(alt1.get(),displ.get(),alt2.get(), 
                                          stepx, stepy, scale, type);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
          FinSi
    }
    | T_CreateVectors T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_COMMA expr T_CL_PAR
    {
        /**
        Parameters:
          #1 expr_image:        altitudes1
          #2 expr_image:        displacement
          #3 expr_image:        altitudes2
          #4 expr:              stepx
          #5 expr:              stepy
          #6 expr:              scale
          #7 expr:              type
          expr:                 vector_style (in {0,1})

        Description:
        Creates a 3D vector field for visualization of the displacement of clouds
        between times t1 and t2.
        description of the input parameters:
        - altitudes1:    scalar image,    altitudes of the clouds at time t1
        - displacement:  vectorial image, displacement as a 2D vector field
        - altitudes2:    scalar image,    altitudes of the clouds at time t2
        - stepx:         spacing in pixels between successive vectors in X direction
        - stepy:         spacing in pixels between successive vectors in Y direction
        - scale:         scaling of the vectors
        - type:          0 for Altantic, 1 for Africa.
        - vector style   0: simple line, 1: 3D vector composed of 2 tetrahedra

        Example(s):

        vects = CreateVectors(alt1,displ,alt2,8,8,3,1,1)


        See also:
                CreateFlatMesh, ElevateMesh, ComputeAltitudes, Altitudes2Position
      **/

      InrImage::ptr alt2  (driver.im_stack.GetLastImage());
      InrImage::ptr displ (driver.im_stack.GetLastImage());
      InrImage::ptr alt1  (driver.im_stack.GetLastImage());
      int stepx   = (int) $9;
      int stepy   = (int) $11;
      float scale = $13;
      int   type   = (int) $15;
      int   style  = (int) $17;
          SurfacePoly* surf;

      surf = AMIFluid::Func_CreateVectors(alt1.get(),
          displ.get(),
          alt2.get(), stepx, stepy, scale, type,style);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateVectors T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_CL_PAR
    {
        /**
        Parameters:
          #1 expr_image:        altitudes1
          #2 expr_image:        displacement
          #3 expr_image:        altitudes2
          #4 expr:              stepx
          #5 expr:              stepy
          #6 expr:              scale

        Description:
        Creates a 3D vector field for visualization of the displacement of clouds
        between times t1 and t2.
        description of the input parameters:
        - altitudes1:    scalar image,    altitudes of the clouds at time t1
        - displacement:  vectorial image, displacement as a 2D vector field
        - altitudes2:    scalar image,    altitudes of the clouds at time t2
        - stepx:         spacing in pixels between successive vectors in X direction
        - stepy:         spacing in pixels between successive vectors in Y direction
        - scale:         scaling of the vectors

        Example(s):

        vects = CreateVectors(alt1,displ,alt2,8,8,3)


        See also:
                CreateFlatMesh, ElevateMesh, ComputeAltitudes, Altitudes2Position
      **/
      InrImage::ptr alt2  (driver.im_stack.GetLastImage());
      InrImage::ptr displ (driver.im_stack.GetLastImage());
      InrImage::ptr alt1  (driver.im_stack.GetLastImage());
      int stepx   = (int) $9;
      int stepy   = (int) $11;
      float scale = $13;
          SurfacePoly* surf;

      surf = AMIFluid::Func_CreateVectors(alt1.get(),displ.get(),alt2.get(), stepx, stepy, scale);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateVectors T_OP_PAR expr_image  T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr  T_COMMA expr T_CL_PAR
    {
        /**
        Parameters:
          (3) expr_image:        displacement field in voxel coordinates
          (5) expr:              spacing between vectors in X direction
          (7) expr:              spacing between vectors in Y direction
          (9) expr:              spacing between vectors in Z direction
          (11) expr:             scale
          (13) vector style   0: simple line, 1: 3D vector composed of 2 tetrahedra

        Description:
        Creates a 3D vector field for visualization.

      **/
      InrImage::ptr displ (driver.im_stack.GetLastImage());
      int stepx   = (int) $5;
      int stepy   = (int) $7;
      int stepz   = (int) $9;
      float scale = $11;
      int style = (int) $13;
      SurfacePoly* surf;

       surf = AMIFluid::Func_CreateVectors(displ.get(), stepx, stepy, stepz,  scale, style);
       Si surf != NULL Alors
         driver.surf_stack.AddSurf(surf);
       FinSi
    }
    | T_CreateEllipsoids T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_CL_PAR
    {
    /**
    Parameters:
        (3)  First  vector field v1
        (5)  Second vector field v2
        (7)  Third  vector field v3
        (9)  step in X dimension
        (11) step in Y dimension
        (13) step in Z dimension
        (15) resolution

    Description:
        Create 3D ellipsoids based on 3 vector fields
    **/
      InrImage::ptr v3  (driver.im_stack.GetLastImage());
      InrImage::ptr v2  (driver.im_stack.GetLastImage());
      InrImage::ptr v1  (driver.im_stack.GetLastImage());
      int stepx   = (int) $9;
      int stepy   = (int) $11;
      int stepz   = (int) $13;
      int res     = (int) $15;

          SurfacePoly* surf;

      surf = Func_CreateEllipsoids(v1.get(),
              v2.get(),
              v3.get(),
              stepx,stepy,stepz,res);
      Si surf != NULL Alors
        driver.surf_stack.AddSurf(surf);
      FinSi
    }
    | T_CreateEllipsoids T_OP_PAR expr_image T_COMMA expr_image T_COMMA expr_image T_COMMA expr T_COMMA expr T_COMMA  expr T_COMMA expr T_COMMA expr_image T_COMMA  expr_image T_CL_PAR
    {
    /**
    Parameters:
        (3)  First  vector field v1
        (5)  Second vector field v2
        (7)  Third  vector field v3
        (9)  step in X dimension
        (11) step in Y dimension
        (13) step in Z dimension
        (15) resolution
        (17) RGB image for the colors
        (19) mask image

    Description:
        Create 3D ellipsoids based on 3 vector fields
    **/
      InrImage::ptr mask   (driver.im_stack.GetLastImage());
      InrImage::ptr colors (driver.im_stack.GetLastImage());
      InrImage::ptr v3     (driver.im_stack.GetLastImage());
      InrImage::ptr v2     (driver.im_stack.GetLastImage());
      InrImage::ptr v1     (driver.im_stack.GetLastImage());

      int stepx   = (int) $9;
      int stepy   = (int) $11;
      int stepz   = (int) $13;
      int res     = (int) $15;

          SurfacePoly* surf;

      surf = Func_CreateEllipsoids( v1.get(),
                                    v2.get(),
                                    v3.get(),stepx,stepy,stepz,res,
                                    colors.get(),
                                    mask.get());
      if (surf != NULL) {
        driver.surf_stack.AddSurf(surf);
      }
    }
;


identifier
        : IDENTIFIER
        ;

variable:
          VAR_INT
        | VAR_FLOAT
        | VAR_UCHAR
        | var_image
        | VAR_IMAGEDRAW
        | var_surface
        | VAR_ARRAY_SURFACE
        | VAR_SURFDRAW
        | VAR_FILE
        | VAR_C_FUNCTION
        | VAR_C_PROCEDURE
        | VAR_CLASS_MEMBER
        | VAR_C_IMAGE_FUNCTION
        | VAR_AMI_FUNCTION
        | VAR_AMI_CLASS
        | VAR_AMI_OBJECT
        | VAR_STRING
        | VAR_MATRIX
        | VAR_GLTRANSFORM
        | VAR_ARRAY_IMAGE
        | VAR_AMI_OBJECT T_POINT identifier
        {
          // todo ... 
          // 1. check if identifier belongs to the object
          // 2. if so return corresponding variable
          Variable<AMIObject>::ptr var(driver.var_stack.GetLastVar<AMIObject>());
          AMIObject::ptr object(var->Pointer());
          IdentifierInfo::ptr ident($3);
          Variables::ptr previous_ocontext (Vars.GetObjectContext());
          Vars.SetObjectContext(object->GetContext());
    
          // here, need to do our own checking ...
          BasicVariable::ptr newvar( 
            Vars.GetVar(ident->GetName().c_str(),
            OBJECT_CONTEXT_NUMBER));

          // reset previous object context
          Vars.SetObjectContext(previous_ocontext);
    
          if  ((!GB_driver.procedure_declaration)&& newvar.get())   {
            //cout << "returning variable" << endl;
            newvar->display();
            driver.var_stack.AddVar(newvar);
          } else {
            // error message here
            driver.yyiperror("Identifier does not belong to object context \n");
            driver.var_stack.AddVar(BasicVariable::ptr());
          }
        }
        |
        variable T_OP_PAR param_list T_CL_PAR 
        {
        /**
          Description: 
            Call to a function, returning a variable
        **/
          //cout << "call to variable T_OP_PAR param_list T_CL_PAR end_instr" << endl;
          // 1. check the variable type
          BasicVariable::ptr var(driver.var_stack.GetLastBasicVar());
          ParamList::ptr param($3);

          // TODO: run this with overloading from BasicVariable ...

          if (var->Type()==type_class_member) {
            ///    Call a wrapped C++ class member.
            DYNAMIC_CAST_VARIABLE(WrapClassMember,var, var1);
            BasicVariable::ptr res ((var1->Pointer())->CallMember(param.get()));
            driver.var_stack.AddVar(res);

          } else
          if (var->Type()==type_ami_function) 
          {
            ///    Call a language function with its parameters.
            DYNAMIC_CAST_VARIABLE(AMIFunction,var, var1);
            AMIFunction::ptr f(var1->Pointer());
            BasicVariable::ptr res(driver.yyip_call_function(f,param));
            driver.var_stack.AddVar(res);

          } else {
            // error message here
            driver.yyiperror("variable is not of type  type_class_member\n");
            driver.var_stack.AddVar(BasicVariable::ptr());
          }
        }
        ;


image_extent:
        expr T_COLON expr T_COMMA  expr T_COLON expr T_COMMA  expr T_COLON expr
        {
          ImageExtent<float>* extent=new ImageExtent<float>( (float)$1,(float)$3,(float)$5,
                              (float)$7,(float)$9,(float)$11);
          extent->SetMode(1); // relative
          $$=extent;
        }
        |
        expr T_COLON expr T_COMMA  expr T_COLON expr
        {
          ImageExtent<float>* extent=new ImageExtent<float>((float)$1,(float)$3,(float)$5,(float)$7);
          extent->SetMode(1); // relative
          $$=extent;
        }
        |
        var_image
        {
          GET_VARSTACK_VALUE(InrImage, im);

          ImageExtent<float>* extent=new ImageExtent<float>();
          extent->SetMode(0); // absolute
          extent->SetXmin( im->SpacePosX(0));
          extent->SetXmax( im->SpacePosX(im->DimX()-1));
          extent->SetYmin( im->SpacePosY(0));
          extent->SetYmax( im->SpacePosY(im->DimY()-1));
          extent->SetZmin( im->SpacePosZ(0));
          extent->SetZmax( im->SpacePosZ(im->DimZ()-1));
          //extent->print();
          $$=extent;
       }
       |
       VAR_IMAGEDRAW
       {
        Variable<DessinImage>::ptr  varimd(driver.var_stack.GetLastVar<DessinImage>());
        DessinImage::ptr draw = DessinImage::ptr(varimd->Pointer());

        int xmin,xmax;
        int ymin,ymax;
        int zmin,zmax;
        string comment;

        draw->GetZoom(xmin,ymin,zmin,xmax,ymax,zmax);
        ImageExtent<float>* extent=new ImageExtent<float>(xmin,xmax,ymin,ymax,zmin,zmax);
        extent->SetMode(1); // relative extent

        comment = str(format(" //  subvolume [%3d:%3d, %3d:%3d, %3d:%3d] ")
            % xmin % xmax % ymin % ymax % zmin % zmax);
        if (GB_debug) cerr << "********* extent ****" << endl;
        if (driver.InConsole()) GB_main_wxFrame->GetConsole()->IncCommand(comment);

        $$=extent;
       }
%%
#include <stdio.h>



int is_space(char c)
{
  return ((c==' ')||(c=='\n')||(c=='\t'));
}




void yyip::Parser::error(const Parser::location_type& l,
          const std::string& m)
{
    driver.error(l, m);
}


//-------------------------------------------
void CB_ParamWin(void* cd)
 {

  AMIFunction* func_ptr = (AMIFunction*) (cd);

  //cout << "CB_ParamWin pointer is " << func_ptr << endl;

  GB_driver.yyip_call_function(func_ptr);

} // CB_ParamWin( void* cd )

//-----------------------------------------
void CB_delete_variable( void* var)
{
  BasicVariable* vartodelete = (BasicVariable*) var;

  FILE_MESSAGE(boost::format("deleting %1%") % vartodelete->Name());
  if (!Vars.deleteVar(vartodelete))
    FILE_ERROR("Could not delete variable "); 

}

//------------------------------------------------------
void CB_update_imagelist( void* imagelist_gui)
//   -------------------
{
  wxEnumerationParameter* imlist = (wxEnumerationParameter*) imagelist_gui;
  boost::shared_ptr<wxArrayString> imagelist;

  imagelist = Vars.SearchVariables(type_image);
  imagelist->Add(_T("Image"));
  imlist->SetChoices(imagelist);
}


//------------------------------------------------------
void wxScheduleTimer::Notify()
//   -----------------------
{
  //cout << "Notify()" << endl;
  CB_ParamWin( var->Pointer().get() );

  std::list<wxScheduleTimer::ptr>::iterator Iter;
  for (Iter  = schedule_timers.begin();
       Iter != schedule_timers.end()  ; Iter++ )
  {
    if ((*Iter).use_count()) {
      if (Iter->get() == this) {
        Iter = schedule_timers.erase(Iter);
     }
    }
  }
} // wxScheduleTimer::Notify()




