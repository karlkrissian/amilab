#!/usr/bin/amilab

#SetDebugOn
#SetVerboseOn

NoMessageDialog(1)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# test_prime_number.amil
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Determine whether a number is prime. A prime number is a natural number that
# has exactly two distinct natural number divisors: 1 and itself.
#
# Primer numbers:     2, 3, 5, 7, 11, 13, 17, 19, ...
#
# For example: N = 4 --> Result = No prime number.
#              N = 7 --> Result = Prime number.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

func "ctest/ctest_config.amil"

N_A=4

root=sqrt(N_A)
Result_A=1; # Indicates a prime number.
for i=2 to root{
  if ((N_A % i) == 0) {
    Result_A=0; # No prime number.
  }
}

N_B=7

root=sqrt(N_B)
Result_B=1; # Indicates a prime number.
for i=2 to root{
  if ((N_B % i) == 0) {
    Result_B=0; # No prime number.
  }
}


printn "\n\t Prime numbers ---> N =  %1%" % N_A
printn "\t Prime numbers ---> Result =  %1%(1 == Prime number, 0 == No prime number)\n" % Result_A
printn "\n\t Prime numbers ---> N =  %1%" % N_B
printn "\t Prime numbers ---> Result =  %1%(1 == Prime number, 0 == No prime number)\n" % Result_B

#
# Verify that: 4 isn't a prime number.
#              7 is a prime number.
#
ctest.PrintTestResult( ((Result_A == 0) && (Result_B == 1)) ) 

#quit

