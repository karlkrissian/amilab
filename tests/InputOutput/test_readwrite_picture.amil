#!/usr/bin/amilab

#SetDebugOn
#SetVerboseOn
#import_itk

# Hide main frame
ami.MainFrame.Show(0)

#InfoDialog l_script_dir

func "ctest/ctest_config.amil"
epsilon = 0.000001

if (argc<1) {
  printn "\nFailing to get the parameter."
} else {
  extension = $1 

  image_name ="amilab_logo_rgb8bits"
  image_name2="amilab_logo_rgb8bits2"
  
  printn "Reading/writing 8 bits RGB test image:"
  
  #for extension in ".png", ".jpg", ".tiff" , ".bmp" {
  
  del l_script_dir
  l_script_dir = op_system->GetCurrentScriptDir()
  printn "script dir = "+l_script_dir
  l_exact=(extension==".png") || (extension==".bmp")

  # read test
  l_i0 = Image(l_script_dir+"/"+image_name+extension)
  l_i = Image(l_script_dir+"/"+image_name+".ami.gz")

  if (l_i0.GetFormat == RGB.val)  {
    l_i <<= (RGB) l_i
  }
  
  l_imd = (FLOAT) l_i - (FLOAT) l_i0
  if (l_exact) {
    l_d = sqrt(mean(l_imd*l_imd/l_imd.vdim))
    printn " l_d = %1% " % l_d
    l_result = (l_d<epsilon)
  } else {
    l_maxdiff = max(l_i)-min(l_i)
    l_d = sqrt(mean(l_imd*l_imd/l_imd.vdim))/l_maxdiff
    l_dm = max(sqrt(l_imd*l_imd/l_imd.vdim))/l_maxdiff
    l_dm1 = median(sqrt(l_imd*l_imd/l_imd.vdim))/l_maxdiff
    printn " l_d = %1% " % l_d
    printn " max = %1% " % l_dm
    printn " median = %1% " % l_dm1
    l_result =  (l_d   < 0.05)&&\
                (l_dm  < 0.1 )&&\
                (l_dm1 < 0.05)
  }
  printn "\t ******* "+extension+" Read Test Result:  %1%" % l_result
  resultRead = l_result
  
  OutputFileName = wx.wxFileName()
  OutputFileName.AssignTempFileName("tmp")
  OutputFileName->SetName(image_name2)
  OutputFileName.SetExt(wx.wxString(extension).AfterFirst("."))

  printn "file is %1%" % wx.FromWxString(OutputFileName.GetFullPath())

  # write test
  l_i.save  wx.FromWxString(OutputFileName.GetFullPath())
  l_j= Image(wx.FromWxString(OutputFileName.GetFullPath()))
  l_imd = (FLOAT) l_i - (FLOAT) l_j
  if (l_exact) {
    l_d = sqrt(mean(l_imd*l_imd/l_imd.vdim))
    printn " l_d = %1% " % l_d
    l_result = (l_d<epsilon)
  } else {
    l_maxdiff = max(l_i)-min(l_i)
    l_d = sqrt(mean(l_imd*l_imd/l_imd.vdim))/l_maxdiff
    l_dm = max(sqrt(l_imd*l_imd/l_imd.vdim))/l_maxdiff
    l_dm1 = median(sqrt(l_imd*l_imd/l_imd.vdim))/l_maxdiff
    printn " l_d = %1% " % l_d
    printn " max = %1% " % l_dm
    printn " median = %1% " % l_dm1
    l_result =  (l_d   < 0.05)&&\
                (l_dm  < 0.1 )&&\
                (l_dm1 < 0.05)
  }
  printn "\t ******* "+extension+" Write Test Result:  %1%" % l_result
  resultWrite = (l_result)

  # TODO: remove the created file: need ::wxRemoveFile function here ...

  ctest.PrintTestResult( resultRead && resultWrite ) 

  # clear created variables
  #delvars "l_*"
  #}
}

quit
