#!/home/karl/projects/bin/linux/improcess
#
#
# Parameters

#
# Image type: Atlantic or Africa
#

type_string=$1

SetDebugOff
SetVerboseOff

# type_string="NAtl"
# type_string="AfGG"


if (type_string=="NAtl") {
  type_image=0
}
if (type_string=="AfGG") {
  type_image=1
}


# load input images

basedir="WP01/"
print "read j0 \n"
j0   = Image(basedir+"images_41-73/"+type_string+"_c0.81.ami");
print "read c0 \n"
c0   = Image(basedir+"CLAssification/"+type_string+"_CLA_scene_analysis.41_73.ami");
print "read temp \n"
temp = Image(basedir+"images_41-73/"+type_string+"_c10.8.ami");


sj0 = Resize(j0,   512,512,  j0.tz,0)
sc0 = Resize(c0,   512,512,  c0.tz,0)
st  = Resize(temp ,512,512,temp.tz,0)

del j0;del c0; del temp;
j0=sj0; c0=sc0; temp=st;

# rescaling of the altitudes
alt_factor = 4;



#
# INITIALIZATION
#
#
coeff=Image "alt_coeff.ami.gz"
epsilon=0.5-0.2

proc ProcessMesh(OBJECT _s,IMAGE _j1, NUM _j1min, NUM _j1max, IMAGE _pos) {
  _s.SetColors(_j1,_j1min,_j1max)
  _s.ElevateMesh(_pos)
  _s.Normals()
  _s.Recompute()
}



# Array of surfaces for clouds at different times
tmin=45
tmax=70
clouds = Surface[tmax-tmin+1]

# Without filtering


for t=tmin to tmax {

  print "Processing time "; print t; print "\n"
  n=t-tmin;
  tn = temp[:,:,n:n]
  cn = c0  [:,:,n:n]
  jn = j0  [:,:,n:n]
  altn = ComputeAltitudes(tn,coeff)
  altn = altn*alt_factor
  clouds[n] = CreateFlatMesh(cn,100-epsilon,200)
  posn=Altitude2Position(altn,type_image) 
  if (t==tmin) {
    global
      earth  = CreateFlatMesh(cn>=0)
      jmin=min(jn);
      jmax=max(jn);
      alt_earth = altn
      j_earth = jn
  }  else {
    if (t<58) {
      global
        alt_earth = alt_earth*(j_earth<=jn)+altn*(j_earth>jn)
        j_earth   = j_earth  *(j_earth<=jn)+jn  *(j_earth>jn)
    }
  }

  ProcessMesh(&clouds[n],jn,jmin,jmax,posn)
}


#   substract 10m to avoid collision with clouds (OpenGL problem) ...
pos_earth=Altitude2Position(alt_earth*0-10,type_image) 
ProcessMesh(&earth ,j_earth,jmin,jmax,pos_earth)

show earth
earth_draw.SetLightDiffuse(0,180,180,180)
# Set colormaterial ON
earth. SetColorMaterial(1)

for t=tmin to tmax {
  print "Add t = "; print t; print "\n"
  n=t-tmin;
  earth_draw += clouds[n]
}

del tn; del cn; del jn; del altn; del posn;


//----------------------------------------------------------------------
// Continuous opacity :
//


proc ChangeCM() {
  global
  for t=tmin to tmax {
    clouds[t-tmin].SetColorMaterial(colormaterial);
  }
  earth_draw.Paint()
}


proc ChangeVisible() {
  global
  printn tmin
  printn tmax
  printn time

  for t=tmin to tmax \
  {

    clouds[t-tmin].\
      SetVisible(\
        time==t)

  }

  earth_draw.Paint()
}

colormaterial = INT(0)

time = INT(tmin)
anim_direction=1
playing = 0

wait_time = INT(100)
ChangeVisible();

proc AnimClouds(NUM _n) {
  global
  for _k=1 to _n {
    for _i=tmin to tmax { 
      time = _i; 
      ChangeVisible(); 
      wait(wait_time);
    };  
    for _i=tmin to tmax  { 
      time = -_i+tmin+tmax; 
      ChangeVisible(); 
      wait(wait_time);
    }
  }
}

proc PlayAnim() {
  global
  if playing {
    time = time + anim_direction
    if (time>tmax)||(time<tmin) {
	anim_direction = -anim_direction
	time = time + anim_direction
    }
    ChangeVisible()
    schedule(wait_time,PlayAnim)
  }
}

proc CB_Play() {
  global
  if !(playing) {
    playing=1
    PlayAnim()
  }
}

proc CB_Stop() {
  global
  playing =0
  // wait for scheduled events to come
  wait(wait_time)
}

w1 = ami_import.ParamPanel("Cloud Evolution")

cm_id=w1.AddInt( &colormaterial,  "colormaterial", 0,1)
w1.SetCallback( &ChangeCM)

pa_id=w1.AddButton("Play", CB_Play)
pa_id=w1.AddButton("Stop", CB_Stop)

time_id=w1.AddInt( &time,  "time", tmin,tmax)
w1.SetCallback( &ChangeVisible)

wt_id=w1.AddInt( &wait_time,  "wait_time", 5,1000)
w1.SetCallback( &ChangeVisible)

w1.Update(-1)
w1.Display()
w1.SetDragCallback(time_id)




