

del GetDicomInfoClass
Class GetDicomInfoClass \
{

  func "DicomDataViewWindow"
  DicomDataViewWindow ::display_win
  
  # simplify code 
  ::VR=&itk.gdcm_VR
  ::VM=&itk.gdcm_VM

  #-----------------------------------------------------------------------------
  proc ::SetFileName(STRING filename) \
  {
    ::filename = filename
    ::ReadFile()
  }

  #-----------------------------------------------------------------------------
  proc ::ReadFile() \
  {
    reader = itk.gdcm_Reader()
    reader.SetFileName(::filename)
    ::read_ok = reader.Read()
    if (::read_ok) {
      ::file = reader.GetFile()
    }
    return = ::read_ok
  }

  #-----------------------------------------------------------------------------
  proc ::PatientName() \
  {
    #TagSetType tst = new TagSetType();
    #tst.Add( new Tag(0x7fe0,0x10) );
    #bool ret = reader.ReadUpToTag( new Tag(0x88,0x200), tst );
    if ::read_ok {
      sfilter = itk.gdcm_StringFilter()
      # Memory management trick: ::file has now a deleter associated
      # because it comes from GetFile() ...
      # but StringFilter creates its own smartpointer, so
      # give it a copy without deleter
      sfilter.SetFile(itk.gdcm_File(::file))
      t = itk.gdcm_Tag(0x0010, 0x0010)
      value = sfilter.ToString(t)
      return=value
    } else {
      return="failed"
    }
  }

  proc ::GetTag( NUM val1, NUM val2) \
  {
    #TagSetType tst = new TagSetType();
    #tst.Add( new Tag(0x7fe0,0x10) );
    #bool ret = reader.ReadUpToTag( new Tag(0x88,0x200), tst );
    if ::read_ok {
      sfilter = itk.gdcm_StringFilter()
      sfilter.SetFile(itk.gdcm_File(::file))
      t = itk.gdcm_Tag(val1, val2)
      value = sfilter.ToString(t)
      return=value
    } else {
      return="failed"
    }
  }

  #-----------------------------------------------------------------------------
  proc ::GetEntryValue( OBJECT tag) \
  {
    return = ::string_filter.ToString(tag)
  }

  #-----------------------------------------------------------------------------
  proc ::GetEntryFromDataElement( OBJECT de, OBJECT ds) \
  {
    ::display_win->DictEntryInfo entry_info
  
    # now print the DataElement ...
    # - Get Tag
    tag = de.GetTag()
    # - check owner: is it really necessary, since GetDictEntry
    # if has several definitions for Tag and PrivateTag: to check
    if ( tag.IsPrivate() && !tag.IsPrivateCreator() ) \
    {
      owner = ds.GetPrivateCreator(tag)
      entry = ::dicts.GetDictEntry(tag,owner)
    } else {
      entry = ::dicts.GetDictEntry(tag)
    }
    
    # Print Tag and Value Representation
    entry_info.tag_group   = tag.GetGroup()
    entry_info.tag_element = tag.GetElement()

    vr = de.GetVR()
    entry_info.vr = "%1%" % ::VR.GetVRString(vr.convert_int()) 

    # here should compute refvr ...
    refvr = vr
    
    # --- check the value multiplicity
    vm = entry.GetVM()
    entry_info.vm = "%1%" % ::VM.GetVMString(vm.convert_int()) 
    
    name = entry.GetName()
    if name=="" { name = "UNKNOWN"; }
    # sequence of items
    if( entry.GetVR().convert_int() == ::VR.SQ ) \
    {
      entry_info.value = " Entry is a Sequence ..."
      #SmartPointer<SequenceOfItems> sqi = de.GetValueAsSQ();
      #if( sqi )
        #{
        #SequenceOfItems::ItemVector::const_iterator it = sqi->Items.begin();
        #for(; it != sqi->Items.end(); ++it)
          #{
          #const Item &item = *it;
          #const DataSet &ds1 = item.GetNestedDataSet();
          #//const DataElement &deitem = item;
          #PrintDataSet2(os, ds1);
          #}
    } else {
      # if ASCII
      if (refvr.convert_int()&::VR.VRASCII) {
        # Check byte value
        bv = de.GetByteValue()
        wbv = language.WrapVariable(bv)
        if wbv.GetTypeName()=="AMIObject" {
          del ss
          ss = stringstream()
          l = bv.GetLength()
          l1 = max(l.convert_long(),100)
          bv.PrintASCII(ss,l1)
          entry_info.value        = "%.100s" % ss.str()
          entry_info.value_length = "%1%"    % l.convert_long()
          #if (bv!=NULL) {
            # should print value here
          #}
        } else {
          entry_info.value = ::GetEntryValue(tag)
        }
      } else {
        if (name == "Pixel Data") {
          entry_info.value =  "[pixel data ...]"
        } else {
          entry_info.value = ::GetEntryValue(tag)
        }
      }
    }
    entry_info.description = name

    # if tag is private and elt > 0x0100 ... todo
    return=&entry_info
  }

  #-----------------------------------------------------------------------------
  proc ::GetEntries() \
  {
    ::gdcm_global = itk.gdcm_Global()
    ::dicts = ::gdcm_global.GetDicts()
    
    
    ::string_filter = itk.gdcm_StringFilter()
    ::string_filter.SetFile(itk.gdcm_File(::file))

    entries = VarVector()

    if ::read_ok {
      ds = ::file.GetDataSet()
      b = ds.Begin()
      ok = b!=ds.End()
      while ok {
        del entry
        entry = ::GetEntryFromDataElement(*b,ds)
        entries.push_back(entry)
        b++
        ok = b!=ds.End()
      }
    }
    
    return=&entries
  }
  
  #-----------------------------------------------------------------------------
  proc ::DisplayEntries() \
  {
    if (::read_ok) {
      if (!exists(::display_win->fr)) {
        ::display_win.CreateWindow()
      }
      entries = ::GetEntries()
      ::display_win.ShowEntries(entries, ::filename)
    } else {
      InfoDialog "Failed in reading file %1%" % ::filename
    }
  }
}

del dicom_info
GetDicomInfoClass dicom_info
