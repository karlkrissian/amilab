#
# This script should define convenient functions to create
# user interfaces for the different Gui scripts.
#

func "Common/LoadIcons"
if (!exists(standard_icons)) {
  LoadIcons standard_icons
}

if (!exists(ScriptGui)) \
{

  Class ScriptGui \
  {

    # set a local reference to standard_icons
    if (exists(global::standard_icons)) {
      ::icons = &global::standard_icons
    }

    # Create the string containing the wiki page link
    proc ::AmilabWiki( STRING wikipage) {
      return = "http://www.ctm.ulpgc.es/amilab_dokuwiki"
      return += "/dokuwiki/doku.php?id=%1%" % wikipage
    }
    Comments( ::AmilabWiki, "Creates the name of the wiki page")
  
    # TODO: Create the link to the documentation


    #----------------------------
    # Closes only the object instance
    #
    proc ::Close() {
      ::win.HidePanel()
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
      
    #----------------------------
    # Closes the class and the instance 
    #
    proc ::CloseAll() {
      global_classname = "global::%1%" % ::classname
      eval  "if (exists(%1%)) { del %1%; };"  % global_classname 
      ::Close()
    }
    Comments( ::CloseAll, "Call ::Close() method and delete the class variable")
      
    #----------------------------
    # Reloads the script
    #
    proc ::Reload() {
      printn ::objectfilename
      cmd = "global; func \"%1%\";" % ::objectfilename
      printn cmd
      ::CloseAll()
      eval cmd
    }
    Comments( ::Reload, "Reload script from file.")
      
    #------------------------------------
    proc ::EditScript() {
      # add wxEditor widget
      ed = ami->MainFrame.GetAmilabEditor()
      ed.FileOpen( ::classfilename)
      ed.ShowWin()
    }
    Comments( ::EditScript, "Open AmilabEditor to edit the current script :)")

    #------------------------------------
    # Adds a bitmap button after resizing the image to size x size
    #
    proc ::AddBitmapButton( OBJECT win, OBJECT icon_im, NUM size, STRING callback_name) \
    {
      bmp = wx.wxBitmap(&icon_im.Scale2(size,size))
      eval "return = win.AddBitmapButton(\"%1%\", ::%1%, &bmp);" % callback_name
    }

    #------------------------------------
    # Adds a bitmap button after resizing the image to 16x16
    #
    proc ::AddBitmapButton16( OBJECT win, OBJECT icon_im, STRING callback_name) \
    {
      size = 16
      bmp = wx.wxBitmap(&icon_im.Scale2(size,size))
      eval "win.AddBitmapButton(\"%1%\", ::%1%, &bmp);" % callback_name
    }

    #------------------------------------
    proc ::AddStandardButtons( OBJECT win) \
    {
      win.BeginHorizontal()
        ::AddBitmapButton16(&win, &::icons._Edit_page, "EditScript")
        win.SetPositionProp(-1,2)
        ::AddBitmapButton16(&win, &::icons._Refresh, "Reload")
        win.SetPositionProp(-1,2)
        ::AddBitmapButton16(&win, &::icons._Close,   "Close")
        win.SetPositionProp(-1,2)
        ::AddBitmapButton16(&win, &::icons._Delete,  "CloseAll")
        win.SetPositionProp(-1,2)
      win.EndHorizontal()  
    }

    #---------------------------------------------------
    # needs to have the variable ::wiki_help defined
    #
    proc ::LaunchWiki() {
      import = &global::ami_import
      wx1 = import->WxFunctions()
      if (exists(::wiki_help)) {
        res = wx1->LaunchDefaultBrowser(::wiki_help)
      } else {
        InfoDialog "Sorry, there is no wiki page for this script :("
      }
    }
    Comments( ::LaunchWiki, "Launch the corresponding wiki tutorial page on the default browser.")
  
    #---------------------------------------------------
    # needs ::html and ::html_filename
    #
    proc ::HtmlHome() {
      ::html.LoadFile( ::html_filename)
    }
    Comments( ::HtmlHome, "Back to the initial page.")
  
    #---------------------------------------------------
    proc ::HtmlBack() {
      res = ::html.HistoryBack()
    }
    Comments( ::HtmlBack, "Back to the previous page.")
  
    #---------------------------------------------------
    proc ::HtmlForward() {
      res = ::html.HistoryForward()
    }
    Comments( ::HtmlForward, "Go to the forward page.")
  

    #------------------------------------
    # Add the standard help page for Gui scripts
    #
    proc ::AddHelpPage( OBJECT win) \
    {
      win.AddPage("Help")
        win.BeginHorizontal()
          # make nice wiki button
          wikipng = &::icons._DokuWiki

          if (wikipng.IsOk()) {
            win.AddBitmapButton("Wiki", &::LaunchWiki, \
            &wx.wxBitmap(&wikipng.Scale2(16,16)))
          } else {
            win.AddButton("Wiki", &::LaunchWiki)
          }
          
          win.AddBitmapButton("Home", &::HtmlHome, &wx.wxBitmap(&::icons._Home.Scale2(16,16)))
          win.SetPositionProp(-1,2)
          win.AddBitmapButton("<--",  ::HtmlBack, &wx.wxBitmap(&::icons._Back.Scale2(16,16)))
          win.SetPositionProp(-1,2)
          win.AddBitmapButton("-->",  ::HtmlForward, \
            &wx.wxBitmap(&::icons._Forward.Scale2(16,16)))
          win.SetPositionProp(-1,2)
        win.EndHorizontal()
        # add html widget
        d = win.CurrentParent()
        ::html = wx.wxHtmlWindow(&d)
        ::html.LoadFile( ::html_filename)
        win.AddWidget(&::html,1)
    }



  }
}
