#
# This script should define convenient functions to create
# user interfaces for the different Gui scripts.
#

func "Common/LoadIcons"
if (!exists(standard_icons)) {
  LoadIcons standard_icons
}

if (!exists(ScriptGui)) \
{

  Class ScriptGui \
  {

    # set a local reference to standard_icons
    if (exists(global::standard_icons)) {
      ::icons = &global::standard_icons
    }

    # Create the string containing the wiki page link
    proc ::AmilabWiki( STRING wikipage) {
      return = "http://www.ctm.ulpgc.es/amilab_dokuwiki"
      return += "/dokuwiki/doku.php?id=%1%" % wikipage
    }
    Comments( ::AmilabWiki, "Creates the name of the wiki page")
  
    # TODO: Create the link to the documentation


    #------------------------------------
    proc ::SetParentPanel(OBJECT pp) \
    {
      ::parent_panel = &pp
    }
    Comments( ::SetParentPanel, "Sets the panel showing the user interface.")
    
    #----------------------------
    # Closes only the object instance
    #
    proc ::Close() {
      if exists(::helpw) {
        ::helpw.Destroy()
      }
      ::Attach()
      ::win.HidePanel()
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
      
    #----------------------------
    # Closes the class and the instance 
    #
    proc ::CloseAll() {
      global_classname = "global::%1%" % ::classname
      eval  "if (exists(%1%)) { del %1%; };"  % global_classname 
      ::Close()
    }
    Comments( ::CloseAll, "Call ::Close() method and delete the class variable")
      
    #----------------------------
    # Reloads the script
    #
    proc ::ReloadScript() {
      printn ::objectfilename
      cmd = "global; func \"%1%\";" % ::objectfilename
      printn cmd
      ::CloseAll()
      eval cmd
    }
    Comments( ::ReloadScript, "Reloads the script from disk.")
      
    #------------------------------------
    proc ::EditScript() {
      # add wxEditor widget
      ed = ami->MainFrame.GetAmilabEditor()
      ed.FileOpen( ::classfilename)
      ed.Show()
      ed.Raise()
    }
    Comments( ::EditScript, "Open AmilabEditor to edit the current script :)")

    #------------------------------------
    # Adds a bitmap button after resizing the image to size x size
    #
    proc ::AddBitmapButton( OBJECT win, OBJECT icon_im, NUM size, STRING callback_name) \
    {
      bmp = wx.wxBitmap(&icon_im.Scale(size,size))
      eval "return = win.AddBitmapButton(\"%1%\", ::%1%, &bmp);" % callback_name
    }

    #------------------------------------
    # Adds a bitmap button after resizing the image to 16x16
    #
    proc ::AddBitmapButton16( OBJECT win, OBJECT icon_im, STRING callback_name) \
    {
      size = 16
      bmp = wx.wxBitmap(&icon_im.Scale(size,size))
      eval "::%1%_but_id = ::win.AddBitmapButton(\"%1%\", ::%1%, &bmp);" % callback_name
    }

    #------------------------------------
    proc ::Attach() {
      
      if (exists(::frame)) {
        # Save frame size and position for future detach
        ::detach_position = ::frame.GetPosition()
        ::detach_size     = ::frame.GetSize()
        ::win.Reparent(&::win_parent)
        ::frame.Close()
        del ::frame
        del ::boxsizer
        del ::win_parent
        ::win.GetParent().Layout()
      }
    }

    #------------------------------------
    proc ::Detach() {
      
      if (!exists(::frame)) {
        ::frame = wx.wxFrame(&ami.MainFrame,wx.wxID_ANY,"Timer",\
              wx.wxPoint(100,100),wx.wxSize(300,400),\
              wx.wxRESIZE_BORDER|wx.wxCLOSE_BOX,"Timer")
        if exists(::detach_position) {
          ::frame.SetPosition(::detach_position)
        }
        if exists(::detach_size) {
          ::frame.SetSize(::detach_size)
        }
        ::frame.Show()

        # Create a BoxSizer
        ::boxsizer = wx.wxBoxSizer(wx.wxVERTICAL)
    
        ::win_parent = ::win.GetParent()
        ::win.Reparent(&::frame)
        ::boxsizer.Add(&::win, &wx.wxSizerFlags(1).Center().Border(wx.wxALL, 2).Expand())

        #::panel.SetSizer(&::boxsizer)
        ::frame.SetSizer(&::boxsizer)
        ::frame.Layout()
      }
    }

    #------------------------------------
    proc ::AttachDetach() {
      if (exists(::frame)) {
        ::Attach()
      } else {
        ::Detach()
      }    
    }
    Comments(::AttachDetach,"Attach/Detach tab")

    #------------------------------------
    proc ::AddStandardButtons( OBJECT win) \
    {
      win.BeginHorizontal()
        ::AddBitmapButton16(&win, &::icons._Edit_page, "EditScript")
        win.SetPositionProp(-1,2)
        if (!exists(::parent_panel)) {
          ::AddBitmapButton16(&win, &::icons._Refresh, "ReloadScript")
          win.SetPositionProp(-1,2)
          #::AddBitmapButton16(&win, &::icons._Close,   "Close")
          #win.SetPositionProp(-1,2)
          #::AddBitmapButton16(&win, &::icons._Help,   "HelpWindow")
          ::AddBitmapButton16(&win, &::icons._Help,     "OpenInBrowser")
          ::AddBitmapButton16(&win, &::icons._DokuWiki, "LaunchWiki")
          #::AddBitmapButton16(&win, &::icons._Help,   "HelpWindow")

          ::icons.LoadIconPNG("Pin")
          ::AddBitmapButton(&::win, &::icons._Pin, 16, "AttachDetach")

          if (!exists(::wiki_help)) {
            win.Enable(::LaunchWiki_but_id,false)
          }
          if exists(::html_filename) {
            if !wx.wxFileName(::html_filename).FileExists() {
              win.Enable(::OpenInBrowser_but_id,false)
            }
          } else { win.Enable(::OpenInBrowser_but_id,false); }
          win.SetPositionProp(-1,2)
          ::AddBitmapButton16(&win, &::icons._Delete,  "CloseAll")
          win.SetPositionProp(-1,2)
        }
      win.EndHorizontal()  
    }

    #------------------------------------
    proc ::AddLimitedButtons( OBJECT win) \
    {
      win.BeginHorizontal()
        ::AddBitmapButton16(&win, &::icons._Edit_page, "EditScript")
        win.SetPositionProp(-1,2)
        ::AddBitmapButton16(&win, &::icons._Refresh, "ReloadScript")
        win.SetPositionProp(-1,2)
        #::AddBitmapButton16(&win, &::icons._Close,   "Close")
        #win.SetPositionProp(-1,2)
        #::AddBitmapButton16(&win, &::icons._Delete,  "CloseAll")
        #win.SetPositionProp(-1,2)
      win.EndHorizontal()  
    }

    #---------------------------------------------------
    # needs to have the variable ::wiki_help defined
    #
    proc ::LaunchWiki() {
      if (exists(::wiki_help)) {
        res = wx.LaunchDefaultBrowser(::wiki_help)
      } else {
        InfoDialog "Sorry, there is no wiki page for this script :("
      }
    }
    Comments( ::LaunchWiki, "Launch the corresponding wiki tutorial page on the default browser.")
  
    #---------------------------------------------------
    # needs ::html and ::html_filename
    #
    proc ::HtmlHome() {
      ::html.LoadFile( ::html_filename)
    }
    Comments( ::HtmlHome, "Back to the initial page.")
  
    #---------------------------------------------------
    proc ::HtmlBack() {
      res = ::html.HistoryBack()
    }
    Comments( ::HtmlBack, "Back to the previous page.")
  
    #---------------------------------------------------
    proc ::HtmlForward() {
      res = ::html.HistoryForward()
    }
    Comments( ::HtmlForward, "Go to the forward page.")
  
    #---------------------------------------------------
    # needs ::html and ::html_filename
    #
    proc ::Html2Home() {
      ::html2.LoadFile( ::html_filename)
    }
    Comments( ::Html2Home, "Back to the initial page.")

    #---------------------------------------------------
    # needs ::html and ::html_filename
    #
    proc ::OpenInBrowser() {
      wx.LaunchDefaultBrowser(::html_filename)
    }
    Comments( ::OpenInBrowser, "Open the file in the default browser.")
  
    #---------------------------------------------------
    proc ::Html2Back() {
      res = ::html2.HistoryBack()
    }
    Comments( ::Html2Back, "Back to the previous page.")
  
    #---------------------------------------------------
    proc ::Html2Forward() {
      res = ::html2.HistoryForward()
    }
    Comments( ::Html2Forward, "Go to the forward page.")

    #---------------------------------------------------
    proc ::Html2Reload() {
      res = ::html2.LoadPage(::html2.GetOpenedPage())
    }
    Comments( ::Html2Reload, "Reload the current page.")

    #---------------------------------------------------
    proc ::Html2Hover(OBJECT event) \
    {
      cell = event.GetCell()
      link = cell.GetLink()
      if (language.WrapVariable(&link).GetTypeName()!="wrap_AMIObject"){
        ref = "no link here ..."
      } else {
        ref = link.GetHref()
      }
      ::helpw._SetStatusText(ref)
    }
    Comments( ::Html2Hover, "Callback when going over a link.")

    #---------------------------------------------------
    proc ::OnHtmlLinkClicked(OBJECT event) \
    {
      http_link = wx.wxRegEx("[:blank:]*http://.*")
      if (http_link.Matches(event.GetLinkInfo().GetHref())) \
      {
        wx.LaunchDefaultBrowser(wx.FromWxString(event.GetLinkInfo().GetHref()))
      } else \
      {
        # skipping this event the default behaviour (load the clicked URL)
        # will happen...
        event.Skip()
      }
    }

    #------------------------------------
    # Add the standard help page for Gui scripts
    #
    proc ::AddHelpPage( OBJECT win) \
    {
      win.AddPage("Help")
        win.BeginHorizontal()
          # make nice wiki button
          wikipng = &::icons._DokuWiki

          if (wikipng.IsOk()) {
            win.AddBitmapButton("Wiki", &::LaunchWiki, \
            &wx.wxBitmap(&wikipng.Scale(16,16)))
          } else {
            win.AddButton("Wiki", &::LaunchWiki)
          }
          
          win.AddBitmapButton("Home", &::HtmlHome, &wx.wxBitmap(&::icons._Home.Scale(16,16)))
          win.SetPositionProp(-1,2)
          win.AddBitmapButton("<--",  ::HtmlBack, &wx.wxBitmap(&::icons._Back.Scale(16,16)))
          win.SetPositionProp(-1,2)
          win.AddBitmapButton("-->",  ::HtmlForward, \
            &wx.wxBitmap(&::icons._Forward.Scale(16,16)))
          win.SetPositionProp(-1,2)
        win.EndHorizontal()
        # add html widget
        d = win.CurrentParent()
        ::html = wx.wxHtmlWindow(&d)
        ::html.LoadFile( ::html_filename)
        win.AddWidget(&::html,1)
    }

    #------------------------------------
    # closing help window
    proc ::CloseHelp(OBJECT event) \
    {
      ::helpw.Destroy()
      del ::helpw
    }

    #------------------------------------
    # Opens Helps in a separate window
    # at the end not used because of problems with equations
    # figure badly aligned in wxHTML widget
    proc ::HelpWindow() \
    {
      if !exists(::helpw) {
      ::helpw = wx.wxFrame(&ami.MainFrame,wx.wxID_ANY,"Help",\
        wx.wxPoint(-1,-1),wx.wxSize(400,600),\
        wx.wxRESIZE_BORDER|wx.wxCLOSE_BOX,"test")
      ::helpw.CreateStatusBar()
      ::helpw.Show()
      ::evh_hlp_close = wx.wxAmiEventHandler(&::CloseHelp)
      ::helpw.Connect(wx.wxEVT_CLOSE_WINDOW,&::evh_hlp_close.GetCloseEventFunction(),\
                  &NULL,&::evh_hlp_close)
      topsizer = wx.wxBoxSizer(wx.wxVERTICAL)

      butsizer = wx.wxBoxSizer(wx.wxHORIZONTAL)

      bb0 = wx.wxBitmapButton(&::helpw,wx.wxID_ANY,\
                              &wx.wxBitmap(&::icons._DokuWiki.Scale(16,16)))
      bb1 = wx.wxBitmapButton(&::helpw,wx.wxID_ANY,\
                              &wx.wxBitmap(&::icons._Home    .Scale(16,16)))
      bb2 = wx.wxBitmapButton(&::helpw,wx.wxID_ANY,\
                              &wx.wxBitmap(&::icons._Back    .Scale(16,16)))
      bb3 = wx.wxBitmapButton(&::helpw,wx.wxID_ANY,\
                              &wx.wxBitmap(&::icons._Forward .Scale(16,16)))
      bb4 = wx.wxBitmapButton(&::helpw,wx.wxID_ANY,\
                              &wx.wxBitmap(&::icons._Refresh .Scale(16,16)))
      bb5 = wx.wxBitmapButton(&::helpw,wx.wxID_ANY,\
                              &wx.wxBitmap(&::icons._Search_online.Scale(16,16)))

      bb0.SetToolTip("Wiki link")
      bb1.SetToolTip("Initial page")
      bb4.SetToolTip("Reload page")
      bb5.SetToolTip("Open in default browser")

      butsizer.Add(&bb0,wx.wxSizerFlags(0).Border(wx.wxALL, 2))
      butsizer.Add(&bb1,wx.wxSizerFlags(0).Border(wx.wxALL, 2))
      butsizer.Add(&bb2,wx.wxSizerFlags(0).Border(wx.wxALL, 2))
      butsizer.Add(&bb3,wx.wxSizerFlags(0).Border(wx.wxALL, 2))
      butsizer.Add(&bb4,wx.wxSizerFlags(0).Border(wx.wxALL, 2))
      butsizer.Add(&bb5,wx.wxSizerFlags(0).Border(wx.wxALL, 2))

      ::evh0 = wx.wxAmiEventHandler(&::LaunchWiki)
      bb0.Connect(wx.wxEVT_COMMAND_BUTTON_CLICKED,&::evh0.GetEventFunction(),\
                  &NULL,&::evh0)

      ::evh_bt1 = wx.wxAmiEventHandler(&::Html2Home)
      bb1.Connect(wx.wxEVT_COMMAND_BUTTON_CLICKED,&::evh_bt1.GetEventFunction(),\
                  &NULL,&::evh_bt1)
      ::evh_bt2 = wx.wxAmiEventHandler(&::Html2Back)
      bb2.Connect(wx.wxEVT_COMMAND_BUTTON_CLICKED,&::evh_bt2.GetEventFunction(),\
                  &NULL,&::evh_bt2)
      ::evh_bt3 = wx.wxAmiEventHandler(&::Html2Forward)
      bb3.Connect(wx.wxEVT_COMMAND_BUTTON_CLICKED,&::evh_bt3.GetEventFunction(),\
                  &NULL,&::evh_bt3)
      ::evh_bt4 = wx.wxAmiEventHandler(&::Html2Reload)
      bb4.Connect(wx.wxEVT_COMMAND_BUTTON_CLICKED,&::evh_bt4.GetEventFunction(),\
                  &NULL,&::evh_bt4)
      ::evh_bt5 = wx.wxAmiEventHandler(&::OpenInBrowser)
      bb5.Connect(wx.wxEVT_COMMAND_BUTTON_CLICKED,&::evh_bt5.GetEventFunction(),\
                  &NULL,&::evh_bt5)

      topsizer.Add(&butsizer,wx.wxSizerFlags(0).Center())

      del ::html2
      ::html2 = wx.wxHtmlWindow(&::helpw)
      ::html2.LoadFile( ::html_filename)
      ::html2.SetRelatedFrame(&::helpw,"HtmlHelp : %s")
      ::evh4 = wx.wxAmiEventHandler(&::Html2Hover)
      ::html2.Connect(  wx.wxEVT_COMMAND_HTML_CELL_HOVER,\
                        &::evh4.GetHtmlCellEventFunction(),\
                        &NULL,\
                        &::evh4)

      ::evh5 = wx.wxAmiEventHandler(&::OnHtmlLinkClicked)
      ::html2.Connect(  wx.wxEVT_COMMAND_HTML_LINK_CLICKED,\
                        &::evh5.GetHtmlLinkEventFunction(),\
                        &NULL,\
                        &::evh5)

      topsizer.Add(&::html2,wx.wxSizerFlags(1).Expand().Border(wx.wxALL, 10))
      ::helpw.SetSizer( &topsizer )      # use the sizer for layout
      topsizer.SetSizeHints( &::helpw )   # set size hints to honour minimum size
      ::helpw.SetSize(600,800)
      } else {
        ::html2.LoadFile( ::html_filename)
      }
    }

  }
}
