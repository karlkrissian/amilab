# command line: ./amilab

import_ami
import_filters
printn sprint("5: %0.0f",LineNumber)
func "OpticFlow/find_minimum"

print "1\n"; printn sprint("8: %0.0f",LineNumber)

#----------- Main Parameters
minthreshold = 0
zoom = UCHAR(0)
symmetric_warp = UCHAR(0)
corr_downsample = UCHAR(0)
num_threads = INT(2)


corr_presmooth = 0
var_presmooth  = 0

data_loaded=INT(0)
data_id = INT(1)
data_info=""
print "1\n";

pde_param_file = "OFPDE_param.txt"

#----------- INPUT PARAMS -----------------

filedir="/home/karl/projects/data"

i1_fname   = "sphereflow64_A.ami.gz"
i2_fname   = "sphereflow64_B.ami.gz"
load_mask = UCHAR(1)
mask_fname = "sphereflow64_mask.ami.gz"
flow_fname = "sphereflow.ami.gz"

#----------- CORRELATION PARAMS -----------------

step_x = INT(2)
step_y = INT(2)
step_z = INT(2)

winsize_x = INT(3)
winsize_y = INT(3)
winsize_z = INT(3)

windef = INT(1)
nbiterations = INT(1)
solenoidal_cor = UCHAR(1)

print "1\n"

#-------------- PDE PARAMS ---------------------

beta            = 0.25
alfa            = 0.50
Conv_GS_exp     = INT(-5)
Nscales         = INT(3)
Conv_Scales_exp = INT(-2)
gradtype        = INT(0)
incompressibility_constraint = UCHAR(0)
solenoidal_pde	= UCHAR(0)
global_constraint = UCHAR(0)
smoothgradient    = UCHAR(1)
symmetric         = UCHAR(0)
boundarytype    = INT(0)

alpha_normalization = UCHAR(1)
alpha_norm_epsilon  = INT(-2)
use_splines       = UCHAR(0)

print "1\n";

#--------------------------------------------------
# test varying alfa
#
alfa_min  = 0.25
alfa_max  = 4
alfa_step = 0.25
alfa_findmin_it = INT(5)
alfa_init_zero = UCHAR(1)

#---------------------------------------------------
# Stats parameters
#
log_vectnewcomp = INT(-2)
mask_nonzero = UCHAR(0)

#-------------- PROCEDURES ---------------------
printn sprint("91: %0.0f",LineNumber)

proc amicorr(IMAGE _im1, IMAGE _im2, IMAGE _res) {
#print "amicorr3D \n"
  global_new
  if (corr_presmooth>0.1) {
    printn "Applying pre-smoothing"
    _im1 = filter(_im1,corr_presmooth,0,0,0)
    _im2 = filter(_im2,corr_presmooth,0,0,0)
  }

  wsx = exp(ln(2)*winsize_x)
  wsy = exp(ln(2)*winsize_y)
  wsz = exp(ln(2)*winsize_z)
  print sprint("window size (%0.0f",wsx)+","+sprint("%0.0f)\n",wsy)

  if (_im1.tz==1) {
    # 2D
    printn "Running 2D cross-correlation"
    _u    <<= _res[0]
    _v    <<= _res[1]
    _corr <<= _im1*0
    _cx   <<= _im1*0
    _cy   <<= _im1*0
    amiOFCorr2D(_im1,_im2, \
                _u,_v,_corr,\
                _cx,_cy, \
                0,0,step_x,step_y,wsx,wsy,1)
    _res[0]=_u
    _res[1]=_v
  } else {
    # 3D
    if (corr_downsample) {
      res1 = Resize(_res,1+(_res.tx-1)/step_x,1+(_res.ty-1)/step_y,1+(_res.tz-1)/step_z,0)
      res1 = _res(SpacePos(res1))
      amiOFCorr3DNew(_im1,_im2,&res1,wsx,wsy,wsz,step_x,step_y,step_z,0,0,0,num_threads)
      _res = Resize(res1,_res.tx,_res.ty,_res.tz,1)
    } else {
      amiOFCorr3D(_im1,_im2,&_res,wsx,wsy,wsz,windef,step_x,step_y,step_z)
    }
    amiOFExtrapol3D(&_res,step_x,step_y,step_z)
    if (solenoidal_cor) { amiSolenoidalProj3D(&_res); }
  }

  //_res = Flip(_res,1)
}

#print "call_amiOFPDE3D\n"


proc InverseFlow( IMAGE _flow, NUM scale_factor) {
//  flow1 = Resize(_flow,_flow.tx*scale_factor,_flow.ty*scale_factor,1,2)
  _flow = amiInverseFlow(flow/2)
//  _flow = Resize(flow1,_flow.tx,_flow.ty,_flow.tz,2)
}


proc CB_PDE_SetParam() {
  zoom_z = 1+(i1.tz>1);

  Conv_GS        = exp(ln(10)*Conv_GS_exp    )  
  Conv_Scales    = exp(ln(10)*Conv_Scales_exp)  
  alpha_epsilon  = exp(ln(10)*alpha_norm_epsilon)
    
  amiPDESetEnergyConstraint(incompressibility_constraint)
  amiPDESetSolenoidal(solenoidal_pde)
  amiOFSetGlobalConstraint(global_constraint)
  amiOFSetSmoothGradient(smoothgradient)
  amiOFSetAlphaNormEpsilon(alpha_epsilon)
  amiOFSetNormalizeAlpha(alpha_normalization)
  amiOFSetSymmetric(symmetric)
  amiOFSetBoundaryType(boundarytype)
  amiOFSetInterpolation(use_splines)

  amiOFPDE_Param(beta,beta,beta,2,2,zoom_z,alfa,alfa,alfa,Conv_GS,Nscales,Conv_Scales,gradtype)



}

proc call_amiOFPDE3D(IMAGE _im1, IMAGE _im2, IMAGE _res) {

  if (var_presmooth>0.1) {
    printn "Applying pre-smoothing"
    _im1 = filter(_im1,var_presmooth,0,0,0)
    _im2 = filter(_im2,var_presmooth,0,0,0)
  }

  CB_PDE_SetParam()

  factor = 3

   if (symmetric) {
     // invert flux
#     restmp = Resize(_res,_res.tx*factor,_res.ty*factor,_res.tz*factor,1)
#     restmp = -amiInverseFlow(-restmp/2)
#     _res = Resize(restmp,_res.tx,_res.ty,_res.tz,1)
   } 

  amiOFPDE(_im1,_im2,&_res)

   if (symmetric) {
#     // invert flux
#     restmp = Resize(_res,_res.tx*factor,_res.ty*factor,_res.tz*factor,1)
#     restmp = amiInverseFlow(restmp/2)
#     _res = Resize(restmp,_res.tx,_res.ty,_res.tz,1)
   } 

}



#------------- Loading Input Data


proc DisplayData() {
#    -----------
  global
  show i1;
  #i1_draw.compare(i2);
  i1_draw.setvector(1,u);
  i1_draw.setvector(2,u_o);
  i1_draw.DrawVector(1,1);
  i1_draw.DrawVector(2,1);
  #i1_draw.DisplayVectors;
  local
}

proc DisplayErrors() {
#    -----------
  global
  show i1;
  i1_draw.compare(ang_error);
  i1_draw.compare(eucl_error);
  local
}

proc UnloadData() {
#    ----------
  global
  if (data_loaded) {
    if (exists(i1_draw)) { del i1_draw; }
    del i1; del i2; del mask
    del u; del u_o
    del ang_error
    del eucl_error
    data_loaded = 0
  }
  local
}

proc CB_LoadInputData() {
#    ----------------

  UnloadData()
  global

  i1 = (FLOAT) Image(i1_fname)
  i2 = (FLOAT) Image(i2_fname)
  if (load_mask) {
    mask = Image(mask_fname)
  } else {
    mask = (UCHAR) i1*0+255
  }
  u_o = Image(flow_fname)
  u_o = u_o*(mask!=0);

  u = u_o
  u.initvalue(0,0,0);
  ang_error = i1*0
  eucl_error=ang_error

  DisplayData()

  data_loaded=1
  data_info="Input"

  local
}


print "antes de Lavision\n"

### &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
### &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
### &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

proc CB_LoadLaVision() {
#    -----------------

  UnloadData()
  global

  lavision_directory="LaVision/1500-2011.575-830.75-330/"

  i1 = (FLOAT) Image(lavision_directory+"subLaVision1-48.ami")
  i2 = (FLOAT) Image(lavision_directory+"subLaVision2-48.ami")
  mask = (UCHAR) (i1*0+255)
  u_o = Image(lavision_directory+"subLaVisionFlow.ami")
  u = u_0*0


#  i1 = (FLOAT) Image(lavision_directory+"i1.ami.gz")
#  i2 = (FLOAT) Image(lavision_directory+"i2.ami.gz")
#  mask = (UCHAR) (i1*0+255)
#  u = Image(FLOAT_VECTOR,i1.tx,i1.ty,i1.tz)
#  u.initvalue(0,0,0);
#  u_o = Image(lavision_directory+"u_o.ami.gz")


  ang_error = i1*0
  eucl_error=ang_error

  DisplayData()

  data_loaded=1
  data_info="La-Vision"

  local
}


proc CB_LoadElast3D() {
#    --------------

  UnloadData()
  global
printn 1
  elast3d_directory="/home/karl/projects/data/Elastography/3D_OF/"

  i1_0 = (FLOAT) Image(elast3d_directory+"new_volpre.ami.gz")
  i2_0 = (FLOAT) Image(elast3d_directory+"new_volpost.ami.gz")
 
  dimx = floor(i1_0.tx/8)*8
  dimy = floor(i1_0.ty/8)*8
  dimz = floor(i1_0.tz/8)*8

  i1 = i1_0[0:dimx-1,0:dimy-1,0:dimz-1]
  i2 = i2_0[0:dimx-1,0:dimy-1,0:dimz-1]


  mask = (UCHAR) (i1*0+255)

  u_o = Image(elast3d_directory+"groundtruth.ami.gz")
  u_o.setvoxelsize(i1.vx,i1.vy,i1.vz)
  u = u_o*0


#  i1 = (FLOAT) Image(lavision_directory+"i1.ami.gz")
#  i2 = (FLOAT) Image(lavision_directory+"i2.ami.gz")
#  mask = (UCHAR) (i1*0+255)
#  u = Image(FLOAT_VECTOR,i1.tx,i1.ty,i1.tz)
#  u.initvalue(0,0,0);
#  u_o = Image(lavision_directory+"u_o.ami.gz")


  ang_error = i1*0
  eucl_error=ang_error

  DisplayData()

  data_loaded=1
  data_info="Elast-3D"

  local
}

proc CB_LoadElast2D() {
#    --------------

  UnloadData()
  global
  printn 1
  elast3d_directory=""

  i1_0 = (FLOAT) Image("input1.ami.gz")
  i2_0 = (FLOAT) Image("input2.ami.gz")
 
  dimx = floor(i1_0.tx/8)*8
  dimy = floor(i1_0.ty/8)*8
  dimz = 1

  i1 = i1_0[0:dimx-1,0:dimy-1,0:dimz-1]
  i2 = i2_0[0:dimx-1,0:dimy-1,0:dimz-1]

  mask = (UCHAR) (i1*0+255)

  //u = Image(FLOAT_VECTOR,i1.tx,i1.ty,i1.tz)
  //u.initvalue(0,0,0);

  u_o = Image("groundtruth.ami.gz")
  u_o.setvoxelsize(i1.vx,i1.vy,i1.vz)

  u = u_o*0

  ang_error = i1*0
  eucl_error=ang_error

  DisplayData()

  data_loaded=1
  data_info="Elast-2D"

  local
}

proc CB_LoadArguments( NUM nargs ) {
#    ----------------

  if (nargs>=3) {
    UnloadData()
    global
    printn 1
    elast3d_directory=""
  
    i1_0 = (FLOAT) Image($1)
    i2_0 = (FLOAT) Image($2)
  
    dimx = floor(i1_0.tx/8)*8
    dimy = floor(i1_0.ty/8)*8
    dimz = 1
  
    i1 = i1_0[0:dimx-1,0:dimy-1,0:dimz-1]
    i2 = i2_0[0:dimx-1,0:dimy-1,0:dimz-1]
  
    mask = (UCHAR) (i1*0+255)
  
    if (nargs>=4) {
      u_o = Image($3)
      u_o.setvoxelsize(i1.vx,i1.vy,i1.vz)
    } else {
      u_o = Image(FLOAT,i1.tx,i1.ty,i1.tz,3)
      u_o = u_o*0
    }
  
    u = u_o*0
  
    ang_error = i1*0
    eucl_error=ang_error
  
    DisplayData()
  
    data_loaded=1
    data_info="Elast-2D"
  } else {
    printn "Not enough arguments to read inputs "
  }

  local
}

### &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
### &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
### &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


proc CB_LoadSphereData() {
#    -----------------

  UnloadData()
  global

# /home/karl/projects/data/3Dflow/
  sphere_directory="esfera/"
  mask = Image(sphere_directory+"mask.ami.gz")
  u_o = Image(sphere_directory+"u_o.ami")
  u_o = u_o*(mask!=0);

  if (!symmetric_warp) {
#    global_new
    i2 = (FLOAT) Image(sphere_directory+"volumenB.ami")
    i1 = i2
    amiInterpolation3D(i2,u_o,&i1)
  } else {
#    global_new
    i0 = (FLOAT) Image(sphere_directory+"volumenB.ami")
    i1 = i0
    i2 = i0
    u_o1 = amiInverseFlow(-u_o/2.0)
    amiInterpolation3D(i0,u_o1,&i2)
    u_o1 = amiInverseFlow(u_o/2.0)
    amiInterpolation3D(i0,u_o1,&i1)
    u_o_bak = u_o
    u_o = u_o1*2
    del u_o1
  }

  print "1\n"
  u = u_o
  u.initvalue(0,0,0);

  ang_error = i1*0
  eucl_error=ang_error

  print "1\n"
  DisplayData()

  data_loaded=1
  data_info="Sphere"
  print "1\n"

  local
}

proc CB_LoadNewSphereData() {
#    -----------------

  UnloadData()
  global

# /home/karl/projects/data/3Dflow/
  sphere_directory="esfera/"

  i1_0 = Image(sphere_directory+"newvolA.ami.gz")
  i2_0 = Image(sphere_directory+"newvolB.ami.gz")
  i1 = (FLOAT) i1_0
  i2 = (FLOAT) i2_0
  mask_0 = Image(sphere_directory+"newmask.ami.gz")
  mask = mask_0
  u_o_0 = Image(sphere_directory+"newflow.ami.gz")
  u = u_o*0
  u_o = u_o_0
  u_o = u_o*(mask!=0);

  ang_error = i1*0
  eucl_error=ang_error

  DisplayData()

  del i1_0; del i2_0; del mask_0; del u_o_0
  data_loaded=1
  data_info="NewSphere128"

  local
}

proc CB_LoadSphere64() {
#    -----------------

  UnloadData()

  global
# /home/karl/projects/data/3Dflow/
  sphere_directory="esfera/"

  i1_0 = Image(sphere_directory+"sphereflow64_A.ami.gz")
  i2_0 = Image(sphere_directory+"sphereflow64_B.ami.gz")
  i1 = (FLOAT) i1_0
  i2 = (FLOAT) i2_0
  mask_0 = Image(sphere_directory+"sphereflow64_mask.ami.gz")
  mask = mask_0
  u_o_0 = Image(sphere_directory+"sphereflow.ami.gz")
  u_o = u_o_0
  u_o = u_o*(mask!=0);
  u = u_o*0

  ang_error = i1*0
  eucl_error=ang_error
  DisplayData()

  del i1_0; del i2_0; del mask_0; del u_o_0
  data_loaded=1
  data_info="NewSphere64"

  local
}

print "------- ***************** \n"

proc CB_LoadJohanData() {
#    ----------------

  UnloadData()
  global

  #directory="/home/mgarcia/flow_3d/johan/"
  directory = "johan/"
  #zoom=atof($1)
  # ------ load 2 images
  i1_0 = Image(directory+"sub_000_incomp.ami.gz");
  i2_0 = Image(directory+"sub_001.ami.gz");
  if (zoom) {
    i1 = (FLOAT) i1_0[80:207, 0:63, 10:41];
  } else {
    i1 = (FLOAT) i1_0 
  }
  i2 = (FLOAT) i2_0[i1]

  # ------ load mask
  mask_0 = Image(directory+"sub_mask.ami.gz")
  mask = mask_0[i1]


  # ------ load perfect result
  u_o_0 = Image(directory+"u_incomp.ami.gz")
  u_o_0.settranslation(i1_0.trx,i1_0.try,i1_0.trz)
  #u_o_0 = Image("/home/mgarcia/flow_3d/johan/u_o.ami")

  u_o = u_o_0[i1]

  # ------ create result vectorial image
  u = u_o*0
  u.settranslation(i1.trx,i1.try,i1.trz)

  #u_o[0] = u_o[0]/20*960*0.03;
  #u_o[1] = u_o[1]/20*960*0.03;
  #u_o[2] = u_o[2]/Pi*144*0.03;
  #u_o = u_o*(mask!=0);

  ang_error = i1*0
  eucl_error=ang_error

  DisplayData()

  del i1_0; del i2_0; del mask_0; del u_o_0
  data_loaded=1
  data_info="Johan1"

  local
}


print "------- *******111111111111111111 \n"

proc CB_LoadCemagrefNewData() {
#    -----------------

  UnloadData()
  global

# /home/karl/projects/data/3Dflow/
  sphere_directory="wake_LES_Cemagref/"

  i1 = (FLOAT) Image(sphere_directory+"i1.ami.gz")
  i2 = (FLOAT) Image(sphere_directory+"i2.ami.gz")
  mask = (UCHAR) (i1*0+255)
  u_o = Image(sphere_directory+"u_o.ami.gz")
  u = u_o*0

  ang_error = i1*0
  eucl_error=ang_error

  DisplayData()

  data_loaded=1
  data_info="CemagrefNew"

  local
}


proc CB_LoadCemagrefNewDataZoom() {
#    -----------------

  UnloadData()
  global

# /home/karl/projects/data/3Dflow/
  sphere_directory="wake_LES_Cemagref/"

  i1 = (FLOAT) Image(sphere_directory+"i1_zoom.ami.gz")
  i2 = (FLOAT) Image(sphere_directory+"i2_zoom.ami.gz")
  mask = (UCHAR) (i1*0+255)
  u_o = Image(sphere_directory+"u_o_zoom.ami.gz")
  u = u_o*0

  ang_error = i1*0
  eucl_error=ang_error

  DisplayData()

  data_loaded=1
  data_info="CemagrefNewZoom"

  local
}




proc CB_LoadNewSynthetic() {
#    -------------------

  UnloadData()
  global

# /home/karl/projects/data/
  file_directory="wake_LES_Cemagref/"

  i1 = (FLOAT) Image(file_directory+"newi1s.ami.gz")
  i2 = (FLOAT) Image(file_directory+"newi2s.ami.gz")
  mask = (UCHAR) Image(file_directory+"mask.ami.gz")
  mask = (UCHAR) (mask==0)*255
  u_o = Image(file_directory+"newflow.ami.gz")
  u = u_o*0

  ang_error = i1*0
  eucl_error=ang_error

  DisplayData()

  data_loaded=1
  data_info="NewSynthetic"

  local
}


proc CB_ApplyZoom() {
#    ------------

  global

  if (exists(i1_draw)) {
    // get the zoom
    _xmin=i1_draw.GetXmin
    _xmax=i1_draw.GetXmax
    _ymin=i1_draw.GetYmin
    _ymax=i1_draw.GetYmax
    _zmin=i1_draw.GetZmin
    _zmax=i1_draw.GetZmax
    // check if dimensions are multiples of 8
    _xmax = _xmin+(floor((_xmax-_xmin)/8)-1)*8-1
    _ymax = _ymin+(floor((_ymax-_ymin)/8)-1)*8-1
    if (i1.tz>1) {
      _zmax = _zmin+(floor((_zmax-_zmin)/8)-1)*8-1
    }
    i1z = i1[_xmin:_xmax,_ymin:_ymax,_zmin:_zmax]

    del i1_draw
    printn "i1_draw deleted ? "
    // backup files
    i1_bak = i1
    i2_bak = i2
    mask_bak = mask
    u_bak = u
    u_o_bak = u_o
printn "deleting images"
    // create new images with zoom
    del i1; del i2; del mask; del u; del u_o
    del ang_error
    del eucl_error

printn "Creating new images"
    i1 = i1z
printn "*"
    del i1z
printn "i2"
    i2 = i2_bak[i1]
printn "mask"
    mask = mask_bak[i1]
printn "u"
    u_bak.info
    u = u_bak[i1]
printn "u_0"
    u_o_bak.info
    u_o = u_o_bak[u]
printn "*"
  
    ang_error = i1*0
    eucl_error=ang_error

    DisplayData()
    data_info=data_info+"Zoom"
  }

  local
}

proc CB_ApplyZoomPIV() {
#    ---------------

  global

  if (exists(i1_draw)) {
    // get the zoom
    _xmin=120
    _xmax=120+63
    _ymin=32
    _ymax=32+63
    _zmin=40
    _zmax=40+63
    i1z = i1[_xmin:_xmax,_ymin:_ymax,_zmin:_zmax]

    del i1_draw
    printn "i1_draw deleted ? "
    // backup files
    i1_bak = i1
    i2_bak = i2
    mask_bak = mask
    u_bak = u
    u_o_bak = u_o
printn "deleting images \n"
    // create new images with zoom
    del i1; del i2; del mask; del u; del u_o
    del ang_error
    del eucl_error

    i1 = i1z
    del i1z
    i2 = i2_bak[i1]
    mask = mask_bak[i1]
    u = u_bak[i1]
    u_o = u_o_bak[u]
  
    ang_error = i1*0
    eucl_error=ang_error

    DisplayData()
    data_info=data_info+"Zoom"
  }

  local
}


proc CB_UnZoom() {
#    ------------

  global

  if (exists(i1_bak)) {
    if (exists(i1_draw)) {
      del i1_draw; 
    }
    // create new images with zoom
    del i1; del i2; del mask; del u; del u_o
    del ang_error
    del eucl_error

    // backup files
    i1 = i1_bak
    i2 = i2_bak
    mask = mask_bak
    u = u_bak
    u_o = u_o_bak
    del i1_bak; del i2_bak; del mask_bak; del u_bak; del u_o_bak
  
    ang_error = i1*0
    eucl_error=ang_error
    DisplayData()
    data_info=data_info-"Zoom"
  }

  local
}

proc CB_ApplyMinThreshold() {
#    ---------------------
  i1 = i1*(i1>=minthreshold)+(i1<minthreshold)*minthreshold
  i2 = i2*(i2>=minthreshold)+(i2<minthreshold)*minthreshold
}


proc CB_LoadData() {
  if (data_id==0) { CB_LoadNewSphereData();       }
  if (data_id==1) { CB_LoadSphere64();            }
  if (data_id==2) { CB_LoadSphereData();          }
  if (data_id==3) { CB_LoadJohanData();           }
  if (data_id==4) { CB_LoadCemagrefNewData();     }
  if (data_id==5) { CB_LoadCemagrefNewDataZoom(); }
  if (data_id==6) { CB_LoadNewSynthetic();        }
  if (data_id==7) { CB_LoadLaVision();            }
  if (data_id==8) { CB_LoadElast3D();            }
  if (data_id==9) { CB_LoadElast2D();            }
}

#------------- INTERFACE PROCEDURES -----------------

proc UpdateDisplay() {
  global
  #u = u*(mask!=0)
  show i1
#  n = norm(u-u_o);
#  _mean=mean(n,mask) 
#  print "\n"
#  print _mean 
#  print "\t+/- "
#  _mean2 = (n-_mean)*(n-_mean)
#  print sqrt(mean(_mean2,mask))
#  print "\n"
  local; 
}

proc CB_Restart_corr() {
  u.initvalue(0,0,0);
#  amicorr3D(i1,i2,&u);
  UpdateDisplay()
}

proc CB_Iterate_corr() {
  for _n=1 to nbiterations {
    print "ITERATION \t"; print _n; print "\n"

    //si1 = i1[:,:,0:0]
    //si2 = i2[:,:,0:0]
    //su  = u [:,:,0:0]
    amicorr(i1,i2,&u);
    //u.putimage(su)

    UpdateDisplay()
  }
}

proc CB_RunSequence() {
  winsize_x=4
  winsize_y=4
  winsize_z=4
  for _n=1 to 2 {
    amicorr(i1,i2,&u);
    UpdateDisplay()
  }
  winsize_x=3
  winsize_y=3
  winsize_z=3
  for _n=1 to 2 {
    amicorr(i1,i2,&u);
    UpdateDisplay()
  }
  winsize_x=2
  winsize_y=2
  winsize_z=2
  for _n=1 to 2 {
    amicorr(i1,i2,&u);
    UpdateDisplay()
  }
}

proc CB_Restart_pde() {
  u.initvalue(0,0,0);
//  call_amiOFPDE3D(i1,i2,&u);
  UpdateDisplay()
}

proc CB_Iterate_pde() {
  call_amiOFPDE3D(i1,i2,&u);
  UpdateDisplay()
}


proc CreateParamFilename() {
  global_new

  param_str = ""
  param_str = param_str + sprint("Z%0.0f",zoom)
  param_str = param_str + sprint("_b%0.2f",beta)
  param_str = param_str + sprint("_sc%0.0f",Nscales)
  param_str = param_str + sprint("_gt%0.0f",gradtype)
  param_str = param_str + sprint("_sg%0.0f",smoothgradient) 
  param_str = param_str + sprint("_gc%0.0f",global_constraint)
  param_str = param_str + sprint("_sym%0.0f",symmetric)
  param_str = param_str + sprint("_cons%0.0f",incompressibility_constraint)
  param_str = param_str + sprint("_sol%0.0f",solenoidal_pde)
  param_str = param_str + sprint("_GST%0.0f",Conv_GS_exp)
  param_str = param_str + sprint("_ST%0.0f",Conv_Scales_exp)
  param_str = param_str + sprint("_an%0.0f",alpha_normalization)
  param_str = param_str + sprint("_ae%0.0f",alpha_norm_epsilon)
  sh "mkdir Results"
  filedir="Results/"+data_info+"/"
  sh "mkdir "+filedir
  local_new
}

proc CreateParamString() {
  global_new

  param_str = ""
  param_str = param_str + sprint("(zoom,%0.0f) ",zoom)
  param_str = param_str + sprint("(beta,%f) ",beta)
  param_str = param_str + sprint("(Nscales,%0.0f) ",Nscales)
  param_str = param_str + sprint("(gradtype,%0.0f) ",gradtype)
  param_str = param_str + sprint("(smoothgradient,%0.0f) ",smoothgradient)
  param_str = param_str + sprint("(globalconstraint,%0.0f) ",global_constraint)
  param_str = param_str + sprint("(symmetric,%0.0f) ",symmetric)
  param_str = param_str + sprint("(incomp_constraint,%0.0f) ",incompressibility_constraint)
  param_str = param_str + sprint("(solenoidalproj,%0.0f) ",solenoidal_pde)
  param_str = param_str + sprint("(GS TOL,10^%0.0f) ",Conv_GS_exp)
  param_str = param_str + sprint("(Scale TOL,10^%0.0f) ",Conv_Scales_exp)
  param_str = param_str + sprint("(alpha normalization,%0.0f)",alpha_normalization)
  param_str = param_str + sprint("(alpha epsilon,10^%0.0f)",alpha_norm_epsilon)

  local_new
}

proc CB_RunAlphaTests() {
  print "1\n"
  CreateParamFilename()
  global_new
  param_str = param_str + sprint("_a%0.2f",alfa_min)
  param_str = param_str + sprint("-%0.2f",alfa_max)
  param_str = param_str + sprint("-%0.2f",alfa_step)

  filename1=filedir+param_str+"_Mean.dat"
  filename2=filedir+param_str+"_StDv.dat"
  test_file1 = open(filename1,"w")
  test_file2 = open(filename2,"w")

  print "2\n"
  CreateParamString()
  global_new
  print "2.1\n"
  param_str = param_str + sprint("(alpha,%f,",alfa_min)
  param_str = param_str + sprint("%f,",alfa_max)
  param_str = param_str + sprint("_initzero%0.0f",alfa_init_zero)
  param_str = param_str + sprint("%f) ",alfa_step)
  printn param_str

  print "2.2\n"
  # print parameter information at the beginning of the files
  print "2.2.x\n"
  test_file1.print " Optical Flow technique\n"
  print "2.2.x\n"
  test_file1.print " Mean error \n"
  print "2.2.x\n"
  test_file1.print " amilab script: test_3dflow.amil\n"
  print "2.2.x\n"
  test_file1.print " Parameters\n"
  print "2.2.x\n"
  test_file1.print " "+param_str+"\n"

  print "2.3\n"

  test_file2.print " Optical Flow technique\n"
  print "2.3.x\n"
  test_file2.print " Standard deviation \n"
  print "2.3.x\n"
  test_file2.print " amilab script: test_3dflow.amil\n"
  print "2.3.x\n"
  test_file2.print " Parameters\n"
  print "2.3.x\n"
  test_file2.print " "+param_str+"\n"

  print "3\n"
  #----- save initial value of the vector flow
  if (!alfa_init_zero) {
    u_init = u
  }
 
  nb_it=(alfa_max-alfa_min)/alfa_step
  for k=0 to nb_it {
    alfa = alfa_min+k/nb_it*(alfa_max-alfa_min)

    if (alfa_init_zero) {
      CB_Restart_pde()
    } else {
      #----- restart at initial value
      u = u_init
    }
    CB_Iterate_pde()

    n = norm(u-u_o);
    _mean = mean(n,mask)
    test_file1.print alfa
    test_file1.print "\t"
    test_file1.print _mean
    test_file1.print "\n"

    _mean2 = (n-_mean)*(n-_mean)
    // error after removing 15 pixels at the border
    test_file2.print alfa
    test_file2.print "\t"
    test_file2.print sqrt(mean(_mean2,mask))
    test_file2.print "\n"

  }

  print "closing files \n"
  test_file1.close
  test_file2.close
  print "files closed\n"
}

#--------------------------------------------------
proc angular_error(IMAGE _d1, IMAGE _d0, IMAGE _err) {

  vectnewcomp = exp(ln(10)* log_vectnewcomp )
  vnc = vectnewcomp*vectnewcomp

  _err = (_d1*_d0+vnc)/sqrt(_d1*_d1+vnc)/sqrt(_d0*_d0+vnc)

  #--- limit to [-1, 1]
  _err = _err*(_err<1) +(_err>=1)
  _err = _err*(_err>-1)-(_err<=-1)

  #--- convert to degrees
  _err = acos(_err)/Pi*180
}

#---------------------------------------------------
proc CB_Stats() {

  print sprint("Average displacement %3.4f \n\n",mean(norm(u_o)))

  if (mask_nonzero) {
    mask1 = mask*(norm(u)>0.00001)
  } else {
    mask1 = mask
  }


  eucl_error = norm(u-u_o);
  _mean = mean(eucl_error,mask1)
  print sprint("Euclidean Error %3.4f ",_mean)
  _mean2 = (eucl_error-_mean)*(eucl_error-_mean)
  print sprint(" +/- %3.4f \n\n",sqrt(mean(_mean2,mask1)))

  norm_error = abs(norm(u)-norm(u_o));
  _mean_n = mean(norm_error,mask1)
  print sprint("Norm Error %3.4f ",_mean_n)
  _mean2_n = (norm_error-_mean)*(norm_error-_mean_n)
  print sprint(" +/- %3.4f \n\n",sqrt(mean(_mean2_n,mask1)))

  angular_error(u,u_o,&ang_error)
  _mean_ang = mean(ang_error,mask1)
  print sprint("Angular Error %3.4f ",_mean_ang)
  _mean2_ang = (ang_error-_mean_ang)*(ang_error-_mean_ang)
  print sprint(" +/- %3.4f \n\n",sqrt(mean(_mean2_ang,mask1)))

}

#---------------------------------------------------
proc CB_SaveParam() {
  CB_PDE_SetParam()
  amiWritePDEOFParam(pde_param_file);
}
#---------------------------------------------------
proc CB_ReadParam() {
  amiReadPDEOFParam(pde_param_file);
}


proc EvalFunction( NUM input, NUM res ) {

  if (alfa_init_zero) {
    CB_Restart_pde()
  } else {
    #----- restart at initial value
    u = findmin_u_init
  }
  alfa=input
  CB_Iterate_pde()

  n = norm(u-u_o);
  _mean = mean(n,mask)

  findmin_file1.print input
  findmin_file1.print "\t"
  findmin_file1.print _mean
  findmin_file1.print "\n"

  res = _mean

}


proc CB_AlphaFindMin() {

  global

  CreateParamFilename()
  param_str = param_str + sprint("_a%0.2f",alfa_min)
  param_str = param_str + sprint("-%0.2f",alfa_max)
  param_str = param_str + sprint("_initzero%0.0f",alfa_init_zero)
  param_str = param_str + sprint("_it%0.0f",alfa_findmin_it)

  filedir="Results/"+data_info+"/"

  filename1=filedir+param_str+"__Mean.dat"
  findmin_file1 = open(filename1,"w")

  CreateParamString()
  param_str = param_str + sprint("(alpha,%f,",alfa_min)
  param_str = param_str + sprint("%f) ",alfa_max)
  param_str = param_str + sprint("(iterations,%0.0f) ",alfa_findmin_it)

  # print parameter information at the beginning of the files
  findmin_file1.print " Optical Flow technique\n"
  findmin_file1.print " Mean error \n"
  findmin_file1.print " amilab script: test_3dflow.amil\n"
  findmin_file1.print " Parameters\n"
  findmin_file1.print " "+param_str+"\n"

  #----- save initial value of the vector flow
  if (!alfa_init_zero) {
    findmin_u_init = u
  }
 
  FindMinimum(alfa_min,alfa_max,alfa_findmin_it)

  global
  del param_str
  del findmin_u_init

  print "closing files \n"
  findmin_file1.close
  print "files closed\n"

  local
}



#-------------- different tests for the paper

#------------------------------
proc CB_CorrTest() {
#    -----------
  global

  # set the parameters
  step_x = 2
  step_y = 2
  step_z = 2
  winsize_x = 3 
  winsize_y = 3
  winsize_z = 3
  windef = 1
  nbiterations = 11
  incompressibility_constraint = 0
  solenoidal_cor = 1
  
  # run the correlation
  CB_Restart_corr()
  CB_Iterate_corr()

  local
}

#------------------------------
proc CB_JohanCorrParamTest() {
#    ----------------
  global

  # set the parameters
  step_x = 2
  step_y = 2
  step_z = 2
  windef = 1
  incompressibility_constraint = 0
  solenoidal_cor = 1
  

  local
}

#------------------------------
proc CB_JohanCorrTest() {
#    ----------------
  global

  CB_JohanCorrParamTest()

  # run the correlation
  CB_RunSequence()

  u.save "Johan_Correlation_test_result.ami.gz"

  local
}


#------------------------------
proc CB_VarParamTest() {
#    ----------
  global

  # set the parameters
  beta            = 0.25
  alfa            = 8.4
  Conv_GS_exp     = -5
  Nscales         = 3
  Conv_Scales_exp = -2
  gradtype        = 0
  incompressibility_constraint = 0
  solenoidal_pde    = 1
  global_constraint = 0
  symmetric=0
  smoothgradient    = 1
  alpha_normalization = 1
  alpha_norm_epsilon  = 0

  local
}

#------------------------------
proc CB_VarTest() {
#    ----------
  global

  CB_VarParamTest()

  # run the optical flow
  CB_Restart_pde()
  CB_Iterate_pde()

  # one more iteration with 1 scale
  Nscales         = 1
  CB_Iterate_pde()

  local
}

#------------------------------
proc CB_JohanVarParamTest() {
#    ---------------
  global

  # set the parameters
  beta            = 0.25
  alfa            = 3.7
  Conv_GS_exp     = -5
  Nscales         = 3
  Conv_Scales_exp = -2
  gradtype        = 0
  incompressibility_constraint = 0
  solenoidal_pde               = 1
  global_constraint            = 0
  symmetric                    = 0
  smoothgradient               = 1
  alpha_normalization          = 1
  alpha_norm_epsilon           = 0 
 
  local
}

#------------------------------
proc CB_JohanVarTest() {
#    ---------------
  global

  CB_JohanVarParamTest()

  # run the optical flow
  CB_Restart_pde()
  CB_Iterate_pde()

  # one more iteration with 1 scale
  Nscales         = 1
  CB_Iterate_pde()

  local
}

#------------------------------
proc CB_CorrVarTest() {
#    --------------
  CB_CorrTest()
   # set the parameters
  beta            = 0.25
  alfa            = 1.1
  Conv_GS_exp     = -5
  Nscales         = 1
  Conv_Scales_exp = -2
  gradtype        = 0
  incompressibility_constraint = 0
  solenoidal_pde    = 1
  global_constraint = 0
  symmetric         = 0
  smoothgradient    = 1
  CB_Iterate_pde()
 
}

#------------------------------
proc CB_JohanCorrVarTest() {
#    --------------
  CB_JohanCorrTest()
   # set the parameters
  beta            = 0.25
  alfa            = 0.1
  Conv_GS_exp     = -5
  Nscales         = 1
  Conv_Scales_exp = -2
  gradtype        = 0
  incompressibility_constraint = 0
  solenoidal_pde    = 1
  global_constraint = 0
  symmetric         = 0
  smoothgradient    = 1
  CB_Iterate_pde()
 
}



#-------------- INPUT INTERFACE ----------------

proc InputPredef_gui() {
  global_new

  w_main.AddPage("Pre-defined")
  
  w_main.BeginBox("Load pre-defined images")

    input_id = w_main.AddEnum(data_id,10)
    w_main.AddEnumChoice(input_id,"New Sphere 128")
    w_main.AddEnumChoice(input_id,"New Sphere 64")
    w_main.AddEnumChoice(input_id,"Sphere")
    w_main.AddEnumChoice(input_id,"Cemagref previous")
    w_main.AddEnumChoice(input_id,"Cemagref new")
    w_main.AddEnumChoice(input_id,"Cemagref new zoom")
    w_main.AddEnumChoice(input_id,"New Synthetic images")
    w_main.AddEnumChoice(input_id,"LaVision")
    w_main.AddEnumChoice(input_id,"Elastography_3D")
    w_main.AddEnumChoice(input_id,"Elastography 2D")
    
    zoom_id            = w_main.AddBoolean(zoom)
    sw_id              = w_main.AddBoolean(symmetric_warp)
  
    w_main.AddButton("Load",    CB_LoadData)
    w_main.BeginBox("Zoom")
      w_main.BeginHorizontal
      w_main.AddButton("Apply",    CB_ApplyZoom)
      w_main.AddButton("Apply PIV",    CB_ApplyZoomPIV)
      w_main.AddButton("UnZoom",    CB_UnZoom)
      w_main.EndHorizontal
    w_main.EndBox

    w_main.BeginBox("Intensity range")
      w_main.AddButton("Apply min. threshold",  CB_ApplyMinThreshold)
      w_main.AddFloat(minthreshold,-50,1000)
    w_main.EndBox
  
  w_main.EndBox
  ## w_main.EndPanel

  local_new
}


#------------------------------------------------
proc InputManual_gui() {
  global_new

  w_main.AddPage("Manual")
  
  w_main.BeginBox("Manual Selection of input files")
    w_main.AddString(   filedir,"input directory")
    w_main.AddFilename( i1_fname,  "image 1",filedir,"*.ami*")
    w_main.AddFilename( i2_fname,  "image 2",filedir,"*.ami*")
    w_main.AddBoolean(load_mask)
    w_main.AddFilename( mask_fname,"mask",   filedir,"*.ami*")
    
    w_main.AddFilename( flow_fname,"flow",   filedir,"*.ami*")
    w_main.AddButton("Load data",CB_LoadInputData)
  w_main.EndBox
  ## w_main.EndPanel
  
  local_new
}


#------------------------------------------------
proc Input_gui() {
  global_new

  w_main.AddPage("Input")
  w_main.BeginBook
    // predefined inputs
    InputPredef_gui()
  
    // Create Input Panel
    InputManual_gui()
  w_main.EndBook
  ## w_main.EndPanel

  local_new
}

#-------------- CORRELATION INTERFACE ----------------

proc Correlation_gui() {
  global_new

  w_main.AddPage("Cross-Correlation")
  w_main.BeginBook
  
    w_main.AddPage("Main")
    w_main.BeginBox("Cross-correlation")
      corr_presmooth_id = w_main.AddFloat(corr_presmooth,0,10)
      
      w_main.BeginBox("Spacing")
      step_x_id = w_main.AddInt(step_x,1,20)
      step_y_id = w_main.AddInt(step_y,1,20)
      step_z_id = w_main.AddInt(step_z,1,20)
      w_main.EndBox
      
      w_main.BeginBox("Window")
      winsize_x_id = w_main.AddInt(winsize_x,2,8)
      winsize_y_id = w_main.AddInt(winsize_y,2,8)
      winsize_z_id = w_main.AddInt(winsize_z,2,8)
      w_main.EndBox
      
      windef_id         = w_main.AddInt(windef,0,1)
      solenoidal_cor_id = w_main.AddBoolean(solenoidal_cor)
    w_main.EndBox
    ## w_main.EndPanel
    
  
    w_main.AddPage("Control")
    w_main.BeginBox("Cross-correlation Control")
      nbiterations_id   = w_main.AddInt(nbiterations,1,20)
      sequence_id = w_main.AddButton("Sequence 16x2,8x2,4x2", CB_RunSequence)
      
      corrdownsample_id = w_main.AddBoolean(corr_downsample)
      numthreads_id     = w_main.AddInt(num_threads,1,10)
    w_main.EndBox
    ## w_main.EndPanel

  w_main.EndBook

    w_main.BeginHorizontal
      restart_id  = w_main.AddButton("Restart", CB_Restart_corr)
      iterate_id  = w_main.AddButton("Iterate", CB_Iterate_corr)
    w_main.EndHorizontal

  ## w_main.EndPanel
  
  local_new
}


#------------------ PDE INTERFACE ---------------------

//---------------------------------------------------
proc Alphatests_gui() {
  global_new

  w_main.AddPage("Optim.")

    w_main.BeginBox("Optimization of the smoothing parameter")
    alfa_min_id        = w_main.AddFloat(alfa_min,0.01,20)
    alfa_max_id        = w_main.AddFloat(alfa_max,0.01,40)
    alfa_step_id       = w_main.AddFloat(alfa_step,0.01,2)
    alfa_findmin_it_id = w_main.AddInt(  alfa_findmin_it,1,20)
    alfa_tests_init_id = w_main.AddBoolean(alfa_init_zero)
    alfa_start_id      = w_main.AddButton("Run Alpha Test", CB_RunAlphaTests)
    alfa_findmin_id    = w_main.AddButton("Find Minimum",   CB_AlphaFindMin)
    w_main.EndBox  
  ## w_main.EndPanel

  local_new
}

proc PDE_flow_gui() {
  global_new

  w_main.AddPage("VarOF")
  
    w_main.BeginBook
  
      w_main.AddPage("Main")
        var_presmooth_id = w_main.AddFloat(var_presmooth,0,10)

        beta_id         = w_main.AddFloat(beta,0.01,5)
        alfa_id         = w_main.AddFloat(alfa,0.01,40)
        alfa_norm_id    = w_main.AddBoolean(alpha_normalization)
        alfa_epsilon_id = w_main.AddInt(alpha_norm_epsilon,-3,0)
        
        Nscales_id           = w_main.AddInt(Nscales,1,5)
        gradtype_id          = w_main.AddInt(gradtype,0,3)
      
        w_main.BeginBox("Convergence")
        Conv_Scales_exp_id   = w_main.AddInt(Conv_Scales_exp,-5,0)
        Conv_GS_exp_id  = w_main.AddInt(Conv_GS_exp,-10,0)
        w_main.EndBox
      
      # w_main.EndPanel
      w_main.AddPage("Options")
        w_main.BeginHorizontal
        incomp_constraint_id = w_main.AddBoolean(incompressibility_constraint)
        solenoidal_pde_id    = w_main.AddBoolean(solenoidal_pde)
        w_main.EndHorizontal
        w_main.BeginHorizontal
        global_constraint_id = w_main.AddBoolean(global_constraint)
        smoothgrad_id        = w_main.AddBoolean(smoothgradient)
        w_main.EndHorizontal
        w_main.BeginHorizontal
        sym_id               = w_main.AddBoolean(symmetric)
        use_splines_id      = w_main.AddBoolean(use_splines)
        w_main.EndHorizontal
        
        boundtype_id = w_main.AddEnum(boundarytype,3)
        w_main.AddEnumChoice(boundtype_id,"border")
        w_main.AddEnumChoice(boundtype_id,"outside mask")
      
      # w_main.EndPanel
      w_main.AddPage("Parameters")
          w_main.BeginBox("Param File")
            pdeparam_id =  w_main.AddFilename(pde_param_file, "OF_pde_param.txt",filedir,"*.*")
            w_main.BeginHorizontal
            setparam_id  = w_main.AddButton("Set Param", CB_PDE_SetParam)
            saveparam_id = w_main.AddButton("Save Param",CB_SaveParam)
            readparam_id = w_main.AddButton("Read Param",CB_ReadParam)
            w_main.EndHorizontal
          w_main.EndBox
      # w_main.EndPanel
  
      // Test with parameter alpha
      Alphatests_gui()
  
    w_main.EndBook
  
    #w_main.AddPage("Control")
      w_main.BeginHorizontal
      restart_id   = w_main.AddButton("Restart", CB_Restart_pde)
      iterate_id   = w_main.AddButton("Iterate", CB_Iterate_pde)
      w_main.EndHorizontal
    ## w_main.EndPanel

  # w_main.EndPanel

  local_new
}

proc FluidPapers_gui() {
  global_new

  w_main.AddPage("Fluid Papers")
  
  w_main.BeginBox("Paper Tests for the Sphere")
  w_main.BeginHorizontal
  paper_varparam_test_id      = w_main.AddButton("Var Param",   CB_VarParamTest )
  paper_corr_test_id     = w_main.AddButton("Corr", CB_CorrTest)
  paper_var_test_id      = w_main.AddButton("Var", CB_VarTest )
  paper_corrvar_test_id  = w_main.AddButton("Corr+Var", CB_CorrVarTest )
  w_main.EndHorizontal
  w_main.EndBox
  
  w_main.BeginBox("Paper Tests for Johan's data")
  w_main.BeginHorizontal
  paper_corrparam_test_id      = w_main.AddButton("Corr Param",   CB_JohanCorrParamTest )
  paper_varparam_test_id      = w_main.AddButton("Var Param",   CB_JohanVarParamTest )
  paper_corr_test_id     = w_main.AddButton("Corr", CB_JohanCorrTest)
  paper_var_test_id      = w_main.AddButton("Var", CB_JohanVarTest )
  paper_corrvar_test_id  = w_main.AddButton("Corr+Var", CB_JohanCorrVarTest )
  
  w_main.EndHorizontal
  w_main.EndBox
}


proc Stats_gui() {
  global_new

  printn "Stats_gui begin"
  w_main.AddPage("Stats")
    log_vectnewcomp_id = w_main.AddInt(log_vectnewcomp,-5,0)
    mask_nonzero_id = w_main.AddBoolean(mask_nonzero)
  printn "Stats_gui end"
}


#-------------- MAIN INTERFACE -----------------------
proc Main_gui() {
  global_new

  w_main=ParamWin("Flow Motion")
  w_main.BeginBook

    // Loading input files
    Input_gui()

    // Create Variational OF Panel
    PDE_flow_gui()

    // Create Correlation Panel
    Correlation_gui()

    // Fluid Papers
    FluidPapers_gui()

    // Statistics parameters
    Stats_gui()

  w_main.EndBook

  #w_main.AddPage("Results")
    #w_main.BeginBox("Results Visualization and Processing")
    w_main.BeginHorizontal
    w_main.AddButton("Display",DisplayData)
    w_main.AddButton("Stats",CB_Stats)
    w_main.AddButton("Err Images",DisplayErrors)
    w_main.EndHorizontal
    #w_main.EndBox
  ## w_main.EndPanel

  w_main.CreateWin
  w_main.Display
  w_main.update

  local_new
}


#-------------------------------------------------
# Creating parameter window for test on alpha
#-------------------------------------------------

# ------------ MAIN -----------------------
printn "Calling Main_gui()"
Main_gui()

nargs = $#
if (nargs>=3) {
  CB_LoadArguments(nargs)
}
