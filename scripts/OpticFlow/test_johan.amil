# command line: ./amilab

import_ami

#----------- CORRELATION PARAMS -----------------

step_x = INT(2)
step_y = INT(2)
step_z = INT(2)

winsize_x = INT(3)
winsize_y = INT(3)
winsize_z = INT(3)
cubic_window = UCHAR(0)
nbiterations = INT(2)

windef = INT(1)
solenoidal_cor = UCHAR(0)
smoothgradient = UCHAR(1)


#-------------- PDE PARAMS ---------------------

beta            = 0.25
alfa            = 0.50
Conv_GS_exp     = INT(-5)
zoom_level	= INT(1)
Nscales         = INT(1)
Conv_Scales_exp = INT(-2)
gradtype        = INT(0)
solenoidal_pde	= UCHAR(0)
global_constraint = UCHAR(0)

#--------------------------------------------------
# test varying alfa
#
alfa_min  = 0.25
alfa_max  = 4
alfa_step = 0.25


#-------------- PROCEDURES ---------------------

proc amicorr3D(IMAGE _im1, IMAGE _im2, IMAGE _res) {
  wsx = exp(ln(2)*winsize_x)
  wsy = exp(ln(2)*winsize_y)
  wsz = exp(ln(2)*winsize_z)
  //print sprint("window size (%0.0f",wsx)+","+sprint("%0.0f)\n",wsy)
  amiOFCorr3D(_im1,_im2,&_res,wsx,wsy,wsz,windef,step_x,step_y,step_z)
  amiOFExtrapol3D(&_res,step_x,step_y,step_z)
  if (solenoidal_cor) { amiSolenoidalProj3D(&_res); }
  //_res = Flip(_res,1)
}

proc call_amiOFPDE3D(IMAGE _im1, IMAGE _im2, IMAGE _res) {
  zoom_z = 1+(_im1.tz>1);
  print sprint("zoom_z = %f \n",zoom_z);
  //print sprint("dz = %f \n",_im1.tz);

  Conv_GS     = exp(ln(10)*Conv_GS_exp    )  
  Conv_Scales = exp(ln(10)*Conv_Scales_exp)  

  _im1_tmp = _im1
  _im2_tmp = _im2
//  for l=1 to zoom_level-1  {
//	_im1_tmp2 = amiZoomDown3D(_im1_tmp)
//	_im2_tmp2 = amiZoomDown3D(_im2_tmp)
//	del _im1_tmp
//	del _im2_tmp
//	_im1_tmp = _im1_tmp2
//	_im2_tmp = _im2_tmp2
//	del _im1_tmp2
//	del _im2_tmp2	
// }

print "1\n"
  
  _res_tmp = _res;
//Image(FLOAT_VECTOR,_im1_tmp.tx,_im1_tmp.ty,_im1_tmp.tz) 
//  _res_tmp 
  amiPDESetSolenoidal(solenoidal_pde)
//print "2\n"
  amiOFSetSmoothGradient(smoothgradient)
//print "2\n"
  amiOFSetGlobalConstraint(global_constraint)

//  print sprint("mean(_im1_tmp) = %f \n",mean(_im1_tmp))
//  print sprint("mean(_im2_tmp) = %f \n",mean(_im2_tmp))
//  print sprint("mean(norm(_res_tmp)) = %f \n",mean(norm(_res_tmp)))

//  print sprint("i1(0,0,0) \t %f \n",_im1_tmp(0,0,0));
//  print sprint("i2(0,0,0) \t %f \n",_im2_tmp(0,0,0));

  amiOFPDE(_im1_tmp,_im2_tmp,&_res_tmp,beta,beta,beta,2,2,zoom_z,alfa,alfa,alfa,Conv_GS,Nscales,Conv_Scales,gradtype)
  //_res = Flip(_res,1)

//  for l=1 to zoom_level-1  {
//	_res_tmp2 = amiZoomUpFlow3D(_res_tmp)
//	del _res_tmp
//	_res_tmp = _res_tmp2
//	del _res_tmp2
//  }
  _res = _res_tmp

}

proc standard_desv(IMAGE _n, IMAGE _mask) {
  _mn = mean(_n,_mask)
  _mn2 = (_n-_mn)*(_n-_mn)
  print sqrt(mean(_mn2,_mask))
  print "\n"
}



#------------- INTERFACE PROCEDURES -----------------

proc UpdateDisplay() {
  global
  u = u*(mask!=0)
  show i1
  n = norm(u-u_o);
  print mean(n,mask)  
  print "\n"
  local; 
}

proc CB_Restart_corr() {
  u.initvalue(0,0,0);
  UpdateDisplay()
}

proc CB_Iterate_corr() {
  for _n=1 to nbiterations {
    amicorr3D(i1,i2,&u);
    UpdateDisplay()
  }
}

proc CB_RunSequence() {
  winsize_x=4
  winsize_y=4
  winsize_z=4
  for _n=1 to 2 {
    amicorr3D(i1,i2,&u);
    UpdateDisplay()
  }
  winsize_x=3
  winsize_y=3
  winsize_z=3
  for _n=1 to 2 {
    amicorr3D(i1,i2,&u);
    UpdateDisplay()
  }
  winsize_x=2
  winsize_y=2
  winsize_z=2
  for _n=1 to 2 {
    amicorr3D(i1,i2,&u);
    UpdateDisplay()
  }
}

proc CB_Restart_pde() {
  u.initvalue(0,0,0);
#  call_amiOFPDE3D(i1,i2,&u);
  UpdateDisplay()
}

proc CB_Iterate_pde() {
  call_amiOFPDE3D(i1,i2,&u);
  UpdateDisplay()
}

proc CB_AlphaTests() {
  global
  alphatests_win.Display
  local
}

proc CB_RunAlphaTests() {

  param_str=""
  param_str = param_str + sprint("_Z%0.0f",zoom)
  param_str = param_str + sprint("_b%0.2f",beta)
  param_str = param_str + sprint("_sc%0.0f",Nscales)
  param_str = param_str + sprint("_gt%0.0f",gradtype)
  param_str = param_str + sprint("_sg%0.0f",smoothgradient)
  param_str = param_str + sprint("_gc%0.0f",global_constraint)
  param_str = param_str + sprint("_sol%0.0f",solenoidal_pde)
  param_str = param_str + sprint("_GST%0.0f",Conv_GS_exp)
  param_str = param_str + sprint("_ST%0.0f",Conv_Scales_exp)
  param_str = param_str + sprint("_a%0.2f",alfa_min)
  param_str = param_str + sprint("-%0.2f",alfa_max)
  param_str = param_str + sprint("-%0.2f",alfa_step)

  filedir="Results/"

  filename1=filedir+"MeanError____"+param_str+".dat"
  filename2=filedir+"SDError______"+param_str+".dat"
  test_file1 = open(filename1,"w")
  test_file2 = open(filename2,"w")

  param_str = ""
  param_str = param_str + sprint("(zoom,%0.0f) ",zoom)
  param_str = param_str + sprint("(beta,%f) ",beta)
  param_str = param_str + sprint("(Nscales,%0.0f) ",Nscales)
  param_str = param_str + sprint("(gradtype,%0.0f) ",gradtype)
  param_str = param_str + sprint("(smoothgradient,%0.0f) ",smoothgradient)
  param_str = param_str + sprint("(globalconstraint,%0.0f) ",global_constraint)
  param_str = param_str + sprint("(solenoidalproj,%0.0f) ",solenoidal_pde)
  param_str = param_str + sprint("(GS TOL,10^%0.0f) ",Conv_GS_exp)
  param_str = param_str + sprint("(Scale TOL,10^%0.0f) ",Conv_Scales_exp)
  param_str = param_str + sprint("(alpha,%f,",alfa_min)
  param_str = param_str + sprint("%f,",alfa_max)
  param_str = param_str + sprint("%f) ",alfa_step)

  # print parameter information at the beginning of the files
  test_file1.print "# Optical Flow technique\n"
  test_file1.print "# Mean error on Johan's image\n"
  test_file1.print "# amilab script: test_johan.amil\n"
  test_file1.print "# Parameters\n"
  test_file1.print "# "+param_str+"\n"


  test_file2.print "# Optical Flow technique\n"
  test_file2.print "# Standard deviation on Johan's image\n"
  test_file2.print "# amilab script: test_johan.amil\n"
  test_file2.print "# Parameters\n"
  test_file2.print "# "+param_str+"\n"

  nb_it=(alfa_max-alfa_min)/alfa_step
  for k=0 to nb_it {
    alfa = alfa_min+k/nb_it*(alfa_max-alfa_min)
    CB_Restart_pde()
    CB_Iterate_pde()

    n = norm(u-u_o);
    _mean = mean(n,mask)
    test_file1.print alfa
    test_file1.print "\t"
    test_file1.print _mean
    test_file1.print "\n"

    _mean2 = (n-_mean)*(n-_mean)
    // error after removing 15 pixels at the border
    test_file2.print alfa
    test_file2.print "\t"
    test_file2.print sqrt(mean(_mean2,mask))
    test_file2.print "\n"

  }

  print "closing files \n"
  test_file1.close
  test_file2.close
  print "files closed\n"
}


#-------------- CORRELATION INTERFACE ----------------

w1 = ParamWin("3D Correlation parameters:")

step_x_id = w1.AddInt(step_x,1,20)
step_y_id = w1.AddInt(step_y,1,20)
step_z_id = w1.AddInt(step_z,1,20)

cubic_window_id = w1.AddBoolean(cubic_window)
winsize_x_id    = w1.AddInt(winsize_x,2,8)
winsize_y_id    = w1.AddInt(winsize_y,2,8)
winsize_z_id    = w1.AddInt(winsize_z,2,8)

nbiterations_id = w1.AddInt(nbiterations,1,20)

windef_id =  w1.AddInt(windef,0,1)
solenoidal_cor_id = w1.AddBoolean(solenoidal_cor)

restart_id =w1.AddButton("Restart",               CB_Restart_corr)
iterate_id =w1.AddButton("Iterate",               CB_Iterate_corr)
sequence_id=w1.AddButton("Sequence 16x2,8x2,4x2", CB_RunSequence)

w1.CreateWin
w1.Display


#------------------ PDE INTERFACE ---------------------

w2 = ParamWin("PDE Optical Flow")

beta_id        = w2.AddFloat(beta,0.01,5)
alfa_id        = w2.AddFloat(alfa,0.01,20)
Conv_GS_exp_id = w2.AddInt(Conv_GS_exp,-10,0)

zoom_level_id        = w2.AddInt(zoom_level,1,5)
Nscales_id           = w2.AddInt(Nscales,1,5)
Conv_Scales_exp_id   = w2.AddInt(Conv_Scales_exp,-5,0)
gradtype_id          = w2.AddInt(gradtype,0,7)
smoothgrad_id        = w2.AddBoolean(smoothgradient)
solenoidal_pde_id    = w2.AddBoolean(solenoidal_pde)
global_constraint_id = w2.AddBoolean(global_constraint)

restart_id   = w2.AddButton("Restart", CB_Restart_pde)
iterate_id   = w2.AddButton("Iterate", CB_Iterate_pde)
alfatests_id = w2.AddButton("Alpha Test", CB_AlphaTests)

w2.CreateWin
w2.Display

#-------------------------------------------------
# Creating parameter window for test on alpha
#-------------------------------------------------
alphatests_win = ParamWin("test sequence on alpha")
alfa_min_id     = alphatests_win.AddFloat(alfa_min,0.01,10)
alfa_max_id     = alphatests_win.AddFloat(alfa_max,0.01,20)
alfa_step_id    = alphatests_win.AddFloat(alfa_step,0.01,1)
alfa_start_id   = alphatests_win.AddButton("Run Alpha Test", CB_RunAlphaTests)
alphatests_win.CreateWin


# ------------ MAIN -----------------------

#directory="/home/mgarcia/flow_3d/johan/"

directory = ""
zoom=atof($1)

# ------ load 2 images
i1_0 = Image(directory+"sub_000_incomp.ami");
i2_0 = Image(directory+"sub_001.ami");

if (zoom) {
  i1 = (FLOAT) i1_0[80:207, 0:63, 10:41];
} else {
  i1 = (FLOAT) i1_0
}

i2 = (FLOAT) i2_0[i1]

# ------ load mask
mask_0 = Image(directory+"sub_mask.ami.gz")
mask = mask_0[i1]

# ------ create result vectorial image
u = Image(FLOAT_VECTOR,i1.tx,i1.ty,i1.tz)
u.settranslation(i1.trx,i1.try,i1.trz)
u.initvalue(0,0,0);

# ------ load perfect result
u_o_0 = Image(directory+"u_incomp.ami")
u_o_0.settranslation(i1_0.trx,i1_0.try,i1_0.trz)
#u_o_0 = Image("/home/mgarcia/flow_3d/johan/u_o.ami")

u_o = u_o_0[i1]

#u_o[0] = u_o[0]/20*960*0.03;
#u_o[1] = u_o[1]/20*960*0.03;
#u_o[2] = u_o[2]/Pi*144*0.03;
#u_o = u_o*(mask!=0);

#amicorr3D(i1,i2,&u);

# ------ display
show i1;
#i1_draw.compare(i2);

i1_draw._setvector(1,u);
i1_draw._setvector(2,u_o);

i1_draw.DrawVector(1,1);
i1_draw.DrawVector(2,1);

i1_draw.DisplayVectors();
