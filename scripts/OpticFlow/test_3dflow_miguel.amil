# command line: ./amilab

ami_import->AMIFluid()
func "OpticFlow/vorticity_3D.amil"

#func "find_minimum"

#----------- Main Parameters
zoom = UCHAR(1)
px = 1962; py = 762; pz = 222;
volume_radius = 50;
last_error = 999999999999;

data_loaded=INT(0)
data_info=""

#----------- CORRELATION PARAMS -----------------

step_x = INT(2)
step_y = INT(2)
step_z = INT(2)
#step_x = INT(volume_radius+1)
#step_y = INT(volume_radius+1)
#step_z = INT(volume_radius+1)

winsize_x = INT(3)
winsize_y = INT(3)
winsize_z = INT(3)

windef = INT(1)
nbiterations = INT(1)
Conv_Cor_exp = INT(-2)

#solenoidal_cor = UCHAR(1)
solenoidal_cor = UCHAR(0)
corr_downsample = UCHAR(1)

#-------------- PDE PARAMS ---------------------

beta            = 0.25
alfa            = 0.50
Conv_GS_exp     = INT(-5)
Nscales         = INT(3)
Conv_Scales_exp = INT(-2)
gradtype        = INT(0)
solenoidal_pde	= UCHAR(0)
global_constraint = UCHAR(0)
smoothgradient    = UCHAR(1)
symmetric         = UCHAR(0)

alpha_normalization = UCHAR(1)
alpha_norm_epsilon  = INT(-2)


#--------------------------------------------------
# test varying alfa
#
alfa_min  = 0.25
alfa_max  = 4
alfa_step = 0.25
alfa_findmin_it = INT(5)
alfa_init_zero = UCHAR(1)

#-------------- PROCEDURES ---------------------

proc amicorr3D(IMAGE _im1, IMAGE _im2, IMAGE _res) {
  wsx = exp(ln(2)*winsize_x)
  wsy = exp(ln(2)*winsize_y)
  wsz = exp(ln(2)*winsize_z)
  print sprint("window size (%0.0f",wsx)+","+sprint("%0.0f",wsy)+","+sprint("%0.0f)\n",wsz)
  if (corr_downsample) {
  	AMIFluid->amiOFCorr3DNew(_im1,_im2,&_res,wsx,wsy,wsz,step_x,step_y,step_z)
  } else {
    AMIFluid->amiOFCorr3D(_im1,_im2,&_res,wsx,wsy,wsz,windef,step_x,step_y,step_z)
    #AMIFluid->amiOFCorr3D(_im1,_im2,&_res,wsx,wsy,wsz,windef,step_x,step_y,step_z,volume_radius,volume_radius,volume_radius)  
  }
  print "correlation computed\n"
  //print sprint("flow: (%f",_res(volume_radius,volume_radius,volume_radius,0))+","+sprint("%f",_res(volume_radius,volume_radius,volume_radius,1))+","+sprint("%f)\n",_res(volume_radius,volume_radius,volume_radius,2))
  if (!corr_downsample) { 
	AMIFluid->amiOFExtrapol3D(&_res,step_x,step_y,step_z); 
  #AMIFluid->amiOFExtrapol3D(&_res,step_x,step_y,step_z,volume_radius,volume_radius,volume_radius)
  }
  print "extrapolation computed\n"
  if (solenoidal_cor) { AMIFluid->amiSolenoidalProj3D(&_res); print "solenoidal projection computed\n";}
  //_res = Flip(_res,1)
}

proc call_amiOFPDE3D(IMAGE _im1, IMAGE _im2, IMAGE _res) {
  zoom_z = 1+(_im1.tz>1);
  //print sprint("zoom_z = %f \n",zoom_z);
  //print sprint("dz = %f \n",_im1.tz);

  Conv_GS        = exp(ln(10)*Conv_GS_exp    )  
  Conv_Scales    = exp(ln(10)*Conv_Scales_exp)  
  alpha_epsilon  = exp(ln(10)*alpha_norm_epsilon)
    
  AMIFluid->amiPDESetSolenoidal(solenoidal_pde)
  AMIFluid->amiOFSetGlobalConstraint(global_constraint)
  AMIFluid->amiOFSetSmoothGradient(smoothgradient)
  AMIFluid->amiOFSetAlphaNormEpsilon(alpha_epsilon)
  AMIFluid->amiOFSetNormalizeAlpha(alpha_normalization)
  AMIFluid->amiOFSetSymmetric(symmetric)
  AMIFluid->amiOFPDE(_im1,_im2,&_res,beta,beta,beta,2,2,zoom_z,alfa,alfa,alfa,Conv_GS,Nscales,Conv_Scales,gradtype)

  if (symmetric) {
    // invert flux
    _res = AMIFluid->amiInverseFlow(_res)
  } 

}

proc ComputeError(NUM _err) {
	if (corr_downsample) {		
		v = SpacePos(u)+u
		n = abs(i1(SpacePos(u))-i2(v))	
	    posmask = (v[0]>0)*(v[1]>0)*(v[2]>0)*(v[0]<i1.tx-1)*(v[1]<i1.ty-1)*(v[2]<i1.tz-1)
	    _err = mean(n,posmask)    
	} else {
		i2_warped = i2*0;
		AMIFluid->amiInterpolation3D(i2,u,&i2_warped)
    	n = abs(i1-i2_warped)		
		_err=mean(n)     
		
		//n_resize = Image(FLOAT,1+(i1.tx-1)/step_x,1+(i1.ty-1)/step_y,1+(i1.tz-1)/step_z)
		//n_resize = n(SpacePos(n_resize)*step_x);
		//_err1 = mean(n_resize)
		//printn _err1;
	}    
    printn _err 
    //print "\t+/-\t"
    //_desv = (n-_err)*(n-_err)
	//printn sqrt(mean(_desv,posmask))
}

#------------- Loading Input Data


proc DisplayData() {
#    -----------
  global
  show i1;
  #i1_draw.compare(i2);
  i1_draw._setvector(1,u);
  #i1_draw.setvector(2,u_o);
  i1_draw.DrawVector(1,1);
  i1_draw.DrawVector(2,1);
  i1_draw.DisplayVectors();
  local
}


proc UnloadData() {
#    ----------
  global
  if (data_loaded) {
    hide i1
    del i1; del i2; del mask
    del u; del u_o
    data_loaded = 0
  }
  local
}

proc CB_LoadSphereData() {
#    -----------------

  UnloadData()
  global

  #sphere_directory="/home/karl/projects/data/3Dflow/esfera/"
  sphere_directory="esfera/"
  
  i1_0 = Image(sphere_directory+"volumenA.ami")
  i2_0 = Image(sphere_directory+"volumenB.ami")
  #i1 = (FLOAT) i1_0
  #i2 = (FLOAT) i2_0
  i1 = (UCHAR) i1_0
  i2 = (UCHAR) i2_0
  mask_0 = Image(sphere_directory+"mask.ami.gz")
  mask = mask_0
  u = Image(FLOAT_VECTOR,i1.tx,i1.ty,i1.tz)
  u.initvalue(0,0,0);
  u_o_0 = Image(sphere_directory+"u_o.ami")
  u_o = u_o_0
  u_o = u_o*(mask!=0);
  DisplayData()

  del i1_0; del i2_0; del mask_0; del u_o_0
  data_loaded=1
  data_info="Sphere"

  local
}

proc CB_LoadNewSphereData() {
#    -----------------

  UnloadData()
  global

  #sphere_directory="/home/karl/projects/data/3Dflow/esfera/"
  sphere_directory="esfera/"
  
  i1_0 = Image(sphere_directory+"newvolA.ami.gz")
  i2_0 = Image(sphere_directory+"newvolB.ami.gz")
  i1 = (FLOAT) i1_0
  i2 = (FLOAT) i2_0
  mask_0 = Image(sphere_directory+"newmask.ami.gz")
  mask = mask_0
  u = Image(FLOAT_VECTOR,i1.tx,i1.ty,i1.tz)
  u.initvalue(0,0,0);
  u_o_0 = Image(sphere_directory+"newflow.ami.gz")
  u_o = u_o_0
  u_o = u_o*(mask!=0);
  DisplayData()

  del i1_0; del i2_0; del mask_0; del u_o_0
  data_loaded=1
  data_info="NewSphere128"

  local
}

proc CB_LoadSphere64() {
#    -----------------

  UnloadData()
  global

  #sphere_directory="/home/karl/projects/data/3Dflow/esfera/"
  sphere_directory="esfera/"
  
  i1_0 = Image(sphere_directory+"sphereflow64_A.ami.gz")
  i2_0 = Image(sphere_directory+"sphereflow64_B.ami.gz")
  i1 = (FLOAT) i1_0
  i2 = (FLOAT) i2_0
  mask_0 = Image(sphere_directory+"sphereflow64_mask.ami.gz")
  mask = mask_0
  u = Image(FLOAT_VECTOR,i1.tx,i1.ty,i1.tz)
  u.initvalue(0,0,0);
  u_o_0 = Image(sphere_directory+"sphereflow.ami.gz")
  u_o = u_o_0
  u_o = u_o*(mask!=0);
  DisplayData()

  del i1_0; del i2_0; del mask_0; del u_o_0
  data_loaded=1
  data_info="NewSphere64"

  local
}

proc CB_LoadJohanData() {
#    ----------------

  UnloadData()
  global

  #directory="/home/mgarcia/flow_3d/johan/"
  #directory = "johan2/"
  #directory = "LaVision_p9/"
  directory = "LaVision_p9/z0-200/"
  #directory = "LaVision_p9/z201-405/"
  #directory = "LaVision_p9/1307-2106.300-1099.145-194/"
  #directory = "LaVision_p9/1500-2011.575-830.75-330/"
  #directory = "wake_LES_Cemagref/"
  #directory = "wake_LES_Cemagref2/301-1000.128-383.200-379/"
  #directory = "wake_LES_Cemagref2/"
  #directory = "wake_LES_Cemagref_run02/"

  #zoom=atof($1)
  # ------ load 2 images
  #i1_0 = Image(directory+"sub_000_incomp.ami");
  #i2_0 = Image(directory+"sub_001.ami");
  #i1_0 = Image(directory+"fld_a_001.ami");
  #i2_0 = Image(directory+"fld_a_003.ami");
  #i1_0 = Image(directory+"Frame0.ami.gz");
  i1_0 = Image(directory+"i1.ami.gz");
  if (corr_downsample) {
  	i1 = (UCHAR) i1_0
  } else {
	i1 = (FLOAT) i1_0
  }  
  del i1_0;
  i2_0 = Image(directory+"i2.ami.gz");  
  if (corr_downsample) {
	i2 = (UCHAR) i2_0
  } else {
	i2 = (FLOAT) i2_0
  }
  del i2_0;

  if (zoom) {
    #i1 = (FLOAT) i1_0[(px-volume_radius):(px+volume_radius), (py-volume_radius):(py+volume_radius), (pz-volume_radius):(pz+volume_radius)];
    #i1 = (FLOAT) i1_0[1307:2106,300:1099,145:194]
	#i1 = (FLOAT) i1_0[1600:1999,500:899,100:299]
	#i1 = (FLOAT) i1_0[1500:2011,575:830,75:330]
	#i1 = (FLOAT) i1_0[301:1000,128:383,200:379]
  } else {
    #i1 = (FLOAT) i1_0 
  }    
  
  #i2_0 = Image(directory+"Frame1.ami.gz");
  #i2 = (FLOAT) i2_0[i1]  
  show i1;
  print "volumes loaded\n"

  # ------ load mask
  #mask_0 = Image(directory+"sub_mask.ami.gz")
  mask_0 = i1*0+255
  mask = mask_0[i1]
  del mask_0;
  print "mask loaded\n"

  # ------ create result vectorial image
  if (exists(u)) {del u;}
  if (corr_downsample) {		
		u = Image(FLOAT_VECTOR,1+(i1.tx-1)/step_x,1+(i1.ty-1)/step_y,1+(i1.tz-1)/step_z)
		setvoxelsize(u,step_x,step_y,step_z)		
  } else { u = Image(FLOAT_VECTOR,i1.tx,i1.ty,i1.tz); }
  u.settranslation(i1.trx,i1.try,i1.trz)
  u.initvalue(0,0,0);
  i1_draw._setvector(1,u);
  #last_u = u;
  u.save "last_u.ami.gz"
  last_error = 999999999999;  
  print "flow field allocated\n"

  # ------ load perfect result
  #u_o_0 = Image(directory+"u_incomp.ami")
  #u_o_0.settranslation(i1_0.trx,i1_0.try,i1_0.trz)
  #u_o_0 = u

  #u_o = u_o_0[i1]

  #u_o[0] = u_o[0]/20*960*0.03;
  #u_o[1] = u_o[1]/20*960*0.03;
  #u_o[2] = u_o[2]/Pi*144*0.03;
  #u_o = u_o*(mask!=0);
  #DisplayData()

  #del i1_0; del i2_0; 
  #del mask_0; del u_o_0
  data_loaded=1
  data_info="Johan1"

  local
}



#------------- INTERFACE PROCEDURES -----------------

proc UpdateDisplay() {
  global
  u = u*(mask!=0)
  show i1
  #n = norm(u-u_o);
  i2_warped = i2*0;
  AMIFluid->amiInterpolation3D(i2,u,&i2_warped)
  n = abs(i1-i2_warped)
  _mean=mean(n,mask) 
  if (last_error > _mean) {    
    print "\n"
    print _mean 
    print "\t+/- "
    _mean2 = (n-_mean)*(n-_mean)
    print sqrt(mean(_mean2,mask))
    print "\n"
    u.save "last_u.ami.gz";
    last_error = _mean;
  } else {
    u = Image "last_u.ami.gz";    
    print "\nWorse error than previous iteration. Flow restored.\n"  
  }
  del i2_warped; del n; del _mean;
  local; 
}

proc CB_Restart_corr() {
  u.initvalue(0,0,0);
  #u.save "last_u.ami.gz";
  last_error = 9999999999999;
#  amicorr3D(i1,i2,&u);
  UpdateDisplay()
}

proc CB_Iterate_corr() {
  for _n=1 to nbiterations {
    print "ITERATION \t"; print _n; print "\n"
    AMIFluid->amicorr3D(i1,i2,&u);
    UpdateDisplay()
  }
}

proc CB_RunSequence() {
  winsize_x=4
  winsize_y=4
  winsize_z=4
  for _n=1 to 2 {
    AMIFluid->amicorr3D(i1,i2,&u);
    UpdateDisplay()
  }
  winsize_x=3
  winsize_y=3
  winsize_z=3
  for _n=1 to 2 {
    AMIFluid->amicorr3D(i1,i2,&u);
    UpdateDisplay()
  }
  winsize_x=2
  winsize_y=2
  winsize_z=2
  for _n=1 to 2 {
    AMIFluid->amicorr3D(i1,i2,&u);
    UpdateDisplay()
  }
}

proc CB_RunSequenceConv() {
	global;
	if (corr_downsample && (u.vx != step_x || u.vy != step_y || u.vz != step_z)) {
		if (exists(u)) { del u; }
		u = Image(FLOAT_VECTOR,1+(i1.tx-1)/step_x,1+(i1.ty-1)/step_y,1+(i1.tz-1)/step_z)
		setvoxelsize(u,step_x,step_y,step_z)		
	    u.settranslation(i1.trx,i1.try,i1.trz)
  	 	u.initvalue(0,0,0);
  		i1_draw._setvector(1,u);	
	}
	_error = 0;
	ComputeError(&_error);
	Conv_Cor = exp(ln(10)*Conv_Cor_exp    )
	max_iter = 100
	for _iter=1 to max_iter { 
		AMIFluid->amicorr3D(i1,i2,&u);
		//u = u*(mask!=0)		
		//show i1
		ComputeError(&_error);		

		// Checking convergention:
		if (last_error < _error || (last_error-_error)/last_error < Conv_Cor) {
			winsize_x = winsize_x-1;		
		  	winsize_y = winsize_y-1;
			winsize_z = winsize_z-1;
		}

		// Saving temporal results:
	    if (last_error > _error) {    		    
		    u.save "last_u.ami.gz";
		    last_error = _error;
		} else {
		    u = Image "last_u.ami.gz";    
		    print "\nWorse error than previous iteration. Flow restored.\n"  
		}		

		// Refresh windows:
		w1.Display;
		ProcessXEvents(500);

		// Ending loop:
		if (winsize_x <= 2 || winsize_y <= 2 || winsize_z <= 2) { _iter = max_iter+1;}
	} 
	local;
}

proc CB_Restart_pde() {
  u.initvalue(0,0,0);
  #u.save "last_u.ami.gz";
  last_error = 9999999999999;
//  call_amiOFPDE3D(i1,i2,&u);
  UpdateDisplay()
}

proc CB_Iterate_pde() {
  call_amiOFPDE3D(i1,i2,&u);
  UpdateDisplay()
}


proc CB_AlphaTests() {
  global
  alphatests_win.Display
  local
}




proc CreateParamFilename() {
  global

  param_str = ""
  param_str = param_str + sprint("Z%0.0f",zoom)
  param_str = param_str + sprint("_b%0.2f",beta)
  param_str = param_str + sprint("_sc%0.0f",Nscales)
  param_str = param_str + sprint("_gt%0.0f",gradtype)
  param_str = param_str + sprint("_sg%0.0f",smoothgradient) 
  param_str = param_str + sprint("_gc%0.0f",global_constraint)
  param_str = param_str + sprint("_sym%0.0f",symmetric)
  param_str = param_str + sprint("_sol%0.0f",solenoidal_pde)
  param_str = param_str + sprint("_GST%0.0f",Conv_GS_exp)
  param_str = param_str + sprint("_ST%0.0f",Conv_Scales_exp)
  param_str = param_str + sprint("_an%0.0f",alpha_normalization)
  param_str = param_str + sprint("_ae%0.0f",alpha_norm_epsilon)
  filedir="Results/"+data_info+"/"

  local  
}

proc CreateParamString() {
  global

  param_str = ""
  param_str = param_str + sprint("(zoom,%0.0f) ",zoom)
  param_str = param_str + sprint("(beta,%f) ",beta)
  param_str = param_str + sprint("(Nscales,%0.0f) ",Nscales)
  param_str = param_str + sprint("(gradtype,%0.0f) ",gradtype)
  param_str = param_str + sprint("(smoothgradient,%0.0f) ",smoothgradient)
  param_str = param_str + sprint("(globalconstraint,%0.0f) ",global_constraint)
  param_str = param_str + sprint("(symmetric,%0.0f) ",symmetric)
  param_str = param_str + sprint("(solenoidalproj,%0.0f) ",solenoidal_pde)
  param_str = param_str + sprint("(GS TOL,10^%0.0f) ",Conv_GS_exp)
  param_str = param_str + sprint("(Scale TOL,10^%0.0f) ",Conv_Scales_exp)
  param_str = param_str + sprint("(alpha normalization,%0.0f)",alpha_normalization)
  param_str = param_str + sprint("(alpha epsilon,10^%0.0f)",alpha_norm_epsilon)

  local  
}

proc CB_RunAlphaTests() {

  print "1\n"
  CreateParamFilename()
  param_str = param_str + sprint("_a%0.2f",alfa_min)
  param_str = param_str + sprint("-%0.2f",alfa_max)
  param_str = param_str + sprint("-%0.2f",alfa_step)

  filename1=filedir+param_str+"_Mean.dat"
  filename2=filedir+param_str+"_StDv.dat"
  test_file1 = open(filename1,"w")
  test_file2 = open(filename2,"w")

  CreateParamString()
  param_str = param_str + sprint("(alpha,%f,",alfa_min)
  param_str = param_str + sprint("%f,",alfa_max)
  param_str = param_str + sprint("_initzero%0.0f",alfa_init_zero)
  param_str = param_str + sprint("%f) ",alfa_step)

  # print parameter information at the beginning of the files
  test_file1.print "# Optical Flow technique\n"
  test_file1.print "# Mean error \n"
  test_file1.print "# amilab script: test_3dflow.amil\n"
  test_file1.print "# Parameters\n"
  test_file1.print "# "+param_str+"\n"


  test_file2.print "# Optical Flow technique\n"
  test_file2.print "# Standard deviation \n"
  test_file2.print "# amilab script: test_3dflow.amil\n"
  test_file2.print "# Parameters\n"
  test_file2.print "# "+param_str+"\n"

  #----- save initial value of the vector flow
  if (!alfa_init_zero) {
    u_init = u
  }
 
  nb_it=(alfa_max-alfa_min)/alfa_step
  for k=0 to nb_it {
    alfa = alfa_min+k/nb_it*(alfa_max-alfa_min)

    if (alfa_init_zero) {
      CB_Restart_pde()
    } else {
      #----- restart at initial value
      u = u_init
    }
    CB_Iterate_pde()

    n = norm(u-u_o);
    _mean = mean(n,mask)
    test_file1.print alfa
    test_file1.print "\t"
    test_file1.print _mean
    test_file1.print "\n"

    _mean2 = (n-_mean)*(n-_mean)
    // error after removing 15 pixels at the border
    test_file2.print alfa
    test_file2.print "\t"
    test_file2.print sqrt(mean(_mean2,mask))
    test_file2.print "\n"

  }

  print "closing files \n"
  test_file1.close
  test_file2.close
  print "files closed\n"
}



proc EvalFunction( NUM input, NUM res ) {

  if (alfa_init_zero) {
    CB_Restart_pde()
  } else {
    #----- restart at initial value
    u = findmin_u_init
  }
  alfa=input
  CB_Iterate_pde()

  n = norm(u-u_o);
  _mean = mean(n,mask)

  findmin_file1.print input
  findmin_file1.print "\t"
  findmin_file1.print _mean
  findmin_file1.print "\n"

  res = _mean

}


proc CB_AlphaFindMin() {

  global

  CreateParamFilename()
  param_str = param_str + sprint("_a%0.2f",alfa_min)
  param_str = param_str + sprint("-%0.2f",alfa_max)
  param_str = param_str + sprint("_initzero%0.0f",alfa_init_zero)
  param_str = param_str + sprint("_it%0.0f",alfa_findmin_it)

  filedir="Results/"+data_info+"/"

  filename1=filedir+param_str+"__Mean.dat"
  findmin_file1 = open(filename1,"w")

  CreateParamString()
  param_str = param_str + sprint("(alpha,%f,",alfa_min)
  param_str = param_str + sprint("%f) ",alfa_max)
  param_str = param_str + sprint("(iterations,%0.0f) ",alfa_findmin_it)

  # print parameter information at the beginning of the files
  findmin_file1.print "# Optical Flow technique\n"
  findmin_file1.print "# Mean error \n"
  findmin_file1.print "# amilab script: test_3dflow.amil\n"
  findmin_file1.print "# Parameters\n"
  findmin_file1.print "# "+param_str+"\n"

  #----- save initial value of the vector flow
  if (!alfa_init_zero) {
    findmin_u_init = u
  }
 
  FindMinimum(alfa_min,alfa_max,alfa_findmin_it)

  global
  del param_str
  del findmin_u_init

  print "closing files \n"
  findmin_file1.close
  print "files closed\n"

  local
}


#-------------- CORRELATION INTERFACE ----------------

w1 = ParamWin("3D Correlation parameters")

step_x_id = w1.AddInt(step_x,1,20)
step_y_id = w1.AddInt(step_y,1,20)
step_z_id = w1.AddInt(step_z,1,20)

winsize_x_id = w1.AddInt(winsize_x,2,8)
winsize_y_id = w1.AddInt(winsize_y,2,8)
winsize_z_id = w1.AddInt(winsize_z,2,8)

windef_id         = w1.AddInt(windef,0,1)
solenoidal_cor_id = w1.AddBoolean(solenoidal_cor)
nbiterations_id   = w1.AddInt(nbiterations,1,20)
Conv_Cor_exp_id   = w1.AddInt(Conv_Cor_exp,-10,0)

restart_id  = w1.AddButton("Restart", CB_Restart_corr)
iterate_id  = w1.AddButton("Iterate", CB_Iterate_corr)
#sequence_id = w1.AddButton("Sequence 16x2,8x2,4x2", CB_RunSequence)
sequence_id = w1.AddButton("Convergence Sequence", CB_RunSequenceConv)

w1.CreateWin

proc CB_CorrInterf() {
 w1.Display
}


#------------------ PDE INTERFACE ---------------------

w2 = ParamWin("PDE Optical Flow")

beta_id         = w2.AddFloat(beta,0.01,5)
alfa_id         = w2.AddFloat(alfa,0.01,40)
alfa_norm_id    = w2.AddBoolean(alpha_normalization)
alfa_epsilon_id = w2.AddInt(alpha_norm_epsilon,-3,0)
Conv_GS_exp_id  = w2.AddInt(Conv_GS_exp,-10,0)

Nscales_id           = w2.AddInt(Nscales,1,5)
Conv_Scales_exp_id   = w2.AddInt(Conv_Scales_exp,-5,0)
gradtype_id          = w2.AddInt(gradtype,0,3)
solenoidal_pde_id    = w2.AddBoolean(solenoidal_pde)
global_constraint_id = w2.AddBoolean(global_constraint)
smoothgrad_id        = w2.AddBoolean(smoothgradient)
sym_id               = w2.AddBoolean(symmetric)

restart_id   = w2.AddButton("Restart", CB_Restart_pde)
iterate_id   = w2.AddButton("Iterate", CB_Iterate_pde)
alfatests_id = w2.AddButton("Alpha Test", CB_AlphaTests)

w2.CreateWin

proc CB_OFInterf () {
  w2.Display
}

#-------------- different tests for the paper

#------------------------------
proc CB_CorrTest() {
#    -----------
  global

  # set the parameters
  step_x = 2
  step_y = 2
  step_z = 2
  winsize_x = 3 
  winsize_y = 3
  winsize_z = 3
  windef = 1
  nbiterations = 11
  solenoidal_cor = 1
  
  # run the correlation
  CB_Restart_corr()
  CB_Iterate_corr()

  local
}

#------------------------------
proc CB_JohanCorrTest() {
#    ----------------
  global

  # set the parameters
  step_x = 2
  step_y = 2
  step_z = 2
  windef = 1
  solenoidal_cor = 1
  
  # run the correlation
  CB_RunSequence()

  u.save "Johan_Correlation_test_result.ami.gz"

  local
}


#------------------------------
proc CB_VarTest() {
#    ----------
  global

  # set the parameters
  beta            = 0.25
  alfa            = 8.4
  Conv_GS_exp     = -5
  Nscales         = 3
  Conv_Scales_exp = -2
  gradtype        = 0
  solenoidal_pde    = 1
  global_constraint = 0
  symmetric=0
  smoothgradient    = 1
  alpha_normalization = 1
  alpha_norm_epsilon  = 0

  # run the optical flow
  CB_Restart_pde()
  CB_Iterate_pde()

  # one more iteration with 1 scale
  Nscales         = 1
  CB_Iterate_pde()

  local
}

#------------------------------
proc CB_JohanVarTest() {
#    ---------------
  global

  # set the parameters
  beta            = 0.25
  alfa            = 3.7
  Conv_GS_exp     = -5
  Nscales         = 3
  Conv_Scales_exp = -2
  gradtype        = 0
  solenoidal_pde    = 1
  global_constraint = 0
  symmetric         = 0
  smoothgradient    = 1
  alpha_normalization = 1
  alpha_norm_epsilon  = 0 
 
  # run the optical flow
  CB_Restart_pde()
  CB_Iterate_pde()

  # one more iteration with 1 scale
  Nscales         = 1
  CB_Iterate_pde()

  local
}

#------------------------------
proc CB_CorrVarTest() {
#    --------------
  CB_CorrTest()
   # set the parameters
  beta            = 0.25
  alfa            = 1.1
  Conv_GS_exp     = -5
  Nscales         = 1
  Conv_Scales_exp = -2
  gradtype        = 0
  solenoidal_pde    = 1
  global_constraint = 0
  symmetric         = 0
  smoothgradient    = 1
  CB_Iterate_pde()
 
}

#------------------------------
proc CB_JohanCorrVarTest() {
#    --------------
  CB_JohanCorrTest()
   # set the parameters
  beta            = 0.25
  alfa            = 0.1
  Conv_GS_exp     = -5
  Nscales         = 1
  Conv_Scales_exp = -2
  gradtype        = 0
  solenoidal_pde    = 1
  global_constraint = 0
  symmetric         = 0
  smoothgradient    = 1
  CB_Iterate_pde()
 
}


#-------------- MAIN INTERFACE -----------------------

w_main=ParamWin(" Flow Motion Estimation ")

load_sphere_id     = w_main.AddButton("Load New Sphere 128",    CB_LoadNewSphereData)
load_sphere64_id   = w_main.AddButton("Load New Sphere 64",     CB_LoadSphere64)
load_newsphere_id  = w_main.AddButton("Load Sphere",            CB_LoadSphereData)
zoom_id            = w_main.AddBoolean(zoom)
load_Johan_id      = w_main.AddButton("Load 3D Volume",             CB_LoadJohanData)
corr_interf_id     = w_main.AddButton("Correlation Interface",  CB_CorrInterf)
optical_flwo_id    = w_main.AddButton("Optical Flow Interface", CB_OFInterf  )

w_main.BeginBox("Paper Tests for the Sphere")
w_main.BeginHorizontal

paper_corr_test_id     = w_main.AddButton("Corr", CB_CorrTest)
paper_var_test_id      = w_main.AddButton("Var", CB_VarTest )
paper_corrvar_test_id  = w_main.AddButton("Corr+Var", CB_CorrVarTest )

w_main.EndHorizontal
w_main.EndBox

w_main.BeginBox("Paper Tests for Johan's data")
w_main.BeginHorizontal

paper_corr_test_id     = w_main.AddButton("Corr", CB_JohanCorrTest)
paper_var_test_id      = w_main.AddButton("Var", CB_JohanVarTest )
paper_corrvar_test_id  = w_main.AddButton("Corr+Var", CB_JohanCorrVarTest )

w_main.EndHorizontal
w_main.EndBox

w_main.CreateWin
w_main.Display

#-------------------------------------------------
# Creating parameter window for test on alpha
#-------------------------------------------------
alphatests_win = ParamWin("test sequence on alpha")
alfa_min_id        = alphatests_win.AddFloat(alfa_min,0.01,20)
alfa_max_id        = alphatests_win.AddFloat(alfa_max,0.01,40)
alfa_step_id       = alphatests_win.AddFloat(alfa_step,0.01,2)
alfa_findmin_it_id = alphatests_win.AddInt(  alfa_findmin_it,1,20)
alfa_tests_init_id = alphatests_win.AddBoolean(alfa_init_zero)
alfa_start_id      = alphatests_win.AddButton("Run Alpha Test", CB_RunAlphaTests)
alfa_findmin_id    = alphatests_win.AddButton("Find Minimum",   CB_AlphaFindMin)
alphatests_win.CreateWin


# ------------ MAIN -----------------------

