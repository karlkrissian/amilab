# command line: ./amilab 

ami_import->AMIFluid()


print "Start\n"

#--------------------------------------------------
beta            = 0.25
alfa            = 0.50
Conv_GS_exp     = INT(-5)
Nscales         = INT(3)
Conv_Scales_exp = INT(-2)
gradtype        = INT(2)
smoothfunction  = INT(0)
zoomdown        = INT(0)

print "1\n"

#
proc LoadDisks() {
#    -----------
  global
  print "Load Disks\n"
  print "load disks \n"

  vx=1
  vy=1.5

  i = Image(FLOAT,64,64,1)
  func "/home/karl/projects/Scripts/AddSphere.amil"
  i = i*0-10
  AddBrightSphere(&i,32,32,0,10)
  global
  i2 = i*0-10
  AddBrightSphere(&i2,32+vx,32+vy,0,10)
  global

  global
  d = Image(FLOAT_VECTOR,i.tx,i.ty,i.tz)
  d.initvalue(0,0,0);
  global
  d1 = d
  d1.initvalue(vx,vy,0);

  local

}


print "def LoadImages\n"


#
proc LoadImages() {
#    ----------
  global

  print "load images \n"

  I = Image($1)
  i = (FLOAT) I[0]
  i = Flip(i,1)

  I2 = Image($2) 
  i2 = (FLOAT) I2[0]
  i2 = Flip(i2,1)

  d = Image(FLOAT_VECTOR,i.tx,i.ty,i.tz)
  d.initvalue(0,0,0);
  d1 = d

  local

}

print "3\n"

print "def ZoomImages\n"

proc ZoomImages() {
  global
  
      zi =i
      zi2=i2
      zd=d
      zd1=d1
      for k=1 to zoomdown {
	zi  = AMIFluid->amiZoomDown3D(zi)
	zi2 = AMIFluid->amiZoomDown3D(zi2)        
	zd  = Resize(zd,zd.tx/2,zd.ty/2,1,1)
	zd=zd/2
	zd1  = Resize(zd1,zd1.tx/2,zd.ty/2,1,1)
	zd1=zd1/2
      }

  local
}


print "def call_amiPFDPE\n"


#--------------------------------------------------
proc call_amiOFPDE(IMAGE _im1, IMAGE _im2, IMAGE _res) {
  zoom_z = 1+_im1.tz>1;

  Conv_GS     = exp(ln(10)*Conv_GS_exp    )  
  Conv_Scales = exp(ln(10)*Conv_Scales_exp)  
  AMIFluid->amiOFPDE(_im1,_im2,&_res,beta,beta,beta,2,2,zoom_z,alfa,alfa,alfa,Conv_GS,Nscales,Conv_Scales,gradtype,smoothfunction)

  if ((gradtype==4)||(gradtype==6)||(gradtype==7)) {
    _res = AMIFluid->amiInverseFlow(_res)

  }

}

proc Stats(IMAGE _v0, IMAGE _v1) {
  // some statistics ...

  diff = (_v0-_v1)*(_v0-_v1)

  error = sqrt(mean(diff))
  print sprint("RMS error = %f \n",error);

  ng = normgrad(zi,1)
  error = sqrt(mean[ng>0.1](diff))
  print sprint("mean (in high gradients) error = %f \n",error);

  error_max = sqrt(max(diff))
  print sprint("MAX error = %f \n",error_max);
}



#--------------------------------------------------
#--------------------------------------------------

# BUG??,  needed to create this function to avoid a segmentation fault ...
proc UpdateDisplay() {
  global; show zi; local  
}

proc CB_Restart() {
  ZoomImages()
  zd.initvalue(0,0,0);
  call_amiOFPDE(zi,zi2,&zd);
  UpdateDisplay()
}

proc CB_Iterate() {
  call_amiOFPDE(zi,zi2,&zd);
  UpdateDisplay()
}


proc CB_Display() {
  global
  show zi;
  zi_draw.setvector(1,zd);
  zi_draw.setvector(2,zd1);
  zi_draw.DrawVector(1,1);
  zi_draw.setvector(2,zd1);
  zi_draw.DrawVector(2,1);
  local
}

proc CB_Stats() {
  global
  Stats(&zd,&zd1)
  local
}

print "main code \n"

#--------------------------------------------------
w1 = ParamWin("libamiFluid: PDE Optical Flow")

beta_id            = w1.AddFloat(beta,0.01,5)
alfa_id            = w1.AddFloat(alfa,0.01,20)
Nscales_id         = w1.AddInt(Nscales,1,5)

gradtype_id        = w1.AddInt(gradtype,0,7)
smoothfunction_id  = w1.AddInt(smoothfunction,0,1)
zoomdown_id        = w1.AddInt(zoomdown,0,5)

Conv_GS_exp_id     = w1.AddInt(Conv_GS_exp,-10,0)
Conv_Scales_exp_id = w1.AddInt(Conv_Scales_exp,-5,0)


restart_id=w1.AddButton("Restart", CB_Restart)
iterate_id=w1.AddButton("Iterate", CB_Iterate)
display_id=w1.AddButton("Display", CB_Display)
display_id=w1.AddButton("Stats",   CB_Stats)

w1.CreateWin
w1.Display

print "4\n"

print $#; print "\n"
if ($#>1) {
 LoadImages()
} else {
 LoadDisks()
 show vars
}





