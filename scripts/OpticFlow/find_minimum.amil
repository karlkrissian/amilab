

#
# Simple procedure to find the minimum of a function
#
proc EvalFunction( NUM input, NUM res ) {
  res = (input-10)*(input-10)
  print sprint("%2.2f --> ",input)+sprint("%2.2f\n",res);
}


#
# Simple procedure to find the minimum of a function
#
proc FindMinimum( NUM _min, NUM _max, NUM nbit) {
#
  v0=0; v1=0; v2=0;
  v=0;
  step=(_max-_min)/2.0

  EvalFunction(_min,&v0)
  EvalFunction(_min+step,&v1)
  EvalFunction(_max,&v2)

  current=_min+step

  for _n=0 to nbit { 

  // different configurations  
  if (v0<v1) {
    if ((current-2*step)>_min) {
      v2=v1
      v1=v0
      current=current-step
      EvalFunction(current-step,&v0)      
    } else {
      v2=v1
      step=step/2.0
      current=current-step
      EvalFunction(current,&v1)
    }
  } else {
    if ((v1<v0)&&(v1<v2)) {
      step=step/2
      EvalFunction(current-step,&v0)
      EvalFunction(current+step,&v2)
    } else {
      if (v2<v1) {
        if ((current+2*step)<_max) {
          v0=v1
          v1=v2
          current=current+step
          EvalFunction(current+step,&v2)      
        } else {
          step=step/2
          current=current+step
          v0=v1
          EvalFunction(current,&v1)     
        }
      }
    }
  }

  } // for


  print sprint("x=     %2.3f \t",current-step)
  print sprint("%2.3f \t",current)
  print sprint("%2.3f \n",current+step)

  print sprint("values %2.3f \t",v0)
  print sprint("%2.3f \t",v1)
  print sprint("%2.3f \n",v2)


}
