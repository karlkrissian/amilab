# command line: ./amilab 

ami_import->AMIFluid()


#--------------------------------------------------
beta            = 0.25
alfa            = 0.50
Conv_GS_exp     = INT(-5)
Nscales         = INT(3)
Conv_Scales_exp = INT(-2)
gradtype        = INT(2)
zoom_z          = 1


#--------------------------------------------------
proc call_amiOFPDE3D(IMAGE _im1, IMAGE _im2, IMAGE _res) {
  zoom_z = 1+(_im1.tz>1);
  print sprint("zoom_z = %f \n",zoom_z);
  print sprint("dz = %f \n",_im1.tz);

  Conv_GS     = exp(ln(10)*Conv_GS_exp    )  
  Conv_Scales = exp(ln(10)*Conv_Scales_exp)  
  
  InitTime
  AMIFluid->amiOFPDE_Param(beta,beta,beta,\
      2,2,zoom_z,\
      alfa,alfa,alfa,\
      Conv_GS,Nscales,Conv_Scales,\
      gradtype)

  AMIFluid->amiOFPDE(_im1,_im2,&_res)
  
  EndTime

  // some statistics ...
  diff = (d-d1)*(d-d1)

  error = sqrt(mean(diff))
  print sprint("RMS error = %f \n",error);

  ng = normgrad(i,1)
  error = sqrt(mean[ng>0.1](diff))
  print sprint("mean (in high gradients) error = %f \n",error);

  diff = (d-d1)*(d-d1)
  error_max = sqrt(max(diff))
  print sprint("MAX error = %f \n",error_max);

}

i = Image(FLOAT,64,64,64)
func "SyntheticImages/AddSphere.amil"
i = i*0-10
AddBrightSphere(&i,32,32,32,10)
i2 = i*0-10
vx = 1
vy = 1.5
vz = 0.6
AddBrightSphere(&i2,32+vx,32+vy,32+vz,10)

#i  = (i<0)*255
#i2 = (i2<0)*255

d = Image(FLOAT_VECTOR,i.tx,i.ty,i.tz)
d.initvalue(0,0,0);
d1 = d
d1.initvalue(vx,vy,vz);
call_amiOFPDE3D(i,i2,&d);

#--------------------------------------------------
#--------------------------------------------------

# BUG??,  needed to create this function to avoid a segmentation fault ...
proc UpdateDisplay() {
  global; show i; local  
}

proc CB_Restart() {
  d.initvalue(0,0,0);
  call_amiOFPDE3D(i,i2,&d);
  UpdateDisplay()
}

proc CB_Iterate() {
  call_amiOFPDE3D(i,i2,&d);
  UpdateDisplay()
}

#--------------------------------------------------
w1 = ParamWin("Opt.Flow")

beta_id    = w1.AddFloat( &beta,  "beta", 0.01,5)
alfa_id    = w1.AddFloat( &alfa,  "alfa", 0.01,20)
Conv_GS_exp_id = w1.AddInt( &Conv_GS_exp,  "Conv_GS_exp", -10,0)

Nscales_id     = w1.AddInt( &Nscales,  "Nscales", 1,5)
Conv_Scales_exp_id = w1.AddInt( &Conv_Scales_exp,  "Conv_Scales_exp", -5,0)
gradtype_id    = w1.AddInt( &gradtype,  "gradtype", 0,2)

restart_id=w1.AddButton("Restart", CB_Restart)
iterate_id=w1.AddButton("Iterate", CB_Iterate)

w1.Update()
w1.Display()


show i;
#i_draw.compare(i2);
i_draw._setvector(0,d);
i_draw.DrawVector(0,1);
i_draw._setvector(1,d1);
i_draw.DrawVector(1,1);
i_draw.DisplayVectors();

