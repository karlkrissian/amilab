
import_ami


#
# Set the parameters
#
beta      = 0.25

alfa_min  = 0.10
alfa_max  = 4.00
alfa_step = 0.5

Conv_GS_exp     = INT(-5)
Nscales         = INT(1)
Conv_Scales_exp = INT(-2)
gradtype        = atof($1)
zoom_level	= 1

datadir="/home/karl/projects/data/3Dflow/"

#
# Function to call the optical flow estimation
#
proc call_amiOFPDE3D(IMAGE _im1, IMAGE _im2, IMAGE _res) {
  zoom_z = 1+(_im1.tz>1);
  //print sprint("zoom_z = %f \n",zoom_z);
  //print sprint("dz = %f \n",_im1.tz);

  Conv_GS     = exp(ln(10)*Conv_GS_exp    )  
  Conv_Scales = exp(ln(10)*Conv_Scales_exp)  

  _im1_tmp = _im1
  _im2_tmp = _im2
  for l=1 to zoom_level-1  {
	_im1_tmp2 = amiZoomDown3D(_im1_tmp)
	_im2_tmp2 = amiZoomDown3D(_im2_tmp)
	del _im1_tmp
	del _im2_tmp
	_im1_tmp = _im1_tmp2
	_im2_tmp = _im2_tmp2
	del _im1_tmp2
	del _im2_tmp2	
  }
  
  # intermediate flow
  _res_tmp = Image "u_johan_level2.ami" 
  amiPDESetSolenoidal(0)  
  amiOFSetSmoothGradient(1)
  amiOFSetGlobalConstraint(0)

  amiOFPDE(_im1_tmp,_im2_tmp,&_res_tmp,beta,beta,beta,2,2,zoom_z,alfa,alfa,alfa,Conv_GS,Nscales,Conv_Scales,gradtype)

  for l=1 to zoom_level-1  {
	_res_tmp2 = amiZoomUpFlow3D(_res_tmp)
	del _res_tmp
	_res_tmp = _res_tmp2
	del _res_tmp2
  }
  _res = _res_tmp
}


# image 1
i_0 = Image(datadir+"johan/sub_000_incomp.ami")
i = (FLOAT) i_0

# image 2
i2_0 = Image(datadir+"johan/sub_001.ami")
i2 = (FLOAT) i2_0

# compute the mask to get rid of the clouds
mask = Image(datadir+"johan/sub_mask.ami.gz")

# perfect flow
d1 = Image(datadir+"johan/u_incomp.ami")
d1 = d1*(mask!=0);

# Compute results for different alfa ...
error_file  = open(sprint("alfa_johan_%0.0f_",gradtype)+sprint("%0.0f.dat",zoom_level),"w")

n=(alfa_max-alfa_min)/alfa_step

print "gradtype: "; print gradtype; print "\n"

for k=0 to n {

  alfa = alfa_min+k/n*(alfa_max-alfa_min)  

  d=d1*0
  call_amiOFPDE3D(i,i2,&d);

  ndiff = norm(d-d1)

  error_file.print alfa
  error_file.print "\t"
  error_file.print mean(ndiff,mask)
  error_file.print "\n"

  print "\n *** alfa: "; print alfa; 
  print "   error: "; print mean(ndiff,mask); print "\n"

}

error_file .close
