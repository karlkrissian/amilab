#!/usr/bin/amilab


if (argc>=3) {
  input            = Image $1
  result = input
  threshold  = atof($2)
  input_filtered   = Image $3
} else {
  InfoDialog "Need at least 3 arguments"
  quit
}
KeepGui=0
if (argc==4) {
  if ($4=="-gui") {
    KeepGui=1
  }
}


//----------------------------------------------
proc InPlaceFillMask( IMAGE _input, IMAGE _mask, NUM _it ) {
//   ---------------

    local::m1 = (FLOAT) (_mask>0)
  m1 = EDPdilate( m1,2,0.5)

  local::test1 = _input

  local::meanvoxsize = (_input.vx+_input.vy+_input.vz)/3

  for local::_i=1 to _it {
    local::testf = filter(test1,meanvoxsize,0,0,0)

    local::test1_bak = test1

    test1 = testf*m1+_input*(-m1+1)
    local::diff = test1_bak-test1
    diff = diff*diff
    print sprint(" %0.2f \t",sqrt(mean[m1>0.5](diff)))
  }

  print "\n"
  _input = test1

} // InPlaceFillMask()
//--------------------------------------------------




tmp = ((FLOAT) input_filtered)-threshold


tmp_cc = CC(tmp)


for _i=0 to cc_sign.tx-1 {

  if ((cc_sign(_i)==1)&&(cc_size(_i)>8)&&(cc_size(_i)<100)) {
    // found a small connected component of high intensity
    // --> remove it ...
    print sprint("filling component %0.0f",_i)
    printn sprint(" of size %0.0f",cc_size(_i))
    comp <<= (tmp_cc == _i)
    comp_crop <<= autocrop(comp,7)
    del comp
    input_crop <<= result[comp_crop]
    InPlaceFillMask(&input_crop,comp_crop,20)
    result.putimage(input_crop)
  }

}
#
#
#

result.save $1-".gz"-".ami"-".vtk"+"_CalcOut.ami.gz"

if (KeepGui) {
  show input
  input_draw.compare(result)
} else {
  quit
}

