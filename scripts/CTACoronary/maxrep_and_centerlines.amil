#!/usr/bin/amilab

#
# we suppose that we have the following subdirectory tree:
#
# dataset${n}/Images/initial_crop_FastNLmeans.vtk
# dataset${n}/cistib/image${n}-PDF-01.vtk
#
# where ${n} is 00, 01, etc ...


if (argc==0) {
  printn "-----------------------------------------"
  printn ""
  printn "Program "+$0
  printn ""
  printn "Description:"
  printn "Computes the centerline response function"
  printn "and the centerline paths for the CorCTA Challenge workshop"
  printn ""
  printn "Parameters:"
  printn " 1. the dataset number"
  printn ""
  printn "Requirements:"
  printn "datasetXX/Images/initial_crop_FastNLmeans.vtk"
  printn "cistib/imageXX-PDF-01.vtk"
  printn ""
  printn " Or"
  printn ""
  printn " 1. the dataset number"
  printn " 2. input image"
  printn " 3. input probability density function"
  printn ""
  printn "-----------------------------------------"
  printn ""
  quit
}

datasetid = atof($1)

datasetnum = sprint("%02.0f",datasetid)
datasetdir = "dataset"+datasetnum+"/"

if (argc==3) {
  input       = Image($2)
  vessels_pdf = Image($3)
  // if ROI, limit input to the same ROI
  if ((input.tx>vessels_pdf.tx)&&\
      (input.ty>vessels_pdf.ty)&&\
      (input.tz>vessels_pdf.tz)) { \
    input <<= input[vessels_pdf]
  }
} else {
  input       = Image(datasetdir+\
                      "Images/initial_crop_FastNLmeans.vtk")
  vessels_pdf  = Image(datasetdir+\
                      "cistib/image"+datasetnum+"-PDF-01.vtk")
}

# don't try to interpret parameters anymore
emptyargs



sh "mkdir "+datasetdir+"CenterlineResponse"

filename =  datasetdir+\
            "CenterlineResponse/trying_circles_result.0.ami.gz"
// check if file exists
f = open(filename,"r")
if (!exists(f)) {

  func "Centerlines/trying_circles"
  
  # 1. run the centerline response 
  # needs as input 
  #   - the input cropped and filtered image
  #   - the probably density function for vessels
  # Images/initial_crop_FastNLmeans.vtk 800 cistib/image05-PDF-01.vtk 0.1 
  
  th = 800
  TC_init(&input,th,datasetdir)
  
  TC_usezoom      = 0
  TC_split_number = 1
  TC_radmin  = 0.2
  TC_radmax  = 3.4
  TC_radstep = 0.2
  
  // Gaussian standard deviations 
  // for the structure tensor computation
  TC_sigma          = 0.8
  TC_beta           = 1.0
  TC_sigma_gradient = 0.5
  
  // Standard deviation Threshod
  TC_SD_th  = 2
  // Excentricity Threshold
  TC_EXC_th = 5
  
  m2_th = 0.1
  TC_SetMask2(&vessels_pdf,m2_th)
  TC_CreateMask()
  TC_Run()
  cmd = "mkdir "+datasetdir+"CenterlineResponse"
  sh cmd
  TC_Save()
  
  # keep result in memory
  # TC_rmax
  if (exists(TC_input0))  { del TC_input0; }
  if (exists(TC_input))   { del TC_input; }
  if (exists(TC_lextr))   { del TC_lextr; }
  if (exists(TC_mask))    { del TC_mask; }
  if (exists(TC_mask2))   { del TC_mask2; }
  if (exists(eig))        { del eig; }
  show vars
} else {

  f.close
  TC_rmax = Image(filename)

  # pb with remaining variables 

  func "Centerlines/CreateSkeletonGui"
  
  th = 0.1
  Skel_Init(&vessels_pdf,th,datasetid)
  Skel_maxrep = TC_rmax
  del TC_rmax
  
  # use maximal response for path
  Skel_datasetdir = datasetdir
  
  Skel_SP_start    = 2  # 0:A, 1:B 2:S 3:E
  Skel_SP_end      = 3  # 0:A, 1:B 2:S 3:E
  
  Skel_path_mode = 1 # 0: use centerlines
                    # 1: use maximal response
  Skel_smooth_paths = 1
  Skel_smooth_coeff = 0.1
  Skel_smooth_data  = 0.01
  Skel_smooth_it    = 10
  
  
  Skel_ShortestPaths()
  Skel_SavePaths()
  Skel_PrintScores()

}

quit
