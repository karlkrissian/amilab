#!/usr/bin/amilab



id = atof($1)

import_vtk

datasetdir=sprint("dataset%02.0f/",id)

i0 = Image(sprint(datasetdir+"image%02.0f.ami",id))

dataset_name = sprint(datasetdir+"cistib/image%02.0f-crop-den-PDF-01.vtk",id)
pdf      = Image (dataset_name)
response = Image(dataset_name+"_response.ami.gz")

#-----------------------------------------------------------
proc ReadPoint( STRING st, NUM x, NUM y, NUM z) {
  f = open(st,"r")
  f.read(x)
  f.read(y)
  f.read(z)
  printn "Point read:"+sprint("%3.2f",x)+\
        sprint(", %3.2f",y)+sprint(", %3.2f",z);
}

#---------------------------------------------------
proc Skel_ReadPoint(NUM vid, NUM ptid, \
                    NUM x, NUM y, NUM z) {
  if (ptid == 0) { ptname="A";}
  if (ptid == 1) { ptname="B";}
  if (ptid == 2) { ptname="S";}
  if (ptid == 3) { ptname="E";}
  if (ptid == 4) { ptname="1";} // starting estimated points
  if (ptid == 5) { ptname="2";}
  vesseldir = sprint( datasetdir+\
                      "vessel%0.0f",vid)
  ReadPoint(vesseldir+"/point"+ptname+".txt",\
            &x,&y,&z)
}

xmin = 10000
xmax = 0
ymin = 10000
ymax = 0
zmin = 10000
zmax = 0

for i=0 to 3 {

  Px1=0; Py1=0; Pz1=0;
  Px2=0; Py2=0; Pz2=0;
  Skel_ReadPoint(i,2, &Px1,&Py1,&Pz1)
  Skel_ReadPoint(i,3, &Px2,&Py2,&Pz2)

  if (Px1>xmax) { xmax=Px1; }
  if (Px1<xmin) { xmin=Px1; }
  if (Py1>ymax) { ymax=Py1; }
  if (Py1<ymin) { ymin=Py1; }
  if (Pz1>zmax) { zmax=Pz1; }
  if (Pz1<zmin) { zmin=Pz1; }

  if (Px2>xmax) { xmax=Px2; }
  if (Px2<xmin) { xmin=Px2; }
  if (Py2>ymax) { ymax=Py2; }
  if (Py2<ymin) { ymin=Py2; }
  if (Pz2>zmax) { zmax=Pz2; }
  if (Pz2<zmin) { zmin=Pz2; }
  
}


# now get a margin (in mm)
margin=4
xmax = xmax+margin
xmin = xmin-margin
ymax = ymax+margin
ymin = ymin-margin
zmax = zmax+margin
zmin = zmin-margin

x_cropmin = pdf.trx
x_cropmax = pdf.trx+(pdf.tx-1)*pdf.vx
y_cropmin = pdf.try
y_cropmax = pdf.try+(pdf.ty-1)*pdf.vy
z_cropmin = pdf.trz
z_cropmax = pdf.trz+(pdf.tz-1)*pdf.vz

if (x_cropmin<xmin) { xmin = x_cropmin; }
if (y_cropmin<ymin) { ymin = y_cropmin; }
if (z_cropmin<zmin) { zmin = z_cropmin; }
if (x_cropmax>xmax) { xmax = x_cropmax; }
if (y_cropmax>ymax) { ymax = y_cropmax; }
if (z_cropmax>zmax) { zmax = z_cropmax; }

xmin = (xmin-i0.trx)/i0.vx
ymin = (ymin-i0.try)/i0.vy
zmin = (zmin-i0.trz)/i0.vz
xmax = (xmax-i0.trx)/i0.vx
ymax = (ymax-i0.try)/i0.vy
zmax = (zmax-i0.trz)/i0.vz

if (xmax>i0.tx-1) { xmax = i0.tx-1; }
if (ymax>i0.ty-1) { ymax = i0.ty-1; }
if (zmax>i0.tz-1) { zmax = i0.tz-1; }

if (xmin<0) { xmin = 0; }
if (ymin<0) { ymin = 0; }
if (zmin<0) { zmin = 0; }

i0.info
printn \
      sprint(" %0.0f ",xmin)+sprint(" %0.0f ",xmax)\
    + sprint(" %0.0f ",ymin)+sprint(" %0.0f ",ymax)\
    + sprint(" %0.0f ",zmin)+sprint(" %0.0f ",zmax)


si0 = i0[xmin:xmax,ymin:ymax,zmin:zmax]
si0.info

printn "si0 "
printn    sprint(" %4.2f",si0.trx)+sprint(" %4.2f",si0.try)+sprint(" %4.2f",si0.trz)\
        + sprint(" %4.2f",si0.trx+(si0.tx-1)*si0.vx) \
        + sprint(" %4.2f",si0.try+(si0.ty-1)*si0.vy) \
        + sprint(" %4.2f",si0.trz+(si0.tz-1)*si0.vz) 
printn "pdf "
printn    sprint(" %4.2f",pdf.trx)+sprint(" %4.2f",pdf.try)+sprint(" %4.2f",pdf.trz)\
        + sprint(" %4.2f",pdf.trx+(pdf.tx-1)*pdf.vx) \
        + sprint(" %4.2f",pdf.try+(pdf.ty-1)*pdf.vy) \
        + sprint(" %4.2f",pdf.trz+(pdf.tz-1)*pdf.vz) 

need_recrop=     (si0.trx<pdf.trx-0.01)||(si0.try<pdf.try-0.01)||(si0.trz<pdf.trz-0.01)\
              || ((si0.trx+(si0.tx-1)*si0.vx)>(pdf.trx+(pdf.tx-1)*pdf.vx+0.01)) \
              || ((si0.try+(si0.ty-1)*si0.vy)>(pdf.try+(pdf.ty-1)*pdf.vy+0.01)) \
              || ((si0.trz+(si0.tz-1)*si0.vz)>(pdf.trz+(pdf.tz-1)*pdf.vz+0.01))

if (need_recrop) {
  printn ""
  printn "****  Recrop needed in "+datasetdir+" !!!"
  printn "Creating new crops "



  # rename previous files
  pdf_name = sprint(datasetdir+"cistib/image%02.0f-crop-den-PDF-01.vtk",id)
  rep_name = pdf_name+"_response.ami.gz"
  cmd = "mv "+pdf_name+" "+pdf_name+".bak"
  sh cmd
  cmd = "mv "+rep_name+" "+rep_name+".bak"
  sh cmd

  // saving new crops
  tmp = (FLOAT) i0
  tmp = 0
  tmp.putimage(pdf)
  del pdf
  pdf_cropped = tmp[si0]
  pdf_cropped.save pdf_name
  del pdf_cropped

  tmp = 0
  tmp.putimage(response)
  del response
  rep_cropped = tmp[si0]
  rep_cropped.save rep_name
  del rep_cropped

} else {
  printn "****  Recrop not needed :-) "
}

quit
