#
#
#

func "Common/ScriptGui"

if (!exists(Lines2D)) {

Class Lines2D  : public ScriptGui \
{
  #----------------------------
  proc ::Init() \
  {
    ::input_name   = "", "input image name"
    ::sigma_min = 0.6, "minimal scale"
    ::sigma_max = 4, "maximal scale"
    ::sigma_nb  = INT(10), "number of scales"
    ::black = UCHAR(1), "detect 1:black or 0:white lines?"
    ::mode = INT(0), "0: Hessian eigenvalues, 1: Contour-based 2: Experimental"
    ::weak_gradients=UCHAR(0), "0: keep maximal Hessian eigenvalue, 1: apply a function based on gradient norm and maximal eigenvalue."
    ::keep_all=UCHAR(0), "if true, save all responses in a 3D image"

    ::use_mask = UCHAR(1), "Use mask image if it exists?"
    ::mask_threshold = 50
    ::close_size = 7
    ::close_step = 0.5
    ::log_scale = UCHAR(1), "if true, logarithmic scale, else linear scale"
  }
  
  #-----------------------------------------------
  proc ::load_input() {
    eval "::input <<= (FLOAT)"+::input_name+";"
    if (::input_name=="Image") {
      ::input_name = "::input"
      ::win.Update(-1)
    }
    ::win.Update(-1)
    if (::input.vdim>1) {
      InfoDialog "Taking second (green) component of multi-channel image."
      ::input <<= ::input[1]
    }
    show ::input
    # reset mask if any
    if (exists(::mask)) { del ::mask; }
  }
  Comments( ::load_input, "Load input image")

  #----------------------------
  proc ::ComputeBackgroundMask() \
  {
    if (!exists(::input)) {
      InfoDialog "Load input image first!"
    } else {
      morph = filters.ContinuousMorphology()
      mask = morph.Close(&::input,::close_size,::close_step)
      ::mask <<= (UCHAR) (mask>::mask_threshold)
    }
    show ::mask
  }
  Comments(::ComputeBackgroundMask,"Computes a mask image of high intensities after morphological greyscale closing")

  #----------------------------
  proc ::ApplyMask() \
  {
    if (exists(::resp_max)&&(exists(::mask))) {
      ::resp_max = ::resp_max*::mask
    }
  }
  Comments(::ApplyMask,"Apply the mask to the result")

  #-----------------------------------------------
  proc ::Run() \
  {
    if (!exists(::input)) {
      ::load_input()
    }
    if (::black) {
      ::input = -::input
    }
    if ::keep_all {
      ::all_responses<<=Image(FLOAT,::input.tx,::input.ty,::sigma_nb)
    } else {
      if (exists(::all_responses)) { del ::all_responses;}
    }
    # force gradient to be weak?
    for n=0 to ::sigma_nb-1 {

      iteration_mess = " Iteration %1%" % n
      SetStatusText( "Run() "+iteration_mess )
      ::current_progress = ((FLOAT)n)/::sigma_nb*100
      SetProgress(::current_progress)

      # Hessian matrix
      sigma = ::sigma_min+(FLOAT)n/(::sigma_nb-1)*(::sigma_max-::sigma_min)
      sigma2 = sigma*sigma
      if (::mode==0) {
        ixx = filter(::input,sigma,2,0,0)
        ixy = filter(::input,sigma,1,1,0)
        iyy = filter(::input,sigma,0,2,0)
        
        Eigen2D("H",ixx,ixy,iyy)
        vep_max = max(-H_Evap1,-H_Evap2)
        vep_max = vep_max*sigma2
        resp = vep_max
        if (::weak_gradients) {
          ng = normgrad(::input,sigma)*sigma
          resp = vep_max*exp(-(ng*ng*4/(vep_max*vep_max+0.01)))
        }
      }
      if (::mode==1) {
        # 1. get vessel direction from Hessian matrix
        ixx = filter(::input,sigma,2,0,0)
        ixy = filter(::input,sigma,1,1,0)
        iyy = filter(::input,sigma,0,2,0)
        Eigen2D("H",ixx,ixy,iyy)
        # H_vep1 is supposeed to be the structure direction, H_vep2 is orthogonal
        # 2. Compute image gradient
        ig = gradient(::input,sigma)*sigma
        # get gradient at displaced positions
        rad = sigma
        pos3D = SpacePos(::input)
        # pos is 3D ...
        pos = Image(FLOAT,::input.tx,::input.ty,1,2)
        pos.SetComponent(0,pos3D[0])
        pos.SetComponent(1,pos3D[1])
        rep1 = -ig(pos+H_Evep2*rad)*H_Evep2
        rep2 =  ig(pos-H_Evep2*rad)*H_Evep2
        resp = -max(-rep1,-rep2)
        delvars "H_E*"
      }

      if (::mode==2) {
        # 1. get vessel direction from Hessian matrix
        # does filter normalize??
        # H matrix
        hxx = filter(::input,sigma,2,0,0)
        hxy = filter(::input,sigma,1,1,0)
        hyy = filter(::input,sigma,0,2,0)
        # G matrix
        gx = filter(::input,sigma,1,0,0)
        gy = filter(::input,sigma,0,1,0)

        # H^2 matrix
        h2xx = hxx*hxx+hxy*hxy
        h2xy = hxx*hxy+hxy*hyy
        h2yy = hxy*hxy+hyy*hyy


        # G^2 matrix
        g2xx = gx*gx
        g2xy = gx*gy
        g2yy = gy*gy
        
        # new matrix
        s2 = (sigma/2)*(sigma/2)
        #s2 = sigma*sigma
        Mxx = s2*h2xx-g2xx
        Mxy = s2*h2xy-g2xy
        Myy = s2*h2yy-g2yy

        Eigen2D("M",Mxx,Mxy,Myy)
        resp = max(M_Evap1,M_Evap2)
        delvars "M_*"
      }

      if ::keep_all {
        ::all_responses.putimage(resp,0,0,n)
      }
      if (!exists(::resp_max)) {
        ::resp_max <<= resp
      } else {
        
        ::resp_max = max(::resp_max, resp)
      }

      ## equation to solve: X^2-(ixx+iyy)X+ixx*iyy-ixy^2
      #B = (ixx+iyy)/2
      #C = ixx*iyy-ixy*ixy
      
      ## X^2-2BX+C --> (X-B)^2-(B^2-C) -->  B^2-C always >0 --> B+/- sqrt(B^2-C)
      
      #tmp = sqrt(B*B-C)
      #lambda1 = B+tmp
      #lambda2 = B-tmp
    
      #lambda1 = lambda1*sigma2
    
      #ng = normgrad(::input,sigma)*sigma
      #lambda1 = lambda1*exp(-(ng*ng*4/(lambda1+0.01)/(lambda1+0.01)))
      #if (!exists(lambda_max)) {
        #::resp_max = lambda1
      #} else {
        #::resp_max = max(lambda1,::resp_max)
      #}
    }
    # end for

    SetProgress(0)  

    if (::black) {
      ::input = -::input
    }
  }

  #----------------------------
  proc ::Display() {
    show ::input
    if (exists(::resp_max)) {
      show ::resp_max
      ::resp_max_draw.update()
      ::input_draw.compare(&::resp_max_draw)
    } else {
      InfoDialog "The algorithm has not been run yet ..."
    }
  }

  #----------------------------
  proc ::Gui() \
  {
    ::win = ParamPanel("Lines2D")
    ::win.BeginBook()
      ::win.AddPage("IO")
        ::win.BeginBoxPanel("Input Image")
          # set the input image
          ::win.BeginHorizontal()
            ::win.AddImageChoice( &::input_name, "")
            ::win.AddButton("Load",::load_input)
            #::win.AddButton("Ref",::ref_input)
          ::win.EndHorizontal()
        ::win.EndBoxPanel()

      ::win.AddPage("Mask")
        ::win.AddBoolean(&::use_mask,"Use Mask")
        ::win.AddFloat(&::mask_threshold,"threshold",0,255)
        ::win.AddFloat(&::close_size,"Closing size",0,20)
        ::win.AddButton("Background Mask",&::ComputeBackgroundMask)
        ::win.AddButton("Apply Mask",&::ApplyMask)


      ::win.AddPage("Params")
        ::modeid = ::win.AddEnum( &::mode)
          ::win.AddEnumChoice(::modeid,"Hessian")
          ::win.AddEnumChoice(::modeid,"Contours")
          ::win.AddEnumChoice(::modeid,"Exper")


        ::win.BeginBoxPanel("Scales")
          ::win.AddFloat(&::sigma_min,"min",0.1,3)
          ::win.AddFloat(&::sigma_max,"max",0.1,10)
          ::win.AddInt(  &::sigma_nb ,"nb",1,20)
          ::win.AddBoolean(&::log_scale,"Log")
          ::win.AddBoolean(&::black,"Black lines")
        ::win.EndBoxPanel()

        ::win.BeginHorizontal()
          ::win.AddBoolean(&::weak_gradients,"Low grad.")
          ::win.AddBoolean(&::keep_all,"Store resp.")
        ::win.EndHorizontal()

        # Run
        ::win.BeginHorizontal()
          ::AddBitmapButton(&::win, &::icons._Apply,  32, "Run")
          ::win.SetPositionProp(-1,0)
          ::AddBitmapButton(&::win, &::icons._Show,   32, "Display")
          ::win.SetPositionProp(-1,0)
        ::win.EndHorizontal()
        #::win.AddButton("Run",::Run)
        #::win.AddButton("Display",::Display)
    ::win.EndBook()
    ::AddStandardButtons(&::win)

    ::win.Update(-1)
    ::win.Display()
  }

  ::Init()
} 
# end Class Lines2D
}

#----------------------------
# Main
#----------------------------

if (!exists(lines2D)) {

  Lines2D lines2D
  lines2D->Gui()

} else {
  InfoDialog "The script seems to be already loaded."
}
