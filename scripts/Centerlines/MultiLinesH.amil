
i           = Image $1
IntensityTh = atof($2)
ExtremaTh   = atof($3)

HessianMatrix(i,1)

del i_Hvap1
del i_Hvep1

g = gradient(i,0.8)

m = (UCHAR) ((i>IntensityTh)*(i_Hvap2<0)*255)
del i_Hvap2
del i_Hvap3

r = 1
print "Compute for radius = "; print r; print "\n"
rep   = CircleInt(   g,i_Hvep2,i_Hvep3,r,m)
rep1  = CircleIntExc(g,i_Hvep2,i_Hvep3,r,m)
repm  = rep
rep1m = rep1
rad   = (rep>0)*r


for n=1 to 4 {
  r = r+1
  print "Compute for radius = "; print r; print "\n"
  rep   = CircleInt(   g,i_Hvep2,i_Hvep3,r,m)
  rep1  = CircleIntExc(g,i_Hvep2,i_Hvep3,r,m)

  rep1m = rep1*(rep>repm) + rep1m*(repm>=rep)
  rad   = (rep>repm)*r    + (repm>=rep)*rad
  repm  = rep *(rep>repm) + repm *(repm>=rep)
}


del g

print "Compute local extrema \n"
e  = LocalExtrema(repm,i_Hvep2,i_Hvep3,m)

e.save     "extrema.ami.gz"
rep1m.save "response_exc.ami.gz"

print "Take into account the excentricity \n"
e2 = e*((e*1.5)>rep1m)

print "Thresholds and creates lines \n"
b   = (UCHAR) ((e2>ExtremaTh)*255)
bsk = algorithms.ami_Thinning.Skeleton(&b,&e2,0,1000)
l   = Skeleton2lines(bsk)
l1  = SmoothLines(l)

l1.save "multiscale-lines.vtk"
