if (!exists(itkVesselnessClass)) {
  ami_import->ITK()
  
  Class itkVesselnessClass {
    
    ::class_name ="global::itkVesselnessClass"
    ::itk=&global::itk
	
    proc ::Init() {
      
      ::input_name   = "","Name of the input image variable"
      ::out = "::result", "Name of the resulting image variable"
      ::sigmaMin = 0.5, "Minimum sigma value"
      ::sigmaMax = 4, "Maximum sigma value"
      ::scalesNumber = INT(10), "Number of scale levels"
      ::dim = INT(1), "The dimension of the image"

      ::vesselness_filename = "VesselnessResult"
      ::result_filename_ext = ".ami.gz"
      ::v = UCHAR(0)

      #::Gui()
    }
    
    proc ::Close() \
    {
      if(exists(::win)){
        ::win.HidePanel
      }
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
    proc ::CloseAll() {
      eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
      ::Close
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    proc ::Load_input() {

      eval "::input <<= (FLOAT)"+::input_name+";"
        if (::input_name=="Image") {
          ::input_name = "::input"
          ::win.Update(-1)
        }
      
      show ::input
    }
    
    proc ::set_input(IMAGE im) \
    {
      ::input <<= im
    }
    
    proc ::Run() {
      if (::dim==0) {
        ::result <<= ::itk->MultiScaleVesselnessFilter2D(::input,::sigmaMin,::sigmaMax,::scalesNumber)
        ::v = 1
        
      } else {
        ::result <<= ::itk->MultiScaleVesselnessFilter3D(::input,::sigmaMin,::sigmaMax,::scalesNumber)
        ::v = 1
      }
      #::input_draw.compare(vesselness_draw)
    }
    
    proc ::Display() {
    
      show ::input
      eval ::out+"<<=::result;"
      
      eval "show "+::out+";"
    
    }
    
    proc ::Save() {
      filename=::vesselness_filename-".gz"-".ami";
      if (::v) {
        filename = filename + sprint("_sigmaMin%0.1f",::sigmaMin) \
                            + sprint("_sigmaMin%0.1f",::sigmaMax) \
                            + sprint("_scalesNumber%0.1f",::scalesNumber) 
      } else {
        print "First you must create the image.\n"
      }
      filename = filename + ::result_filename_ext
      print "saving file "+filename+"\n"
      ::result.save filename
    }
    
    proc ::SetParentPanel(OBJECT pp) \
    {
      ::parent_panel = &pp
    }

    proc ::Gui() {
      import = &global::ami_import;
      if (exists(::parent_panel)) {
        ::win = import->ParamPanel("itkVesselness",&::parent_panel)
      } else {
        ::win = import->ParamPanel("itkVesselness")
      }
      ::win.BeginBook()
      
        ::win.AddPage("Init")
        
        ::win.BeginBoxPanel("Input Image")
          # set the input image
            ::win.BeginHorizontal
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::Load_input)
            ::win.EndHorizontal
            ::win.BeginHorizontal
              dim_id = ::win.AddEnum( &::dim,"Dimension")
              ::win.AddEnumChoice(dim_id, "2D")
              ::win.AddEnumChoice(dim_id, "3D")
            ::win.EndHorizontal
        ::win.EndBoxPanel
        
        ::win.AddPage("Param")
        
        ::win.BeginBoxPanel("Vesselness Param")
          ::win.AddFloat( &::sigmaMin,"sigmaMin",0.01,10)
          ::win.AddFloat( &::sigmaMax,"sigmaMax",0.01,10)
          ::win.AddInt( &::scalesNumber,"Number of Scales",1,20)
        ::win.EndBoxPanel
        
        ::win.BeginHorizontal
          ::win.AddButton("Run",::Run)
          ::win.AddButton("Display",::Display)
          ::win.AddButton("Save",::Save)
        ::win.EndHorizontal  
        
      ::win.EndBook
      
      ::win.BeginHorizontal
        ::win.AddButton("Close", ::Close)
        ::win.AddButton("Close All", ::CloseAll)
      ::win.EndHorizontal
      
      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
    }
    
    ::Init
  }
# Class itkVesselnessClass
}
# end if (!exists(itkVesselnessClass))

#----------------------------
# Main
#----------------------------

if (!exists(itkvs)) {

  itkVesselnessClass itkvs
  
  if (argc>=1) {
    printn "reading image"
    input = Image($1)
    itkvs->image_name = "input"
    itkvs->win.Update(-1)
  }

} else {
  InfoDialog "The script seems to be already loaded."
}
