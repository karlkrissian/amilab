

i = Image $1
threshold = 50

// create a mask of high enough intensities
m = (UCHAR) ((i>threshold)*255)

sigma = 1.2
printn "computing sigma 1.2"

// 1. compute normalized gradient (we don't care about the gradient norm...)
ig = gradient(i,sigma)
ig = ig/norm(ig)
div_ig = OutFlux(ig)
div_ig = -div_ig*(m>0)
res1 = div_ig

sigma = 2
printn "computing sigma 2"

// 1. compute normalized gradient (we don't care about the gradient norm...)
ig = gradient(i,sigma)
ig = ig/norm(ig)
div_ig = OutFlux(ig)
div_ig = -div_ig*(m>0)
res2 = div_ig


show i
i_draw.compare(res1)
i_draw.compare(res2)
