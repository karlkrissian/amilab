#
# Script to compute probability of belonging to a structure
# based on an intensity mapping of the local statistics
# of the image intensity (local mean and local standard deviation)
#
func "Common/ScriptGui"


if (!exists(CreateProbabilityClass)) {

  Class CreateProbabilityClass  : public ScriptGui\
  {
    
    #--------------------------
    proc ::Init() \
    {
      ::input_name  = ""
      ::localstats_winsize  = INT(1)
      
      ::lsd_erosion         = 0

      ::localmean_low       = 1050
      ::localmean_high      = 1600
      ::localmean_smoothing = 5
      ::localsd_high        = 30
      #::Gui()
    }

    #--------------------------
    proc ::LoadInput() \
    {
      printn "evaluation of --> ::input <<="+::input_name+";"
      eval "::input <<="+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
      ::win.Update(-1)
      if (exists(::input_draw)) { del ::input_draw; }
      show ::input
    }

    #--------------------------
    proc ::Apply() \
    {
      #if (exists(::win)){
        #::LoadInput()
      #}

      # compute local mean intensity
      ::lm <<= localmean2(::input,::localstats_winsize)

      # Create local mean intensity map
      # will map intensity from 0 to 10000
      imap = Image(FLOAT,10000,1,1)
      imap = Xpos(imap)
      imap = (imap>=::localmean_low)*(imap<=::localmean_high)
      # smooth the mapping
      imap = filter(imap,::localmean_smoothing,0,-1,-1)
      # apply
      ::lm_map <<= imap(::lm)

      # Compute local standard deviations
      ::lsd <<= localSD2(::input,::lm,::localstats_winsize)

      if (::lsd_erosion>0.01) {
        morph = filters.ContinuousMorphology()
#        ::lsd = EDPerode(::lsd,::lsd_erosion,0.25)
        ::lsd = morph.Erode(::lsd,::lsd_erosion,0.25)
      }

      # map with a "Gaussian"
      ::lsd_map <<= exp(-(::lsd*::lsd)/ \
                                (::localsd_high*::localsd_high))

      # now combine both
      ::prob <<= ::lm_map*::lsd_map
      #eval "global::"+::prob+" = ::lm_map*::lsd_map;"

    }
    
    #--------------------------
    proc ::set_input(IMAGE im) {
      ::input <<= im
    }

    #--------------------------
    proc ::Gui() \
    {
      if (exists(::parent_panel)) {
        ::win = ParamPanel("Local Stats",&::parent_panel)
      } else {
        ::win = ParamPanel("Local Stats")
      }
          
      ::win.BeginBook()
      
        ::win.AddPage("Init")
      
          ::win.BeginBoxPanel("Input")
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::LoadInput)
            ::win.EndHorizontal()
          ::win.EndBoxPanel()
      
        ::win.AddPage("Param")
        
          #::win.AddString( &::output_name,"Output")
    
          ::win.AddInt( &::localstats_winsize,  "::localstats_winsize", 1,10)

          ::win.AddFloat( &::lsd_erosion,  "::lsd_erosion", 0,5)
    
          ::win.BeginBoxPanel("local mean range")
            ::win.AddFloat( &::localmean_low,  "::localmean_low", 0,3000)
            ::win.AddFloat( &::localmean_high,  "::localmean_high", 0,3000)
            ::win.AddFloat( &::localmean_smoothing,  "::localmean_smoothing", 0,100)
          ::win.EndBoxPanel
    
          ::win.BeginBoxPanel("local stand. dev. parameter")
            ::win.AddFloat( &::localsd_high,  "::localsd_high", 0,3000)
          ::win.EndBoxPanel
    
          ::win.AddButton("Apply",::Apply)
      ::win.EndBook

      ::AddStandardButtons(&::win)

      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::win.Update(-1)
    }
    ::Init()
  }
  # end Class


} 
# end if (!exists(CreateProbabilityClass)) 

