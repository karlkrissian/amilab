#!/usr/local/bin/amilab
#
# Automatic Creation of the centerlines
#
#

# get the parameters
#
# 1. configuration value 0,1,2,3: presets the different directories for the input images and scripts
# 2. dataset number
#
#

if (argc>=4) {
  config  = atof($1)
  center  = atof($2)
  number  = atof($3)
  CE_mode = atof($4)
  emptyargs
} else {
  printn "Usage:"
  printn " arguments:"
  printn "   1. local configuration (directories, ...): 0,1,2 or 3 for karl laptop, karl destop, sara XP, sara linux"
  printn "   2. dataset center 0,1 or 2"
  printn "   3. dataset number"
  printn "   4. mode 0: use local stats mean and SD 1: limit intensity range"
  quit
}

func "/home/karl/projects/svnserver/CarotidChallenge09/trunk/scripts/CarotidChallengeMiccai09/RunExperimentsGui.amil"

CE_datatype   = 0 # training
CE_config     = config
CE_datacenter = center
CE_datanumber = number

# 1. input of Vesselness is only based on local means
# 2. input of Vesselness is  based on local means and local SD

# Load the configuration
CarotidExperiments_LoadConfig

# Read input data
CarotidExperiments_ReadData()
printn "** ReadData done"

# Read Ground Truth (not compulsory)
CarotidExperiments_ReadGT
printn "** ReadGT done"

# Crop the data
CarotidExperiments_CropData
del CE_input
printn "** CropData done"

# Run filtering (not compulsory)
CarotidExperiments_ReduceNoise
  NLM_FastFilter
  CC_denoised = NLM_res
  NLM_Close

# Run the vessel probability
CarotidExperiments_LocalStats
  CP_input_name  = "CC_denoised"
  CP_output_name = "CC_prob"
  #CP_input_name = "CE_input_cropped"
  CP_localstats_winsize  = 1
  CP_localmean_low       = 1050
  CP_localmean_high      = 1600
  CP_localmean_smoothing = 5
  CP_localsd_high        = 20
  CP_Apply
  CC_lm_map = CP_lm_map
  CP_Close
  # save the result to a file here ...
  datanumber_str = "%1%" % CE_datacenter 
  datanumber_str = datanumber_str + "%02.0f" % CE_datanumber
  result_dir = CE_results_dir+"/challenge"+ datanumber_str 
  CC_prob.save result_dir + "/CC_prob.ami.gz"


# Run the multiscale vesselness
CarotidExperiments_Vesselness
  if (CE_mode==1) {
    V_input = CC_denoised
    V_input= (V_input<1000)*1000+(V_input>=1000)*V_input
    V_input= (V_input>1600)*1600+(V_input<=1600)*V_input
    # check if file has already been saved ???
    RML_input_name = "V_input"
  } else {
    # check if file has already been saved ???
    RML_input_name = "CC_prob"
  }
  CE_mask = (UCHAR) ((CC_prob>0.01)*255)
  RML_mask_name = "CE_mask"
  RML_radmin = 0.3
  RML_radmax = 6
  RML_numrad = 7
  RML_win.Update(-1)
  RML_CB_Filter
  # save the result to a file here ...
  if (CE_mode==1) {
    # normalize the result
    RML_result = RML_result/max(RML_result)
    RML_result_name = result_dir + "/RML_result_mode1.ami.gz"
  } else {
    RML_result_name = result_dir + "/RML_result.ami.gz"
  }
  printn "Writing "+RML_result_name
  RML_result.save RML_result_name
  CC_vesselness = RML_result
  RML_Close

printn "Creating Paths"
# Detect the centerlines
# add possibility to cross 'vessel-likely' intensities
CC_vesselness = CC_vesselness + CC_lm_map*0.1
CarotidExperiments_Path1
  SP_input_name = "CE_input_cropped"
  SP_speed_name = "CC_vesselness"
  SP_Run
  line1 = SP_path
  line1._save(result_dir+"/line1.vtk")

CarotidExperiments_Path2
  SP_input_name = "CE_input_cropped"
  SP_speed_name = "CC_vesselness"
  SP_Run
  line2 = SP_path
  line2._save(result_dir+"/line2.vtk")

# View the results
  show CE_GTiso
  CE_GTiso_draw += line1
  CE_GTiso_draw += line2

  func "ShortCuts/ShortCuts.amil"
# Reconstruct a thin tube around the lines
  # reconstruction of the first line
  tube_size = 1
  radii_im = CE_input_cropped*0 +tube_size
  radii_pts1 = line1.GetIntensities(radii_im)
  recons1 = LineRecons(line1,radii_im,radii_pts1)
  # reconstruction of the second line
  radii_pts2 = line2.GetIntensities(radii_im)
  recons2 = LineRecons(line2,radii_im,radii_pts2)
  recons = max(recons1,recons2)
  del recons1
  del resons2
  recons.save result_dir+"/tube_recons.ami.gz"
  # create isocontour of reconstructed vessel
