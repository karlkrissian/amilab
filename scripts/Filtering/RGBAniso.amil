
proc RGBAniso( IMAGE input, NUM _sigma, NUM _th, NUM _it) \
{
  _inr = input[0]
  _ing = input[1]
  _inb = input[2]

  _inrr = algorithms.ami_AnisoGS.Run(_inr,_sigma,_th,0.01,_it)
  _ingr = algorithms.ami_AnisoGS.Run(_ing,_sigma,_th,0.01,_it)
  _inbr = algorithms.ami_AnisoGS.Run(_inb,_sigma,_th,0.01,_it)
  
  out = input
  out.SetComponent( 0, _inrr)
  out.SetComponent( 1, _ingr)
  out.SetComponent( 2, _inbr)
  return=&out
}


proc Float2Uchar( IMAGE im) {
  im = (im>0)*(im<255)*im + (im>=255)*255
}

proc RGBAddNoise( IMAGE in, IMAGE out, NUM _sd) {

  print "*\n"

  _inr = in[0]
  _ing = in[1]
  _inb = in[2]

  print "*\n"

  _inrr = algorithms.ami_AddImageNoise.AddGaussianNoise(&_inr,0,_sd)
  _ingr = algorithms.ami_AddImageNoise.AddGaussianNoise(&_ing,0,_sd)
  _inbr = algorithms.ami_AddImageNoise.AddGaussianNoise(&_inb,0,_sd)
  
  Float2Uchar(&_inrr)
  Float2Uchar(&_ingr)
  Float2Uchar(&_inbr)
  out.SetComponent( 0, _inrr)
  out.SetComponent( 1, _ingr)
  out.SetComponent( 2, _inbr)

}
