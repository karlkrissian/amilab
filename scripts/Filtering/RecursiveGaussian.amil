if (!exists(itkRecursiveGaussianClass)) {
  ami_import->ITK()
  
  Class itkRecursiveGaussianClass {
    
    ::itk=&global::itk
	
    proc ::Init() {
      
      ::class_name="global::itkRecursiveGaussianClass"
      
      ::input_name   = "","Name of the input image variable"
      ::sigma = 1, "Set sigma, measured in world coordinates, of the Gaussian kernel. The default is 1.0"
      ::normAcrossScale = INT(1), "Set the flag for normalizing the gaussian over scale space"
      ::order = INT(0), "Set the order of the Gaussian to convolve with. "
      ::dim = INT(1), "The dimension of the image"

      ::gaussian_filename = "GaussianResult"
      ::result_filename_ext = ".ami.gz"
      ::g = UCHAR(0)
          
      ::Gui()
    }
    
    proc ::Close() \
    {
      ::win.Hide
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
    proc ::CloseAll() \
    {
      ::Close
      if (exists(itkRecursiveGaussianClass)) { del itkRecursiveGaussianClass; }
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    proc ::Load_input() {

      eval "::input <<= (FLOAT)"+::input_name+";"
        if (::input_name=="Image") {
          ::input_name = "::input"
          ::win.update
        }
      
      show ::input
    }
    
    proc ::Run() {
      if (::dim==0) {
        ::gaussian = ::itk->RecursiveGaussianImageFilter2D(::input,::sigma,::normAcrossScale,::order)
        ::g = 1
        
      } else {
        ::gaussian = ::itk->RecursiveGaussianImageFilter3D(::input,::sigma,::normAcrossScale,::order)
        ::g = 1
      }
      show ::input
      show ::gaussian
      ::input_draw.compare(::gaussian_draw)
    }
    
    proc ::Save() {
      filename=::vesselness_filename-".gz"-".ami";
      if (::v) {
        filename = filename + sprint("_sigma%0.1f",::sigma) \
                            + sprint("_order%0.0f",::order)
      } else {
        print "First you must create the image.\n"
      }
      filename = filename + ::result_filename_ext
      print "saving file "+filename+"\n"
      ::gaussian.save filename
    }
    

    proc ::Gui() {
      ::win = ParamWin("Recursive Gaussian")
      ::win.BeginBook
      
        ::win.AddPage("Init")
        
        ::win.BeginBoxPanel("Input Image")
          # set the input image
            ::win.BeginHorizontal
              ::win.AddImageChoice(::input_name, "")
              ::win.AddButton("Load",::Load_input)
            ::win.EndHorizontal
            ::win.BeginHorizontal
              dim_id = ::win.AddEnum(::dim,"Dimension")
              ::win.AddEnumChoice(dim_id, "2D")
              ::win.AddEnumChoice(dim_id, "3D")
            ::win.EndHorizontal
        ::win.EndBoxPanel
        
        ::win.AddPage("Param")
        
        ::win.BeginBoxPanel("Vesselness Param")
          ::win.AddFloat(::sigma,"Sigma",0.01,10)
          nas_id = ::win.AddEnum(::normAcrossScale,"Normalize")
          ::win.AddEnumChoice(nas_id,"ON")
          ::win.AddEnumChoice(nas_id,"OFF")
          order_id = ::win.AddEnum(::order,"Order")
          ::win.AddEnumChoice(order_id,"Zero Order")
          ::win.AddEnumChoice(order_id,"First Order")
          ::win.AddEnumChoice(order_id,"Second Order")
        ::win.EndBoxPanel
        
        ::win.AddPage("Run")
        
        ::win.BeginBoxPanel("Processing")
          ::win.AddButton("Run", ::Run)
        ::win.EndBoxPanel
        
        ::win.AddPage("Save")
        
        ::win.BeginBoxPanel("Result")
          ::win.AddButton("Save", ::Save)
        ::win.EndBoxPanel
        
      ::win.EndBook
      
      ::win.BeginHorizontal
        ::win.AddButton("Close", ::Close)
        ::win.AddButton("Close All", ::CloseAll)
      ::win.EndHorizontal
      
      ::win.update
      ::win.Display
    }
    
    ::Init
  }
	# Class itkRecursiveGaussianClass
}
# end if (!exists(itkRecursiveGaussianClass))

#----------------------------
# Main
#----------------------------

if (!exists(itkrg)) {

  itkRecursiveGaussianClass itkrg
  
  if (argc>=1) {
    printn "reading image"
    input = Image($1)
    itkrg->image_name = "input"
    itkrg->win.update
  }

} else {
  InfoDialog "The script seems to be already loaded."
}
