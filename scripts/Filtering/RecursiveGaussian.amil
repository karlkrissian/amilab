if (!exists(RG_defined)) {
  RG_defined=1
	import_itk
	
	proc RG_init() {
		global_new
		
		RG_input_name   = "","Name of the input image variable"
		RG_sigma = 1, "Set sigma, measured in world coordinates, of the Gaussian kernel. The default is 1.0"
		RG_normAcrossScale = INT(1), "Set the flag for normalizing the gaussian over scale space"
		RG_order = INT(0), "Set the order of the Gaussian to convolve with. "
    RG_dim = INT(1), "The dimension of the image"

		RG_gaussian_filename = "GaussianResult"
    RG_result_filename_ext = ".ami.gz"
		RG_g = UCHAR(0)
				
		RG_Gui()
	}
	
	proc RG_Close() \
  {
    RG_win.Hide
    delvars "RG_*_draw"
    delvars "RG_*"
  }
  RG_Close.Comments("Close current script and delete its variables")
	
	proc RG_load_input() {

		eval "global::RG_input <<= (FLOAT)"+RG_input_name+";"
			if (RG_input_name=="Image") {
				RG_input_name = "RG_input"
				RG_win.update
			}
		
    show RG_input
  }
	
	proc RG_Run() {
		if (RG_dim==0) {
			global::RG_gaussian = itkRecursiveGaussianImageFilter2D(RG_input,RG_sigma,RG_normAcrossScale,RG_order)
			RG_g = 1
			
		} else {
			global::RG_gaussian = itkRecursiveGaussianImageFilter3D(RG_input,RG_sigma,RG_normAcrossScale,RG_order)
			RG_g = 1
		}
		show RG_input
		show RG_gaussian
		RG_input_draw.compare(RG_gaussian_draw)
	}
	
	proc RG_Save() {
		filename=RG_vesselness_filename-".gz"-".ami";
    if (RG_v) {
      filename = filename + sprint("_sigma%0.1f",RG_sigma) \
                          + sprint("_order%0.0f",RG_order)
    } else {
			print "First you must create the image.\n"
		}
    filename = filename + RG_result_filename_ext
    print "saving file "+filename+"\n"
    RG_gaussian.save filename
  }
	

	proc RG_Gui() {
		global::RG_win = ParamWin("Recursive Gaussian")
    RG_win.BeginBook
		
			RG_win.AddPage("Init")
			
			RG_win.BeginBoxPanel("Input Image")
        # set the input image
          RG_win.BeginHorizontal
            RG_win.AddImageChoice(RG_input_name, "")
            RG_win.AddButton("Load",RG_load_input)
          RG_win.EndHorizontal
					RG_win.BeginHorizontal
						dim_id = RG_win.AddEnum(RG_dim,"Dimension")
						RG_win.AddEnumChoice(dim_id, "2D")
						RG_win.AddEnumChoice(dim_id, "3D")
					RG_win.EndHorizontal
			RG_win.EndBoxPanel
			
			RG_win.AddPage("Param")
			
			RG_win.BeginBoxPanel("Vesselness Param")
				RG_win.AddFloat(RG_sigma,"Sigma",0.01,10)
        nas_id = RG_win.AddEnum(RG_normAcrossScale,"Normalize")
        RG_win.AddEnumChoice(nas_id,"ON")
        RG_win.AddEnumChoice(nas_id,"OFF")
        order_id = RG_win.AddEnum(RG_order,"Order")
        RG_win.AddEnumChoice(order_id,"Zero Order")
        RG_win.AddEnumChoice(order_id,"First Order")
        RG_win.AddEnumChoice(order_id,"Second Order")
			RG_win.EndBoxPanel
			
			RG_win.AddPage("Run")
			
			RG_win.BeginBoxPanel("Processing")
				RG_win.AddButton("Run", RG_Run)
			RG_win.EndBoxPanel
			
			RG_win.AddPage("Save")
			
			RG_win.BeginBoxPanel("Result")
				RG_win.AddButton("Save", RG_Save)
			RG_win.EndBoxPanel
			
		RG_win.EndBook
		
		RG_win.AddButton("Close",RG_Close)
		
		RG_win.update
    RG_win.Display
	}
	
	RG_init
	
}
# end if (!RG_defined) 