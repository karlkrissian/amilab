#!/usr/bin/amilab

#
# Noise Reducing Anisotropic Diffusion
#
# Based on the paper of Yu and Acton: Speckle Reducing Anisotropic Diffusion TIP 2002
# and
# Krissian and Aja-Fernandez TIP 2009
#

# call 
# NRAD_CreateParams( IMAGE)
# and
# NRAD_CreateWindow()
#
# result in NRAD_res
#
# Style Conventions:
#   all variables and functions will start with NRAD_
#   function variables will start with an uppercase character after
#   other variables will start with a lowercase character
#
# NRAD_resultname = $2

if (exists(NRAD_Init)) {
  printn "NRAD script already loaded, close it first"
} else {

  #------------------------------------
  proc NRAD_Init() \
  {
    global_new
  
      NRAD_input_name = ""
      # suggested 1/6 in 3D and 1/4 in 2D
      NRAD_dt   = 1.0/6.0
      NRAD_t    = 1.0

      # 0: Lee, 1: Kuan, 2: Additive, 3: MRI
      NRAD_scalar_mode = INT(3)

      # 0: Grad, 1: MRI,  2:MRI_NEW 
      NRAD_matrix_mode = INT(1)

      NRAD_neighborhood = INT(1)

      NRAD_sigma = 0.7
      # Local Structure 0: princ. curv 1: struct tensor
      NRAD_local_struct = INT(1)
      # Eigenvalues mode 0: SUM 1: MAX
      NRAD_eigen_mode = INT(0)

      # 0: scalar diffusion, 1: matrix diffusion equation
      NRAD_equation_type = INT(0)

      # Scheme, 0: explicit 1: semi-implicit
      NRAD_scheme = INT(1)
  
      NRAD_CreateWindow()
      # NRAD_ROI 
  }
  
  #------------------------------------
  proc NRAD_Close() {
    NRAD_win.Hide
    delvars "NRAD_*_draw"
    delvars "NRAD_*"
  }
  
  #------------------------------------
  proc NRAD_load_input() {
    if (NRAD_input_name=="Image") {
      # read image using browser
      global::NRAD_input << Image
      NRAD_input_name = "NRAD_input"
      NRAD_win.update
    } else {
      eval "global::NRAD_input <<="+NRAD_input_name+";"
    }
  }

  #------------------------------------
  proc NRAD_SetGroundTruth( IMAGE gt, NUM sigma) {
    global_new
  
    NRAD_groundtruth = gt
    NRAD_noisesigma  = sigma
  }
  
  #------------------------------------
  proc NRAD_ComputeMSE( IMAGE res) {
    res1=res*res-2*NRAD_noisesigma*NRAD_noisesigma
    res1 = sqrt(res1*(res1>0))
    printn sprint("MSE %3.2f \n",mean((res1-NRAD_groundtruth)*(res1-NRAD_groundtruth)))
  
    res1=res*res-2*NRAD_noisesigma*NRAD_noisesigma
    res1 = sqrt(res1*(res1>0))
    printn sprint("MSE %3.2f (I>0) \n",mean[NRAD_groundtruth>0]((res1-NRAD_groundtruth)*(res1-NRAD_groundtruth)))
  }
  
  #------------------------------------
  proc NRAD_ReloadInput() \
  {
    if (exists(NRAD_input)) {
      delvars "NRAD_*_draw"
      del NRAD_roi
      del NRAD_imbox
    }
    NRAD_load_input
    NRAD_Display()
  }
  
  #------------------------------------
  proc NRAD_GetRoi() \
  {
    if (!exists(NRAD_input)) {
      NRAD_load_input
      NRAD_Display()
    }
    if (exists(NRAD_input_draw)) {
      global::NRAD_roi <<= NRAD_input[NRAD_input_draw]
    }
    NRAD_Display()
  }
  
  #------------------------------------
  proc NRAD_FilterFlux() \
  {
    if (!exists(NRAD_input)) {
      NRAD_load_input
    }
    numit = NRAD_t/NRAD_dt
    local::input1 = NRAD_input*NRAD_input
  
    # sigma = 0.7
    # threshold = 1 // not used
    # data attachment = 0
    AnisoGS.init(input1,NRAD_sigma,1,0)
    AnisoGS.Setneighborhood(NRAD_neighborhood)
    AnisoGS.Setdt(NRAD_dt)
    # diffusion coefficient in minimal and maximal curvature directions
    AnisoGS.setcoeff(0.5,0.01)
  
    if (NRAD_matrix_mode==1) {
      # set Rician Noise Reducing Anisotropic Diffusion and the ROI
      AnisoGS.SetRNRADROI(NRAD_roi)
    }
    if (NRAD_matrix_mode==2) {
      # set Rician Noise Reducing Anisotropic Diffusion and the ROI
      AnisoGS.SetRNRADROI_NEW(NRAD_roi)
    }
  
    AnisoGS.SetLocalStruct(NRAD_local_struct)
    AnisoGS.SetEigenMode(  NRAD_eigen_mode)
  
    # process iterations
    NRAD_res0 = AnisoGS.GetOutput
    global::NRAD_res = sqrt(NRAD_res0)
  #  show NRAD_res
  #  NRAD_input_draw.compare(NRAD_res)
    SetProgress(0)
    InitTime
    for k=1 to numit {
      AnisoGS.iterate
      NRAD_res0 = AnisoGS.GetOutput
      NRAD_res0 = NRAD_res0*(NRAD_res0>0)
      NRAD_res = sqrt(NRAD_res0)
      if (exists(NRAD_groundtruth)) {
        ComputeMSE(NRAD_res);
      }
      SetProgress(k/numit*100)
      show NRAD_res
      ProcessXEvents(50)
    }
    EndTime
  
  //  AnisoGS.end
  //  hide NRAD_res
  }
  
  #------------------------------------
  proc NRAD_Filter() {
    if (!exists(NRAD_input)) {
      NRAD_load_input
    }
    if (!exists(NRAD_roi)) {
      InfoDialog "Region of Interest not selected taking the full image by default"
      NRAD_roi = NRAD_input
    }

    if (NRAD_equation_type==1) {
      NRAD_FilterFlux()
    } else {
      numit = NRAD_t/NRAD_dt
      if (NRAD_scalar_mode==3) {
          printn "running on squared image"
          local::input1 = NRAD_input*NRAD_input
          global::NRAD_res = AnisoNRAD(input1,NRAD_scalar_mode,\
                      NRAD_dt,numit,NRAD_neighborhood,NRAD_roi)
          NRAD_res = sqrt(NRAD_res)
      } else {
          global::NRAD_res = AnisoNRAD(NRAD_input,NRAD_scalar_mode,\
                      NRAD_dt,numit,NRAD_neighborhood,NRAD_roi)
      }
    }
  }
  
  #------------------------------------
  proc NRAD_Display() {
    global_new
    if (!exists(NRAD_input)) {
      NRAD_load_input
    }
    if (!exists(NRAD_input_draw)) {
      show NRAD_input
    }
    // draw limits of ROI
    if exists(NRAD_roi) {
      local::roibox = NRAD_roi*0+1
      global::NRAD_imbox  <<= NRAD_input*0
      NRAD_imbox.putimage(roibox)
      del roibox
      NRAD_input_draw.SetIsoContour(0,NRAD_imbox,0.5)
      NRAD_input_draw.DrawIsoContour(0,1)
      show NRAD_input
    }
    if exists(NRAD_res) {
      show NRAD_res
      NRAD_input_draw.compare(NRAD_res_draw)
    }
    local_new
  }
  
  proc NRAD_CompareSurfaces(IMAGE i1, IMAGE i2) {
    global_new
      delvars "NRAD_*_surf_draw"
      delvars "NRAD_*_surf"
      NRAD_input_surf = CreateFlatMesh(i1,0)
      NRAD_res_surf   = CreateFlatMesh(i2,0)
      NRAD_input_surf.ElevateMesh(i1/10)
      NRAD_res_surf.ElevateMesh(i2/10)
      NRAD_input_surf.Normals
      NRAD_res_surf.Normals
      show NRAD_input_surf
      show NRAD_res_surf
      NRAD_input_surf_draw.compare(NRAD_res_surf_draw)
  }

  proc NRAD_DisplaySurfaces() {
    if (NRAD_input.tz==1) {
      NRAD_CompareSurfaces(&NRAD_input,&NRAD_res)
    } else {
      InfoDialog "Taking middle slice of 3D image"
      zpos = NRAD_input.tz/2
      inslice = NRAD_input[:,:,zpos:zpos]
      resslice = NRAD_res[:,:,zpos:zpos]
      NRAD_CompareSurfaces(&inslice,&resslice)
    }
  }
  
  
  proc NRAD_Save() {
    NRAD_res.save "NRAD_result.ami.gz"
  }
  
  proc NRAD_new_eq_type() {
    NRAD_win.EnableBox(NRAD_mat_boxid, NRAD_equation_type==1)
    NRAD_win.Enable(NRAD_sigma_id, NRAD_equation_type==1)
    NRAD_win.Enable(NRAD_matrix_mode_id, NRAD_equation_type==1)
    NRAD_win.Enable(NRAD_localstruct_id, NRAD_equation_type==1)
    NRAD_win.Enable(NRAD_eigenmode_id, NRAD_equation_type==1)

    NRAD_win.EnableBox(NRAD_scal_boxid,NRAD_equation_type!=1)
    NRAD_win.Enable(NRAD_scalar_mode_id,NRAD_equation_type!=1)
  }
  
  #------------------------------------
  proc NRAD_CreateWindow() {
    # parameters window
    global::NRAD_win = ParamWin("NRAD")

    NRAD_win.BeginBook
      NRAD_win.AddPage("Param")
        NRAD_win.AddImageChoice(NRAD_input_name, "Input")
        NRAD_win.AddFloat(NRAD_dt,"dt",0.01,10)
        NRAD_win.AddFloat(NRAD_t,"T",0,100)
        
        NRAD_win.AddInt(NRAD_neighborhood,0,4)
    
        NRAD_scheme_id       = NRAD_win.AddEnum(NRAD_scheme,"Scheme")
          NRAD_win.AddEnumChoice(NRAD_scheme_id,"Explicit")
          NRAD_win.AddEnumChoice(NRAD_scheme_id,"Semi-implicit")
        
        NRAD_eq_type_id      = NRAD_win.AddEnum(NRAD_equation_type)
          NRAD_win.AddEnumChoice(NRAD_eq_type_id,"Scalar")
          NRAD_win.AddEnumChoice(NRAD_eq_type_id,"Matrix")
        NRAD_win.SetCallback(NRAD_new_eq_type)
    
        global::NRAD_scal_boxid = NRAD_win.BeginBox("Scalar diffusion parameters")
          global::NRAD_scalar_mode_id = NRAD_win.AddEnum(NRAD_scalar_mode)
            NRAD_win.AddEnumChoice(NRAD_scalar_mode_id,"Lee")
            NRAD_win.AddEnumChoice(NRAD_scalar_mode_id,"Kuan")
            NRAD_win.AddEnumChoice(NRAD_scalar_mode_id,"Additive")
            NRAD_win.AddEnumChoice(NRAD_scalar_mode_id,"MRI")
            NRAD_win.AddEnumChoice(NRAD_scalar_mode_id,"MRI new")
        NRAD_win.EndBox

        global::NRAD_mat_boxid = NRAD_win.BeginBox("Matrix diffusion parameters")
          global::NRAD_sigma_id = NRAD_win.AddFloat(NRAD_sigma,0.01,10)
          global::NRAD_matrix_mode_id = NRAD_win.AddEnum(NRAD_matrix_mode)
            NRAD_win.AddEnumChoice(NRAD_matrix_mode_id,"Grad")
            NRAD_win.AddEnumChoice(NRAD_matrix_mode_id,"MRI")
            NRAD_win.AddEnumChoice(NRAD_matrix_mode_id,"MRI new")
  
          global::NRAD_localstruct_id = NRAD_win.AddEnum(NRAD_local_struct)
            NRAD_win.AddEnumChoice(NRAD_localstruct_id,"Grad & Curv. Dir.")
            NRAD_win.AddEnumChoice(NRAD_localstruct_id,"Struct. Tensor")
      
          global::NRAD_eigenmode_id = NRAD_win.AddEnum(NRAD_eigen_mode,2)
            NRAD_win.AddEnumChoice(NRAD_eigenmode_id,"Sum")
            NRAD_win.AddEnumChoice(NRAD_eigenmode_id,"Max")
        NRAD_win.EndBox
        
        NRAD_win.AddPage("Controls")
          NRAD_win.BeginHorizontal
            NRAD_win.AddButton("Reload input", NRAD_ReloadInput)
            NRAD_win.AddButton("Select ROI", NRAD_GetRoi)
            NRAD_win.AddButton("Filter",     NRAD_Filter)
          NRAD_win.EndHorizontal
          NRAD_win.BeginHorizontal
            NRAD_win.AddButton("Display",    NRAD_Display)
            NRAD_win.AddButton("Display Surfaces",  NRAD_DisplaySurfaces)
            NRAD_win.AddButton("Save",       NRAD_Save)
          NRAD_win.EndHorizontal

    NRAD_win.EndBook

    NRAD_win.AddButton("Close",             NRAD_Close)
    
    NRAD_win.CreateWin
    NRAD_win.Display
    NRAD_win.update
    NRAD_new_eq_type
  }
  
  #------------------------------------
  NRAD_Init
  if (argc>=1) {
    printn "reading image"
    input_arg = Image($1)
    NRAD_input_image = "input_arg"
    NRAD_win.update
    #NRAD_CreateParams( input)
    #NRAD_CreateWindow()
  }

} 
# endif exists(NRAD_Init)
