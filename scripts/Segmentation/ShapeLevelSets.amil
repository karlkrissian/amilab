#!/home/karl/projects/bin/linux/improcess
#
# Procedure to run level set easily
# with 2 parameters : a standard deviation and the number of iterations
#


//--------------------------------------------------
//
//  ballon: balloon term that depends on the distance to the skeleton
//
proc DistToSkeleton( IMAGE in, IMAGE out) {
//   --------------
  print "----- Begin DistToSkeleton \n"
  print "-- create binary image \n" 
  j  = (UCHAR) ((in>=0)*255)
  print "-- compute Andre dist \n"
  k1 = sqrt(AndreDist(j))
  print "-- compute gradient \n"
  k1g  = gradient(k1,1)
  print "-- compute flux \n"
  Flux = OutFlux(k1g)*-1
  print "-- create other image \n"
  j = -j+255
  print "-- create skeleton \n"
//  sk   = Skeleton(j,Flux,0.5,1000)
  sk = (UCHAR) ((Flux>1)*255)

  print "-- compute Andre dist 2 \n"
  out = AndreDist(sk)
  print "----- End DistToSkeleton \n"
}
// DistToSkeleton()


//--------------------------------------------------
//
//  ballon: balloon term that depends on the distance to the skeleton
//
proc ShapeLevelSets( IMAGE im, IMAGE initial, NUM sigma, NUM it, NUM dist_freq, NUM graphics) {
//   --------------

  // number of threads (not used right now)
  th = 1
  
  // every how many iterations call the graphic events
  freq = 4

  // computes mean and standard deviation inside the initial structure
  Imean = mean(im,(initial<0))
  tmp = im-Imean
  tmp = tmp*tmp
  Isd = sqrt(mean(tmp,(initial<0)))
  del tmp

  // 0:liana's, 1: fast marching 2: fast chamfer
  method     = 2

  v_x = im.vx
  v_y = im.vy
  v_z = im.vz


  setvoxelsize(im,     1,1,1)
  setvoxelsize(initial,1,1,1)

  // Parameters:
  //   1. grad threshold
  //   2. iterations
  //   3. attach coeff
  //   4. curvcoeff
  //   5. dt
  //   6. reinitfreq

  LevelSetsCURV.SetParam(0.7,it,1,0.2,0.5,4)
  LevelSetsCURV.SetDistMethod(method)
  LevelSetsCURV.SetMeanCurv(0)
#  LevelSetsCURV.SetThreads(   th)

  print "Compute Expansion Image \n"

  print "Mean = "; print Imean;
  print " SD = ";  print 2*Isd;
  print "\n"


//  LevelSetsCURV.SetILowTh(Imean-2*sigma*Isd)
//  LevelSetsCURV.SetNumGaussians(1)
//  LevelSetsCURV.SetGaussian(0,Imean,sigma*Isd)
//  LevelSetsCURV.SetProbThreshold(0.2)
//  LevelSetsCURV.SetProbHighTh(Imean+Isd)
//  LevelSetsCURV.SetExpansion(0.6)


  expI = (im-Imean)/(sigma*Isd);
  expI = expI*expI
  expI = exp(-expI)-0.2
  expI = (im>(Imean+Isd))+(im<=(Imean+Isd))*expI
#  expI = expI*0.6
 
  LevelSetsCURV.SetExpansionImage(expI)

  print "Compute Expansion Image OK \n"

  LevelSetsCURV.SetBandTube(3,2)

  lres = LevelSetsCURV.init(im,initial)

 
  k = 0
  dist2 = initial
  DistToSkeleton(initial,&dist2)
  expansion_im = expI*0.6 + (exp(-dist2*dist2/9/9)-0.8)*0.6
  LevelSetsCURV.SetExpansionImage(expansion_im)

  if (graphics) {
    show im
    // sets the isocontour number 0 to the image 'initial' with threshold 0
    im_draw.SetIsoContour(0,initial,0)
    // sets the isocontour number 0 to be active
    im_draw.DrawIsoContour(0,1)
    im_draw.SetIsoContour(1,lres,0)
    im_draw.DrawIsoContour(1,1)
    im_draw._compare(expansion_im)
  }


  LevelSetsCURV.iterate;
  k = k+1


  for n=1 to it-1 { 

    if (k==dist_freq) {
      k = 0;
      DistToSkeleton(lres,&dist2)
      print "------ Compute expansion_im \n"
      expansion_im = expI*0.6 + (exp(-dist2*dist2/9/9)-0.8)*0.8
      print "------ Compute expansion_im OK \n"
      LevelSetsCURV.SetExpansionImage(expansion_im)
    }

    LevelSetsCURV.iterate;
    k = k+1
    if (graphics) {
      show im;
      ProcessXEvents(500);
    }

  }

  setvoxelsize( im,       v_x, v_y, v_z)
  setvoxelsize( initial, v_x, v_y, v_z)
  setvoxelsize( lres,     v_x, v_y, v_z)

  initial = lres;

  if (graphics) {
    print "del im_draw \n"
    del im_draw
  }

  LevelSetsCURV.end

  del lres
//  del im

}
# ShapeLevelSets()



