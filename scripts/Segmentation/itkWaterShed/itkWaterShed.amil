#
# Interface for itk WaterShed Image Segmentation Filter
#
if (!exists(WaterShedClass)){

  ami_import->ITK()
  
  Class WaterShedClass {
  ::itk = &global::itk
  #------------------------------------
  
  
  #------------------------
  
    proc ::init() {

      ::class_name ="global::WaterShedClass"
      ::input_name   = "","Name of the input image variable"
      ::gradient_mode = INT(0), "Gradient mode: Computes the norm of the gradient of the image."
      ::stand = 1, "Standard deviation of the Gaussian kernel."
      ::lThreshold = 0, "Threshold is used to set the absolute minimum height value used during processing."
      ::FloodLevel = 2, "The Level parameter controls the depth of metaphorical flooding of the image."
      ::dim = INT(1), "The dimension of the image."

      ::inputmin = 0, "Minimal Intensity of the image."
      ::inputmax = 32000, "Maximal Intensity of the image."

      ::gradient_filename = "GradientResult"
      ::water_filename = "WatershedResult"
      ::result_filename_ext = ".ami.gz"
      ::g = UCHAR(0)
      ::w = UCHAR(0)
      
      ::help = "http://www.itk.org/Doxygen316/html/classitk_1_1WatershedImageFilter.html"
      ::html_filename = GetScriptsDir+"/Segmentation/itkWaterShed/doc/watershed/index.html"

      #::Gui()
    }
    
    #----------------------------
    proc ::Close() \
      {
        ::win.HidePanel
        delvars GetObjectName(::Close)
      }
      Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
    
      proc ::CloseAll() {
        eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
        ::Close
      }
      Comments( ::CloseAll, "Call ::Close() method and delete the class variable")
        
    #------------------------------------
    #------------------------
    proc ::load_input() {

      eval "::input <<= (FLOAT)"+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        ::win.Update(-1)
      }

      show ::input
    }
    
    #------------------------
    proc ::Run() {
      if (::gradient_mode==0) {
        ::grad = normgrad(::input,::stand)
        ::g = 1
      }
      
      if (::dim==0) {
        ::water = ::itk->WaterShedImageFilter2D(::grad,::lThreshold,::FloodLevel)
        ::w = 1
      } else {
        ::water = ::itk->WaterShedImageFilter3D(::grad,::lThreshold,::FloodLevel)
        ::w = 1
      }
    }
    
    proc ::Display() {
    
      show ::grad
      show ::water
      ::grad_draw.compare(::water_draw)
    
    }
    
    #------------------------
    proc ::SaveG() {
      filename=::gradient_filename-".gz"-".ami";
      if (::g) {
        filename = filename + sprint("_standDev%0.0f",::stand)
      } else {
        print "First you must create the image.\n"
      }
      filename = filename + ::result_filename_ext
      print "saving file "+filename+"\n"
      ::grad.save filename
    }
    Comments( ::SaveG, "Saves the gradient image as ${::gradient_filename}_StandDevXX.ami.gz")

    #------------------------
    proc ::SaveR() {
      filename=::water_filename-".gz"-".ami";
      if (::w) {
        filename = filename + sprint("_thres%0.0f",::lThreshold) \
                            + sprint("_lvl%0.2f",::FloodLevel)
      } else {
        print "First you must create the image.\n"
      }
      filename = filename + ::result_filename_ext
      print "saving file "+filename+"\n"
      ::water.save filename
    }
    Comments( ::SaveR, "Saves the gradient image as ${::water_filename}_thresXX_lvlXX.ami.gz")

    #------------------------

    proc ::LaunchHelp() {
      import = &global::ami_import
      wx1 = import->WxFunctions()
      res = wx1->LaunchDefaultBrowser(::help)
    }
    Comments( ::LaunchHelp, "Launch the corresponding help tutorial page on the default browser.")
      
    proc ::HtmlHome() {
      ::html.LoadFile( ::html_filename)
    }
    Comments( ::HtmlHome, "Back to the initial page.")

    //---------------------------------------------------
    proc ::HtmlBack() {
      res = ::html.HistoryBack()
    }
    Comments( ::HtmlBack, "Back to the previous page.")

    //---------------------------------------------------
    proc ::HtmlForward() {
      res = ::html.HistoryForward()
    }
    Comments( ::HtmlForward, "Go to the forward page.")  

    proc ::Gui() {
      import = &global::ami_import;
      ::win = import->ParamPanel("WaterShed")
      ::win.BeginBook()
      
        ::win.AddPage("Init")

          ::win.BeginBoxPanel("Input Image")
            # set the input image
            ::win.BeginHorizontal
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::load_input)
            ::win.EndHorizontal
            ::win.BeginHorizontal
              dim_id = ::win.AddEnum( &::dim,"Dimension")
              ::win.AddEnumChoice(dim_id, "2D")
              ::win.AddEnumChoice(dim_id, "3D")
            ::win.EndHorizontal
          ::win.EndBoxPanel
          ::win.BeginBoxPanel("Gradient Mode")
            ::win.BeginHorizontal
              gradmode_id = ::win.AddEnum( &::gradient_mode,"Mode")
              ::win.AddEnumChoice(gradmode_id, "NormGradient")
            ::win.EndHorizontal
          ::win.EndBoxPanel


        ::win.AddPage("Param")

          ::win.BeginBoxPanel("Gradient Param")
            ::win.AddFloat( &::stand,"StandDev",0,(::inputmax-::inputmin)/2)
          ::win.EndBoxPanel
          ::win.BeginBoxPanel("WaterShed Param")
            ::win.AddFloat( &::lThreshold,"Threshold",0,::inputmax)
            ::win.AddFloat( &::FloodLevel,"Flood Level",0,1)
          ::win.EndBoxPanel
          
          ::win.BeginHorizontal
            ::win.AddButton("Run",::Run)
            ::win.AddButton("Display",::Display)
          ::win.EndHorizontal
          
          ::win.BeginHorizontal
            ::win.AddButton("Save Result",::SaveR)
            ::win.AddButton("Save Gradient",::SaveG)
          ::win.EndHorizontal
        
        ::win.AddPage("Help")
          ::win.BeginHorizontal
            ::win.AddButton("Help",   ::LaunchHelp)
            ::win.AddButton("Home",   ::HtmlHome)
            ::win.AddButton("<--",    ::HtmlBack)
            ::win.AddButton("-->",    ::HtmlForward)
          ::win.EndHorizontal
          # add html widget
          d = ::win.CurrentParent()
          ::html = import->wxHtmlWindow(&d)
          ::html.LoadFile( ::html_filename)
          ::win.AddWidget(&::html,1)
        
      ::win.EndBook

      ::win.BeginHorizontal
          ::win.AddButton("Close",      ::Close)
          ::win.AddButton("Close All",  ::CloseAll)
        ::win.EndHorizontal

      ::win.Update(-1)
      ::win.Display
    }
    
    ::init
  
  } #End of class
  
} #End of if

#----------------------------
# Main
#----------------------------

if (!exists(wsobjetct)) {
  WaterShedClass wsobjetct
  
} else {
InfoDialog "The script seems to be already loaded." 
}
