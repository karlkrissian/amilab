if (!exists(itkLevelSetClass)) {
  ami_import->ITK()
  
  Class itkLevelSetClass {
    
    ::itk=&global::itk
  
    proc ::Init() {
      
      ::class_name="global::itkLevelSetClass"
      
      ::input_name   = "","Name of the input image variable"
      ::gradient_mode = INT(0), "Gradient mode: Computes the norm of the gradient of the image."
      ::stand = 0.5, "Standard deviation of the Gaussian kernel."
      
      ::min = 0.0
      ::max = 1.0
      
      ::seed_X = 0, "Seed point in X-axis."
      ::seed_Y = 0, "Seed point in Y-axis."
      ::seed_Z = 0, "Seed point in Z-axis."
      ::alpha = -0.5, "Constant to compute the sigmoid function."
      ::beta = 3, "Constant to compute the sigmoid function."
      ::lower = 0, "Set the lower threshold of the BinaryThreshold Filter."
      ::upper = 0, "Set the upper threshold of the BinaryThreshold Filter."
      ::stopping_time = 0, "Fast Marching algorithm is terminated when the value of the smallest trial point is greater than the stopping value."
      ::dim = INT(1), "The dimension of the image."
      ::curScaling = 0, "Use this parameter to increase the influence of curvature on the movement of the surface."
      ::proScaling = 0, "Set the scaling of the propagation speed."
      
      ::inputmin = 0, "Minimal Intensity of the image."
      ::inputmax = 32000, "Maximal Intensity of the image."
      
      ::level_filename = "LevelSetResult"
      ::result_filename_ext = ".ami.gz"
      ::l = UCHAR(0)
      
      ::Gui()
    }

    proc ::Close() \
    {
      ::win.Hide
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
    proc ::CloseAll() \
    {
      ::Close
      if (exists(NLmeansClass)) { del NLmeansClass; }
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    proc ::Load_input() {

      eval "global::::input <<= (FLOAT)"+::input_name+";"
        if (::input_name=="Image") {
          ::input_name = "::input"
          ::win.update
        }
      
      ::inputmin = min(::input)
      ::inputmax = max(::input)
      
      show ::input
    }
    
    proc ::Run() {
      if (::gradient_mode==0) {
        ::grad = normgrad(::input,::stand)
      }

      if (::dim==0) {
        ::sigmoid = ::itk->SigmoidImageFilter2D(::grad,::min,::max,::alpha,::beta)
        ::fast = ::itk->FastMarchingImageFilter2D(::sigmoid,::seed_X,::seed_Y,::alpha,::beta,::stopping_time)
        ::level = ::itk->LevelSetFilter2D(::fast,::sigmoid,::curScaling,::proScaling)
        ::thres = ::itk->BinaryThresholdImageFilter2D(::level,::lower,::upper)
        ::l = 1			
      } else {
        ::sigmoid = ::itk->SigmoidImageFilter3D(::grad,::min,::max,::alpha,::beta)
        ::fast = ::itk->FastMarchingImageFilter3D(::sigmoid,::seed_X,::seed_Y,::seed_Z,::alpha,::beta,::stopping_time)
        ::level = ::itk->LevelSetFilter3D(::fast,::sigmoid,::curScaling,::proScaling)
        ::thres = ::itk->BinaryThresholdImageFilter3D(::level,::lower,::upper)
        ::l = 1
      }
      
      show ::input
      show ::thres
      ::input_draw.compare(::thres_draw)
    }
    
    proc ::SeedPoint() \
    {
      show ::input
      if (exists(::input_draw)) {
        if (::dim==0) {
          ::SetSeedPoint2( \
                            ::input_draw.GetXPos, \
                            ::input_draw.GetYPos \
                          )
        } else {
          ::SetSeedPoint3( \
                            ::input_draw.GetXPos, \
                            ::input_draw.GetYPos, \
                            ::input_draw.GetZPos \
                          )
        }
      }
    }
    
    proc ::SetSeedPoint2( NUM x, NUM y) \
    {
      printn x
      printn y
      ::seed_X = x
      ::seed_Y = y
      #::seed_X = ::input.trx + x*::input.vx
      #::seed_Y = ::input.try + y*::input.vy
    }
    
    proc ::SetSeedPoint3( NUM x, NUM y, NUM z) \
    {
      printn x
      printn y
      printn z
      ::seed_X = x
      ::seed_Y = y
      ::seed_Z = z
      #::seed_X = ::input.trx + x*::input.vx
      #::seed_Y = ::input.try + y*::input.vy
      #::seed_Z = ::input.trz + z*::input.vz
    }
    
    proc ::Save() {
      filename=::level_filename-".gz"-".ami";
      if (::f) {
        if (::dim==0) {
          filename = filename + sprint("_seedX%0.1f",::seed_X) \
                              + sprint("_seedY%0.1f",::seed_Y) \
                              + sprint("_alpha%0.1f",::alpha) \
                              + sprint("_beta%0.1f",::beta) \
                              + sprint("_lthres%0.0f",::lower) \
                              + sprint("_uthres%0.0f",::upper) \
                              + sprint("_stop%0.0f",::stopping_time) \
                              + sprint("_stop%0.1f",::curScaling) \
                              + sprint("_stop%0.1f",::proScaling)
        } else {
          filename = filename + sprint("_seedX%0.1f",::seed_X) \
                              + sprint("_seedY%0.1f",::seed_Y) \
                              + sprint("_seedZ%0.1f",::seed_Z) \
                              + sprint("_alpha%0.1f",::alpha) \
                              + sprint("_beta%0.1f",::beta) \
                              + sprint("_lthres%0.0f",::lower) \
                              + sprint("_uthres%0.0f",::upper) \
                              + sprint("_stop%0.0f",::stopping_time) \
                              + sprint("_stop%0.1f",::curScaling) \
                              + sprint("_stop%0.1f",::proScaling)
        }
      } else {
        print "First you must create the image.\n"
      }
      filename = filename + ::result_filename_ext
      print "saving file "+filename+"\n"
      ::thres.save filename
    }
    
    proc ::Gui() {
      ::win = ParamWin("itkLevelSet")
      ::win.BeginBook
      
        ::win.AddPage("Init")
        
        ::win.BeginBoxPanel("Input Image")
            # set the input image
            ::win.BeginHorizontal
              ::win.AddImageChoice(::input_name, "")
              ::win.AddButton("Load",::Load_input)
            ::win.EndHorizontal
            ::win.BeginHorizontal
              dim_id = ::win.AddEnum(::dim,"Dimension")
              ::win.AddEnumChoice(dim_id, "2D")
              ::win.AddEnumChoice(dim_id, "3D")
            ::win.EndHorizontal
        ::win.EndBoxPanel
        ::win.BeginBoxPanel("Gradient Mode")
            ::win.BeginHorizontal
              gradmode_id = ::win.AddEnum(::gradient_mode,"Mode")
              ::win.AddEnumChoice(gradmode_id, "NormGradient")
            ::win.EndHorizontal
        ::win.EndBoxPanel      
        
        ::win.AddPage("Param")
        
        ::win.BeginBook
          ::win.AddPage("Gradient")
            ::win.AddFloat(::stand,"StandDev",0,(::inputmax-::inputmin)/2)
              
          ::win.AddPage("Sigmoid Param")
            ::win.AddFloat(::min,"OutputMin",0,::inputmin)
            ::win.AddFloat(::max,"OutputMax",0,::inputmax)
            
          ::win.AddPage("FastMarching")
            ::win.AddButton("Set Seed Point",::SeedPoint)             
            ::win.AddFloat(::alpha,"Alpha",-3,::inputmax)
            ::win.AddFloat(::beta,"Beta",0,::inputmax)
            ::win.AddFloat(::stopping_time,"Stopping Time Value",0,::inputmax)
        
          ::win.AddPage("Thresholding")
            ::win.AddFloat(::lower,"Lower Threshold",-1000,::inputmax)
            ::win.AddFloat(::upper,"Upper Threshold",0,::inputmax)
        
        
          ::win.AddPage("LevelSet")
            ::win.AddFloat(::curScaling,"Curvature Scaling",0,1)
            ::win.AddFloat(::proScaling,"Propagation Scaling",0,1)
        
        ::win.EndBook
        
        ::win.AddPage("Run")
        
        ::win.BeginBoxPanel("Processing")
          ::win.AddButton("Run", ::Run)
        ::win.EndBoxPanel
        
        ::win.AddPage("Save")
        
        ::win.BeginBoxPanel("Result")
          ::win.AddButton("Save", ::Save)
        ::win.EndBoxPanel
        
      ::win.EndBook
      
      proc ::Close() \
      { 
        ::win.Hide
        delvars GetObjectName(::Close)
      }
      ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
      proc ::CloseAll() \
      {
        ::Close
        if (exists(NLmeansClass)) { del NLmeansClass; }
      }
      ::CloseAll.Comments("Call ::Close() method and delete the class variable")
      
      ::win.update
      ::win.Display
    }
    
    ::Init
  }
# Class itkLevelSetClass
}
# end if (!exists(itkLevelSetClass))

#----------------------------
# Main
#----------------------------

if (!exists(itkls)) {

  itkLevelSetClass itkls
  
  if (argc>=1) {
    printn "reading image"
    input = Image($1)
    itkls->image_name = "input"
    itkls->win.update
  }

} else {
  InfoDialog "The script seems to be already loaded."
}
