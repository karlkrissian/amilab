if (!exists(itkLevelSetClass)) {

  ami_import->ITK()
  #func "BasicFilters/itkSigmoidFilter.amil"
  func "Segmentation/itkFastMarching.amil"

#*******************************************************************************************#
#****************************SIGMOID********************************************************#
#*******************************************************************************************#

  
  // Class itkSigmoidClass {
    
    // ::itk=&global::itk
  
    // proc ::Init() {
      
      // ::class_name="global::itkSigmoidClass"
      // ::input_name   = "","Name of the input image variable"
      // ::stand = 0.5, "Standard deviation of the Gaussian kernel."
      
      // ::min = 0.0, "Set the minimum value of the output image."
      // ::max = 1.0, "Set the maximum value of the output image."
      
      // ::alpha = -0.5, "Constant to compute the sigmoid function and FastMarching solution."
      // ::beta = 3, "Constant to compute the sigmoid function and FastMarching solution."
      // ::dim = INT(1), "The dimension of the image."
      
      // ::inputmin = 0, "Minimal Intensity of the image."
      // ::inputmax = 32000, "Maximal Intensity of the image."
      
    // }
    
    // proc ::SetParentPanel(OBJECT pp) \
    // {
      // ::parent_panel = &pp
    // }

    // proc ::Load_input() {

      // eval "::input <<= (FLOAT)"+::input_name+";"
        // if (::input_name=="Image") {
          // ::input_name = "::input"
          // ::win.Update(-1)
        // }
      
      // ::inputmin = min(::input)
      // ::inputmax = max(::input)
      
      // show ::input
    // }
    
    // proc ::Run() {
      // ::grad = normgrad(::input,::stand)
      // ::g = 1
      // if (::dim==0) {
        // global::sigmoid = ::itk->SigmoidImageFilter2D(::grad,::min,::max,::alpha,::beta)			
      // } else {
        // global::sigmoid = ::itk->SigmoidImageFilter3D(::grad,::min,::max,::alpha,::beta)
      // }      
    // }
    
    // proc ::Display() {
    
      // show ::input
      // show global::sigmoid
      // ::input_draw.compare(global::sigmoid_draw)
    
    // }
    
    // proc ::Gui() {
      // import = &global::ami_import;
      // if (exists(::parent_panel)) {
        // ::win = import->ParamPanel("itkSig",&::parent_panel)
      // } else {
        // ::win = import->ParamPanel("itkSig")
      // }
      // ::win.BeginBook()
      
        // ::win.AddPage("Init")
        
        // ::win.BeginBoxPanel("Input Image")
            // # set the input image
            // ::win.BeginHorizontal
              // ::win.AddImageChoice( &::input_name, "")
              // ::win.AddButton("Load",::Load_input)
            // ::win.EndHorizontal
            // ::win.BeginHorizontal
              // dim_id = ::win.AddEnum( &::dim,"Dimension")
              // ::win.AddEnumChoice(dim_id, "2D")
              // ::win.AddEnumChoice(dim_id, "3D")
            // ::win.EndHorizontal
        // ::win.EndBoxPanel
                
        // ::win.AddPage("Param")
        
          // ::win.AddFloat( &::stand,"StandDev",0,(::inputmax-::inputmin)/2)
          // ::win.AddFloat( &::min,"OutputMin",0,::inputmin)
          // ::win.AddFloat( &::max,"OutputMax",0,::inputmax)
          // ::win.AddFloat( &::alpha,"Alpha",-3,::inputmax)  
          // ::win.AddFloat( &::beta,"Beta",0,::inputmax)        

          // ::win.BeginHorizontal
            // ::win.AddButton("Run", ::Run)
            // ::win.AddButton("Display", ::Display)
          // ::win.EndHorizontal
        
      // #::win.EndBook
           
      // if (exists(::parent_panel)) {
        // ::win.ShowPanel()
      // } else {
        // ::win.Display()
      // }
    // }
    
    // proc ::Close() \
    // {
      // ::win.HidePanel
      // delvars GetObjectName(::Close)
    // }
    // ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
    // proc ::CloseAll() {
      // eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
      // ::Close
    // }
    // ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    // ::Init()
  // }
// # Class itkSigmoidClass

// #*******************************************************************************************#
// #****************************FASTMARCHING***************************************************#
// #*******************************************************************************************#

  // Class itkFastMarchingClass \
  // {
    // ::itk=&global::itk
    
    // proc ::Init() {
      // ::class_name="global::itkFastMarchingClass"
      // ::input_name   = "global::sigmoid","Name of the input image variable"
      // ::input_velocity_name   = "","Name of the input velocity image variable"
      // ::gradient_mode = INT(0), "Gradient mode: Computes the norm of the gradient of the image."
      // ::seed_X = 0, "Seed point in X-axis."
      // ::seed_Y = 0, "Seed point in Y-axis."
      // ::seed_Z = 0, "Seed point in Z-axis."
      // ::lower = 0, "Set the lower threshold of the BinaryThreshold Filter."
      // ::upper = 100, "Set the upper threshold of the BinaryThreshold Filter."
      // ::alpha = -0.5, "Constant to compute the sigmoid function and FastMarching solution."
      // ::beta = 3, "Constant to compute the sigmoid function and FastMarching solution."
      // ::stopping_time = 100, "Fast Marching algorithm is terminated when the value of the smallest trial point is greater than the stopping value."
      // ::dim = INT(1), "The dimension of the image."
      
      // ::inputmin = 0, "Minimal Intensity of the image."
      // ::inputmax = 32000, "Maximal Intensity of the image."

    // }
    
    // proc ::SetParentPanel(OBJECT pp) \
    // {
      // ::parent_panel = &pp
    // }
    
    // proc ::Load_input() {

      // eval "::input <<= (FLOAT)"+::input_name+";"
        // if (::input_name=="Image") {
          // ::input_name = "::input"
          // ::win.Update(-1)
        // }
      
      // ::inputmin = min(::input)
      // ::inputmax = max(::input)
      
      // show ::input
    // }
    
    // proc ::Load_input_velocity() {

      // eval "::input_velocity <<= (FLOAT)"+::input_velocity_name+";"
        // if (::input_velocity_name=="Image") {
          // ::input_velocity_name = "::input_velocity"
          // ::win.Update(-1)
        // }
      
      // ::inputmin = min(::input_velocity)
      // ::inputmax = max(::input_velocity)
      
      // show ::input_velocity
    // }
    
    // proc ::Run() {
      // if (::gradient_mode==0) {
        // if (::dim==0) {
          // global::fast = ::itk->FastMarchingImageFilter2D(::input,::seed_X,::seed_Y,::alpha,::beta,::stopping_time)
          // global::thres = ::itk->BinaryThresholdImageFilter2D(global::fast,::lower,::upper)
          // ::f = 1			
        // } else {
          // global::fast = ::itk->FastMarchingImageFilter3D(::input,::seed_X,::seed_Y,::seed_Z,::alpha,::beta,::stopping_time)
          // global::thres = ::itk->BinaryThresholdImageFilter3D(global::fast,::lower,::upper)
          // ::f = 1
        // }
      // } else {
        // if (::dim==0) {
          // global::fast = ::itk->FastMarchingImageFilter2D(::input_velocity,::seed_X,::seed_Y,::alpha,::beta,::stopping_time)
          // global::thres = ::itk->BinaryThresholdImageFilter2D(global::fast,::lower,::upper)
          // ::f = 1			
        // } else {
          // global::fast = ::itk->FastMarchingImageFilter3D(::input_velocity,::seed_X,::seed_Y,::seed_Z,::alpha,::beta,::stopping_time)
          // global::thres = ::itk->BinaryThresholdImageFilter3D(global::fast,::lower,::upper)
          // ::f = 1
        // }
      // }
    // }
    
    // proc ::Display() {
    
      // show ::input
      // show global::thres
      // ::input_draw.compare(global::thres_draw)
    
    // }
    
    // proc ::SeedPoint() \
    // {
      // show ::input
      // if (exists(::input_draw)) {
        // if (::dim==0) {
          // ::SetSeedPoint2( \
                            // ::input_draw.GetXPos, \
                            // ::input_draw.GetYPos \
                          // )
        // } else {
          // ::SetSeedPoint3( \
                            // ::input_draw.GetXPos, \
                            // ::input_draw.GetYPos, \
                            // ::input_draw.GetZPos \
                          // )
        // }
      // }
    // }
    
    // proc ::SetSeedPoint2( NUM x, NUM y) \
    // {
      // printn x
      // printn y
      // ::seed_X = x
      // ::seed_Y = y
    // }
    
    // proc ::SetSeedPoint3( NUM x, NUM y, NUM z) \
    // {
      // printn x
      // printn y
      // printn z
      // ::seed_X = x
      // ::seed_Y = y
      // ::seed_Z = z
    // }
    
    // proc ::Gui() {
      // import = &global::ami_import;
      // if (exists(::parent_panel)) {
        // ::win = import->ParamPanel("itkFM",&::parent_panel)
      // } else {
        // ::win = import->ParamPanel("itkFM")
      // } 
      // ::win.BeginBook()
      
        // ::win.AddPage("Init")
        
        // ::win.BeginBoxPanel("Input Image")
            // # set the input image
            // ::win.BeginHorizontal
              // ::win.AddImageChoice( &::input_name, "")
              // ::win.AddButton("Load",::Load_input)
            // ::win.EndHorizontal
            // ::win.BeginHorizontal
              // dim_id = ::win.AddEnum( &::dim,"Dimension")
              // ::win.AddEnumChoice(dim_id, "2D")
              // ::win.AddEnumChoice(dim_id, "3D")
            // ::win.EndHorizontal
        // ::win.EndBoxPanel
        // ::win.BeginBoxPanel("Velocity Image")
          // ::win.BeginHorizontal
            // gradmode_id = ::win.AddEnum( &::gradient_mode,"Mode")
            // ::win.AddEnumChoice(gradmode_id, "NormGradient")
            // ::win.AddEnumChoice(gradmode_id, "User Velocity Image")
          // ::win.EndHorizontal
        // ::win.EndBoxPanel
        // ::win.BeginBoxPanel("Input Velocity Image")
          // ::win.BeginHorizontal
            // ::win.AddImageChoice( &::input_velocity_name, "")
            // ::win.AddButton("Load",::Load_input_velocity)
          // ::win.EndHorizontal
        // ::win.EndBoxPanel        
        
        // ::win.AddPage("Param")
          
          // ::win.AddButton("Set Seed Point",::SeedPoint)             
          // ::win.AddFloat( &::stopping_time,"Stopping Time Value",0,::inputmax)
          // ::win.AddFloat( &::lower,"Lower Threshold",0,::inputmax)
          // ::win.AddFloat( &::upper,"Upper Threshold",0,::inputmax)
          
          // ::win.BeginHorizontal
            // ::win.AddButton("Run", ::Run)
            // ::win.AddButton("Display", ::Display)
          // ::win.EndHorizontal
        
      // ::win.EndBook
           
      // if (exists(::parent_panel)) {
        // ::win.ShowPanel()
      // } else {
        // ::win.Display()
      // }
    // }
    
    // proc ::Close() \
    // {
      // if (exists(::win)) {
      // ::win.HidePanel
      // }
      // delvars GetObjectName(::Close)
    // }
    // ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
    // proc ::CloseAll() {
      // eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
      // ::Close
    // }
    // ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    // ::Init()
  // }



#*******************************************************************************************#
#****************************LEVELSET*******************************************************#
#*******************************************************************************************#
    
  Class itkLevelSetClass \
  {
    
    global::itkFastMarchingClass ::FAST
    #global::itkSigmoidClass ::SIG
    
    ::itk=&global::itk
    ::class_name="global::itkLevelSetClass"
  
    proc ::Init() {
      
      #global::itkSigmoidClass ::sig
      #global::itkFastMarchingClass ::fast
            
      ::min = 0.0
      ::max = 1.0
      
      ::dim = INT(1), "The dimension of the image."
      ::error = 0.02
      ::iterations = 200
      ::advScaling = 0.5
      ::curScaling = 0.5, "Use this parameter to increase the influence of curvature on the movement of the surface."
      ::proScaling = 1, "Set the scaling of the propagation speed."
 
      ::inputmin = 0, "Minimal Intensity of the image."
      ::inputmax = 32000, "Maximal Intensity of the image."
    }

    proc ::Close() \
    {
      ::win.HidePanel
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
    proc ::CloseAll() {
      eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
      #::sig->CloseAll()
      #::FAST->CloseAll()
      ::Close
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    proc ::set_fast(IMAGE im) \
    {
      ::FAST->set_fast(im)
    }
    
    proc ::set_sigmoid(IMAGE im) \
    {
      ::FAST->set_sigmoid(im)
    }
    
    proc ::set_initial(IMAGE im) \
    {
      ::initial <<= im
    }
    
    proc ::set_edge(IMAGE im) \
    {
      ::em <<= im
    }
    
    proc ::RunNew() {
      if(exists (level)) {del level;}
      if (::dim == 0) {
        ::level <<= ::itk->LevelSetFilter2D(::initial,::em,::curScaling,::proScaling)
      } else {
        ::level <<= ::itk->LevelSetFilter3D(::initial,::em,::curScaling,::proScaling,::advScaling,::error,::iterations)
      }
    }
    
    proc ::Run() {
      if (exists (::sigm)) {del sigm;}
      ::sigm = ::FAST->SIG.sigmoid
      if (exists (::level)) {del level;}
      if (::FAST->dim==0) {
        ::level <<= ::itk->LevelSetFilter2D(::FAST->fast,::sigm,::curScaling,::proScaling)
      } else {
        ::level <<= ::itk->LevelSetFilter3D(::FAST->fast,::sigm,::curScaling,::proScaling,::advScaling,::error,::iterations)
      }
    }
    
    proc ::Display() {
    
      show ::level    
    }
    
    proc ::SetParentPanel(OBJECT pp) \
    {
      ::parent_panel = &pp
    }
    
    proc ::Gui() {
      import = &global::ami_import;
      
      if (exists(::parent_panel)) {
        ::win = import->ParamPanel("itkLS",&::parent_panel)
      } else {
        ::win = import->ParamPanel("itkLS")
      }
      ::win.BeginBook()
      
        #::win.AddPage("Process")
        
        #::win.BeginBook()
          // ::SIG->SetParentPanel(&::win)
          // ::SIG->Gui()
          // ::win.AddPage("Gradient",&::SIG->win)
            
          ::FAST->SetParentPanel(&::win)
          ::FAST->Gui()
          ::win.AddPage("itkFM",&::FAST->win)
        
          ::win.AddPage("LevelSet")
            ::win.AddFloat( &::curScaling,"Curvature Scaling",0,1)
            ::win.AddFloat( &::proScaling,"Propagation Scaling",0,1)
            ::win.BeginHorizontal
              ::win.AddButton("Run", ::Run)
              ::win.AddButton("Display", ::Display)
            ::win.EndHorizontal
        #::win.EndBook
        
      ::win.EndBook
      
      # close
      ::win.BeginHorizontal
        ::win.AddButton("Close",      ::Close)
        ::win.AddButton("Close All",  ::CloseAll)
      ::win.EndHorizontal
      
      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
    }
    
    ::Init
  }
} 
