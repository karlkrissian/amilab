
func "Common/ScriptGui"

if (!exists(MultipleLevelSetsClass)) {
  Class MultipleLevelSetsClass : public ScriptGui \
  {
    # load the Level Sets Gui script
    func "Segmentation/LevelSets/LevelSetsClass.amil"

    LevelSetsClass            ::levelset1
    LevelSetsClass            ::levelset2

    proc ::Init() \
    {
      # same input image for all level sets
      ::input_name   = "","Name of the input image variable, common to all level sets."

      # same image viewer for all level sets
        ::dt = 0.5, "Evolution time-step"
        ::T=200, "Total Evolution time"

        ::NBD_method     = INT(2), "Narrow Band Distance computation method, if not for experimental purpose, you should keep the default value: fast chamfer."  # 0:liana s, 1: fast marching 2: fast chamfer
        ::NBD_freq       = INT(6)

        ::check_convergence = UCHAR(1)
        ::conv_freq         = INT(20)

        ::stop = 0,          "Test if the stop button has been pressed"
        # number of threads (not used right now)
        ::threads = INT(2),  "Number of threads used during the evolution (the re-distancing of the narrow band is not multi-threaded)"
    }

    #-----------------------------------------------
    proc ::load_input() {
      printn "*** load_input ***"
      eval "::input <<= (FLOAT)"+::input_name+";"
      if (::input_name=="BrowseImage") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
  
      ::viewer = DessinImage(&::input)

      ::levelset1.setviewer(&::viewer)
      ::levelset1.setisocontour(1)
      ::levelset1.set_input(&::input)

      ::levelset2.setviewer(&::viewer)
      ::levelset2.setisocontour(2)
      ::levelset2.set_input(&::input)
    }
    Comments( ::load_input, "Copies the input image in a local image member named 'input', and updates the image for all the level sets.")


    //--------------------------------------------------
    proc ::UpdateViewer( ) \
    {
      if (exists(::viewer)) \
      {
        ::viewer.Paint()
      }
    }

    //--------------------------------------------------
    proc ::PrecomputeExpansions(  ) {
    //   -----
      # set the expansion images TODO: speed-up this part
      # for the first levelset
      tmp =  (::input-::levelset1.Imean)/::levelset1.Isd
      tmp = exp(-0.5*tmp*tmp)
      if (::levelset1.accept_high_intensity) {
        th = ::levelset1.Imean+::levelset1.Isd
        tmp = (::input<=th)*tmp+(::input>=th)*exp(-0.5*th*th/(:levelset1.Isd*:levelset1.Isd))
      }
      ::expansion1 = tmp-::levelset1.prob_threshold

      # for the second levelset
      tmp =  (::input-::levelset2.Imean)/::levelset2.Isd
      tmp = exp(-0.5*tmp*tmp)
      if (::levelset2.accept_high_intensity) {
        th = ::levelset2.mean+::levelset2.Isd
        tmp = (::input<=th)*tmp+(::input>=th)*exp(-0.5*th*th/(:levelset2.Isd*:levelset2.Isd))
      }
      ::expansion2 = tmp-::levelset2.prob_threshold
    }

    //--------------------------------------------------
    proc ::SetExpansions(  ) {
    //   -----

      tmp = (::levelset1.lsres<1)*(::levelset2.lsres<1)
      if count(tmp>0) {
        printn "overlapping area = %1% pixels" % count(tmp>0)
      }
      ::lexpansion1 = ::expansion1-::expansion2*tmp
      ::lexpansion2 = ::expansion2-::expansion1*tmp

      # now combine both ...
      ::levelset1.levelset.SetExpansionImage(::lexpansion1)
      ::levelset2.levelset.SetExpansionImage(::lexpansion2)

    }

    //--------------------------------------------------
    proc ::Run(  NUM graphics) {
    //   -----
    
      it = floor(::T/::dt)+1

      ::levelset1.InitEvolution(graphics,it)
      ::levelset1.levelset.Iterate();
      ::levelset1.levelset.UpdateResult()
      previous_ls1 = ::levelset1.levelset.GetOutputImage()

      ::levelset2.InitEvolution(graphics,it)
      ::levelset2.levelset.Iterate();
      ::levelset2.levelset.UpdateResult()
      previous_ls2 = ::levelset2.levelset.GetOutputImage()
    
      ::PrecomputeExpansions()
      # every how many iterations call the graphic events
      ::displ_freq = 8

      k = 0
      SetProgress(0)
      ::stop = 0;
      
      for n=1 to it {
        #print n; print "/"; printn it
        if (!::stop) {
          #print sprint("::T= %0.2f \n",n*::dt)
          ::levelset1.levelset.Iterate();
          ::levelset2.levelset.Iterate();
          k = k+1
          if (graphics)&&(k==::displ_freq) {
            ::SetExpansions()
            ::levelset1.levelset.UpdateResult()
            ::levelset2.levelset.UpdateResult()
            ::levelset1.lsres = ::levelset1.levelset.GetOutputImage()
            ::levelset2.lsres = ::levelset2.levelset.GetOutputImage()
            k = 0
            ::UpdateViewer()
            ProcessXEvents(100)
          }
          SetProgress((FLOAT)n/it*100.0)
          if (::check_convergence) {
            if ((n % ::conv_freq) == 0) {
              # check for convergence for level1
              ::levelset1.levelset.UpdateResult()
              ::levelset1.lsres = ::levelset1.levelset.GetOutputImage()
              stillmoving1 = count((previous_ls1*::levelset1.lsres)<0)
              print "*** LS1 Convergence test = "; printn stillmoving1
              previous_ls1 = ::levelset1.lsres

              # check for convergence for level2
              ::levelset2.levelset.UpdateResult()
              ::levelset2.lsres = ::levelset2.levelset.GetOutputImage()
              stillmoving2 = count((previous_ls2*::levelset2.lsres)<0)
              print "*** LS2 Convergence test = "; printn stillmoving2
              previous_ls2 = ::levelset2.lsres

              if (stillmoving1==0)&&(stillmoving2==0) { ::stop=1; }
            }
          }
        } else {
          printn "stopped!"
          n=it+1;
        }
      }
    
      ::levelset1.EndEvolution(graphics)
      ::levelset2.EndEvolution(graphics)
      SetProgress(0)
    
    }
    # ::Run()

    
    //---------------------------------------------------
    proc ::ReRun() {
      if (!exists(::input)) { ::load_input(); }
#      if (!exists(::levelset1.inls))  { ::levelset1.load_initial(); }
#      if (!exists(::levelset2.inls))  { ::levelset2.load_initial(); }
      ::levelset1.inls = ::levelset1.inls0
      ::levelset2.inls = ::levelset2.inls0
      ::Run(1)
      ::UpdateViewer()
    }
    
    //---------------------------------------------------
    proc ::Stop() {
      ::stop = 1
      printn "stopping"
    }
    
    
    //---------------------------------------------------
    proc ::Continue() {
      ::Run(1)
      ::UpdateViewer()
    }
    
    #-----------------------------------------------
    proc ::Gui() \
    {
      ::win = global::ami_import.ParamPanel("MultLS")
      ::win.BeginBook()
      ::win.AddPage("Input")
        ::win.BeginBoxPanel("Input Image")
          # set the input image
          ::win.BeginHorizontal()
            ::win.AddImageChoice( &::input_name, "")
            ::win.AddButton("Load",::load_input)
            #::win.AddButton("Ref",::ref_input)
          ::win.EndHorizontal()
          #::win.AddFloat( &::minimal_intensity,"Min. intensity",::inputmin,::inputmax)
        ::win.EndBoxPanel()

      # Evolution tab
      ::win.AddPage("Evol")
  
        ::win.BeginBoxPanel("Time")
          ::win.AddFloat( &::dt,"dt",0.01,1)
          ::win.AddFloat( &::T,"T",0.01,500)
        ::win.EndBoxPanel()
  
        ::win.BeginBoxPanel("Processing")
          ::win.AddInt( &::threads,"Threads",1,10)
          ::win.BeginHorizontal()
#            ::win.AddButton("Run",       &::Run)
            ::win.AddButton("ReRun",     &::ReRun)
            ::win.AddButton("Continue",  &::Continue)
          ::win.EndHorizontal()
          ::win.BeginHorizontal()
            ::win.AddButton("Stop",      &::Stop)
            #::win.AddButton("Surface",   ::Surface)
          ::win.EndHorizontal()
        ::win.EndBoxPanel()

        ::win.BeginBoxPanel("Convergence")
          ::win.AddBoolean( &::check_convergence,"Check")
          ::win.AddInt( &::conv_freq,"Freq",5,100)
        ::win.EndBoxPanel()

        
      ::win.AddPage("Params")
        ::win.BeginBook()
          # first level set
          ::levelset1->SetParentPanel(&::win)
          ::levelset1->Gui()
          ::win.AddPage("Contour1",&::levelset1->win)
          # second level set
          ::levelset2->SetParentPanel(&::win)
          ::levelset2->Gui()
          ::win.AddPage("Contour2",&::levelset2->win)
        ::win.EndBook()
#        ::AddHelpPage(&::win)
      ::win.EndBook()
      
      ::AddStandardButtons(&::win)

      ::win.Update(-1)
      ::win.Display()
    }
    ::Init()
  }
}
# endif !exists(MultipleLevelSetsClass)
