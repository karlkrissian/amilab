if (!exists(FM_defined)) {
  FM_defined=1
	import_itk
  
	proc FM_init() {
		global_new
		
		FM_input_name   = "","Name of the input image variable"
		FM_gradient_mode = INT(0), "Gradient mode: Computes the norm of the gradient of the image."
		FM_stand = 0.5, "Standard deviation of the Gaussian kernel."
    
    FM_min = 0.0, "Set the minimum value of the output image."
    FM_max = 1.0, "Set the maximum value of the output image."
    
		FM_seed_X = 0, "Seed point in X-axis."
		FM_seed_Y = 0, "Seed point in Y-axis."
    FM_seed_Z = 0, "Seed point in Z-axis."
    FM_alpha = -0.5, "Constant to compute the sigmoid function."
    FM_beta = 3, "Constant to compute the sigmoid function."
    FM_lower = 0, "Set the lower threshold of the BinaryThreshold Filter."
    FM_upper = 0, "Set the upper threshold of the BinaryThreshold Filter."
    FM_stopping_time = 0, "Fast Marching algorithm is terminated when the value of the smallest trial point is greater than the stopping value."
    FM_dim = INT(1), "The dimension of the image."
		
		FM_inputmin = 0, "Minimal Intensity of the image."
		FM_inputmax = 32000, "Maximal Intensity of the image."
		
    FM_gradient_filename = "GradientResult"
		FM_fast_filename = "FastMarchingResult"
    FM_result_filename_ext = ".ami.gz"
		FM_f = UCHAR(0)
    FM_g = UCHAR(0)
		
		FM_Gui()
	}

	proc FM_Close() \
  {
    FM_win.Hide
    delvars "FM_*_draw"
    delvars "FM_*"
  }
  FM_Close.Comments("Close current script and delete its variables")
  
	proc FM_load_input() {

		eval "global::FM_input <<= (FLOAT)"+FM_input_name+";"
			if (FM_input_name=="Image") {
				FM_input_name = "FM_input"
				FM_win.update
			}
		
		FM_inputmin = min(FM_input)
    FM_inputmax = max(FM_input)
		
    show FM_input
  }
  
  proc FM_Run() {
		if (FM_gradient_mode==0) {
			global::FM_grad = normgrad(FM_input,FM_stand)
			FM_g = 1
		}

    if (FM_dim==0) {
      global::FM_sigmoid = itkSigmoidImageFilter2D(FM_grad,FM_min,FM_max,FM_alpha,FM_beta)
      global::FM_fast = itkFastMarchingImageFilter2D(FM_sigmoid,FM_seed_X,FM_seed_Y,FM_alpha,FM_beta,FM_stopping_time)
      global::FM_thres = itkBinaryThresholdImageFilter2D(FM_fast,FM_lower,FM_upper)
			FM_f = 1			
		} else {
      global::FM_sigmoid = itkSigmoidImageFilter3D(FM_grad,FM_min,FM_max,FM_alpha,FM_beta)
      global::FM_fast = itkFastMarchingImageFilter3D(FM_sigmoid,FM_seed_X,FM_seed_Y,FM_seed_Z,FM_alpha,FM_beta,FM_stopping_time)
      global::FM_thres = itkBinaryThresholdImageFilter3D(FM_fast,FM_lower,FM_upper)
			FM_f = 1
		}
    
    show FM_input
		show FM_thres
		FM_input_draw.compare(FM_thres_draw)
	}
  
  proc FM_SeedPoint() \
  {
    show FM_input
    if (exists(FM_input_draw)) {
      if (FM_dim==0) {
        FM_SetSeedPoint2( \
                          FM_input_draw.GetXPos, \
                          FM_input_draw.GetYPos \
                        )
      } else {
        FM_SetSeedPoint3( \
                          FM_input_draw.GetXPos, \
                          FM_input_draw.GetYPos, \
                          FM_input_draw.GetZPos \
                        )
      }
    }
  }
  
  proc FM_SetSeedPoint2( NUM x, NUM y) \
  {
    printn x
    printn y
    FM_seed_X = x
    FM_seed_Y = y
  }
  
  proc FM_SetSeedPoint3( NUM x, NUM y, NUM z) \
  {
    printn x
    printn y
    printn z
    FM_seed_X = x
    FM_seed_Y = y
    FM_seed_Z = z
  }
  
	proc FM_Save() {
		filename=FM_fast_filename-".gz"-".ami";
    if (FM_f) {
      if (FM_dim==0) {
        filename = filename + sprint("_seedX%0.1f",FM_seed_X) \
                            + sprint("_seedY%0.1f",FM_seed_Y) \
                            + sprint("_alpha%0.1f",FM_alpha) \
                            + sprint("_beta%0.1f",FM_beta) \
                            + sprint("_thres%0.0f",FM_threshold) \
                            + sprint("_stop%0.0f",FM_stopping_time) \
                            + sprint("_outmin%0.1f",FM_min) \
                            + sprint("_outmax%0.1f",FM_max) 
      } else {
        filename = filename + sprint("_seedX%0.1f",FM_seed_X) \
                            + sprint("_seedY%0.1f",FM_seed_Y) \
                            + sprint("_seedZ%0.1f",FM_seed_Z) \
                            + sprint("_alpha%0.1f",FM_alpha) \
                            + sprint("_beta%0.1f",FM_beta) \
                            + sprint("_thres%0.0f",FM_threshold) \
                            + sprint("_stop%0.0f",FM_stopping_time)\
                            + sprint("_outmin%0.1f",FM_min) \
                            + sprint("_outmax%0.1f",FM_max)
      }
    } else {
			print "First you must create the image.\n"
		}
    filename = filename + FM_result_filename_ext
    print "saving file "+filename+"\n"
    FM_thres.save filename
  }
  
	proc FM_Gui() {
		global::FM_win = ParamWin("itkFastMarching")
    FM_win.BeginBook
		
			FM_win.AddPage("Init")
			
			FM_win.BeginBoxPanel("Input Image")
          # set the input image
          FM_win.BeginHorizontal
            FM_win.AddImageChoice(FM_input_name, "")
            FM_win.AddButton("Load",FM_load_input)
          FM_win.EndHorizontal
					FM_win.BeginHorizontal
						dim_id = FM_win.AddEnum(FM_dim,"Dimension")
						FM_win.AddEnumChoice(dim_id, "2D")
						FM_win.AddEnumChoice(dim_id, "3D")
					FM_win.EndHorizontal
			FM_win.EndBoxPanel
			FM_win.BeginBoxPanel("Gradient Mode")
					FM_win.BeginHorizontal
						gradmode_id = FM_win.AddEnum(FM_gradient_mode,"Mode")
						FM_win.AddEnumChoice(gradmode_id, "NormGradient")
					FM_win.EndHorizontal
			FM_win.EndBoxPanel      
			
			FM_win.AddPage("Param")
			
      FM_win.BeginBook
        FM_win.AddPage("Gradient")
          FM_win.AddFloat(FM_stand,"StandDev",0,(FM_inputmax-FM_inputmin)/2)
            
        FM_win.AddPage("Sigmoid")
          FM_win.AddFloat(FM_min,"OutputMin",0,FM_inputmin)
          FM_win.AddFloat(FM_max,"OutputMax",0,FM_inputmax)
            
        FM_win.AddPage("FastMarching")
          FM_win.AddButton("Set Seed Point",FM_SeedPoint)             
          FM_win.AddFloat(FM_alpha,"Alpha",-3,FM_inputmax)
          FM_win.AddFloat(FM_beta,"Beta",0,FM_inputmax)
          FM_win.AddFloat(FM_stopping_time,"Stopping Time Value",0,FM_inputmax)
            
        FM_win.AddPage("Thresholding Param")
          FM_win.AddFloat(FM_lower,"Lower Threshold",0,FM_inputmax)
          FM_win.AddFloat(FM_upper,"Upper Threshold",0,FM_inputmax)
      
      FM_win.EndBook
        
			FM_win.AddPage("Run")
			
			FM_win.BeginBoxPanel("Processing")
				FM_win.AddButton("Run", FM_Run)
			FM_win.EndBoxPanel
			
			FM_win.AddPage("Save")
			
			FM_win.BeginBoxPanel("Result")
				FM_win.AddButton("Save", FM_Save)
			FM_win.EndBoxPanel
			
		FM_win.EndBook
		
		FM_win.AddButton("Close",FM_Close)
		
		FM_win.update
    FM_win.Display
	}
	
	FM_init
	
}
# end if (!FM_defined) 