if (!exists(itkFastMarchingClass)) {
 
  ami_import->ITK()
  func "BasicFilters/itkSigmoidFilter.amil"
  
#*******************************************************************************************#
#****************************FASTMARCHING***************************************************#
#*******************************************************************************************#
  
  Class itkFastMarchingClass {
    
    global::itkSigmoidClass ::SIG
    ::itk=&global::itk
  
    proc ::Init() {
    
      #global::itkSigmoidClass ::sig
      ::class_name="global::itkFastMarchingClass"
      ::input_name   = "","Name of the input image variable"
      ::input_velocity_name   = "","Name of the input velocity image variable"
      ::gradient_mode = INT(0), "Gradient mode: Computes the norm of the gradient of the image."
      ::seed_X = 0, "Seed point in X-axis."
      ::seed_Y = 0, "Seed point in Y-axis."
      ::seed_Z = 0, "Seed point in Z-axis."
      ::alpha = -0.5, "Constant to compute the sigmoid function and FastMarching solution."
      ::beta = 3, "Constant to compute the sigmoid function and FastMarching solution."
      ::lower = 0, "Set the lower threshold of the BinaryThreshold Filter."
      ::upper = 100, "Set the upper threshold of the BinaryThreshold Filter."
      ::stopping_time = 100, "Fast Marching algorithm is terminated when the value of the smallest trial point is greater than the stopping value."
      ::dim = INT(1), "The dimension of the image."
      
      ::inputmin = 0, "Minimal Intensity of the image."
      ::inputmax = 32000, "Maximal Intensity of the image."
    }

    proc ::Close() \
    {
      ::win.HidePanel
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
    proc ::CloseAll() {
      eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
      ::SIG->CloseAll()
      ::Close
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    proc ::Load_input() {

      eval "::input <<= (FLOAT)"+::input_name+";"
        if (::input_name=="Image") {
          ::input_name = "::input"
          ::win.Update(-1)
        }
      
      ::inputmin = min(::input)
      ::inputmax = max(::input)
      
      show ::input
    }
    
    proc ::Load_input_velocity() {

      eval "::input_velocity <<= (FLOAT)"+::input_velocity_name+";"
        if (::input_velocity_name=="Image") {
          ::input_velocity_name = "::input_velocity"
          ::win.Update(-1)
        }
      
      ::inputmin = min(::input_velocity)
      ::inputmax = max(::input_velocity)
      
      show ::input_velocity
    }
    
    proc ::set_input(IMAGE im) \
    {
      ::input <<= im
    }
  
    proc ::set_fast(IMAGE im) \
    {
      ::fast <<= im
    }
    
    proc ::set_sigmoid(IMAGE im) \
    {
      ::SIG->set_sigmoid(im)
    }
    
    proc ::Run() {

      ::SIG->set_input(::input)
      ::SIG->dim = ::dim
      ::SIG->Run
      
      if (::gradient_mode==0) {
        if (::dim==0) {
          ::fast = ::itk->FastMarchingImageFilter2D(::SIG->sigmoid,::seed_X,::seed_Y,::alpha,::beta,::stopping_time)
          ::thres = ::itk->BinaryThresholdImageFilter2D(::fast,::lower,::upper)
          ::f = 1			
        } else {
          ::fast = ::itk->FastMarchingImageFilter3D(::SIG->sigmoid,::seed_X,::seed_Y,::seed_Z,::alpha,::beta,::stopping_time)
          ::thres = ::itk->BinaryThresholdImageFilter3D(::fast,::lower,::upper)
          ::f = 1
        }
      } else {
        if (::dim==0) {
          ::fast = ::itk->FastMarchingImageFilter2D(::input_velocity,::seed_X,::seed_Y,::alpha,::beta,::stopping_time)
          ::thres = ::itk->BinaryThresholdImageFilter2D(::fast,::lower,::upper)
          ::f = 1			
        } else {
          ::fast = ::itk->FastMarchingImageFilter3D(::input_velocity,::seed_X,::seed_Y,::seed_Z,::alpha,::beta,::stopping_time)
          ::thres = ::itk->BinaryThresholdImageFilter3D(::fast,::lower,::upper)
          ::f = 1
        }
      }
    }
    
    proc ::SeedPoint() \
    {
      #show ::input
      if (::gradient_mode==0) \
      {
        ::input <<= ::SIG->sigmoid
      } else {
        ::input <<= ::input_velocity
      }
      show ::input
      if (exists(::input_draw)) {
        if (::dim==0) {
          ::SetSeedPoint2( \
                            ::input_draw.GetXPos, \
                            ::input_draw.GetYPos \
                          )
        } else {
          ::SetSeedPoint3( \
                            ::input_draw.GetXPos, \
                            ::input_draw.GetYPos, \
                            ::input_draw.GetZPos \
                          )
        }
      }
    }
    
    proc ::SetSeedPoint2( NUM x, NUM y) \
    {
      printn x
      printn y
      ::seed_X = x
      ::seed_Y = y
    }
    
    proc ::SetSeedPoint3( NUM x, NUM y, NUM z) \
    {
      printn x
      printn y
      printn z
      ::seed_X = x
      ::seed_Y = y
      ::seed_Z = z
    }
    
    proc ::Display() {
    
      show ::input
      show ::thres
      ::input_draw.compare(::thres_draw)
    
    }
    
    proc ::SetParentPanel(OBJECT pp) \
    {
      ::parent_panel = &pp
    }
    
    proc ::ConfigEventL() {
      ::win.EnablePanel(::config_manual, ::gradient_mode==1)
      ::win.EnablePanel(::config_gradient, ::gradient_mode==0)
      ::win.SelectPage(::init_book,::gradient_mode)
    }
    
    proc ::Gui() {
      import = &global::ami_import;
      #::win = import->ParamPanel("itkFM")
      if (exists(::parent_panel)) {
        ::win = import->ParamPanel("itkFM",&::parent_panel)
      } else {
        ::win = import->ParamPanel("itkFM")
      }
            
      ::win.AddPage("itkFM")
      ::win.BeginBook()
      
        ::win.AddPage("Init")
          gradmode_id = ::win.AddEnum( &::gradient_mode,"Mode")
            ::win.AddEnumChoice(gradmode_id, "NormGradient")
            ::win.AddEnumChoice(gradmode_id, "User Velocity Image")
          ::win.SetCallback(&::ConfigEventL)
          
          ::init_book = ::win.BeginBook()
            ::SIG->SetParentPanel(&::win)
            ::SIG->Gui()
            ::config_gradient = ::win.AddPage("Gradient",&::SIG->win)
            
            ::config_manual = ::win.AddPage("Manual input")
            ::win.BeginBoxPanel("Input Velocity Image")
              ::win.BeginHorizontal
                ::win.AddImageChoice( &::input_velocity_name, "")
                ::win.AddButton("Load",::Load_input_velocity)
              ::win.EndHorizontal
            ::win.EndBoxPanel
          ::win.EndBook()

        ::win.AddPage("Param")
          
          ::win.AddButton("Set Seed Point",::SeedPoint)             
          ::win.AddFloat( &::stopping_time,"Stopping Time Value",0,::inputmax)
          ::win.AddFloat( &::lower,"Lower Threshold",0,::inputmax)
          ::win.AddFloat( &::upper,"Upper Threshold",0,::inputmax)
          ::win.AddFloat( &::alpha,"Alpha",-3,::inputmax)  
          ::win.AddFloat( &::beta,"Beta",0,::inputmax)
          
          ::win.BeginHorizontal
            ::win.AddButton("Run", ::Run)
            ::win.AddButton("Display", ::Display)
          ::win.EndHorizontal
        
      ::win.EndBook
      
      ::win.BeginHorizontal
        ::win.AddButton("Close",      ::Close)
        ::win.AddButton("Close All",  ::CloseAll)
      ::win.EndHorizontal
           
      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::ConfigEventL
      ::win.Update(-1)

    }
    
    ::Init
  }
# Class itkFastMarchingClass
}
