#
# Interface for itk WaterShed Image Segmentation Filter
#

if (!exists(WS_defined)) {
  WS_defined=1
  ami_import->ITK()
  
  #------------------------
  proc WS_init() {
    global_new

    WS_input_name   = "","Name of the input image variable"
    WS_gradient_mode = INT(0), "Gradient mode: Computes the norm of the gradient of the image."
    WS_stand = 1, "Standard deviation of the Gaussian kernel."
    WS_lThreshold = 0, "Threshold is used to set the absolute minimum height value used during processing."
    WS_FloodLevel = 2, "The Level parameter controls the depth of metaphorical flooding of the image."
    WS_dim = INT(1), "The dimension of the image."

    WS_inputmin = 0, "Minimal Intensity of the image."
    WS_inputmax = 32000, "Maximal Intensity of the image."

    WS_gradient_filename = "GradientResult"
    WS_water_filename = "WatershedResult"
    WS_result_filename_ext = ".ami.gz"
    WS_g = UCHAR(0)
    WS_w = UCHAR(0)

    WS_Gui()
  }

  #------------------------
  proc WS_Close() \
  {
    WS_win.Hide
    delvars "WS_*_draw"
    delvars "WS_*"
  }
  WS_Close.Comments("Close current script and delete its variables")

  #------------------------
  proc WS_load_input() {

    eval "global::WS_input <<= (FLOAT)"+WS_input_name+";"
    if (WS_input_name=="Image") {
      WS_input_name = "WS_input"
      WS_win.update
    }

    show WS_input
  }
  
  #------------------------
  proc WS_Run() {
    if (WS_gradient_mode==0) {
      global::WS_grad = normgrad(WS_input,WS_stand)
      WS_g = 1
    }
    
    if (WS_dim==0) {
      global::WS_water = itk->WaterShedImageFilter2D(WS_grad,WS_lThreshold,WS_FloodLevel)
      WS_w = 1
    } else {
      global::WS_water = itk->WaterShedImageFilter3D(WS_grad,WS_lThreshold,WS_FloodLevel)
      WS_w = 1
    }
    show WS_grad
    show WS_water
    WS_grad_draw.compare(WS_water_draw)
  }

  #------------------------
  proc WS_SaveG() {
    filename=WS_gradient_filename-".gz"-".ami";
    if (WS_g) {
      filename = filename + sprint("_standDev%0.0f",WS_stand)
    } else {
      print "First you must create the image.\n"
    }
    filename = filename + WS_result_filename_ext
    print "saving file "+filename+"\n"
    WS_grad.save filename
  }
  WS_SaveG.Comments("Saves the gradient image as ${WS_gradient_filename}_StandDevXX.ami.gz")

  #------------------------
  proc WS_SaveR() {
    filename=WS_water_filename-".gz"-".ami";
    if (WS_w) {
      filename = filename + sprint("_thres%0.0f",WS_lThreshold) \
                          + sprint("_lvl%0.2f",WS_FloodLevel)
    } else {
      print "First you must create the image.\n"
    }
    filename = filename + WS_result_filename_ext
    print "saving file "+filename+"\n"
    WS_water.save filename
  }
  WS_SaveR.Comments("Saves the gradient image as ${WS_water_filename}_thresXX_lvlXX.ami.gz")

  #------------------------
  proc WS_Gui() {
    global::WS_win = ParamWin("WaterShed")
    WS_win.BeginBook
    
      WS_win.AddPage("Init")

        WS_win.BeginBoxPanel("Input Image")
          # set the input image
          WS_win.BeginHorizontal
            WS_win.AddImageChoice(WS_input_name, "")
            WS_win.AddButton("Load",WS_load_input)
          WS_win.EndHorizontal
          WS_win.BeginHorizontal
            dim_id = WS_win.AddEnum(WS_dim,"Dimension")
            WS_win.AddEnumChoice(dim_id, "2D")
            WS_win.AddEnumChoice(dim_id, "3D")
          WS_win.EndHorizontal
        WS_win.EndBoxPanel
        WS_win.BeginBoxPanel("Gradient Mode")
          WS_win.BeginHorizontal
            gradmode_id = WS_win.AddEnum(WS_gradient_mode,"Mode")
            WS_win.AddEnumChoice(gradmode_id, "NormGradient")
          WS_win.EndHorizontal
        WS_win.EndBoxPanel


      WS_win.AddPage("Param")

        WS_win.BeginBoxPanel("Gradient Param")
          WS_win.AddFloat(WS_stand,"StandDev",0,(WS_inputmax-WS_inputmin)/2)
        WS_win.EndBoxPanel
        WS_win.BeginBoxPanel("WaterShed Param")
          WS_win.AddFloat(WS_lThreshold,"Threshold",0,WS_inputmax)
          WS_win.AddFloat(WS_FloodLevel,"Flood Level",0,1)
        WS_win.EndBoxPanel

      WS_win.AddPage("Run")

        WS_win.BeginBoxPanel("Processing")
          WS_win.AddButton("Run", WS_Run)
        WS_win.EndBoxPanel

      WS_win.AddPage("Save")

      WS_win.BeginBoxPanel("Result")
        WS_win.AddButton("Save", WS_SaveR)
      WS_win.EndBoxPanel
      WS_win.BeginBoxPanel("Gradient")
        WS_win.AddButton("Save", WS_SaveG)
      WS_win.EndBoxPanel
    WS_win.EndBook

    WS_win.AddButton("Close",WS_Close)

    WS_win.update
    WS_win.Display
  }

  WS_init

}
# end if (!WS_defined)
