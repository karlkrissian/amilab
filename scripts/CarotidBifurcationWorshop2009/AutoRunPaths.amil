#!/usr/local/bin/amilab
#
# automatically run experiments
#

#
# first argument: configuration
# second argument: dataset center
# third argument: dataset number
#

if (argc>=3) {
  AR_center     = atof($1)
  AR_dataid     = atof($2)
  AR_computeves = atof($3)
  AR_denoising  = atof($4)
  printn AR_center
} else {
  printn "Needs 2 arguments"
  printn "  - dataset center"
  printn "  - dataset number"
  printn "  - compute vesselness: 1 if recompute the vesselness 0 otherwise"
  printn "  - use denoising"
  quit
}

emptyargs

InitTime

func "RunExperimentsGui.amil"

# ------- Initialization
# don't stop for information dialogs
CE_nointeraction = 1

CE_datacenter = AR_center
CE_datanumber = AR_dataid
printn CE_datacenter
CE_win.update
CarotidExperiments_ReadData

if (AR_denoising) {
  CarotidExperiments_ReduceNoise()
  NLM_FastFilter
}

if (!AR_computeves) {
  # ------- Read Vesselness if it exists
  CarotidExperiments_ReadVesselness
}

if (!exists(ML_result)) {
  # Load the vesselness 
  CarotidExperiments_Vesselness
  # Run it
  ML_MultiLines_new
  # Save the result
  CarotidExperiments_SaveVesselness
  # Close to avoid occupying too much memory
  ML_Close
  # Re-Read the result
  CarotidExperiments_ReadVesselness
} 

if (!exists(ML_result)) {
  InfoDialog "RML_result is still not found, even after running the Vesselness filter !!!"
}

# ------- Compute the local statistics
CarotidExperiments_LocalStats
CP_Apply

# ------- Create and Save the paths
CarotidExperiments_CreatePaths
# now we have the paths, we can close the SP gui
SP_Close

# -------- Find the junction
CarotidExperiments_JunctionFromPaths

# -------- Save the result: junction and paths
CarotidExperiments_SaveJunction

# -------- Segment both branches
CarotidExperiments_LevelSetsExternal
CarotidExperiments_LevelSetsInternal

# -------- Save the result
CarotidExperiments_LevelSetsPathsSave

# -------- Run Evaluation
CarotidExperiments_Evaluation

EndTime

quit
