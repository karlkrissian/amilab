#
# Script to compute probability of belonging to a structure
# based on an intensity mapping of the local statistics
# of the image intensity (local mean and local standard deviation)
#

func "Common/ScriptGui"

if (!exists(WeightedLSCLass)) {
  
  Class WeightedLSCLass: public ScriptGui {

    #--------------------------
    proc ::Init() \
    {
      ::input_name = ""
      ::weights_name = ""
      ::output_prefix = ""
      ::localstats_winsize = INT(5)
      ::min_weight = 0.01
      ::Gui
    }

    #--------------------------
    proc ::LoadInput() \
    {
      eval "::input <<=(FLOAT)"+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
    }

    #--------------------------
    proc ::LoadWeights() \
    {
      eval "::weights <<=(FLOAT)"+::weights_name+";"
      if (::weights_name=="Image") {
        ::weights_name = "::weights"
        ::win.Update(-1)
      }
    }


    #--------------------------
    proc ::Apply() \
    {
      ::LoadInput()
      ::LoadWeights()

      # compute weighted local mean intensity
      ::lm = localmean2(::input*::weights,::localstats_winsize)
      ::w_lm    = localmean2(::_eights,::_ocalstats_winsize)

      # set minimal weight, and divide by weights
      ::w_lm = (::w_lm>::min_weight)*::w_lm+(::w_lm<=::min_weight)*::min_weight
      ::lm = ::lm/::w_lm
      ::lm = (::w_lm>2*::min_weight)*::lm

      eval "global::"+::output_prefix+"lm <<= ::lm;"

      # compute weighted local standard deviation of intensity
      ::var = localmean2(::input*::input*::weights,::localstats_winsize)
      ::var = ::var/::w_lm 
      ::var = (::w_lm>2*::min_weight)*::var
      ::var = ::var-::lm*::lm
      ::sd = sqrt(::var)

      eval "global::"+::output_prefix+"sd <<= ::sd;"

      # apply Gaussian function
      ::res = ::input - ::lm
      ::res = (::res*::res)/(::var*1.5*1.5)
      ::res = exp(-::res)
      ::res = (::w_lm>2*::min_weight)*::res


      eval "global::"+::output_prefix+"prob <<= ::res;"

      ::Display
    }

    #--------------------------
    proc ::_Display() \
    {
      show ::input
      ::input_draw.compare(::weights)
      eval "::input_draw.compare("+::output_prefix+"lm);"
      eval "::input_draw.compare("+::output_prefix+"sd);"
      eval "::input_draw.compare("+::output_prefix+"prob);"
    }
    
    #--------------------------
    proc ::Gui() \
    {
      import = &global::ami_import;
      ::win = import->ParamPanel("Prob")

      ::win.BeginPanel("Parameters")
        ::win.AddImageChoice( &::_input_name,"Input")
        ::win.AddImageChoice( &::_weights_name,"Weights")
        ::win.AddString( &::_output_prefix,"Output Prefix")
    
        ::win.AddInt( &::_localstats_winsize,  "::_localstats_winsize", 1,10)
        ::win.AddFloat( &::_min_weight,  "::_min_weight", 0.01,1)
    
        ::win.AddButton("Apply",  ::_Apply)
        ::win.AddButton("Display",::_Display)
      ::win.EndPanel
      
      ::AddStandardButtons(&::win)

      ::win.Update(-1)
      ::win.Display
    }

    #----------------------------
    # Main
    #----------------------------
    ::Init
  }
} 
# end if (!exists(::_defined)) 
