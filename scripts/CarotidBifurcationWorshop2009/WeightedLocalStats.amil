#
# Script to compute probability of belonging to a structure
# based on an intensity mapping of the local statistics
# of the image intensity (local mean and local standard deviation)
#


if (!exists(WLS_defined)) {
  WLS_defined=1

  #--------------------------
  proc WLS_Init() \
  {
    global::WLS_input_name    		= ""
    global::WLS_weights_name  		= ""
    global::WLS_output_prefix 		= "WLS_"
    global::WLS_localstats_winsize  	= INT(5)
    global::WLS_min_weight  		= 0.01
    WLS_Gui
  }

  #--------------------------
  proc WLS_LoadInput() \
  {
    eval "global::WLS_input <<=(FLOAT)"+WLS_input_name+";"
    if (WLS_input_name=="Image") {
      WLS_input_name = "WLS_input"
      WLS_win.update
    }
  }

  #--------------------------
  proc WLS_LoadWeights() \
  {
    eval "global::WLS_weights <<=(FLOAT)"+WLS_weights_name+";"
    if (WLS_weights_name=="Image") {
      WLS_weights_name = "WLS_weights"
      WLS_win.update
    }
  }

  #--------------------------
  proc WLS_Close() \
  {
    WLS_win.Hide
    del "WLS_*_draw"
    del "WLS_*"
    del "wls_*"
  }

  #--------------------------
  proc WLS_Apply() \
  {
    WLS_LoadInput
    WLS_LoadWeights

    # compute weighted local mean intensity
    wls_lm = localmean2(WLS_input*WLS_weights,WLS_localstats_winsize)
    wls_w_lm    = localmean2(WLS_weights,          WLS_localstats_winsize)

    # set minimal weight, and divide by weights
    wls_w_lm = (wls_w_lm>WLS_min_weight)*wls_w_lm+(wls_w_lm<=WLS_min_weight)*WLS_min_weight
    wls_lm = wls_lm/wls_w_lm
    wls_lm = (wls_w_lm>2*WLS_min_weight)*wls_lm

    eval "global::"+WLS_output_prefix+"lm <<= wls_lm;"

    # compute weighted local standard deviation of intensity
    wls_var = localmean2(WLS_input*WLS_input*WLS_weights,WLS_localstats_winsize)
    wls_var = wls_var/wls_w_lm 
    wls_var = (wls_w_lm>2*WLS_min_weight)*wls_var
    wls_var = wls_var-wls_lm*wls_lm
    wls_sd = sqrt(wls_var)

    eval "global::"+WLS_output_prefix+"sd <<= wls_sd;"

    # apply Gaussian function
    wls_res = WLS_input - wls_lm
    wls_res = (wls_res*wls_res)/(wls_var*1.5*1.5)
    wls_res = exp(-wls_res)
    wls_res = (wls_w_lm>2*WLS_min_weight)*wls_res


    eval "global::"+WLS_output_prefix+"prob <<= wls_res;"

    WLS_Display
  }

  #--------------------------
  proc WLS_Display() \
  {
    global_new
      show WLS_input
      WLS_input_draw.compare(WLS_weights)
      eval "WLS_input_draw.compare("+WLS_output_prefix+"lm);"
      eval "WLS_input_draw.compare("+WLS_output_prefix+"sd);"
      eval "WLS_input_draw.compare("+WLS_output_prefix+"prob);"
  }
  
  #--------------------------
  proc WLS_Gui() \
  {
    global::WLS_win = ParamWin("Prob")

    WLS_win.BeginPanel("Parameters")
      WLS_win.AddImageChoice(WLS_input_name,"Input")
      WLS_win.AddImageChoice(WLS_weights_name,"Weights")
      WLS_win.AddString(WLS_output_prefix,"Output Prefix")
  
      WLS_win.AddInt(  WLS_localstats_winsize,1,10)
      WLS_win.AddFloat(WLS_min_weight,0.01,1)
  
      WLS_win.AddButton("Apply",  WLS_Apply)
      WLS_win.AddButton("Display",WLS_Display)
    WLS_win.EndPanel
    WLS_win.AddButton("Close",  WLS_Close)

    WLS_win.update
    WLS_win.Display
  }

  #----------------------------
  # Main
  #----------------------------
  WLS_Init

} 
# end if (!exists(WLS_defined)) 
