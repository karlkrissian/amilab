# C++ SmartVolumeMapper example translated to amilab

func "vtkExampleHelperClass"

del SmartVolumeMapperClass 


Class SmartVolumeMapperClass : public vtkExampleHelperClass {

  proc ::CreateImageData(OBJECT imageData) {
  
    language.Vars.GetCurrentContext().AddDefault(&vtk)
    # Create a spherical implicit function.
    ::sphere = vtkSphere.New()
    ::sphere.SetRadius(0.1)
    ::sphere.SetCenter(0.0,0.0,0.0)
  
    ::sampleFunction = vtkSampleFunction.New()
    ::sampleFunction.SetImplicitFunction(::sphere)
    ::sampleFunction.SetOutputScalarTypeToDouble()
    ::sampleFunction.SetSampleDimensions(127,127,127) # intentional NPOT dimensions.
    ::sampleFunction.SetModelBounds(-1.0,1.0,-1.0,1.0,-1.0,1.0)
    ::sampleFunction.SetCapping(false)
    ::sampleFunction.SetComputeNormals(false)
    ::sampleFunction.SetScalarArrayName("values")
    ::sampleFunction.Update()
  
    #vtkDataArray* 
    a = ::sampleFunction.GetOutput().GetPointData().GetScalars("values")
    range = a.GetRange()
  
    ::t = vtkImageShiftScale.New()
    ::t.SetInputConnection(::sampleFunction.GetOutputPort())
  
    ::t.SetShift(-range[0])
    magnitude=range[1]-range[0]
    if(magnitude==0.0) {
      magnitude=1.0
    }
    ::t.SetScale(255.0/magnitude)
    ::t.SetOutputScalarTypeToUnsignedChar()
  
    ::t.Update()
  
    imageData.ShallowCopy(::t.GetOutput())
  }
    
  ::Create_wxElts("SmartVolumeMapper example")
  
  # Example code
  # add vtk as default context
  language.Vars.GetCurrentContext().AddDefault(&vtk)
  
  imageData = vtkImageData.New()
  ::CreateImageData(imageData)
 
  ren1 = vtkRenderer.New()
  ren1.SetBackground(0.1,0.4,0.2)
 
  #renWin.AddRenderer(ren1)
 
  #renWin.SetSize(301,300) # intentional odd and NPOT  width/height
 
  #iren = vtkRenderWindowInteractor.New()
  #iren.SetRenderWindow(renWin)
 
  #renWin.Render() # make sure we have an OpenGL context.
 
  volumeMapper = vtkSmartVolumeMapper.New()
  volumeMapper.SetBlendModeToComposite() # composite first
  volumeMapper.SetInputData(imageData)
  volumeProperty = vtkVolumeProperty.New()
  volumeProperty.ShadeOff()
  volumeProperty.SetInterpolationType(VTK_LINEAR_INTERPOLATION)
  #volumeProperty.SetInterpolationType(1)
 
  compositeOpacity = vtkPiecewiseFunction.New()
  compositeOpacity.AddPoint(0.0,0.0)
  compositeOpacity.AddPoint(80.0,1.0)
  compositeOpacity.AddPoint(80.1,0.0)
  compositeOpacity.AddPoint(255.0,0.0)
  volumeProperty.SetScalarOpacity(compositeOpacity) # composite first.
 
  color = vtkColorTransferFunction.New()
  color.AddRGBPoint(0.0  ,0.0,0.0,1.0)
  color.AddRGBPoint(40.0  ,1.0,0.0,0.0)
  color.AddRGBPoint(255.0,1.0,1.0,1.0)
  volumeProperty.SetColor(color)
 
  volume = vtkVolume.New()
  volume.SetMapper(volumeMapper)
  volume.SetProperty(volumeProperty)
  ren1.AddViewProp(volume)
  ren1.ResetCamera()
 
  # Render composite. In default mode. For coverage.
  #renWin.Render()
 
  # 3D texture mode. For coverage.
  #if !defined(VTK_LEGACY_REMOVE) && !defined(VTK_OPENGL2)
  volumeMapper.SetRequestedRenderModeToRayCastAndTexture()
  #endif # VTK_LEGACY_REMOVE
  #renWin.Render()
 
  # Software mode, for coverage. It also makes sure we will get the same
  # regression image on all platforms.
  volumeMapper.SetRequestedRenderModeToRayCast()
  
  ::AddRenderer(ren1)
 

}

del SmartVolumeMapper_obj
SmartVolumeMapperClass SmartVolumeMapper_obj

