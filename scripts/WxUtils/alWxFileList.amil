
del alWxFileList

#===========================================================================
# Parse directories and show results in a list with option to run a command
# for a given selection
# 
Class alWxFileList \
{

  #-------------------------------------------------------------------------
  proc ::Init() \
  {
    ::paths=VarVector()
    ::paths.push_back(".")
    ::scan_level=3
    ::max_scan=1000
    ::file_specs = VarVector()
    ::list_files=true
  }

  #-------------------------------------------------------------------------
  proc ::ClearFileSpecs( STRING spec) \
  {
    ::file_specs.clear()
  }

  #-------------------------------------------------------------------------
  proc ::AddFileSpec( STRING spec) \
  {
    ::file_specs.push_back(spec)
  }
  
  #-------------------------------------------------------------------------
  # Sets the current searching path
  #
  proc ::ClearPaths( ) \
  {
    ::paths.clear()
  }

  #-------------------------------------------------------------------------
  # Sets the current searching path
  #
  proc ::AddPath( STRING path) \
  {
    ::paths.push_back(path)
  }

  #-------------------------------------------------------------------------
  # Sets the command to run on a given selection
  #
  proc ::SetSelectionCommand( VAR selcmd) \
  {
    ::selection_cmd = &selcmd
  }

  #-------------------------------------------------------------------------
  # returns the list of selected files
  # as a VarVector of strings
  #
  proc ::GetSelected() \
  {
    return = VarVector()
    item = ::listctrl.GetNextItem(-1,\
                                  wx.wxLIST_NEXT_ALL,\
                                  wx.wxLIST_STATE_SELECTED)
    ok = (item!=-1)
    while ok {
      #printn "item = %1%" % item
      list_item = wx.wxListItem()
      # need to set the mask of information to retreive ... especially for windows
      list_item.SetMask(wx.wxLIST_MASK_TEXT)
      list_item.SetId(item)
      # Get subpath
      list_item.SetColumn(0)
      ::listctrl.GetItem(&list_item)
      subpath = wx.FromWxString(list_item.GetText())
      # Get Filename
      #list_item.SetId(item)
      list_item.SetColumn(1)
      ::listctrl.GetItem(&list_item)
      filename = wx.FromWxString(list_item.GetText())
      #printn "filename=%1%" % filename
      # Get path ID
      #list_item.SetId(item)
      list_item.SetColumn(2)
      ::listctrl.GetItem(&list_item)
      path_id = atof(wx.FromWxString(list_item.GetText()))

      #fullname = ::graphviz_dotdir+"/"+subpath+"/"+filename
      fullname = ::paths[path_id]+"/"+subpath+"/"+filename
      #printn "fullname = %1%" % fullname

      # cleanup the name
      fullname = wx.FromWxString(wx.wxFileName(fullname).GetFullPath())
      return.push_back(fullname)
      #printn "fullname = %1%" % fullname

      item = ::listctrl.GetNextItem(item,\
                                    wx.wxLIST_NEXT_ALL,\
                                    wx.wxLIST_STATE_SELECTED)
      ok = (item!=-1)
    }

  }

  #-------------------------------------------------------------------------
  proc ::CB_ListItemSelected( OBJECT event ) \
  {
    #index = event.GetIndex()
    #printn "index %1%" % index
    #text = wx.FromWxString(event.GetItem().GetText())
    #printn "item text = %1%" % text
    #::selected_point = pos
    if exists(::selection_cmd) {
      ::selection_cmd()
    }

    #selection = ::GetSelected()

    ## keep only the last selected file for the moment
    #::graphviz_file = wx.FromWxString(wx.wxFileName(fullname).GetFullPath())
    #::OutputAuto()
    #::Run()
  }

  #-------------------------------------------------------------------------
  proc ::AddToList( NUM pathid, STRING subpath, STRING disksize, \
                    STRING filename) \
  {
    n = ::listctrl.GetItemCount()
    pos = ::listctrl.InsertItem(n,"%1%"%subpath)
    ::listctrl.SetItemData(pos,n)
    ::listctrl.SetItem(pos,1,"%1%"%filename)
    ::listctrl.SetItem(pos,2,"%1%"%pathid)
    ::listctrl.SetItem(pos,3,"%1%"%disksize)
  }


  #-------------------------------------------------------------------------
  proc ::ScanDir( NUM pathid, STRING dirpath, STRING subpath, \
                  STRING indent, NUM level) \
  {   
    if (level<=::scan_level)&&(::scan_count<::max_scan) {
      SetStatusText("scanning %1%" % dirpath + "(%1%"%level+" | %1%)"%::scan_count)
      printn "scanning %1%" % dirpath + "(%1%"%level+" | %1%)"%::scan_count
      nextDir = wx.wxDir(dirpath)
      ## create smart pointer to allow deleting the object
      #nextDir_ptr = wx.std_auto_ptr_wxDir.auto_ptr_1(&nextDir)

      nextFile = wx.wxString()
      # Scan files
      # and while there are still files to process
      files_info = VarVector()
      sum_size = 0

      for n=0 to ::file_specs.size()-1 \
      {
        process = nextDir.GetFirst(&nextFile, ::file_specs[n], wx.wxDIR_FILES)
        while process {
          nfile = wx.FromWxString(&nextFile)
          sum_size = sum_size + wx.wxFileName(dirpath+"/"+nfile)\
                                    .GetSize().ToDouble()
          fsize = wx.FromWxString(wx.wxFileName(dirpath+"/"+nfile)\
                                    .GetHumanReadableSize())
          ::scan_count++
          files_info.push_back(indent+"%1%" % nfile + " \t%1%"%fsize)

          ::AddToList( pathid, subpath, fsize,nfile)
          # and get the next file
          process = nextDir.GetNext(&nextFile);
        }
      }
      #printn "2"
      if files_info.size()>0 {
        ::txtctrl.AppendText(indent+" %1% files"   % files_info.size()\
                                  + "\t %0.1f Mb" % (sum_size/1000000.0))
        ::txtctrl.LineBreak()
      }

      if ::list_files {
        for n=0 to files_info.size()-1 {
          ::txtctrl.AppendText(files_info[n])
          ::txtctrl.LineBreak()
        }
      }
      #printn "3"

      # Scan directories
      process = nextDir.GetFirst(&nextFile,  "", wx.wxDIR_DIRS)
      # and while there are still files to process
      while process {
        nfile = wx.FromWxString(&nextFile)
        ::scan_count++
        ::txtctrl.AppendText( indent+"%1%/" % nfile)
        ::txtctrl.LineBreak()
        if wx.wxDir.Exists(dirpath+"/"+nfile) \
        {  
          ::ScanDir(  pathid, dirpath+"/"+nfile, subpath+"/"+nfile, \
                      indent+"  ", level+1)
        }
        # and get the next file
        process = nextDir.GetNext(&nextFile);
      }
    } else {
      if ::scan_count>::max_scan {
        SetStatusText("Maximum number of files reached (%1%)" % ::max_scan)
      }
    }
      #printn "4"
  }

  #-------------------------------------------------------------------------
  proc ::Scan() \
  {   
    ::txtctrl.Clear()
    ::listctrl.DeleteAllItems()

    # for now, just use the last path
    ::scan_count = 0
    for pathid=0 to ::paths.size()-1 \
    {
      path = ::paths[pathid]
      printn "%1%" % pathid + ":%1%" % path
      ::ScanDir( pathid, path+"/",".","",0)
    }
    ::listctrl.SetColumnWidth(0, wx.wxLIST_AUTOSIZE)
    ::listctrl.SetColumnWidth(1, wx.wxLIST_AUTOSIZE)
    ::listctrl.SetColumnWidth(2, wx.wxLIST_AUTOSIZE)
  }

  #-------------------------------------------------------------------------
  proc ::AddGui( OBJECT win) \
  {
    win.BeginBook()
      win.AddPage("List")
        ::listctrl = wx.wxListCtrl(&win.CurrentParent())
        win.AddWidget(&::listctrl,1)
        ::listctrl.SetWindowStyle(wx.wxLC_REPORT)
        ::listctrl.InsertColumn_2(0,"Sub-path")
        ::listctrl.InsertColumn_2(1,"File")
        ::listctrl.InsertColumn_2(2,"Path ID")
        ::listctrl.InsertColumn_2(3,"Description")

        # connect event
        ::evh_selected = wx.wxAmiEventHandler(&::CB_ListItemSelected)
        ::evh_selected.SetSendListEvent(true)
        ::listctrl.Connect( wx.wxEVT_COMMAND_LIST_ITEM_SELECTED\
                            ,&::evh_selected.GetEventFunction(),\
                            &NULL,&::evh_selected)
      win.AddPage("Text")
        ::txtctrl = wx.wxRichTextCtrl(&win.CurrentParent())
        win.AddWidget(&::txtctrl,1)
    win.EndBook()
  }

  ::Init()
}
