#!/usr/bin/amilab


if (argc>=3) {
  input            = Image $1
  result = input
  threshold  = atof($2)
  input_filtered   = Image $3
} else {
  InfoDialog "Need at least 3 arguments"
  quit
}
KeepGui=1
if (argc==4) {
  if ($4=="-gui") {
    KeepGui=1
  }
}

printn "Import filters (ami_import->Filters()).\n"
ami_import.Filters()

//----------------------------------------------
proc InPlaceFillMask( IMAGE _input, IMAGE _mask, NUM _it ) {
//   ---------------

  m1 = (FLOAT) (_mask>0)

  #  m1 = EDPdilate( m1,2,0.5)
  morph = global::filters.ContinuousMorphology()
  m1 = morph.Dilate(m1,global::dilation_size,0.5)

  test1 = _input
  filtersize=10
  #filtersize = (_input.vx+_input.vy+_input.vz)/3

  _i=1
  needsmore=1
  while needsmore {
    testf = filter(test1,filtersize,0,0,0)
    test1_bak = test1
    test1 = testf*m1+_input*(1-m1)
    diff = test1_bak-test1
    diff = diff*diff
    diffval=sqrt(mean[m1>0.5](diff))
    print "%1%\t" % diffval
    #sprint(" %0.2f \t",sqrt(mean[m1>0.5](diff)))
    _i = _i+1
    needsmore = (_i<_it)*(abs(diffval)>0.001)
  }

  print "\n"
  _input = test1

} // InPlaceFillMask()
//--------------------------------------------------




tmp = ((FLOAT) input_filtered)-threshold


tmp_cc = CC(tmp)
crop_border=20
dilation_size=15

minsize=10
maxsize=200
nb_components= count((cc_sign==1)*(cc_size>=minsize)*(cc_size<=maxsize))

#fill_iterations=20
fill_iterations=400

n = 1
for _i=0 to cc_sign.tx-1 {
  if ((cc_sign(_i)==1)&&(cc_size(_i)>=minsize)&&(cc_size(_i)<=maxsize)) {
    // found a small connected component of high intensity
    // --> remove it ...
    print "Filling component %1% " % n +" / %1%" % nb_components
    printn sprint(" of size %0.0f",cc_size(_i))
    comp <<= (tmp_cc == _i)
    comp_crop <<= autocrop(comp,crop_border)
    del comp
    input_crop <<= (FLOAT)result[comp_crop.GetExtent]
    InPlaceFillMask(&input_crop,comp_crop,fill_iterations)
    result.putimage(input_crop)
    n=n+1
  }
}
#
#
#

result.save $1-".gz"-".ami"-".vtk"+"_CalcOut.ami.gz"

if (KeepGui) {
  show input
  show result
  input_draw.compare(&result_draw)
} else {
  quit
}

