
func "Common/ScriptGui"

if (!exists(TimerClass)) {

  #------------------------------------
  Class TimerClass : public ScriptGui \
  {
    #------------------------------------
    proc ::Init() \
    {
      ::interval = 0.1, "timer interval in seconds"
      ::oneshot = false, "is called only once or continuously"
      ::evh = wx.wxAmiEventHandler(&::CB_timer)
      ::timer = wx.wxTimer(&::evh)
      ::evh.Connect(wx.wxEVT_TIMER,&::evh.GetEventFunction())
    }

    #------------------------------------
    proc ::SetInterval(NUM n) {
      ::interval = n
    }

    #------------------------------------
    proc ::Start() {
      ::inittime = wx.wxDateTime.UNow()
      ::win.SetLabelValue(::startdate_id,::inittime.FormatISODate().c_str())
      ::win.SetLabelValue(::starttime_id,::inittime.FormatISOTime().c_str())
      ::timer.Start(::interval*1000)
    }

    #------------------------------------
    proc ::Stop() {
      ::timer.Stop()
    }

    #------------------------------------
    proc ::Attach() {
      
      if (exists(::frame)) {
        ::win.Reparent(&::win_parent)
        ::frame.Close()
        del ::frame
        del ::panel
        del ::boxsizer
        del ::win_parent
      }
    }

    #------------------------------------
    proc ::Detach() {
      
      if (!exists(::frame)) {
        ::frame = wx.wxFrame(&ami.MainFrame,wx.wxID_ANY,"Timer",\
              wx.wxPoint(100,100),wx.wxSize(300,300),\
              wx.wxRESIZE_BORDER|wx.wxCLOSE_BOX,"Timer")
        ::frame.Show()

        ::panel = wx.wxPanel(&::frame)
        ::panel.SetBackgroundColour(wx.wxColour(100,100,40))
        # Create a BoxSizer
        ::boxsizer = wx.wxBoxSizer(wx.wxVERTICAL)
    
        ::win_parent = ::win.GetParent()
        ::win.Reparent(&::panel)
        ::boxsizer.Add(&::win, &wx.wxSizerFlags(1).Center().Border(wx.wxALL, 2).Expand())

        ::panel.SetSizer(&::boxsizer)
      }
    }

    #------------------------------------
    proc ::CB_timer() {
      currenttime = wx.wxDateTime.UNow()
      diff=currenttime-::inittime
      ::win.SetLabelValue(::label_id,diff.Format("%M min %S s %l ms").c_str())
    }

    #----------------------------
    # Closes only the object instance
    #
    proc ::Close() {
      ::Stop()
      ::win.HidePanel()
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")

    #------------------------------------
    proc ::Gui() \
    {
      ::win = ParamPanel("Timer")
      
      ::win.BeginBook()
        ::win.AddPage("Run")
          ::win.AddFloat(&::interval,"Interval",0.01,100)
          ::win.BeginHorizontal()

            ::icons.LoadIconPNG("Play")
            ::AddBitmapButton(&::win, &::icons._Play, 32, "Start")
            ::win.SetPositionProp(-1,0)

            ::icons.LoadIconPNG2("Stop playing","Stop_playing")
            ::AddBitmapButton(&::win, &::icons._Stop_playing, 32, "Stop")
            ::win.SetPositionProp(-1,0)
            
          ::win.EndHorizontal()
          ::win.BeginBoxPanel("Started At:")
            ::startdate_id = ::win.AddLabel("Date:","")
            ::starttime_id = ::win.AddLabel("Time:","")
          ::win.EndBoxPanel()
          ::win.BeginBoxPanel("Elapsed Time")
            ::label_id = ::win.AddLabel("","")
          ::win.EndBoxPanel()
          ::win.AddButton("Attach", &::Attach)
          ::win.AddButton("Detach", &::Detach)

      ::win.EndBook()
      ::AddStandardButtons(&::win)
      
      ::win.Update(-1)
      ::win.Display()
    }

    ::Init()
  } # end Class TimerClass

} # end if
