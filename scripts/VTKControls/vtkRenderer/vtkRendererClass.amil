#
# This class is designed to control the parameters of a vtkRenderer
#
del vtkRendererClass
func "Common/ScriptGui"

Class vtkRendererClass : public ScriptGui \
{
  func "VTKControls/vtkActor/vtkActorClass"
  vtkActorClass ::actor_ctrl

  func "Variable/ObjectIO"
  # 
  #=============================================================================
  Class ::ParamClass : public ObjectIO \
  {
    func "WxUtils/alEnum"
    ::description = "Default parameters", \
                    "vtkRenderer parameters"
    ::background_color  = wx.wxColour(173,216,230)
    ::background_color2 = wx.wxColour(144,238,144)
    ::UseGradientBackground = UCHAR(1)
    ::bg_type = INT(0)

    #---------------------------------------------------------------------------
    proc ::__assign__( VAR p) {
      ::background_color      = p.background_color
      ::background_color2     = p.background_color2
      ::UseGradientBackground = p.UseGradientBackground
      ::bg_type               = p.bg_type
    }
  }

  #-----------------------------------------------------------------------------
  # initialize the parameters
  proc ::Init() {
    ::ParamClass ::params
    ::renderer_name  = ""
    ::renderer2_name = ""
    ::sync_camera  = false, "Allow synchronizing camera with second renderer"
    ::camera_synced = false
    ::select_actor = INT(0), "Select an actor by index"
  }

  #-----------------------------------------------------------------------------
  proc ::SetCallback( VAR cb) {
    del ::callback
    ::callback = &cb
  }

  #-----------------------------------------------------------------------------
  proc ::Update() \
  {
    nb_actors = ::vtkrenderer.GetActors().GetNumberOfItems()
    ::win.SetLabelValue(::nblights_id,\
                        "%1%" % ::vtkrenderer.GetLights().GetNumberOfItems())
    ::win.SetLabelValue(::nbactors_id, "%1%" % nb_actors)
    ::win.SetLabelValue(::nbvols_id,\
                        "%1%" % ::vtkrenderer.GetVolumes().GetNumberOfItems())
    ::win.SetLabelValue(::time_id,\
                        "%1% sec" % ::vtkrenderer.GetLastRenderTimeInSeconds())

    # update background colors
    if exists(::select_actor_id) {
      ::win.IntegerConstraints(::select_actor_id,0,nb_actors-1,::select_actor)
    }

  }

  #-----------------------------------------------------------------------------
  proc ::UpdateVTK() \
  {
    if (exists(::vtkrenderer)) {
    }
  }

  #-----------------------------------------------------------------------------
  proc ::DefaultCallback() \
  {
    if (exists(::vtkrenderer)) {
      if (exists(::callback)) {
        ::callback()
      } else {
        ::vtkrenderer.GetRenderWindow().Render()
      }
    }
  }

  #-----------------------------------------------------------------------------
  proc ::SetRenderer( OBJECT obj) \
  {
    if obj.IsA("vtkRenderer") {
      del ::vtkrenderer
      ::vtkrenderer = &obj
      ::CB_SelectActor()
      ::Update()
      return = true
    } else {
      InfoDialog "vtkRendererClass.SetRenderer(obj): wrong object type"
      return = false
    }
  }

  #-----------------------------------------------------------------------------
  proc ::SetRenderer2( OBJECT obj) \
  {
    if obj.IsA("vtkRenderer") {
      del ::vtkrenderer2
      ::vtkrenderer2 = &obj
      return = true
    } else {
      InfoDialog "vtkRendererClass.SetRenderer2(obj): wrong object type"
      return = false
    }
  }


  #-----------------------------------------------------------------------------
  proc ::ChangeRenderer( ) \
  {
    ::UpdateVTK()
      if (exists(::callback)) {
        ::callback()
      }
  }

  #-----------------------------------------------------------------------------
  proc ::CB_AddSurface() \
  {
    printn "adding surface %1%" % ::surface_selected
 
    eval "vtksurf = vtktools.ToVtkPolyData(&%1%);" % ::surface_selected
    polynormals = vtk.vtkPolyDataNormals.New()
    polynormals.SetInput(&vtksurf)
    polynormals.SetFeatureAngle(60.0)
    polymapper = vtk.vtkPolyDataMapper.New()
    polymapper.SetInputConnection(&polynormals.GetOutputPort())
    polymapper.ScalarVisibilityOff()
    polyactor = vtk.vtkActor.New()
    polyactor.SetMapper(polymapper)
    ::vtkrenderer.AddActor(polyactor)
    ::vtkrenderer.GetRenderWindow().Render()
    ::Update()
  }

  #----------------------------
  proc ::SetRendererBg() \
  {
    if (exists(::vtkrenderer)) {
    
      ::vtkrenderer.SetBackground((FLOAT)::params.background_color.Red()/255,\
                                  (FLOAT)::params.background_color.Green()/255,\
                                  (FLOAT)::params.background_color.Blue()/255)
                                  
      ::vtkrenderer.SetBackground2((FLOAT)::params.background_color2.Red()/255,\
                                   (FLOAT)::params.background_color2.Green()/255,\
                                   (FLOAT)::params.background_color2.Blue()/255)

      ::vtkrenderer.SetGradientBackground( ::params.UseGradientBackground)

      ::vtkrenderer.GetRenderWindow().Render()
    }

  }

  #----------------------------
  proc ::ChoiceBackground() \
  {
    if (::params.bg_type==1){
      ::background_color=wx.wxColour(255,255,255)
      ::background_color2=::background_color
      ::UseGradientBackground=0

    }
    if (::params.bg_type==2){
      ::background_color=wx.wxColour(0,0,0)
      ::background_color2=::background_color
      ::UseGradientBackground=0

    }
    ::SetRendererBg()
    ::win.Update(::bg_id)
    ::win.Update(::bg2_id)
  }

  #-----------------------------------------------------------------------------
  # create the gui on a ParamPanel
  proc ::AddGui( OBJECT win) \
  {
    if (!exists(::win)) {
      ::win = &win
    }
    win.BeginBoxPanel("vtkRenderer control")
      ::nblights_id   = win.AddLabel("Number of Lights", "")
      ::nbactors_id   = win.AddLabel("Number of Actors", "")
      ::nbvols_id     = win.AddLabel("Number of Volumes","")
      ::time_id       = win.AddLabel("Last render time","")
      ::win.AddButton("Update",::Update)
      ::surface_selected=""
      win.AddAMIObjectChoice( &::surface_selected, "", "SurfacePoly")
      win.AddButton("Add Selected Surface",::CB_AddSurface)

      win.BeginBoxPanel("Background")
        win.BeginHorizontal()
          ::bg_id = win.AddColor("Color",&::params.background_color)
          win.SetCallback(&::SetRendererBg)
          ::bg2_id = win.AddColor("Color 2",&::params.background_color2)
          win.SetCallback(&::SetRendererBg)
          win.AddBoolean(&::params.UseGradientBackground,"Gradient")
          win.SetCallback(&::SetRendererBg)
        win.EndHorizontal()

        win.BeginHorizontal()
          ::d_id = win.AddEnum(&::params.bg_type,"Background")
          win.AddEnumChoice(::d_id,"Manual")
          win.AddEnumChoice(::d_id,"White")
          win.AddEnumChoice(::d_id,"Black")
          win.SetCallback(&::ChoiceBackground)
        win.EndHorizontal()
      win.EndBoxPanel()

    win.EndBoxPanel()
  }

  #-----------------------------------------------------------------------------
  proc ::CB_Renderer( ) \
  {
    #printn "::CB_Renderer()"
    #eval "ok = exists(%1%);" % ::renderer_name
    #if (ok) {
    eval "::SetRenderer(%1%);" % ::renderer_name
    #::Update()
    #}
  }

  #-----------------------------------------------------------------------------
  proc ::CB_Renderer2( ) \
  {
    eval "::SetRenderer2(%1%);" % ::renderer2_name
  }

  #-----------------------------------------------------------------------------
  proc ::CB_CamEvent(OBJECT caller, NUM id ) \
  {
    #printn "::CB_CamEvent() Begin"
    #::vtkrenderer.GetRenderWindow().GetInteractor().Render()
    ::vtkrenderer2.GetActiveCamera().DeepCopy(::vtkrenderer.GetActiveCamera())
    #RemoveObserver(::cam_cmd)
    ::vtkrenderer2.GetRenderWindow().Render()
    #printn "::CB_CamEvent() End"
  }

  #-----------------------------------------------------------------------------
  proc ::CB_SyncCamera( ) \
  {
    if (exists(::vtkrenderer)&&exists(::vtkrenderer2)) {
      if (::sync_camera) {
        # sync active camera
        #::vtkrenderer2.SetActiveCamera(::vtkrenderer.GetActiveCamera())
        if (!exists(::cam_cmd)) {
          ::cam_cmd = vtk.vtkAmiCommand.New()
          ::cam_cmd.SetAmiFunction(&::CB_CamEvent)
        }
        ::vtkrenderer.GetActiveCamera().AddObserver( vtk.vtkCommand.ModifiedEvent,\
                                                  ::cam_cmd)
        ::camera_synced = true
      } else {
        if (::camera_synced) {
          ::vtkrenderer.GetActiveCamera().RemoveObserver(::cam_cmd)
          cam2 = vtk.vtkCamera.New()
          cam2.DeepCopy(::vtkrenderer.GetActiveCamera())
          ::vtkrenderer2.SetActiveCamera(cam2)
          ::camera_synced = false
        }
      }
    }
  }

    #---------------------------------------------------------------------------
    # Redefinition of Close to disconnect possible comparison
    #
    proc ::Close() \
    {
      if (::camera_synced) {
        ::sync_camera=false
        ::CB_SyncCamera()
      }
      if exists(::helpw) {
        ::helpw.Destroy()
      }
      ::Attach()
      ::win.HidePanel()
      delvars GetObjectName(::Close)
    }
    Comments( ::Close,  "Will close the interface and delete the "+\
                        "corresponding "+\
                        "object named '"+GetObjectName(::Close)+"'.")

  #-----------------------------------------------------------------------------
  proc ::CB_SelectActor( ) \
  {
    if exists(::vtkrenderer) {
      actors = ::vtkrenderer.GetActors()
      nb_actors = actors.GetNumberOfItems()
      if (::select_actor<0)          { ::select_actor=0;          }
      if (::select_actor>=nb_actors) { ::select_actor=nb_actors-1;} 
      if exists(::select_actor_id) { 
        ::win.Update(::select_actor_id) 
      }
      if (nb_actors>0) {
        current_actor_object = actors.GetItemAsObject(::select_actor)
        del ::current_actor
        ::current_actor = vtk.vtkActor.SafeDownCast(current_actor_object)
        ::actor_ctrl.SetActor(::current_actor)
      } else {
        printn "No actor in renderer" 
      }
    } else {
      printn "First select vtkRenderer ..."
    }
  }
  
  #-----------------------------------------------------------------------------
  proc ::CB_RemoveActor( ) \
  {
    ::vtkrenderer.RemoveActor(::current_actor)
    ::DefaultCallback()
    ::Update()
    ::CB_SelectActor()
    ::win.Update(-1)
  }
  
  #-----------------------------------------------------------------------------
  proc ::Gui( ) \
  {
      # TODO: would be nice to have a treelistctrl here for actors, lights, ...
  
      # parameters window
      if (exists(::parent_panel)) {
        ::win = ParamPanel("vtkRen",&::parent_panel)
      } else {
        ::win = ParamPanel("vtkRen")
      }
      ::win.BeginBook()
        ::win.AddPage("vtkRenderer")
          # Select Renderer
          ::win.AddAMIObjectChoice( &::renderer_name, "", "vtkRenderer")
          ::win.SetCallback(::CB_Renderer)
          # add gui
          ::AddGui(::win)

        ::win.AddPage("Actors")
          ::select_actor_id = ::win.AddInt(::select_actor,"select",0,0)
          ::win.SetCallback(::CB_SelectActor)
          ::win.AddButton("Remove current actor",::CB_RemoveActor)
          ::actor_ctrl.AddGui(::win)
          ::actor_ctrl.SetCallback(::DefaultCallback)
        
        ::win.AddPage("Compare")
          # Select Renderer
          ::win.AddAMIObjectChoice( &::renderer2_name, "", "vtkRenderer")
          ::win.SetCallback(::CB_Renderer2)
          # Sync camera
          ::win.AddBoolean(::sync_camera, "Sync Camera 1-->2")
          ::win.SetCallback(::CB_SyncCamera)
      ::win.EndBook()
  
      ::AddStandardButtons(&::win)
      
      ::win.Display()
      ::win.Update(-1)
  }


  ::Init()
}
