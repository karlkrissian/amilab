
func "Common/ScriptGui"

del vtkCursor3DClass

Class vtkCursor3DClass : public ScriptGui \
{
  
  func "Variable/ObjectIO"
  #===========================================================================
  # Set parameters here
  Class ::ParamClass : public ObjectIO {

      ::description = "Default parameters", \
                      "Description of the set of parameters"


      ::pos_x = INT(0), "Image position in X"
      ::pos_y = INT(0), "Image position in Y"
      ::pos_z = INT(0), "Image position in Z"
                      
      ::outline = false
      ::axes    = true
      ::shadows = false
                      
      #-----------------------------------------------------------------------
      # copy parameters
      proc ::__assign__( VAR p) \
      {
        ::pos_x = p.pos_x
        ::pos_y = p.pos_y
        ::pos_z = p.pos_z
        ::outline = p.outline
        ::axes    = p.axes
        ::shadows = p.shadows
      }
  }

  #---------------------------------------------------------------------------
  proc ::Init() \
  {
    
    ::input_name   = "",  "Name of the input image variable"
    ::renderer_name = "", "Name of renderer"

    ::ParamClass ::params

    #::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki"+
    # "/doku.php?id=tutorial-mainalgorithms-levelset#level_set_segmentation"

    ::html_filename = GetScriptsDir+\
                      "/vtkCursor3D/Doc/vtkCursor3D/index.html"
  }


  #---------------------------------------------------------------------------
  proc ::Run() \
  {
    if (!exists(::input)) {
      Infodialog "First load the input image !"
    } else {
      InfoDialog "Filtro fantastico :) !!!"
    }
  }

  #-----------------------------------------------------------------------------
  proc ::CB_Renderer( ) \
  {
    eval "::SetRenderer(%1%);" % ::renderer_name
  }
 
  #-----------------------------------------------------------------------------
  proc ::SetRenderer( OBJECT obj) \
  {
    if obj.IsA("vtkRenderer") {
      del ::vtkrenderer
      ::vtkrenderer = &obj
    } else {
      InfoDialog "vtkRendererClass.SetRenderer(obj): wrong object type"
    }
  }

  #-----------------------------------------------------------------------------
  proc ::CB_AddCursor( ) \
  {
    if (!exists(::cursor)) {
      eval "i = &%1%;" % ::input_name
      ::params.pos_x = i.tx/2
      ::params.pos_y = i.ty/2
      ::params.pos_z = i.tz/2
      vtkimage = vtktools.ToVtkImageData(i)
      # create cursor
      ::cursor = vtk.vtkCursor3D.New()
      ::cursor.SetModelBounds(vtkimage.GetBounds())
      ::cursor.SetFocalPoint(vtkimage.GetCenter())
      ::cursor.AllOff()
      ::cursor.SetAxes(   ::params.axes)
      ::cursor.SetOutline(::params.outline)
      ::cursor.SetXShadows(::params.shadows)
      ::cursor.SetYShadows(::params.shadows)
      ::cursor.SetZShadows(::params.shadows)
      ::cursorMapper = vtk.vtkPolyDataMapper.New()
      ::cursorMapper.SetInputConnection(::cursor.GetOutputPort())
      ::cursorActor = vtk.vtkActor.New()
      ::cursorActor.SetMapper(::cursorMapper)
      ::cursorActor.GetProperty().SetColor(1,0,0)
      ::vtkrenderer.AddActor(::cursorActor)
      #
      ::win.IntegerConstraints(::posx_id,0,i.tx-1,::params.pos_x)
      ::win.IntegerConstraints(::posy_id,0,i.ty-1,::params.pos_y)
      ::win.IntegerConstraints(::posz_id,0,i.tz-1,::params.pos_z)
      ::win.Update(-1)
      #
      ::CB_Position()
      
    }
  }

  #-----------------------------------------------------------------------------
  proc ::CB_RemoveCursor( ) \
  {
    if exists(::cursor) {
      # should do all the checks before
      ::vtkrenderer.RemoveActor(::cursorActor)
      # and delete all the variables here
      del ::cursorActor
      del ::cursorMapper
      del ::cursor
      ::vtkrenderer.GetRenderWindow().Render()
    }
  }
  
  #-----------------------------------------------------------------------------
  proc ::CB_Position( ) \
  {
    # convert voxel position to world
    eval "i = &%1%;" % ::input_name
    
    fx = i.trx+::params.pos_x*i.vx
    fy = i.try+::params.pos_y*i.vy
    fz = i.trz+::params.pos_z*i.vz
    ::cursor.SetFocalPoint(fx,fy,fz)
    ::vtkrenderer.GetRenderWindow().Render()
  }
  
  #-----------------------------------------------------------------------------
  proc ::CB_Update( ) \
  {
    ::cursor.SetAxes(   ::params.axes)
    ::cursor.SetOutline(::params.outline)
    ::cursor.SetXShadows(::params.shadows)
    ::cursor.SetYShadows(::params.shadows)
    ::cursor.SetZShadows(::params.shadows)
    ::vtkrenderer.GetRenderWindow().Render()
  }

  #---------------------------------------------------------------------------
  # Redefinition of Close to remove actor
  #
  proc ::Close() \
  {
    ::CB_RemoveCursor()
    ::win.HidePanel()
    delvars GetObjectName(::Close)
  }
  Comments( ::Close,  "Will close the interface and delete the "+\
                      "corresponding "+\
                      "object named '"+GetObjectName(::Close)+"'.")
                      
  #-----------------------------------------------------------------------------
  proc ::Gui() {
  
    if (exists(::parent_panel)) {
      ::win = ParamPanel("vtkCursor3D",&::parent_panel)
    } else {
      ::win = ParamPanel("vtkCursor3D")
    }
    
    ::win.BeginBook()
  
      ::win.AddPage("Param")

        ::win.BeginBoxPanel("Input Image")
          # set the input image
          ::win.AddImageChoice( ::input_name, "")
        ::win.EndBoxPanel()

        # Select Renderer
        ::win.AddAMIObjectChoice( ::renderer_name, "", "vtkRenderer")
        ::win.SetCallback(::CB_Renderer)

        ::win.AddButton("Add",   ::CB_AddCursor)
        ::win.AddButton("Remove",::CB_RemoveCursor)
        
        ::win.BeginBoxPanel("Position")
          ::posx_id = ::win.AddInt(::params.pos_x,"X",0,100)
          ::win.SetCallback(::CB_Position)
          ::posy_id = ::win.AddInt(::params.pos_y,"Y",0,100)
          ::win.SetCallback(::CB_Position)
          ::posz_id = ::win.AddInt(::params.pos_z,"Z",0,100)
          ::win.SetCallback(::CB_Position)
        ::win.EndBoxPanel()

        ::win.AddBoolean(::params.outline, "Outline")
        ::win.SetCallback(::CB_Update)
        ::win.AddBoolean(::params.axes,    "Axes")
        ::win.SetCallback(::CB_Update)
        ::win.AddBoolean(::params.shadows, "Shadows")
        ::win.SetCallback(::CB_Update)

      # add page for saving/loading parameters
      ::AddParamPage(&::win)

      # add help page
      if wx.wxFileName(::html_filename).FileExists() {
        ::AddHelpPage(&::win)
      }
  
    ::win.EndBook()
  
    ::AddStandardButtons(&::win)

    if (exists(::parent_panel)) {
      ::win.ShowPanel()
    } else {
      ::win.Display()
    }
    ::win.Update(-1)


  }
  ::Init()
  
}
# End of class
  
