
if (exists(FourierUtilsClass)) {
  del FourierUtilsClass
}


#--------------------------
Class FourierUtilsClass \
{
  #--------------------------
  proc ::FFT( IMAGE input) {
    input_vtk = vtktools.ToVtkImageData(&input)
    fft = vtk.vtkImageFFT.New()
    fft.SetInputData(&input_vtk)
    fft.Update()
    res_vtk = fft.GetOutput()
    return = vtktools.FromVtkImageData(&res_vtk)
    return.settranslation(0,0,0)
    return.setvoxelsize(1,1,1)
  }
  Comments(::FFT,"Fast Fourier Transform of the input image, given as a double image of 2 components")

  #--------------------------
  proc ::RFFT( IMAGE input) {
    input_vtk = vtktools.ToVtkImageData(&input)
    rfft = vtk.vtkImageRFFT.New()
    rfft.SetInputData(&input_vtk)
    rfft.Update()
    res_vtk = rfft.GetOutput()
    return = vtktools.FromVtkImageData(&res_vtk)
  }
  Comments(::RFFT,"Inverse Fast Fourier Transform of the input image, given as a double image of 2 components")

  #--------------------------
  proc ::ComplexConj( IMAGE i) \
  {
    return = i
    return.SetComponent(1,-i[1])
  }
  Comments(::ComplexConj,"Conjugate of a complex image")


  #--------------------------
  proc ::ComplexMult( IMAGE i1, IMAGE i2) \
  {
    return = i1
    if (i1.vdim!=2)||(i2.vdim!=2) {
      printn "Complex multiplication needs complex images (2 components)"
    } else {
      return.SetComponent(0, i1[0]*i2[0]-i1[1]*i2[1])
      return.SetComponent(1, i1[1]*i2[0]+i1[0]*i2[1])
    }
  }
  Comments(::ComplexMult,"Multiplication of complex images")

  #--------------------------
  proc ::AmiCenter( IMAGE input) \
  {
    pos = ::CenterPosition(&input)
    return=input(pos)
  }
  Comments(::AmiCenter,"Center the frequency image for visualization purpose")

  #--------------------------
  proc ::VtkCenter( IMAGE input) \
  {
    input_vtk = vtktools.ToVtkImageData(&input)
    fc = vtk.vtkImageFourierCenter.New()
    fc.SetInputData(&input_vtk)
    fc.Update()
    res_vtk = fc.GetOutput()
    return=vtkImageFourierCenter(&input)
  }
  Comments(::VtkCenter,"Center the frequency image for visualization purpose")

  #--------------------------
  proc ::Spectrum( IMAGE in_fft) \
  {
    return=ln(1+norm(in_fft))
  }
  Comments(::Spectrum,"Image of the frequency spectrum")

  #--------------------------
  proc ::CenterPosition( IMAGE input) \
  {
    pos = SpacePos(input)
    pos1 = pos
    pos1.SetComponent(0,(pos[0]+pos.tx/2)%pos.tx)
    pos1.SetComponent(1,(pos[1]+pos.ty/2)%pos.ty)
    if (pos.tz>1) {
      pos1.SetComponent(2,(pos[2]+pos.tz/2)%pos.tz)
    }
    return = &pos1
  }

  #--------------------------
  proc ::Distance( IMAGE input) \
  {
    pos = SpacePos(input)
    pos1 = pos
    pos1.SetComponent(0,(pos[0]+pos.tx/2)%pos.tx-pos.tx/2)
    pos1.SetComponent(1,(pos[1]+pos.ty/2)%pos.ty-pos.ty/2)
    if (pos.tz>1) {
      pos1.SetComponent(2,(pos[2]+pos.tz/2)%pos.tz-pos.tz/2)
    }
    return=norm(pos1)
  }
  Comments(::Distance,"Distance from the origin in the frequency domain")

}

if (exists(FourierUtils)) {
  del  FourierUtils
}

FourierUtilsClass FourierUtils
del FourierUtilsClass
