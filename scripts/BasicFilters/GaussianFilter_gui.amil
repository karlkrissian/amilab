#!/usr/bin/amilab
#
# Example of using the Gaussian Filtering
# with the command filter
#
if (!exists(GaussianFilterClass)) {

  Class GaussianFilterClass {

  #----------------------------
  proc ::Init() {
    ::class_name ="global::GaussianFilterClass"
    ::input_name = ""
    ::sigma      = 1, "Gaussian kernel standard devation"
    ::derx = INT(0), "Derivation order in X (0: no derivation)"
    ::dery = INT(0), "Derivation order in Y (0: no derivation)"
    ::derz = INT(0), "Derivation order in Z (0: no derivation)"
    ::auto = UCHAR(0), "Apply the filter automatically after changing the standard deviation value"
    ::autodrag = UCHAR(0), "Apply the filter automatically while moving the scale"
    
    ::CreateGui()
  }
    
  #----------------------------
  proc ::Close() {
    ::win.Hide
    delvars GetObjectName(::Close)
  }
  ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
    
  #----------------------------
  proc ::CloseAll() {
    eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
    ::Close
  }
  ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
  #----------------------------
  
  proc ::load_input() {
    eval "::input <<="+::input_name+";"
    if (::input_name=="Image") {
      ::input_name = "GF_input"
      ::win.update
    }
  }
  
  #--------------------------------------------------
  proc ::Filter() {
    ::load_input()
    ::res <<= ::input
    if (::input.vdim==1) {
      ::res = filter(::input,::sigma,\
                      ::derx,::dery,::derz)
    }else {
      for n=0 to ::input.vdim-1 {
        ::res[n] = filter( ::input[n],::sigma,\
                            ::derx,::dery,::derz)
      }
     }
   ::Display()
  }
  ::Filter.Comments("Apply Gaussian convolution on each channel of the image.")
  
  proc ::Display() {
    global
    show ::input
    if (exists(::res)) {
      show ::res
      ::input_draw.compare(::res)
    }
  }
  
  #-----------------------------------------
  proc ::AutoFilter() {
    if (::auto) { ::Filter; }
  }
  ::AutoFilter.Comments("Apply the filter automatically if this option is enabled")

  #-----------------------------------------
  proc ::AutoDrag() {
    ::win.SetDragCallback(::sigma_id,::autodrag)
  }
  ::AutoDrag.Comments("Enable/Disable real-time filtering while moving the scale")
  
  #-----------------------------------------
  proc ::Save() {
    ::res.save resultname
  }
  ::Save.Comments("Save the resulting image")
  #-----------------------------------------
    
  proc ::CreateGui() {
    # parameters window
    ::win = ParamWin("GaussFilter")
  
    ::win.BeginBook
    ::win.AddPage("Param")

    ::win.AddImageChoice(::input_name, "Input")
    ::sigma_id = ::win.AddFloat(::sigma,"std_dev",0.1,10)
    ::win.SetCallback(::AutoFilter)
    ::win.SetDragCallback(::sigma_id,::autodrag)

    ::win.AddInt(::derx,"Der_order_X",0,2)
    ::win.AddInt(::dery,"Der_order_Y",0,2)
    ::win.AddInt(::derz,"Der_order_Z",0,2)
    ::win.AddBoolean(::auto,"Auto")
    ::win.AddBoolean(::autodrag,"Auto drag")
    ::win.SetCallback(::AutoDrag)
    ::win.AddButton("Apply",::Filter)
    ::win.EndBook
    ::win.BeginHorizontal
      ::win.AddButton("Close",          ::Close)
      ::win.AddButton("Close All",          ::CloseAll)
    ::win.EndHorizontal  
  
    ::win.update
    ::win.Display
  }
  
  ::Init
  
  } #end Class
} #end If.

#----------------------------
# Main
#----------------------------

if (!exists(gfilter)) {

  GaussianFilterClass gfilter 

} else {
  InfoDialog "The script seems to be already loaded."
  }
