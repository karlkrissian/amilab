#
# Script to compute probability of belonging to a structure
# based on an intensity mapping of the local statistics
# of the image intensity (local mean and local standard deviation)
#


if (!exists(WeightedLSCLass)) {
  
  Class WeightedLSCLass {

    #--------------------------
    proc ::Init() \
    {
      ::class_name="global::WeightedLSCLass"
      ::input_name = "","Name of the input image variable"
      ::weights_name = "","Name of the weights image variable"
      ::output_prefix = ""
      ::localstats_winsize = INT(5)
      ::min_weight = 0.01
      ::Gui
    }

    #--------------------------
    proc ::Load_Input() \
    {
      eval "::input <<=(FLOAT)"+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
    }

    #--------------------------
    proc ::Load_Weights() \
    {
      eval "::weights <<=(FLOAT)"+::weights_name+";"
      if (::weights_name=="Image") {
        ::weights_name = "::weights"
        ::win.Update(-1)
      }
    }

    #--------------------------
    proc ::Close() \
    {
      ::win.HidePanel()
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
    proc ::CloseAll() {
      eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
      ::Close
    }
    Comments( ::CloseAll, "Call ::Close() method and delete the class variable")

    #--------------------------
    proc ::Apply() \
    {
      
      # compute weighted local mean intensity
      ::lm = localmean2(::input*::weights,::localstats_winsize)
      ::w_lm    = localmean2(::weights,::localstats_winsize)

      # set minimal weight, and divide by weights
      ::w_lm = (::w_lm>::min_weight)*::w_lm+(::w_lm<=::min_weight)*::min_weight
      ::lm = ::lm/::w_lm
      ::lm = (::w_lm>2*::min_weight)*::lm

      eval "global::"+::output_prefix+"lm <<= ::lm;"

      # compute weighted local standard deviation of intensity
      ::var = localmean2(::input*::input*::weights,::localstats_winsize)
      ::var = ::var/::w_lm 
      ::var = (::w_lm>2*::min_weight)*::var
      ::var = ::var-::lm*::lm
      ::sd = sqrt(::var)

      eval "global::"+::output_prefix+"sd <<= ::sd;"

      # apply Gaussian function
      ::res = ::input - ::lm
      ::res = (::res*::res)/(::var*1.5*1.5)
      ::res = exp(-::res)
      ::res = (::w_lm>2*::min_weight)*::res


      eval "global::"+::output_prefix+"prob <<= ::res;"
    }

    #--------------------------
    proc ::Display() \
    {
      show ::input
      show ::weights
      ::input_draw.compare(&::weights_draw)
      
      eval "show global::"+::output_prefix+"lm;"
      eval "::input_draw.compare(&global::"+::output_prefix+"lm_draw);"
      eval "show global::"+::output_prefix+"sd;"
      eval "::input_draw.compare(&global::"+::output_prefix+"sd_draw);"
      eval "show global::"+::output_prefix+"prob;"
      eval "::input_draw.compare(&global::"+::output_prefix+"prob_draw);"
    }
    
    #--------------------------
    proc ::Gui() \
    {
      import = &global::ami_import;
      ::win = import->ParamPanel("Prob")

      ::win.BeginBook()
        ::win.AddPage("Init")
        ::win.BeginHorizontal()
          ::win.AddImageChoice( &::input_name,"Input")
          ::win.AddButton("Load",::Load_Input)
        ::win.EndHorizontal()
        
        ::win.BeginHorizontal()
          ::win.AddImageChoice( &::weights_name,"Weights")
          ::win.AddButton("Load",::Load_Weights)
        ::win.EndHorizontal()        
        
        ::win.AddString( &::output_prefix,"Output Prefix")
    
        ::win.AddPage("Param")
        ::win.AddInt( &::localstats_winsize,  "::localstats_winsize", 1,10)
        ::win.AddFloat( &::min_weight,  "::min_weight", 0.01,1)
    
        ::win.BeginHorizontal()
          ::win.AddButton("Apply",  ::Apply)
          ::win.AddButton("Display",::Display)
        ::win.EndHorizontal()
      ::win.EndBook()
      
      
      ::win.BeginHorizontal()
        ::win.AddButton("Close", ::Close)
        ::win.AddButton("Close All", ::CloseAll)
      ::win.EndHorizontal()

      ::win.Update(-1)
      ::win.Display()
    }
    ::Init
  }
# Class WeightedLSCLass
}
# end if (!exists(WeightedLSCLass))

#----------------------------
# Main
#----------------------------

if (!exists(wls)) {

  WeightedLSCLass wls
  
  if (argc>=1) {
    printn "reading image"
    input = Image($1)
    wls->image_name = "input"
    wls->win.Update(-1)
  }

} else {
  InfoDialog "The script seems to be already loaded."
}
