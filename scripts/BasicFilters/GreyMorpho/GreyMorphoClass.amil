
func "Common/ScriptGui"

if (!exists(GreyMorphoClass)) {

  Class GreyMorphoClass : public ScriptGui \
  {
    
    //---------------------------------------------------
    proc ::Init() {
      
        ::input_name =  "","Name of the input image variable"
        ::result_image_name =  "global::greymorpho_res", "name of the resulting image global variable"

        ::result_filename = "greymorpho_res.ami.gz", "filename for saving the resulting image to disk"

        ::operation_types = VarVector()
          ::operation_types.push_back("Dilate")
          ::operation_types.push_back("Erode")
          ::operation_types.push_back("Open")
          ::operation_types.push_back("Close")
          ::operation_types.push_back("White top-hat")
          ::operation_types.push_back("Black top-hat")
        mess = ::operation_types[0]
        for n=1 to ::operation_types.size()-1 { 
          mess += ", %1%" % ::operation_types[n]; 
        }
        ::operation = INT(0), "type of operation (%1%)" % mess
  
        ::step = 0.5,   "step size for the PDE"
        ::size = 1,     "Size in pixels of the operation"

        ::surf_scaling = 1

        ::algorithm_types = VarVector()
          ::algorithm_types.push_back("PDE")
          ::algorithm_types.push_back("min/max")
        mess = ::algorithm_types[0]
        for n=1 to ::algorithm_types.size()-1 { 
          mess += ", %1%" % ::algorithm_types[n]; 
        }
        ::algorithm_type = INT(1), "type of algorithm used (%1%)" % mess
  
        #  
        ::Imin = 0, "Minimal intensity"
        #  
        ::Imax = 1, "Maximal intensity"
        # 

        #::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki/doku.php?id=tutorial-mainalgorithms-levelset#level_set_segmentation"

        ::html_filename = GetScriptsDir+"/GreyMorpho/Doc/GreyMorpho/index.html"
    }


    #-----------------------------------------------
    proc ::load_input() \
    {
      eval "::input <<="+::input_name+";"
      if (::input_name=="BrowseImage") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
      # set min and max
      ::Imin = min(::input)
      ::Imax = max(::input)

      if (exists(::win)) {
        ::win.Update(-1)
      }
    }
    Comments( ::load_input, "Copies the input image in a local image member named 'input'")

    #---------------------------------------------------------------------------
    proc ::ProcessImagePDE( IMAGE input, NUM component) \
    {
      morph = filters.ContinuousMorphology()
      morph.SetLimits(::Imin,::Imax)
      #::txtctrl_cmd += "morph.SetLimits(%1%,"%::Imin+"%1%)\n"%::Imax

      op = ::operation_types[::operation]
      if (op!="White top-hat")&&(op!="Black top-hat") \
      {
        eval "input = morph.%1%(input,::size,::step);" % op
      }
      if (op=="White top-hat") {
        input = input - morph.Open(input,::size,::step)
        op="{not avail}"
      }
      if (op=="Back top-hat") {
        input = morph.Close(input,::size,::step) - input
        op="{not avail}"
      }

      if (component<0) {
        ::txtctrl_cmd =  "res = morph.%1%(input," % op + \
                          "%1%"%::size + ",%1%)" %::step
      } else {
        ::txtctrl_cmd =  "res.SetComponent(%1%, " % component+\
                          " morph.%1%(" % op + \
                         " input[%1%],"%component+\
                          "%1%"%::size + ",%1%))" %::step
      }
      ::txtctrl.WriteText(::txtctrl_cmd+"\n")
      
    }

    #----------------------------
    proc ::ProcessPDE() {

      if (!exists(::res)) {
        ::Restart()
      }

      ::txtctrl_cmd =""
      ::txtctrl_cmd += "morph = filters.ContinuousMorphology()\n"
      ::txtctrl.WriteText(::txtctrl_cmd)
      

      RestartTime;InitTime
      if (::res.vdim==1) {
        ::ProcessImagePDE(&::res,-1)
      } else {
        ::txtctrl.WriteText("res = input\n")
        for k=0 to ::res.vdim-1 {
          _c = (FLOAT) ::res[k]
          ::ProcessImagePDE(&_c,k)
          ::res.SetComponent( k, _c)
        }
      }
      EndTime
      SetStatusText("Time Spent (hh:mm:ss) = "+TimeSpent)
      EndTime
      eval ::result_image_name+" <<= ::res;"
    }

    #---------------------------------------------------------------------------
    proc ::ProcessImageMinMax( IMAGE input, NUM component) \
    {
      func "Utils/alMathMorphoUtilsClass"
      alMathMorpho.SetIntensityRange(::Imin,::Imax)

      #::txtctrl_cmd += "morph.SetLimits(%1%,"%::Imin+"%1%)\n"%::Imax


      op = ::operation_types[::operation]
      if (op=="White top-hat") { op = "WhiteTopHat"; }
      if (op=="Black top-hat") { op = "BlackTopHat"; }

      eval "input = alMathMorpho.%1%(&input,::size);" % op

      if (component<0) {
        ::txtctrl_cmd =  "res = alMathMorpho.%1%(input," % op + \
                          "%1%)"%::size 
      } else {
        ::txtctrl_cmd =  "res.SetComponent(%1%, " % component+\
                          " alMathMorpho.%1%(" % op + \
                         " input[%1%],"%component+\
                          "%1%))"%::size
      }
      ::txtctrl.WriteText(::txtctrl_cmd+"\n")
      
    }

    #----------------------------
    proc ::ProcessMinMax() {

      if (!exists(::res)) {
        ::Restart()
      }

      ::txtctrl_cmd =""
      ::txtctrl_cmd += "func \"Utils/alMathMorphoUtilsClass\"\n"
      ::txtctrl.WriteText(::txtctrl_cmd)
      

      RestartTime;InitTime
      if (::res.vdim==1) {
        ::ProcessImageMinMax(&::res,-1)
      } else {
        ::txtctrl.WriteText("res = input\n")
        for k=0 to ::res.vdim-1 {
          _c = (FLOAT) ::res[k]
          ::ProcessImageMinMax(&_c,k)
          ::res.SetComponent( k, _c)
        }
      }
      EndTime
      SetStatusText("Time Spent (hh:mm:ss) = "+TimeSpent)
      EndTime
      eval ::result_image_name+" <<= ::res;"
    }

    #-----------------------------------------------
    proc ::Run() \
    {
      if (!exists(::input)) {
        Infodialog "First load the input image !"
      } else {
        if (::algorithm_types[::algorithm_type]=="PDE") {
          ::ProcessPDE()
        }
        if (::algorithm_types[::algorithm_type]=="min/max") {
          ::ProcessMinMax()
        }
      }
    }

    #----------------------------
    proc ::Display() \
    {
      printn "::Display begin"
      #::LoadInput
      if (!exists(::input_draw)) {
        show ::input
      }
      if exists(::res) {
        show ::res
        ::res_draw.update()
        ::input_draw.compare(&::res_draw)
        # draw limits of ROI
      }
    }
    
    #----------------------------
    proc ::ShowDiff() \
    {
      if (exists(::input))&&(exists(::res)) {
        if (!exists(::input_draw)) {
          show ::input
        }
        ::diff = ::input - ::res
        show ::diff
        ::input_draw.compare(&::diff_draw)
      }
      eval ::result_image_name+"_diff <<= ::diff;"
    }
    
    #----------------------------
    proc ::DisplaySurfaces() \
    {
      # 2D display images as surfaces
      if (::input.tz==1)&&(::input.GetFormat != RGB.val) {
        if (exists(::input_surf_draw)) { del ::input_surf_draw; }
        if (exists(::res_surf_draw))   { del ::res_surf_draw; }
        if (exists(::input_surf)) { del ::input_surf; }
        if (exists(::res_surf))   { del ::res_surf; }
    
        ::input_surf = CreateFlatMesh(::input,0)
        ::res_surf   = CreateFlatMesh(::res,0)
        ::input_surf.ElevateMesh(::input*::surf_scaling)
        ::res_surf.ElevateMesh(::res*::surf_scaling)
        ::input_surf.Normals()
        ::res_surf.Normals()
        show ::input_surf
        ::input_surf_draw += ::res_surf
      }
    }
    
    
    #----------------------------
    proc ::Restart() \
    {
      if (!exists(::input)) {
        ::load_input()
      }
      ::res <<= ::input
      show ::res
      ::txtctrl.Clear()
      #::txtctrl.WriteText(::txtctrl_prompt)
    }
    
    #----------------------------
    proc ::Save() \
    {
      ::res.save ::result_filename
    }
    Comments( ::Save, "Save image to disk")

    #---------------------------------------------------------------------------
    proc ::OnAlgorithm() \
    {
      ::win.Enable(&::step_id, (::algorithm_types[::algorithm_type]=="PDE"))
      #::win.
    }

    //---------------------------------------------------
    proc ::Gui() {
    
      if (exists(::parent_panel)) {
        ::win = ParamPanel("GreyMorpho",&::parent_panel)
      } else {
        ::win = ParamPanel("GreyMorpho")
      }
      
      ::win.BeginBook()
    
        ::win.AddPage("IO")

          # set the input image
          ::win.BeginBoxPanel("Input")
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",&::load_input)
            ::win.EndHorizontal()
          ::win.EndBoxPanel()

          ::win.AddString( &::result_image_name,"Result image")

        ::win.AddPage("Param")

          ::algotype_id = ::win.AddEnum( &::algorithm_type, "type")
          for n=0 to ::algorithm_types.size()-1 {
            ::win.AddEnumChoice(::algotype_id,::algorithm_types[n])
          }
          ::win.SetCallback(&::OnAlgorithm)

          ::operation_id = ::win.AddEnum( &::operation,"Method")
          for n=0 to ::operation_types.size()-1 {
            ::win.AddEnumChoice(::operation_id,::operation_types[n])
          }

          ::win.BeginBoxPanel("Parameters")
            ::step_id = ::win.AddFloat( &::step,  "step",  0.01,1)
            ::win.AddFloat( &::size,  "size",  1,   30 )
            ::win.AddFloat( &::Imin,  "Imin",  0,   30 )
            ::win.AddFloat( &::Imax,  "Imax",  0,   30 )
          ::win.EndBoxPanel()
    
        ::win.AddPage("Controls")
          ::win.BeginBoxPanel("Execution")
              ::win.BeginHorizontal()
                  restart_id = ::win.AddButton("Restart", ::Restart)
              ::win.EndHorizontal()
              ::win.AddButton("Run",     &::Run)
              ::win.AddButton("ShowDiff",&::ShowDiff)
          ::win.EndBoxPanel()
  
          ::win.BeginBoxPanel("Result")
              ::win.AddString( &::result_filename,"file")
              ::win.BeginHorizontal()
                  ::win.AddButton("Save",       ::Save)
                  ::win.AddButton("Display",    ::Display)
              ::win.EndHorizontal()
          ::win.EndBoxPanel()

          ::win.BeginBoxPanel("Surface display")
              ::win.AddFloat( &::surf_scaling,"surf scale",0.01,10)
              ::win.AddButton("Surfaces",    ::DisplaySurfaces)
          ::win.EndBoxPanel()

          if wx.wxFileName(::html_filename).FileExists() {
            ::AddHelpPage(&::win)
          }
    
      ::win.EndBook()

      ::win.AddLabel("Indicative amilab commands:","")
      ::txtctrl = wx.wxRichTextCtrl(&::win.CurrentParent())
      ::win.AddWidget(&::txtctrl,0)
      # set about 3 lines visible
      tw = INT(1);th = INT(1)
      ::txtctrl.GetTextExtent("A",&tw,&th)
      ::txtctrl.SetMinSize(wx.wxSize(-1,th*5*1.5+10))
      ::txtctrl.SetEditable(false)
      ::txtctrl.Clear()

      ::AddStandardButtons(&::win)

      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::win.Update(-1)


    }
    ::Init()
    
  }
  # End of class
  
} 
# End of If
