#!/usr/bin/amilab
#
# Example of using the Gaussian Filtering
# with the command filter
#

func "Common/ScriptGui"

if (!exists(GaussianFilterClass)) {

  Class GaussianFilterClass : public ScriptGui {

  #----------------------------
  proc ::Init() {
    ::input_name = ""
    ::sigma      = 1, "Gaussian kernel standard devation"
    ::derx = INT(0), "Derivation order in X (0: no derivation)"
    ::dery = INT(0), "Derivation order in Y (0: no derivation)"
    ::derz = INT(0), "Derivation order in Z (0: no derivation)"
    ::auto = UCHAR(0), "Apply the filter automatically after changing the standard deviation value"
    ::autodrag = UCHAR(0), "Apply the filter automatically while moving the scale"
    
    ::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki/doku.php"

    ::html_filename = GetScriptsDir+"/BasicFilters/GaussianFilter/Doc/gaussian_filter/index.html"

    ::CreateGui()
  }
    
  #----------------------------
  proc ::load_input() {
    eval "::input <<="+::input_name+";"
    if (::input_name=="BrowseImage") {
      ::input_name = "::input"
      ::win.Update(-1)
    }
  }
  
  #--------------------------------------------------
  proc ::Filter() {
    ::load_input()
    ::res <<= ::input
    if (::input.vdim==1) {
      ::res = filter(::input,::sigma,\
                      ::derx,::dery,::derz)
    }else {
      for n=0 to ::input.vdim-1 {
        ::res.SetComponent( n, filter( ::input[n],::sigma,\)
                            ::derx,::dery,::derz)
      }
     }
   ::Display()
  }
  Comments( ::Filter, "Apply Gaussian convolution on each channel of the image.")
  
  proc ::Display() \
  {
    show ::input
    if (exists(::res)) {
      show ::res
      ::res_draw.update()
      ::input_draw._compare(&::res_draw)
    }
  }
  
  #-----------------------------------------
  proc ::AutoFilter() {
    if (::auto) { ::Filter; }
  }
  Comments( ::AutoFilter, "Apply the filter automatically if this option is enabled")

  #-----------------------------------------
  proc ::AutoDrag() {
    ::win.SetDragCallback(::sigma_id,::autodrag)
  }
  Comments( ::AutoDrag, "Enable/Disable real-time filtering while moving the scale")
  
  #-----------------------------------------
  proc ::Save() {
    ::res.save resultname
  }
  Comments( ::Save, "Save the resulting image")

  #-----------------------------------------
  proc ::CreateGui() {
    # parameters window
    import = &global::ami_import;
    ::win = import->ParamPanel("GaussFilter")
  
    ::win.BeginBook()
      ::win.AddPage("Param")
  
        ::win.AddImageChoice( &::input_name, "Input")
        ::sigma_id = ::win.AddFloat( &::sigma,"std_dev",0.1,10)
        ::win.SetCallback( &::AutoFilter)
        ::win.SetDragCallback(::sigma_id,::autodrag)
    
        ::win.AddInt( &::derx,"Der_order_X",0,2)
        ::win.AddInt( &::dery,"Der_order_Y",0,2)
        ::win.AddInt( &::derz,"Der_order_Z",0,2)
        ::win.AddBoolean( &::auto,"Auto")
        ::win.AddBoolean( &::autodrag,"Auto drag")
        ::win.SetCallback( &::AutoDrag)
        ::win.AddButton("Apply",::Filter)

      ::AddHelpPage(&::win)
  
    ::win.EndBook()
  
    ::AddStandardButtons(&::win)
  
    ::win.Update(-1)
    ::win.Display()
  }
  
  ::Init
  
  } #end Class
} #end If.

#----------------------------
# Main
#----------------------------

if (!exists(gfilter)) {

  GaussianFilterClass gfilter 

} else {
  InfoDialog "The script seems to be already loaded."
  }
