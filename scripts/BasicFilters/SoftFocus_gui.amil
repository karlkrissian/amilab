
#
# Soft Focus effect, mainly for pictures
#

if (!exists(SoftFocus)) {

  Class SoftFocus {

    #--------------------------------
    proc ::Init( ) {
      ::input_name = ""
      ::sigma      = 1, "Gaussian kernel standard devation"
      ::cx = INT(0), "Center X position "
      ::cy = INT(0), "Center X position"
      ::cz = INT(0), "Center X position"
      ::radius = 10, "Radius of the effect"
      ::auto = UCHAR(0), "Apply the filter automatically after changing the standard deviation value"
      ::autodrag = UCHAR(0), "Apply the filter automatically while moving the scale"
      ::CreateGui()
    }

    #--------------------------------
    proc ::Close() {
      ::win.HidePanel()
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
    
    #--------------------------------
    proc ::load_input() {
      eval "::input <<="+::input_name+";"
      if (::input_name=="BrowseImage") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
    }
    
    #--------------------------------------------------
    proc ::Filter() {
      ::load_input()
      ::res <<= ::input
      if (::input.vdim==1) {
        ::res = filter(::input,::sigma,\
                        0,0,0)
      } else {
        for n=0 to ::input.vdim-1 {
          ::res.SetComponent( n, filter( ::input[n],::sigma, \
                              0,0,0))
        }
      }
      # now ::res is the smoothed image, combine the images
      xpos = ((FLOAT) Xpos(::input)) - ::cx
      ypos = ((FLOAT) Ypos(::input)) - ::cy
      zpos = ((FLOAT) Zpos(::input)) - ::cz
      d2 = (xpos*xpos+ypos*ypos+zpos*zpos)/(::radius*::radius)
      d2 = exp(-d2*d2)
      ::res = ::input*d2 + ::res*(-d2+1)
      ::Display()
    }
    Comments( ::Filter, "Apply Gaussian convolution on each channel of the image.")
    
    #-----------------------------------------
    proc ::Display() {
      show ::input
      if (exists(::res)) {
        show ::res
        ::input_draw._compare(&::res_draw)
      }
    }
    
    #-----------------------------------------
    proc ::AutoFilter() {
      if (::auto) { ::Filter; }
    }
    Comments( ::AutoFilter, "Apply the filter automatically if this option is enabled")
  
    #-----------------------------------------
    proc ::AutoDrag() {
      ::win.SetDragCallback(::sigma_id,::autodrag)
    }
    Comments( ::AutoDrag, "Enable/Disable real-time filtering while moving the scale")
    
    #-----------------------------------------
    proc ::CursorPos() {
      if (exists(::input_draw)) {
        ::cx = ::input_draw.GetXPos()
        ::cy = ::input_draw.GetYPos()
        ::cz = ::input_draw.GetZPos()
        ::win.Update(-1)
      }
    }
    Comments( ::CursorPos, "Set the position parameter from the current cursor position in the input_draw window")
    
    #-----------------------------------------
    proc ::Save() {
      ::res.save resultname
    }
    Comments( ::Save, "Save the resulting image")
    
    #--------------------------------
    proc ::CreateGui() {
    
      # parameters window
      import = &global::ami_import;
      ::win = import->ParamPanel("SoftFocus")
    
      ::win.BeginBook()
        ::win.AddPage("Param")
  
        ::win.AddImageChoice( &::input_name, "Input")
        ::sigma_id = ::win.AddFloat( &::sigma,"std_dev",0.1,100)
        ::win.SetCallback( &::AutoFilter)
        ::win.SetDragCallback(::sigma_id,::autodrag)
  
        ::win.BeginBoxPanel("Center position")
          ::win.AddInt( &::cx,"X",0,1000)
          ::win.AddInt( &::cy,"Y",0,1000)
          ::win.AddInt( &::cz,"Z",0,1000)
          ::win.AddButton("From Cursor",::CursorPos)
        ::win.EndBoxPanel()
  
        ::win.AddFloat( &::radius,"Radius",0.1,1000)
  
        ::win.BeginHorizontal()
          ::win.AddBoolean( &::auto,"Auto")
          ::win.AddBoolean( &::autodrag,"Auto drag")
          ::win.SetCallback( &::AutoDrag)
        ::win.EndHorizontal()
        ::win.AddButton("Apply",::Filter)
      ::win.EndBook()
      ::win.AddButton("Close",    ::Close)
    
      ::win.Update(-1)
      ::win.Display()
    }
  
  
    ::Init

  }



}

if (!exists(SoftFocus_instance)) {

  SoftFocus sf1
  
} else {
  InfoDialog "The script seems to be already loaded."
}


