#
# Script to compute probability of belonging to a structure
# based on an intensity mapping of the local statistics
# of the image intensity (local mean and local standard deviation)
#

func "Common/ScriptGui"

if (!exists(itkWeightedLocalStatsCLass)) {

  ami_import->ITK()

  Class itkWeightedLocalStatsCLass : public ScriptGui {
  
    ::itk=&global::itk

    #--------------------------
    proc ::Init() \
    {
      ::input_name = "","Name of the input image variable"
      ::weights_name = "","Name of the weights image variable"
      ::output_prefix = ""
      ::localstats_winsize = INT(5), "Size of the windows for compute the local mean."
      ::min_weight = 0.01
      ::dim = INT(1), "The dimension of the image."
      
      ::html_filename = GetScriptsDir+"/BasicFilters/itkWeightedLocalStats/doc/weightedls/index.html"
      #::Gui
    }

    #--------------------------
    proc ::Load_Input() \
    {
      eval "::input <<=(FLOAT)"+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
    }

    #--------------------------
    proc ::Load_Weights() \
    {
      eval "::weights <<=(FLOAT)"+::weights_name+";"
      if (::weights_name=="Image") {
        ::weights_name = "::weights"
        ::win.Update(-1)
      }
    }

    #--------------------------
    proc ::Apply() \
    {
    
      if (::dim == 0){
      
        # compute weighted local mean intensity
        ::lm = ::itk->LocalMeanImageFilter2D(::input*::weights,::localstats_winsize)
        ::w_lm    = ::itk->LocalMeanImageFilter2D(::weights,::localstats_winsize)

        # set minimal weight, and divide by weights
        ::w_lm = (::w_lm>::min_weight)*::w_lm+(::w_lm<=::min_weight)*::min_weight
        ::lm = ::lm/::w_lm
        ::lm = (::w_lm>2*::min_weight)*::lm

        eval "global::"+::output_prefix+"lm <<= ::lm;"

        # compute weighted local standard deviation of intensity
        ::var = ::itk->LocalMeanImageFilter2D(::input*::input*::weights,::localstats_winsize)
        ::var = ::var/::w_lm 
        ::var = (::w_lm>2*::min_weight)*::var
        ::var = ::var-::lm*::lm
        ::sd = sqrt(::var)

        eval "global::"+::output_prefix+"sd <<= ::sd;"

        # apply Gaussian function
        ::res = ::input - ::lm
        ::res = (::res*::res)/(::var*1.5*1.5)
        ::res = (::res>0)*::res
        ::res = exp(-::res)
        ::res = (::w_lm>2*::min_weight)*::res


        eval "global::"+::output_prefix+"prob <<= ::res;"
      } else {
        if (::dim == 1) {
        
          # compute weighted local mean intensity
          ::lm = ::itk->LocalMeanImageFilter3D(::input*::weights,::localstats_winsize)
          ::w_lm    = ::itk->LocalMeanImageFilter3D(::weights,::localstats_winsize)

          # set minimal weight, and divide by weights
          ::w_lm = (::w_lm>::min_weight)*::w_lm+(::w_lm<=::min_weight)*::min_weight
          ::lm = ::lm/::w_lm
          ::lm = (::w_lm>2*::min_weight)*::lm

          eval "global::"+::output_prefix+"lm <<= ::lm;"

          # compute weighted local standard deviation of intensity
          ::var = ::itk->LocalMeanImageFilter3D(::input*::input*::weights,::localstats_winsize)
          ::var = ::var/::w_lm 
          ::var = (::w_lm>2*::min_weight)*::var
          ::var = ::var-::lm*::lm
          ::sd = sqrt(::var)

          eval "global::"+::output_prefix+"sd <<= ::sd;"

          # apply Gaussian function
          ::res = ::input - ::lm
          ::res = (::res*::res)/(::var*1.5*1.5)
          ::res = exp(-::res)
          ::res = (::w_lm>2*::min_weight)*::res


          eval "global::"+::output_prefix+"prob <<= ::res;"        
        }
      }
    }

    #--------------------------
    proc ::Display() \
    {
      show ::input
      show ::weights
      ::input_draw._compare(&::weights_draw)
      
      eval "show global::"+::output_prefix+"lm;"
      eval "::input_draw._compare(&global::"+::output_prefix+"lm_draw);"
      eval "show global::"+::output_prefix+"sd;"
      eval "::input_draw._compare(&global::"+::output_prefix+"sd_draw);"
      eval "show global::"+::output_prefix+"prob;"
      eval "::input_draw._compare(&global::"+::output_prefix+"prob_draw);"
    }
    
    #--------------------------
    proc ::Gui() \
    {
      import = &global::ami_import;
      ::win = import->ParamPanel("Prob")

      ::win.BeginBook()
        ::win.AddPage("Init")
          ::win.BeginHorizontal()
            ::win.AddImageChoice( &::input_name,"Input")
            ::win.AddButton("Load",::Load_Input)
          ::win.EndHorizontal()

          ::win.BeginHorizontal()
            ::win.AddImageChoice( &::weights_name,"Weights")
            ::win.AddButton("Load",::Load_Weights)
          ::win.EndHorizontal()        
          
          ::win.BeginHorizontal()
            dim_id = ::win.AddEnum( &::dim,"Dimension")
            ::win.AddEnumChoice(dim_id, "2D")
            ::win.AddEnumChoice(dim_id, "3D")
          ::win.EndHorizontal()
          
          ::win.AddString( &::output_prefix,"Output Prefix")
    
        ::win.AddPage("Param")
          ::win.AddInt( &::localstats_winsize,  "::localstats_winsize", 1,10)
          ::win.AddFloat( &::min_weight,  "::min_weight", 0.01,1)
      
          ::win.BeginHorizontal()
            ::win.AddButton("Apply",  ::Apply)
            ::win.AddButton("Display",::Display)
          ::win.EndHorizontal()
        
        ::AddHelpPage(&::win)
        
      ::win.EndBook()
      
      ::AddStandardButtons(&::win)

      ::win.Update(-1)
      ::win.Display()
    }
    ::Init()
  }
# Class itkWeightedLocalStatsCLass
}
# end if (!exists(itkWeightedLocalStatsCLass))
