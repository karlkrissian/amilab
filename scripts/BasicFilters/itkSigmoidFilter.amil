if (!exists(itkSigmoidClass)) {
  
  ami_import->ITK()
  
  Class itkSigmoidClass {
    
    ::itk=&global::itk
  
    proc ::Init() {
      
      ::class_name="global::itkSigmoidClass"
      ::input_name   = "","Name of the input image variable"
      ::stand = 0.5, "Standard deviation of the Gaussian kernel."
      
      ::min = 0.0, "Set the minimum value of the output image."
      ::max = 1.0, "Set the maximum value of the output image."
      
      ::alpha = -0.5, "Constant to compute the sigmoid function and FastMarching solution."
      ::beta = 3, "Constant to compute the sigmoid function and FastMarching solution."
      ::dim = INT(1), "The dimension of the image."
      
      ::inputmin = 0, "Minimal Intensity of the image."
      ::inputmax = 32000, "Maximal Intensity of the image."
      
    }

    proc ::Close() \
    {
      ::win.HidePanel
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
    proc ::CloseAll() {
      eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
      ::Close
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    proc ::Load_input() {

      eval "::input <<= (FLOAT)"+::input_name+";"
        if (::input_name=="Image") {
          ::input_name = "::input"
          ::win.Update(-1)
        }
      
      ::inputmin = min(::input)
      ::inputmax = max(::input)
      
      show ::input
    }
    
    proc ::Run() {
      ::grad = normgrad(::input,::stand)
      ::g = 1
      if (::dim==0) {
        ::sigmoid = ::itk->SigmoidImageFilter2D(::grad,::min,::max,::alpha,::beta)			
      } else {
        ::sigmoid = ::itk->SigmoidImageFilter3D(::grad,::min,::max,::alpha,::beta)
      }      
    }
    
    proc ::set_input(IMAGE im) \
    {
      ::input <<= im
    }
    
    proc ::Display() {
    
      show ::input
      show ::sigmoid
      ::input_draw.compare(::sigmoid_draw)
    
    }
    
    proc ::set_sigmoid(IMAGE im) \
    {
      ::sigmoid <<= im
    }
    
    proc ::SetParentPanel(OBJECT pp) \
    {
      ::parent_panel = &pp
    }
    
    proc ::Gui() {
      import = &global::ami_import;
      
      if (exists(::parent_panel)) {
        ::win = import->ParamPanel("itkSig",&::parent_panel)
      } else {
        ::win = import->ParamPanel("itkSig")
      }
      ::win.BeginBook()
      
        ::win.AddPage("Init")
        
        ::win.BeginBoxPanel("Input Image")
            # set the input image
            ::win.BeginHorizontal
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::Load_input)
            ::win.EndHorizontal
            ::win.BeginHorizontal
              dim_id = ::win.AddEnum( &::dim,"Dimension")
              ::win.AddEnumChoice(dim_id, "2D")
              ::win.AddEnumChoice(dim_id, "3D")
            ::win.EndHorizontal
        ::win.EndBoxPanel
                
        ::win.AddPage("Param")
        
          ::win.AddFloat( &::stand,"StandDev",0,(::inputmax-::inputmin)/2)
          ::win.AddFloat( &::min,"OutputMin",0,::inputmin)
          ::win.AddFloat( &::max,"OutputMax",0,::inputmax)
          ::win.AddFloat( &::alpha,"Alpha",-3,::inputmax)  
          ::win.AddFloat( &::beta,"Beta",0,::inputmax)        

          ::win.AddButton("Run", ::Run)
          ::win.AddButton("Display", ::Display)
        
      ::win.EndBook
      
      ::win.BeginHorizontal
        ::win.AddButton("Close", ::Close)
        ::win.AddButton("Close All", ::CloseAll)
      ::win.EndHorizontal
      
      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
    }
    
    ::Init
  }
# Class itkSigmoidClass
}
# end if (!exists(itkSigmoidClass))
