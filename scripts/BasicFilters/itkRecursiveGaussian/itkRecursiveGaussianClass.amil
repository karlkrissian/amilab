
func "Common/ScriptGui"

if (!exists(itkRecursiveGaussianClass)) {
  
  Class itkRecursiveGaussianClass  : public ScriptGui {
    
    proc ::Init() {
      
      ::input_name   = "","Name of the input image variable"
      ::sigma = 1, "Set sigma, measured in world coordinates, of the Gaussian kernel. The default is 1.0."
      ::normAcrossScale = INT(1), "Set the flag for normalizing the gaussian over scale space."
      ::order_x = INT(0), "Order of Derivative of the Gaussian in X direction."
      ::order_y = INT(0), "Order of Derivative of the Gaussian in Y direction."
      ::order_z = INT(0), "Order of Derivative of the Gaussian in Z direction."
      ::dim = INT(1), "The dimension of the image"

      ::gaussian_filename = "GaussianResult"
      ::result_filename_ext = ".ami.gz"
      ::g = UCHAR(0)
      
      ::help = "http://www.itk.org/Doxygen316/html/classitk_1_1RecursiveGaussianImageFilter.html"
      ::html_filename = GetScriptsDir+"/BasicFilters/itkRecursiveGaussian/doc/recursivegaussian_gui/index.html"
      
      //::Gui()
    }
    
    proc ::Load_input() {

      eval "::input <<= (FLOAT)"+::input_name+";"
        if (::input_name=="Image") {
          ::input_name = "::input"
          ::win.Update(-1)
        }
      
      show ::input
    }
    
    proc ::Run() {
      if (::dim==0) {
        ::gaussian = itk.RecursiveGaussianImageFilter2D(::input,::sigma,::normAcrossScale,\
			      ::order_x,::order_y)
        ::g = 1
        
      } else {
        ::gaussian = itk.RecursiveGaussianImageFilter3D(::input,::sigma,::normAcrossScale,\
			      ::order_x,::order_y,::order_z)
        ::g = 1
      }
    }
    
    proc ::Display() {
    
      show ::input
      show ::gaussian
      ::gaussian_draw.update()
      ::input_draw.compare(&::gaussian_draw)
    
    }
    
    proc ::Save() {
      filename=::vesselness_filename-".gz"-".ami";
      if (::v) {
        filename = filename + sprint("_sigma%0.1f",::sigma) \
                            + sprint("_order%0.0f",::order)
      } else {
        print "First you must create the image.\n"
      }
      filename = filename + ::result_filename_ext
      print "saving file "+filename+"\n"
      ::gaussian.save filename
    }
    
    #-----------------------------------------------------------
    proc ::Gui() \
    {
      ::win = ParamPanel("Recursive Gaussian")
      ::win.BeginBook()
      
        ::win.AddPage("Init")
        
          ::win.BeginBoxPanel("Input Image")
            # set the input image
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::Load_input)
            ::win.EndHorizontal()
            ::win.BeginHorizontal()
              dim_id = ::win.AddEnum( &::dim,"Dimension")
              ::win.AddEnumChoice(dim_id, "2D")
              ::win.AddEnumChoice(dim_id, "3D")
            ::win.EndHorizontal()
          ::win.EndBoxPanel()
        
        ::win.AddPage("Param")
        
          ::win.BeginBoxPanel("Recursive Gaussian Param")
            ::win.AddFloat( &::sigma,"Sigma",0.01,10)
            nas_id = ::win.AddEnum( &::normAcrossScale,"Normalize")
            ::win.AddEnumChoice(nas_id,"ON")
            ::win.AddEnumChoice(nas_id,"OFF")
            order_x_id = ::win.AddEnum( &::order_x,"Order in X")
              ::win.AddEnumChoice(order_x_id,"Zero Order")
              ::win.AddEnumChoice(order_x_id,"First Order")
              ::win.AddEnumChoice(order_x_id,"Second Order")
            order_y_id = ::win.AddEnum( &::order_y,"Order in Y")
              ::win.AddEnumChoice(order_y_id,"Zero Order")
              ::win.AddEnumChoice(order_y_id,"First Order")
              ::win.AddEnumChoice(order_y_id,"Second Order")
            order_z_id = ::win.AddEnum( &::order_z,"Order in Z")
              ::win.AddEnumChoice(order_z_id,"Zero Order")
              ::win.AddEnumChoice(order_z_id,"First Order")
              ::win.AddEnumChoice(order_z_id,"Second Order")
          ::win.EndBoxPanel()
        
          ::win.BeginHorizontal()
            ::win.AddButton("Run",::Run)
            ::win.AddButton("Display",::Display)
            ::win.AddButton("Save",::Save)
          ::win.EndHorizontal()
        
       ::AddHelpPage(&::win)
        
      ::win.EndBook()
      
      ::AddStandardButtons(&::win)
      
      ::win.Update(-1)
      ::win.Display()
    }
    
    ::Init()
  }
	# Class itkRecursiveGaussianClass
}
# end if (!exists(itkRecursiveGaussianClass))

# Instanciate the class

#itkRecursiveGaussianClass itk_recgauss
