if (!exists(itkRecursiveGaussianClass)) {
  ami_import->ITK()
  
  Class itkRecursiveGaussianClass {
    
    ::itk=&global::itk
	
    proc ::Init() {
      
      ::class_name="global::itkRecursiveGaussianClass"
      
      ::input_name   = "","Name of the input image variable"
      ::sigma = 1, "Set sigma, measured in world coordinates, of the Gaussian kernel. The default is 1.0"
      ::normAcrossScale = INT(1), "Set the flag for normalizing the gaussian over scale space"
      ::order = INT(0), "Set the order of the Gaussian to convolve with. "
      ::dim = INT(1), "The dimension of the image"

      ::gaussian_filename = "GaussianResult"
      ::result_filename_ext = ".ami.gz"
      ::g = UCHAR(0)
      
      ::help = "http://www.itk.org/Doxygen316/html/classitk_1_1RecursiveGaussianImageFilter.html"
      ::html_filename = GetScriptsDir+"/BasicFilters/itkRecursiveGaussian/doc/recursivegaussian_gui/index.html"
      
      #::Gui()
    }
    
    proc ::Close() \
    {
      ::win.HidePanel
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
  
    proc ::CloseAll() {
      eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
      ::Close
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    proc ::Load_input() {

      eval "::input <<= (FLOAT)"+::input_name+";"
        if (::input_name=="Image") {
          ::input_name = "::input"
          ::win.Update(-1)
        }
      
      show ::input
    }
    
    proc ::Run() {
      if (::dim==0) {
        ::gaussian = ::itk->RecursiveGaussianImageFilter2D(::input,::sigma,::normAcrossScale,::order)
        ::g = 1
        
      } else {
        ::gaussian = ::itk->RecursiveGaussianImageFilter3D(::input,::sigma,::normAcrossScale,::order)
        ::g = 1
      }
    }
    
    proc ::Display() {
    
      show ::input
      show ::gaussian
      ::input_draw.compare(::gaussian_draw)
    
    }
    
    proc ::Save() {
      filename=::vesselness_filename-".gz"-".ami";
      if (::v) {
        filename = filename + sprint("_sigma%0.1f",::sigma) \
                            + sprint("_order%0.0f",::order)
      } else {
        print "First you must create the image.\n"
      }
      filename = filename + ::result_filename_ext
      print "saving file "+filename+"\n"
      ::gaussian.save filename
    }

    proc ::LaunchHelp() {
      import = &global::ami_import
      wx1 = import->WxFunctions()
      res = wx1->LaunchDefaultBrowser(::help)
    }
    ::LaunchHelp.Comments("Launch the corresponding help tutorial page on the default browser.")
    
    proc ::HtmlHome() {
      ::html.LoadFile( ::html_filename)
    }
    ::HtmlHome.Comments("Back to the initial page.")

    //---------------------------------------------------
    proc ::HtmlBack() {
      res = ::html.HistoryBack()
    }
    ::HtmlBack.Comments("Back to the previous page.")

    //---------------------------------------------------
    proc ::HtmlForward() {
      res = ::html.HistoryForward()
    }
    ::HtmlForward.Comments("Go to the forward page.")

    proc ::Gui() {
      import = &global::ami_import;
      ::win = import->ParamPanel("Recursive Gaussian")
      ::win.BeginBook()
      
        ::win.AddPage("Init")
        
          ::win.BeginBoxPanel("Input Image")
            # set the input image
            ::win.BeginHorizontal
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::Load_input)
            ::win.EndHorizontal
            ::win.BeginHorizontal
              dim_id = ::win.AddEnum( &::dim,"Dimension")
              ::win.AddEnumChoice(dim_id, "2D")
              ::win.AddEnumChoice(dim_id, "3D")
            ::win.EndHorizontal
          ::win.EndBoxPanel
        
        ::win.AddPage("Param")
        
          ::win.BeginBoxPanel("Recursive Gaussian Param")
            ::win.AddFloat( &::sigma,"Sigma",0.01,10)
            nas_id = ::win.AddEnum( &::normAcrossScale,"Normalize")
            ::win.AddEnumChoice(nas_id,"ON")
            ::win.AddEnumChoice(nas_id,"OFF")
            order_id = ::win.AddEnum( &::order,"Order")
            ::win.AddEnumChoice(order_id,"Zero Order")
            ::win.AddEnumChoice(order_id,"First Order")
            ::win.AddEnumChoice(order_id,"Second Order")
          ::win.EndBoxPanel
        
          ::win.BeginHorizontal
            ::win.AddButton("Run",::Run)
            ::win.AddButton("Display",::Display)
            ::win.AddButton("Save",::Save)
          ::win.EndHorizontal
        
        ::win.AddPage("Help")
          ::win.BeginHorizontal
            ::win.AddButton("Help",   ::LaunchHelp)
            ::win.AddButton("Home",   ::HtmlHome)
            ::win.AddButton("<--",    ::HtmlBack)
            ::win.AddButton("-->",    ::HtmlForward)
          ::win.EndHorizontal
          # add html widget
          d = ::win.CurrentParent()
          ::html = import->wxHtmlWindow(&d)
          ::html.LoadFile( ::html_filename)
          ::win.AddWidget(&::html,1)
        
      ::win.EndBook
      
      ::win.BeginHorizontal
        ::win.AddButton("Close", ::Close)
        ::win.AddButton("Close All", ::CloseAll)
      ::win.EndHorizontal
      
      ::win.Update(-1)
      ::win.Display
    }
    
    ::Init
  }
	# Class itkRecursiveGaussianClass
}
# end if (!exists(itkRecursiveGaussianClass))
