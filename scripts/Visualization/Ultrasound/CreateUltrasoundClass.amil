#
# Creates a torus within a volume data
#

func "Common/ScriptGui"

if (!exists(CreateUltrasoundClass)) {

  ami_import->Filters()
  
  Class CreateUltrasoundClass : public ScriptGui {

    ::filters=&global::filters

    
   
    #----------------------------
    proc ::Init() {
  	  ::ip = "localhost", "IP to connect"
      ::folder_save = "", "Images save"
      ::l = Image(UCHAR,640,480,1)
      ::r = Image(UCHAR,640,480,1)
      ::xpoint  = "0",  "Coordenada X"
      ::ypoint  = "0",  "Coordenada Y"
      ::zpoint  = "0",  "Coordenada Z"
      
      #-------------- Timer
      ::interval = 0.1, "timer interval in seconds"
      ::evh = wx.wxAmiEventHandler(&::CB_timer)
      ::timer = wx.wxTimer(&::evh)
      ::evh.Connect(wx.wxEVT_TIMER,&::evh.GetEventFunction())
      ::processing_timer = false
    }
    
    
    #----------------- Timer
    proc ::Start() {
      ::inittime = wx.wxDateTime.UNow()
      ::win.SetLabelValue(::startdate_id,::inittime.FormatISODate().c_str())
      ::win.SetLabelValue(::starttime_id,::inittime.FormatISOTime().c_str())
      ::timer.Start(::interval*1000)
    }
    
    #----------------- Timer
    proc ::Stop() {
      ::timer.Stop()
    }

    #----------------- Timer
    proc ::CB_timer() {
      if (!::processing_timer)  {
          ::processing_timer = true
          currenttime = wx.wxDateTime.UNow()
          diff=currenttime-::inittime
          ::win.SetLabelValue(::label_id,diff.Format("%M min %S s %l ms").c_str())
          ::ReadCamera()
          ::RImageShow()
          ::processing_timer =false
      } 
    }
        
    #------------------------------------
    
    proc ::ConnectUltrasonix() {
     ::win.EnablePanel(::panel_ultrasound,1)
  
    }
  
  #connect, grab frame a read left and righ image
  proc ::ConnectCamera() {
    ::c = mt.Cameras()
    res = ::c.AttachAvailableCameras()
    if (res==0) {
      ::win.EnablePanel(::panel_camera,1)
      if (exists(::cam)) { del ::cam; }

      ::cam = ::c.getCamera(0)
      
    }
  }
  
  proc ::DisconnectCamera() {
    ::c.Detach()
    ::win.EnablePanel(::panel_camera,0)
  
  }
  
  proc ::ReadUltrasonix() {

  }

  proc ::ReadCamera() {
    ok = ::cam.grabFrame()
    if (ok==true) {
      mt.GetImageMT(&::l,&::r,&::cam)
    } else {
      InfoDialog "grabFrame failed!"
    }
  }
  
  proc ::GetOutput() {

  }

  proc ::Show() {
  

  }
  proc ::Pinta() {
  if(exists(::r_draw)){
    ::r_draw.SetPenColor(wx.wxColour(255,0,0,255))
    
    # draw vertical
    _xmin = (FLOAT)::r_draw.GetXmin()
    _xmax = (FLOAT)::r_draw.GetXmax()
    _ymin = (FLOAT)::r_draw.GetYmin()
    _ymax = (FLOAT)::r_draw.GetYmax()
    
   
   
    ::r_draw.DrawLineZ(_xmin,_ymin,_xmax,_ymax)
   
    ::r_draw->DrawingAreaDisplay()
    }else{
        InfoDialog "no hay draw!"
    }
  }
  
  proc ::RImageShow() {
    show ::r
    ::Pinta()
    ::r_draw.PaintCallback(&::Pinta)
  }
  
  proc ::LImageShow() {
    show ::l
  }
  
  proc ::Gui() {
    ::win = global::ami_import.ParamPanel("Ultrasound display")
  
    ::win.BeginBook()
      ::win.AddPage("Param")

        ::win.BeginBoxPanel("Connection params")
          ::win.AddString( &::ip,"IP")
          ::win.AddButton("Connect Ultrasonix",::ConnectUltrasonix)
          ::win.BeginHorizontal()
            ::win.AddButton("Connect Camera",::ConnectCamera)
            ::win.AddButton("Disconnect Camera",::DisconnectCamera)
          ::win.EndHorizontal()
        ::win.EndBoxPanel()

        ::win.BeginBoxPanel("Ultrasound folder")
          ::win.AddDirname( &::folder_save, "Dir")
        ::win.EndBoxPanel()
        
        ::panel_ultrasound = ::win.BeginBoxPanel("")
          ::win.AddButton("Start ultrasonix",::ReadUltrasonix)		  
          ::win.EnablePanel(::panel_ultrasound,0)
        ::win.EndBoxPanel()
        
        ::panel_camera = ::win.BeginBoxPanel("")
          ::win.AddButton("Start Camera",::ReadCamera)
          ::win.EnablePanel(::panel_camera,0)
        ::win.EndBoxPanel()
        
        ::win.BeginBoxPanel("Images")
          ::win.AddButton("Show Left",::LImageShow)
          ::win.AddButton("Show Right",::RImageShow)
        ::win.EndBoxPanel()
        
                
        ::win.BeginBoxPanel("Coordenadas")
          ::win.BeginHorizontal()
            ::win.AddLabel("X:",::xpoint)
            ::win.AddLabel("Y:",::ypoint)
            ::win.AddLabel("Z:",::zpoint) 
          ::win.EndHorizontal()
        ::win.EndBoxPanel()
        
        
      ::win.AddPage("Render")
      
      ::win.AddPage("Timer")
        #---------------- Timer
        ::win.AddFloat(&::interval,"Interval",0.01,100)
        ::win.BeginHorizontal()
            ::icons.LoadIconPNG("Play")
            ::AddBitmapButton(&::win, &::icons._Play, 32, "Start")
            ::win.SetPositionProp(-1,0)

            ::icons.LoadIconPNG2("Stop playing","Stop_playing")
            ::AddBitmapButton(&::win, &::icons._Stop_playing, 32, "Stop")
            ::win.SetPositionProp(-1,0)
       ::win.EndHorizontal()
       ::win.BeginBoxPanel("Started At:")
        ::startdate_id = ::win.AddLabel("Date:","")
        ::starttime_id = ::win.AddLabel("Time:","")
       ::win.EndBoxPanel()
       ::win.BeginBoxPanel("Elapsed Time")
        ::label_id = ::win.AddLabel("","")
      ::win.EndBoxPanel()
        #------------------ end Timer  
        
    ::win.EndBook()

    ::AddStandardButtons(&::win)
  
    ::win.Update(-1)
    ::win.Display()
  }
  
  ::Init()
} #End of class
  
} # End of if

      
