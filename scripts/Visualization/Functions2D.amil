#!/usr/bin/amilab

#
# Script for drawing 2D functions
# or lines from an image
#

comments="Functions2DClass: this class provides an interface for plotting 2D functions."

import_mainframe

if (!exists(Functions2DClass)) {

  
  Class Functions2DClass {

    #----------------------------
    proc ::Init() \
    {
      ::input_name =  ""
      ::xmin = -10, "minimal value along X axis"
      ::xmax = 10,  "maximal value along X axis"
      ::ymin = -10, "minimal value along Y axis"
      ::ymax = 10,  "maximal value along Y axis"
      ::resolution = 0.1, "Curve resolution along X"
      ::eq1_mode = INT(0), "Equation mode: 0 for user equation, 1 for equation from input image"
      ::equation   =  "sin(X)*3", "Equation as a function of the image X, example sin(X)"
      ::equation_drag = UCHAR(1)
      ::CreateWindow()
    }
    
    #----------------------------
    proc ::Close() \
    {
      ::win.Hide
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
    
    #----------------------------
    proc ::CloseAll() \
    {
      ::Close
      if (exists(Functions2DClass)) { del Functions2DClass; }
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    #----------------------------
    proc ::LoadInput() \
    {
      printn "evaluation of --> ::input <<="+::input_name+";"
      eval "::input <<="+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        ::win.update
      }
      ::win.update
      #if (exists(::input_draw)) { del ::input_draw; }
      #show ::input
    }
    
    
    #----------------------------
    proc ::CheckLimits() \
    {
      ::smallest_interval = 0.01
      if (::xmax<=::xmin+::smallest_interval) {
        ::xmax = ::xmin+::smallest_interval
        ::win.update
      }
      if (::ymax<=::ymin+::smallest_interval) {
        ::ymax = ::ymin+::smallest_interval
        ::win.update
      }
    }

    #----------------------------
    proc ::AutoX() \
    {
      if (::eq1_mode==1) {
        local::_pos = SpacePos(::input)
        ::xmin = min(_pos[0])
        ::xmax = max(_pos[0])
        _xw = ::xmax-::xmin
        ::xmin = ::xmin-_xw/10
        ::xmax = ::xmax+_xw/10
        ::win.update
        mf_DrawSetXLimits(::xmin,::xmax)
      }
    }

    #----------------------------
    proc ::AutoY() \
    {
      if (::eq1_mode==0) {
        numval = INT((::xmax-::xmin)/::resolution+0.5)
        ::X <<= Image(FLOAT,numval,1,1)
        ::X.settranslation(::xmin,0,0)
        ::X.setvoxelsize(::resolution,1,1)
        _pos = SpacePos(::X)
        ::X = _pos[0]
        local::X = ::X
        eval "::Y <<= "+::equation+";"
        ::ymin = min(::Y)
        ::ymax = max(::Y)
        _yw = ::ymax-::ymin
        ::ymin = ::ymin-_yw/10
        ::ymax = ::ymax+_yw/10
        ::win.update
        mf_DrawSetYLimits(::ymin,::ymax)
      }
      if (::eq1_mode==1) {
        ::ymin = min(::input)
        ::ymax = max(::input)
        _yw = ::ymax-::ymin
        ::ymin = ::ymin-_yw/10
        ::ymax = ::ymax+_yw/10
        ::win.update
        mf_DrawSetYLimits(::ymin,::ymax)
      }
    }

    #----------------------------
    proc ::Set() \
    {
      ::CheckLimits()
      if (::eq1_mode==0) {
        numval = INT((::xmax-::xmin)/::resolution+0.5)
        ::X <<= Image(FLOAT,numval,1,1)
        ::X.settranslation(::xmin,0,0)
        ::X.setvoxelsize(::resolution,1,1)
        _pos = SpacePos(::X)
        ::X = _pos[0]
        local::X = ::X
        eval "::Y <<= "+::equation+";"
        mf_DrawSetXLimits(::xmin,::xmax)
        mf_DrawSetYLimits(::ymin,::ymax)
        mf_DrawSetCurve(::Y)
      }
      if (::eq1_mode==1) {
        # set min and max
        mf_DrawSetXLimits(::xmin,::xmax)
        mf_DrawSetYLimits(::ymin,::ymax)
        mf_DrawSetCurve(::input)
      }
    }
    # end ::Set()

    #----------------------------
    proc ::OnEquation() {
      # InfoDialog ::equation
      ::Set()
    }
    
    #--------------------------------
    proc ::Eq1ModeEvent() \
    {
      ::win.EnablePanel(::c1_eq_panel,    ::eq1_mode==0)
      ::win.EnablePanel(::c1_input_panel, ::eq1_mode==1)
    }

    #----------------------------
    proc ::CreateWindow() {
    
      # parameters window
      ::win = ParamWin("2DFunc")
      
      ::win.BeginBook
    
        ::win.AddPage("Param")

          ::win.BeginBoxPanel("Axes")
            ::win.AddFloat(::xmin,"xmin",-30,30)
            ::win.SetCallback(::OnEquation)
            ::win.AddFloat(::xmax,"xmax",-30,30)
            ::win.SetCallback(::OnEquation)
            ::win.AddButton("Auto X", ::AutoX)

            ::win.AddFloat(::ymin,"ymin",-30,30)
            ::win.SetCallback(::OnEquation)
            ::win.AddFloat(::ymax,"ymax",-30,30)
            ::win.SetCallback(::OnEquation)
            ::win.AddButton("Auto Y", ::AutoY)
          ::win.EndBoxPanel

          ::res_id = ::win.AddFloat(::resolution,"res.",0.01,10)
          ::win.SetCallback(::OnEquation)
          ::win.SetDragCallback(::res_id,1)

        ::win.AddPage("Curve 1")
          ::eq1_mode_id = ::win.AddEnum(::eq1_mode,"mode")
            ::win.AddEnumChoice(::eq1_mode_id,"User equation")
            ::win.AddEnumChoice(::eq1_mode_id,"Input image")
          ::win.SetCallback(::Eq1ModeEvent)

          # set input equation
          ::c1_eq_panel = ::win.BeginBoxPanel("Equation")
            ::eq_id = ::win.AddString(::equation,"Y=")
            ::win.SetCallback(::OnEquation)
          ::win.EndBoxPanel

          # set the input image
          ::c1_input_panel = ::win.BeginBoxPanel("Input")
            ::win.BeginHorizontal
              ::win.AddImageChoice(::input_name, "")
              ::win.AddButton("Load",::LoadInput)
            ::win.EndHorizontal
          ::win.EndBoxPanel

  
      ::win.EndBook
      ::win.BeginHorizontal
        ::win.AddButton("Close", ::Close)
        ::win.AddButton("Close All", ::CloseAll)
      ::win.EndHorizontal
      
      ::win.update
      ::win.Display
      ::Eq1ModeEvent
   }

    ::Init
  } 
  # Class Functions2DClass
} 
# end if (!exists(Functions2DClass))
  
  
#----------------------------
# Main
#----------------------------

if (!exists(func2d)) {

  Functions2DClass func2d
  
} else {
  InfoDialog "The script seems to be already loaded."
}

