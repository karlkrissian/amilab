
func "Common/ScriptGui"

if (!exists(LoupeClass)) {

  #----------------------------
  Class LoupeClass : public ScriptGui {

    ::ami_import = &global::ami_import

    #----------------------------
    proc ::Init() {
      ::input_name =  "", "name of the input image, the drawing window of this image will be used"
      ::rad = INT(30), "loupe radius"
      ::mag = 2, "magnification factor"
      ::Active = UCHAR(1), "Activate/Desactivate loop"
      ::morphing = UCHAR(0), "Continuous transition"
      ::in_update = false
    }

    #----------------------------
    proc ::LoadInput() \
    {
      SetStatusText("LoadInput use a reference to the input image.")
      if exists(::input) { del ::input; }
      eval "::input <<= "+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        #::win.update
      }
      if (exists(::input_draw)) { del ::input_draw}
      show ::input
      ::input_draw.PaintCallback(&::ShowLoupe)
      SetStatusText("LoadInput Finished")
    }
    Comments(::LoadInput,"Load and initialize input image.")


    #----------------------------
    proc ::Update() \
    {
      if (!::in_update) {
        ::in_update = true
        ::input_draw.update()
        ::in_update = false
      }
    }

    #----------------------------
    proc ::ShowLoupe() {
      if (!::in_update && ::Active) { 
        if (exists(::subim)) {
          ::input.putimage(::subim)
        }

        xpos = ::input_draw.GetXPos()
        ypos = ::input_draw.GetYPos()
        if (::input.tz==1) {
          if (::morphing) {
            ::subim <<= ::input[(xpos-::rad):(xpos+::rad),(ypos-::rad):(ypos+::rad)]
            # spacial positions
            pos = SpacePos(::subim)
            # get limits
            xmin = min(pos[0])
            xmax = max(pos[0])
            ymin = min(pos[1])
            ymax = max(pos[1])
            rad = -max(-(xmax-xmin),-(ymax-ymin))/2
printn "rad = %1%" %rad
            # position from the center
            pos1 = pos
            pos1.SetComponent(0,pos1[0]-(xmax+xmin)/2)
            pos1.SetComponent(1,pos1[1]-(ymax+ymin)/2)
            # Gaussian weights
            pos2 = pos1/(rad/1.5)
            pos2_2 = pos2*pos2
            pos2_4 = pos2_2*pos2_2
            pos2_8 = pos2_4*pos2_4
            
            w = exp(-(pos2_8)/2)*(::mag-1)/::mag
printn "min w = %1%" % min(w)
            # new image
            subim = ::subim(pos-pos1*w)
          } else {
            ::subim <<= ::input[(xpos-::rad):(xpos+::rad),(ypos-::rad):(ypos+::rad)]
            magnified_subim = Resize(::subim,::subim.tx*::mag,::subim.tx*::mag,1,1)
            xp = (FLOAT) Xpos(::subim)- ::subim.tx/2
            yp = (FLOAT) Ypos(::subim)- ::subim.ty/2
            r2 = xp*xp+yp*yp
            r = sqrt(r2)

            diffx = magnified_subim.tx-::subim.tx
            diffy = magnified_subim.ty-::subim.ty
            subimm = magnified_subim[(diffx/2):(diffx/2+::subim.tx-1),(diffy/2):(diffy/2+::subim.ty-1)]
            subim = ::subim*(r>::rad)+subimm*(r<=::rad)
          }
       } else {
          zpos = ::input_draw.GetZPos()
          ::subim <<= ::input[(xpos-::rad):(xpos+::rad),(ypos-::rad):(ypos+::rad),(zpos-::rad):(zpos+::rad)]
          magnified_subim = Resize(::subim,::subim.tx*::mag,::subim.ty*::mag,::subim.tz*::mag,1)
          xp = (FLOAT) Xpos(::subim)- ::subim.tx/2
          yp = (FLOAT) Ypos(::subim)- ::subim.ty/2
          zp = (FLOAT) Zpos(::subim)- ::subim.tz/2
          r2 = xp*xp+yp*yp+zp*zp
          r = sqrt(r2)

          diffx = magnified_subim.tx-::subim.tx
          diffy = magnified_subim.ty-::subim.ty
          diffz = magnified_subim.tz-::subim.tz
          subimm = magnified_subim[(diffx/2):(diffx/2+::subim.tx-1),(diffy/2):(diffy/2+::subim.ty-1),(diffz/2):(diffz/2+::subim.tz-1)]
          subim = ::subim*(r>::rad)+subimm*(r<=::rad)
        }

        ::input.putimage(subim)
        schedule(3,::Update);
      }
    }

    #----------------------------
    proc ::ToggleLoupe() {
      if (!::Active) {
        if (exists(::subim)) {
          ::input.putimage(::subim)
        }
        del ::subim
        schedule(3,::Update);
      }
    }

    #----------------------------
    proc ::Gui() {
      
      ::win = global::ami_import.ParamPanel("Loupe")

      ::win.BeginBook()
    
        ::win.AddPage("Main")

            # set the input image drawing window
            ::win.BeginBoxPanel("Input")
              ::win.BeginHorizontal()
                ::win.AddImageChoice( &::input_name, "")
                ::AddBitmapButton(&::win, &::icons._Copy,   32, "LoadInput")
                ::win.SetPositionProp(-1,0)
              ::win.EndHorizontal()
            ::win.EndBoxPanel()

            ::win.AddInt  (&::rad,"radius",10,200)
            ::win.SetCallback(&::ShowLoupe)

            ::win.AddFloat(&::mag,"factor",1,20)
            ::win.SetCallback(&::ShowLoupe)

            ::win.AddBoolean(&::Active,"Active")
            ::win.SetCallback(&::ToggleLoupe)

            ::win.AddBoolean(&::morphing,"Continuous")
            ::win.SetCallback(&::ToggleLoupe)

      ::win.EndBook()

      

      ::AddStandardButtons(&::win)
      ::win.Display()
      ::win.Update(-1)
    }
    ::Init()

  }

}
