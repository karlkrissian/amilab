
func "Common/ScriptGui"

if (!exists(DistancePolyDataClass)) {

  Class DistancePolyDataClass : public ScriptGui \
  {
    
    func "Visualization/vtkXYPlot/vtkXYPlotClass"
    vtkXYPlotClass ::xyplot

    func "Variable/ObjectIO"
    #===========================================================================
    # Set parameters here
    Class ::ParamClass : public ObjectIO {

        ::description = "Default parameters", \
                        "Description of the set of parameters"

        ::get_main_component = UCHAR(1), "keep only the main connected component"
        ::range_min = -1, "minimal displayed distance value"
        ::range_max = 1, "maximal displayed distance value"
        ::labels = INT(4), "number of labels for scalar bar"


        #-----------------------------------------------------------------------
        # copy parameters
        proc ::__assign__( VAR p) {
        }
    }

    #---------------------------------------------------------------------------
    proc ::Init() {
      
      ::surface1_selected=""
      ::surface2_selected=""

      ::ParamClass ::params

      #::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki"+
      # "/doku.php?id=tutorial-mainalgorithms-levelset#level_set_segmentation"

      ::html_filename = GetScriptsDir+\
                        "/DistancePolyData/Doc/DistancePolyData/index.html"
    }



    #---------------------------------------------------------------------------
    proc ::UpdateRange() \
    {
      if (::renderer.GetActors().GetNumberOfItems()>0) {
        ::renderer.GetActors().GetLastItem().GetMapper().\
          SetScalarRange( ::params.range_min, ::params.range_max) 
      }
      if (::renderer2.GetActors().GetNumberOfItems()>0) {
        ::renderer2.GetActors().GetLastItem().GetMapper().\
          SetScalarRange( ::params.range_min, ::params.range_max) 
      }
      ::renwin_interact.GetRenderWindow().Render()
    }

    #---------------------------------------------------------------------------
    proc ::UpdateLabels() \
    {
      ::scalarBar.SetNumberOfLabels( ::params.labels) 
      ::renwin_interact.GetRenderWindow().Render()
    }

    #---------------------------------------------------------------------------
    # distance computation from surf1 to surf2
    # the points of surf2 are projected to surf1 using vtkDistancePolyDataFilter
    # 
    proc ::ProcessAndDisplay( OBJECT surf1, OBJECT surf2, NUM use_scalarbar) \
    {
      clean1 = vtk.vtkCleanPolyData.New()

      if (::params.get_main_component) {
        pdc = vtk.vtkPolyDataConnectivityFilter.New()
        pdc.SetInputConnection(surf1.GetProducerPort())
        pdc.SetExtractionModeToLargestRegion()
        pdc.Update()
        clean1.SetInputConnection( pdc.GetOutputPort())
      } else {
        clean1.SetInputConnection( surf1.GetProducerPort())
      }

    
      clean2 = vtk.vtkCleanPolyData.New()
      clean2.SetInputConnection( surf2.GetProducerPort())
    
      distanceFilter = vtk.vtkDistancePolyDataFilter.New()
    
      distanceFilter.SetInputConnection( 0, clean1.GetOutputPort() )
      distanceFilter.SetInputConnection( 1, clean2.GetOutputPort() )
      distanceFilter.Update()
    
      mapper =  vtk.vtkPolyDataMapper.New()
      mapper.SetInputConnection( distanceFilter.GetOutputPort() )
      r = vector_double(2)
      distanceFilter.GetOutput().GetPointData().GetScalars().GetRange_4(&r[0])
      ::win.FloatConstraints(::range_min_id,r[0],0,r[0])
      ::win.FloatConstraints(::range_max_id,0,r[1],r[0])
      #::params.range_min = r[0]
      #::params.range_max = r[1]
      ::win.Update(-1)

      mapper.SetScalarRange( ::params.range_min, ::params.range_max) 
      actor = vtk.vtkActor.New()
      actor.SetMapper( mapper )
    
      if (use_scalarbar) {
        ::scalarBar = vtk.vtkScalarBarActor.New()
        ::scalarBar.SetLookupTable(mapper.GetLookupTable())
        ::scalarBar.SetTitle("Distance")
        ::scalarBar.SetNumberOfLabels(::params.labels)
      }

      # Create image of distances
      da = distanceFilter.GetOutput().GetPointData().GetScalars()
      valim = Image(DOUBLE,da.GetNumberOfTuples(),1,1)
      valim_vtk = vtktools.ToVtkImageData(valim)
      valim_vtk.GetPointData().SetScalars(da)
      valim = vtktools.FromVtkImageData(valim_vtk)

      return = VarVector()
      return.push_back(actor)
      if (use_scalarbar) {
        return.push_back(::scalarBar)
      }
      return.push_back(valim)
      
    }

    #---------------------------------------------------------------------------
    # todo ...
    proc ::CB_DistProgressEvent(OBJECT caller, NUM id) \
    {
    }

    #---------------------------------------------------------------------------
    proc ::CB_CamEvent(OBJECT caller, NUM id) \
    {
      ::renwin_interact.Render()
      ::renwin_interact2.Render()
    }

    #---------------------------------------------------------------------------
    proc ::Run() \
    {
      # always reload the surfaces
      del ::vtksurf1
      del ::vtksurf2
      eval "::vtksurf1 = vtktools.ToVtkPolyData(&%1%);" % ::surface1_selected
      eval "::vtksurf2 = vtktools.ToVtkPolyData(&%1%);" % ::surface2_selected
    
      actors1 = ::ProcessAndDisplay(::vtksurf1,::vtksurf2, true)
      ::renderer.AddActor( actors1[0] )
      ::renderer.AddActor2D(actors1[1])
      ::renwin_interact.GetRenderWindow().Render()
      ::dist1 = actors1[2]

      actors2 = ::ProcessAndDisplay(::vtksurf2,::vtksurf1, false)
      ::renderer2.AddActor( actors2[0] )
      ::renwin_interact2.GetRenderWindow().Render()
      ::dist2 = actors2[1]

      # share active camera
      ::renderer2.SetActiveCamera(::renderer.GetActiveCamera())
      ::cam_cmd = vtk.vtkAmiCommand.New()
      ::cam_cmd.SetAmiFunction(&::CB_CamEvent)
      ::renderer.GetActiveCamera().AddObserver(vtk.vtkCommand.ModifiedEvent, &::cam_cmd)
      ::renderer.ResetCamera()
 
      #renWin.Render()
      #renWinInteractor.Start()

    }

    #---------------------------------------------------------------------------
    proc ::Stats() \
    {
      printn "*** DIST1 ***"
      d1min = min(::dist1)
      d1max = max(::dist1)
      printn d1min
      printn d1max
      #func "Visualization/ImageHistogram/ImageHistogramGui.amil" // from menu
      printn "mean  = %1%" % mean(::dist1)
      printn "mean of abs = %1%" % mean(abs(::dist1))
      printn "RMS = %1%" %sqrt(mean(::dist1*::dist1))
      ::histo1 = histo(::dist1,d1min,d1max,(d1max-d1min)/0.1)

      printn "*** DIST2 ***"
      d2min = min(::dist2)
      d2max = max(::dist2)
      printn d2min
      printn d2max
      #func "Visualization/ImageHistogram/ImageHistogramGui.amil" // from menu
      printn "mean  = %1%" % mean(::dist2)
      printn "mean of abs = %1%" % mean(abs(::dist2))
      printn "RMS = %1%" %sqrt(mean(::dist2*::dist2))
      ::histo2 = histo(::dist2,d2min,d2max,(d2max-d2min)/0.1)
    }
    
    #----------------------------
    proc ::MainBook_AddVolRenTab()  \
    {
       mb = ami.MainFrame.GetMainBook()

      ::panel = wx.wxPanel(&ami.MainFrame)
      ::panel.SetName("DistPoly panel")

      ::panel_sizer = wx.wxBoxSizer(wx.wxHORIZONTAL)
      ::panel.SetSizer(&::panel_sizer)

      # Prepare first renderer
      ::renwin_interact = wxvtk.wxVTKRenderWindowInteractor(&::panel,wx.wxID_ANY)
      ::panel_sizer.Add(&::renwin_interact,1,wx.wxEXPAND )
      #,1, wx.wxEXPAND | wx.wxALL | wx.wxALIGN_CENTER,0 )
      ::renwin_interact.UseCaptureMouseOn()
      ::renwin_interact.Enable(true)
      ::renwin_interact.Initialize()
      ::renderer =  vtk.vtkRenderer.New()
      ::renderer.ResetCamera()   
      ::renwin_interact.GetRenderWindow().AddRenderer(::renderer)
      interact = vtk.vtkInteractorStyleTrackballCamera.New()
      ::renwin_interact.SetInteractorStyle(interact)

      # Prepare second renderer
      ::renwin_interact2 = wxvtk.wxVTKRenderWindowInteractor(&::panel,wx.wxID_ANY)
      ::panel_sizer.Add(&::renwin_interact2,1,wx.wxEXPAND )
      #,1, wx.wxEXPAND | wx.wxALL | wx.wxALIGN_CENTER,0 )
      ::renwin_interact2.UseCaptureMouseOn()
      ::renwin_interact2.Enable(true)
      ::renwin_interact2.Initialize()
      ::renderer2 =  vtk.vtkRenderer.New()
      ::renderer2.ResetCamera()   
      ::renwin_interact2.GetRenderWindow().AddRenderer(::renderer2)
      interact2 = vtk.vtkInteractorStyleTrackballCamera.New()
      ::renwin_interact2.SetInteractorStyle(interact2)

      ::icons.LoadIconPNG("Units")
      mb.AddPage( &::panel,  "DistPoly",1, \
        wx.wxBitmap(&::icons._Units.Scale(16,16)))
      ::pageindex = mb.GetPageIndex(&::panel)
      
      # initialize the renderer, camera, renderwindow in volvVctor[0]
      #::renwin_interact.Hide()
      # NEED TO CALL SHOW AND UPDATE TO MAKE IT WORK ON WINDOWS !!!
      ::renwin_interact.Show()
      ::panel.Show()
      ::renwin_interact.Update()
      ::panel.Update()
      ## now can create the renderer
      #::volVector[0].CreateRenderer(&::renwin_interact)
      #::volVector[0].AddAnnotatedCube() 
      #::SetRendererBg()
      
    }

    #---------------------------------------------------------------------------
    proc ::MainBook_CloseTab()  \
    {
      if (exists(::pageindex)){
        mb = ami.MainFrame.GetMainBook()
        mb.DeletePage(::pageindex)
      }
    }


    #---------------------------------------------------------------------------
    # Redefinition of Close to close the panel tab in main_book
    #
    proc ::Close() \
    {
      ::MainBook_CloseTab()
      ::win.HidePanel()

      delvars GetObjectName(::Close)
    }
    Comments( ::Close,  "Will close the interface and delete the "+\
                        "corresponding "+\
                        "object named '"+GetObjectName(::Close)+"'.")

    #---------------------------------------------------------------------------
    proc ::Gui() {
    
      if (exists(::parent_panel)) {
        ::win = ParamPanel("DistancePolyData",&::parent_panel)
      } else {
        ::win = ParamPanel("DistancePolyData")
      }
      
      ::win.BeginBook()
    
        ::win.AddPage("Init")

          ::win.AddAMIObjectChoice( &::surface1_selected, "", "SurfacePoly")
          ::win.AddBoolean(::params.get_main_component,"main component")
          
          ::win.AddAMIObjectChoice( &::surface2_selected, "", "SurfacePoly")

          ::win.BeginBoxPanel("Distance display range")
            ::range_min_id = ::win.AddFloat(::params.range_min,"min",-20,0)
            ::win.SetCallback(::UpdateRange)
            ::range_max_id = ::win.AddFloat(::params.range_max,"max",0,20)
            ::win.SetCallback(::UpdateRange)
            ::win.AddInt(::params.labels,"labels",1,10)
            ::win.SetCallback(::UpdateLabels)
          ::win.EndBoxPanel()

          ::win.AddButton("Run Filter",::Run)
          ::win.AddButton("Stats",::Stats)

          ::xyplot.SetParentPanel(::win.CurrentParent())
          ::xyplot.Gui()
          ::win.AddPage("Hist",::xyplot.win)

        # add page for saving/loading parameters
        ::AddParamPage(&::win)

        # add help page
        if wx.wxFileName(::html_filename).FileExists() {
          ::AddHelpPage(&::win)
        }
    
      ::win.EndBook()
    
      ::AddStandardButtons(&::win)

      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::win.Update(-1)

      ::MainBook_AddVolRenTab()
    }
    ::Init()
    
  }
  # End of class
  
} 
# End of If
