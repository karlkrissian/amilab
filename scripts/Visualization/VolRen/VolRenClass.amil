#!/usr/bin/amilab

#
# Script for Volume Rendering using VTK
#

comments="VolRen: VTK GPU RayCasting."

func "Common/ScriptGui"

import_vtk

if (!exists(VolRenClass)) {


  #-----------------------------------------------------
  #  VolRenClass
  #-----------------------------------------------------
  Class VolRenClass : public ScriptGui {

    func "vtkVolumeClass.amil"

    # volume 1
    vtkVolumeClass                  ::vtkvol1
    # volume 2
    vtkVolumeClass                  ::vtkvol2

    #----------------------------
    proc ::Init() \
    {
      ::input_name  =  "", "name of the input image"
      ::input2_name =  "", "name of the second input image"
      ::vtkvol1.Init()
      ::vtkvol2.Init()
      #::Gui()
    }
    
    #----------------------------
    proc ::load_input() {
      if (exists(::input)) { del ::input; }
      eval "::input = &"+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        ::UpdateVolPages()
        ::win.Update(-1)
      }
    }
  
    #----------------------------
    proc ::load_input2() {
      if (exists(::input2)) { del ::input2; }
      eval "::input2 = &"+::input2_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input2"
        ::UpdateVolPages()
        ::win.Update(-1)
      }
    }
  
    #----------------------------
    proc ::UpdateVolPages() \
    {
      ::win.EnablePanel(::vol1_page , 1)
#exists(::input))
      ::win.EnablePanel(::vol2_page , 1)
#exists(::input2))
    }

    #----------------------------
    proc ::UpdateIntensityLimits() {
      if (exists(::input)) {
        printn "min"
        ::min_val = min(::input)
        printn "max"
        ::max_val = max(::input)
        ::win.FloatConstraints(::opacitylevel_id,::min_val,::max_val,::opacitylevel)
        ::win.FloatConstraints(::opacitywindow_id,::min_val,::max_val,::opacitywindow)
        ::win.Update(-1)
      }
    }

    #----------------------------
    proc ::ImReload() \
    {
      ::load_input()
    }
    Comments(::ImReload,"(Re)Loads the input image.")


    #----------------------------
    proc ::ImReload2() \
    {
      ::load_input2()
    }
    Comments(::ImReload2,"(Re)Loads the second input image.")

    #----------------------------
    proc ::DeleteVariables() {
      del ::renwin_interact
      del ::renwin
      del ::renderer
      # etc ...
    }

    #----------------------------
    #proc ::Start() \
    #{
      #if (!exists(::input)) {
        #::load_input()
      #}
      #::renwin_interact = global::vtkGPURayCasting(&::input, \
        #::blend_type, ::opacitywindow, ::opacitylevel, ::clip)
      #::renwin   = ::renwin_interact.GetRenderWindow()
      #::renderer = ::renwin.GetRenderers().GetFirstRenderer()
      #interact = global::vtkInteractorStyleTrackballCamera_New()
      #::renwin_interact.SetInteractorStyle(&interact)
      ##::renderer.Render()
      #vols = ::renderer.GetVolumes()
      #vols.InitTraversal()
      #::vol      =  vols.GetNextVolume()
      #::property = ::vol.GetProperty()
      #mapper   = ::vol.GetMapper()
      #::volmapper = global::vtkVolumeMapper_SafeDownCast(&mapper)
      ##::renwin_interact.Render()

    #}

    #----------------------------
    proc ::StartNew() \
    {
      if (!exists(::input)) {
        ::load_input()
      }
      if (exists(::renderer)) {
        InfoDialog "Rendering already started, we don't allow restart ..."
      } else {
        #if (exists(::renwin_interact)) { del ::renwin_interact; }
        if (!exists(::renwin_interact)) {
          ::renwin_interact = global::wxVTKFrame()
        }
        ::renwin   = ::renwin_interact.GetRenderWindow()
        ::renderer = global::vtkRenderer_New()
        ::renwin.AddRenderer(&::renderer)
        interact = global::vtkInteractorStyleTrackballCamera_New()
        ::renwin_interact.SetInteractorStyle(&interact)

        if (::vtkvol1.initialized>0.5) {
          ::vtkvol1.ResetVTK()
        }
        volok = ::vtkvol1.CreateVTK( &::input)

        if (volok>0.5) {
          # interact with data
          #  renWin->Render()
          #  m_pVTKWindow->Start()
          ::renderer->ResetCameraClippingRange()
          ::vtkvol1.SetInteractor(&::renwin_interact)
          ::vtkvol1.SetRenderer(&::renderer)
          ::vtkvol1.ReCompute()

          # Add the volume to the scene
          ::renderer.AddVolume( &::vtkvol1.vol )
          ::renderer.ResetCamera()
          #::renwin_interact.Render()
        }
      }

    }
    Comments(::StartNew,"Starts rendering of first volume.")


    #----------------------------
    proc ::AddVolume2() \
    {
      if (!exists(::input2)) {
        ::load_input2()
      }

      if (exists(::renwin_interact)) \
      {

        if (::vtkvol2.initialized>0.5) {
          ::vtkvol2.ResetVTK()
        }
        volok = ::vtkvol2.CreateVTK( &::input2)

        if (volok>0.5) {
          ::vtkvol2.SetInteractor(&::renwin_interact)
          ::vtkvol2.ReCompute()

          # Add the volume to the scene
          ::renderer.AddVolume( &::vtkvol2.vol )
          #::renderer.ResetCamera()
          ::renwin_interact.Render()
        }
      }

    }
    Comments(::AddVolume2,"Adds rendering of second volume.")


    #----------------------------
    proc ::MainBook_AddVolRenTab()  \
    {
      mb = ami.MainFrame.GetMainBook()

      panel = wx.wxPanel(&ami.MainFrame)
      sbox = wx.wxStaticBox(&panel,-1,"VTK-based Volume Rendering (GPU RayCasting)")
      wxVERTICAL=0x0008
      sbox_sizer = wx.wxStaticBoxSizer(&sbox,wxVERTICAL)
      panel.SetSizer(&sbox_sizer)
      # create widget here

      ::renwin_interact = global::wxVTKRenderWindowInteractor(&panel)
      ::renwin_interact.UseCaptureMouseOn()
      ::renwin_interact.SetMinSize(&wx.wxSize(50,50))
      # Still drawing problem (missed exposed events???)
      ::renwin_interact.SetBackgroundColour(wx.wxColour(0,0,0))
      sbox_sizer.Add(&::renwin_interact, wx.wxSizerFlags().Expand().Proportion(1) )

      
      ::icons.LoadIconPNG2("Transparent background","Transparent_background")

      # Add to main book
      mb.AddPage( &panel,  "VolRen",1, wx.wxBitmap(&::icons._Transparent_background.Scale(16,16)))
      ::volren_pageindex = mb.GetPageIndex(&panel)
      #mb.SetSelection(::volren_pageindex)
    }

    #----------------------------
    proc ::MainBook_CloseTab()  \
    {
      if (exists(::volren_pageindex)){
        mb = ami.MainFrame.GetMainBook()
        mb.DeletePage(::volren_pageindex)
      }
    }

    #----------------------------
    # Redefinition of Close to close the panel tab in main_book
    #
    proc ::Close() {
      ::MainBook_CloseTab()
      ::win.HidePanel()
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")

    #----------------------------
    proc ::Gui() {
    
      # parameters window
      if (exists(::parent_panel)) {
        ::win = global::ami_import.ParamPanel("VolRen",&::parent_panel)
      } else {
        ::win = global::ami_import.ParamPanel("VolRen")
      }
      
      ::win.BeginHorizontal()
        ::AddBitmapButton16(&::win, &::icons._Show, "StartNew")
        ::win.SetPositionProp(1)
        ::icons.LoadIconPNG("Add")
        ::AddBitmapButton16(&::win, &::icons._Add, "AddVolume2")
        ::win.SetPositionProp(1)
      ::win.EndHorizontal()

      ::win.BeginBook()
    
        ::win.AddPage("IO")
          # set the input image drawing window
          ::win.BeginBoxPanel("Input")
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::AddBitmapButton16(&::win, &::icons._Refresh, "ImReload")
              #::win.AddButton( "ImReload",&::ImReload)
            ::win.EndHorizontal()
          ::win.EndBoxPanel()

          ::win.BeginBoxPanel("Second Volume")
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input2_name, "")
              ::AddBitmapButton16(&::win, &::icons._Refresh, "ImReload2")
              #::win.AddButton( "ImReload",&::ImReload)
            ::win.EndHorizontal()
          ::win.EndBoxPanel()


        ::win.AddPage("Param")

          ::win.BeginBook()
            ::vol1_page = ::win.AddPage("Vol1")
              ::vtkvol1.AddGui( &::win)
            ::vol2_page = ::win.AddPage("Vol2")
              ::vtkvol2.AddGui( &::win)
          ::win.EndBook()
          #::win.EndBoxPanel()

          #::win.AddButton("Start",   ::Start)
          #::icons.LoadIconPNG("Play")
  
        #::win.AddPage("Viewer")
          #d = ::win.CurrentParent()
          #::renwin_interact = global::wxVTKRenderWindowInteractor(&d)
          #::renwin_interact.SetMinSize(&wx.wxSize(100,400));
          #::sizer_item = ::win.AddWidget(&::renwin_interact,0)

      ::win.EndBook()


      ::AddStandardButtons(&::win)
      
      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::UpdateVolPages()
      ::win.Update(-1)
      ::MainBook_AddVolRenTab()
   }

    ::Init()
  } 
  # Class VolRenClass
  Comments( VolRenClass, comments)
} 
# end if (!exists(VolRenClass))
  
  

