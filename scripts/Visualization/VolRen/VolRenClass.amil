#!/usr/bin/amilab

#
# Script for Volume Rendering using VTK
#

comments="VolRen: VTK GPU RayCasting."

func "Common/ScriptGui"

if (!exists(global::vtkAmiVolRenPlugin_obj)) {
  #func "../Modules/vtkAmiVolRen/scripts/Load_vtkAmiVolRen"
  func "Common/ModulePlugin"
  ModulePlugin global::vtkAmiVolRenPlugin_obj
  global::vtkAmiVolRenPlugin_obj.SetModuleName("vtkAmiVolRen")
  global::vtkAmiVolRenPlugin_obj.SetQuiet(true)
  global::vtkAmiVolRenPlugin_obj.Load()

} else {
  func "../Modules/vtkAmiVolRen/scripts/ReLoad_vtkAmiVolRen"
}

if (!exists(VolRenClass)) {


  #-----------------------------------------------------
  #  VolRenClass
  #-----------------------------------------------------
  Class VolRenClass : public ScriptGui {

    func "PreviewerClass.amil"
    ::previewerclass=&PreviewerClass

    func "vtkVolumeClass.amil"

    func "VTKControls/vtkCamera/vtkCameraClass"
    vtkCameraClass ::vtk_camera_gui

    # volume(s)
    ::vtkvol = &vtkVolumeClass 

    proc ::GetIndent(NUM n) {
      res = ""
      for k=1 to n {
        res += "  "
      }
      return=res
    }
    ::trace=true, "gives tracing information"
    member = "\"VolRenClass::\"+" 
    #"language.Vars.GetObjectContext().GetName()::"
    member += "language.Vars.GetCurrentContext().GetName()"
    ::trace_begin="printn \"**\"+"+ \
                  "::GetIndent(language.Vars.GetCurrentContextNumber())+"+\
                  "\" Begin \"+%1%;" % member
    ::trace_end  ="printn \"**\"+"+\
                  "::GetIndent(language.Vars.GetCurrentContextNumber())+"+\
                  "\" End   \"+%1%;" % member

    #----------------------------
    proc ::Init() \
    {

      ::input_name  =  "", "name of the input image"
      ::input2_name =  "", "name of the second input image"
      ::input_size  = "0 Mb",  "input volume size in Mb (2^20 bytes)"
      ::input2_size = "0 Mb", "second input volume size in Mb (2^20 bytes)"
      ::background_color  = wx.wxColour(173,216,230)
      ::background_color2 = wx.wxColour(144,238,144)
      ::UseGradientBackground = UCHAR(1)
      ::azimuth       = INT(0), "Rotate camera angle along vertical axis (in degrees)"
      ::elevation     = INT(0), "Rotate camera angle along horizontal axis (in degrees)"
      ::zoom          = 0
      ::azimuthAnt    = INT(0), "Rotate camera angle along vertical axis (in degrees)"
      ::elevationAnt  = INT(0), "Rotate camera angle along horizontal axis (in degrees)"
      ::zoomAnt       = 0
      ::volrenmapper_type = INT(0), "Choose volume rendering mapper type, 0: GPU 1: Fixed Point 2: Standard 3: AMILab type 4: Smart"
      ::hist_mode = 0
      ::volVector = VarVector()
      ::volPageVector = VarVector()
      ::resizevol1 = 0
      ::resizevol2 = 0
      ::d          = INT(0), "Background"

      for n=0 to 1 { 
        del aux
        ::vtkvol aux
        aux.Init()
        ::volVector.push_back(&aux)
      }
      # Create references to allow parsing the contents
      ::vol0 = &::volVector[0]
      ::vol1 = &::volVector[1]

      #Preview_obj
      ::previewerclass ::previewer
      ::previewer.Gui()
      ::previewer.SetApplyCallback(&::PreviewApplied)
      
      ::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki/doku.php?id=tutorial-volumerendering"

    }
    #----------------------------
    proc ::Preview() \
    {
      if ::trace { eval ::trace_begin; }
      #del ::previewer
      #::previewerclass ::previewer
      #::previewer.Gui()
      #::previewer.SetApplyCallback(&::PreviewApplied)

      index=::vbCtrl.GetSelection()
      if (exists(::input)) {
        imin = ::volVector[index].imhisto1.minval
        imax = ::volVector[index].imhisto1.maxval
        ::previewer.SetIntensityValues(imin, imax)
        ::previewer.Show()
        ::previewer.SetInput(&::volVector[index].input)
      }
      if ::trace { eval ::trace_end; }
    }
    #----------------------------
    proc ::AddToolbar_VR() \
    {
      if ::trace { eval ::trace_begin; }
      ::mgr = &ami.MainFrame.GetAuiManager()
      #del ::tb
      ::tb = wx.wxAuiToolBar(&ami.MainFrame, wx.wxID_ANY);
      ::tb.SetToolBitmapSize(wx.wxSize(16,16));

      tb_id = 20000+::tb.GetToolCount()
      id=0

      icon_32=GetScriptsDir+"/Icons/png/32x32/Chart xy.png"
      wxim = wx.wxImage(icon_32)
      bm = wx.wxBitmap(&wxim.Rescale(16,16))
      ::tb.AddTool( tb_id+id, "Histogram", &bm,"Histogram of the current volume")

      id=id+1
      icon_32=GetScriptsDir+"/Icons/png/32x32/Preview.png"
      wxim = wx.wxImage(icon_32)
      bm = wx.wxBitmap(&wxim.Rescale(16,16))
      ::tb.AddTool( tb_id+id, "Preview", &bm,"Preview of the current volume")

      id=id+1
      icon_32=GetScriptsDir+"/Icons/png/32x32/Camera.png"
      wxim = wx.wxImage(icon_32)
      bm = wx.wxBitmap(&wxim.Rescale(16,16))
      ::tb.AddTool( tb_id+id, "Snapshot", &bm,"Snapshot")
      ::tb.Realize()

      #id=id+1
      #icon_32=GetScriptsDir+"/Icons/png/32x32/Curve.png"
      #wxim = wx.wxImage(icon_32)
      #bm = wx.wxBitmap(&wxim.Rescale(16,16))
      #::tb.AddTool( tb_id+id, "Load curve", &bm,"Set a new curve in the current volume")
      #::tb.Realize()

      id=id+1
      icon_32=GetScriptsDir+"/Icons/png/32x32/Save Curve.png"
      wxim = wx.wxImage(icon_32)
      bm = wx.wxBitmap(&wxim.Rescale(16,16))
      ::tb.AddTool( tb_id+id, "Save curve", &bm,"Save the current curve")
      ::tb.Realize()

      #add the toolbars to the manager
      pi = wx.wxAuiPaneInfo().\
                  Name("VolRen").Caption("VolRen").\
                  ToolbarPane().Top().Position(2).\
                  LeftDockable(false).RightDockable(false)
      ::mgr.AddPane(&::tb, &pi);

      ::mgr.Update()

      id=0
      ::evh_tb_h = wx.wxAmiEventHandler(&::ShowHistogram) 
      ::tb.Connect( tb_id+id, wx.wxEVT_COMMAND_MENU_SELECTED \
                  ,&::evh_tb_h.GetEventFunction(),\
                  &NULL,&::evh_tb_h)
      id=id+1
      ::evh_tb_p = wx.wxAmiEventHandler(&::Preview) 
      ::tb.Connect( tb_id+id, wx.wxEVT_COMMAND_MENU_SELECTED \
                  ,&::evh_tb_p.GetEventFunction(),\
                  &NULL,&::evh_tb_p)
      id=id+1
      ::evh_tb_s = wx.wxAmiEventHandler(&::GetSnapshot) 
      ::tb.Connect( tb_id+id, wx.wxEVT_COMMAND_MENU_SELECTED \
                  ,&::evh_tb_s.GetEventFunction(),\
                  &NULL,&::evh_tb_s)

      #id=id+1
      #evh_tb_jc = wx.wxAmiEventHandler(&::LoadCurve) 
      #::tb.Connect( tb_id+id, wx.wxEVT_COMMAND_MENU_SELECTED \
                  #,&evh_tb_jc.GetEventFunction(),\
                  #&NULL,&evh_tb_jc)
      id=id+1
      ::evh_tb_sc = wx.wxAmiEventHandler(&::SaveCurve) 
      ::tb.Connect( tb_id+id, wx.wxEVT_COMMAND_MENU_SELECTED \
                  ,&::evh_tb_sc.GetEventFunction(),\
                  &NULL,&::evh_tb_sc)
      if ::trace { eval ::trace_end; }
    }

    #----------------------------
    proc ::set_input(IMAGE image) {
      if ::trace { eval ::trace_begin; }
      ::input<<=image
      ::UpdateImageInfo(&::input,&::input_size)
      ::win.SetLabelValue(::input_size_id,::input_size)
      ::UpdateVolPages()
      ::win.Update(-1)
      if ::trace { eval ::trace_end; }
    }

    #----------------------------
    proc ::ShowHistogram() {
      if ::trace { eval ::trace_begin; }
      if (::volVector.size()>0){
        index=::vbCtrl.GetSelection()
        if (::hist_mode==1){
        ::volVector[index].imhisto1.dw.Show(true)
        }else{
          ::volVector[index].imhisto1.dw.Show(!::volVector[index].imhisto1.dw.IsShown())
        }
        if(!::volVector[index].imhisto1.dw.IsShown()){
          ::splitter.Unsplit();
        }else{
          for n=0 to ::volVector.size()-1 {
            if (n!=index){
              ::volVector[n].imhisto1.dw.Show(false)
            }
          }
          ::splitter.Unsplit();
          sizer=(::splitter.GetWindow1()).GetVirtualSize()
          h=sizer.GetHeight()*0.8
          ::splitter.SplitHorizontally(&::renwin_interact, &::panel2,h)
        }
      }
      if ::trace { eval ::trace_end; }
    }
    #----------------------------
    proc ::load_input() {
      if ::trace { eval ::trace_begin; }
      del ::input
      eval "::input = &"+::input_name+";"
      if (::input_name=="BrowseImage") {
        ::input_name = "::input"
      }
      if (::input.tz==1){
        InfoDialog "Warning: input is a 2D image ..."
        del ::input
      }
      if (exists (::input)){
        ::UpdateImageInfo(&::input,&::input_size)
        ::win.SetLabelValue(::input_size_id,::input_size)
        #::UpdateVolPages()
        #::win.Update(-1)
      }
      if ::trace { eval ::trace_end; }
    }

    #----------------------------
    proc ::UpdateImageInfo( IMAGE im, STRING res ) {
      if ::trace { eval ::trace_begin; }
      if (im.vdim>1) {
        InfoDialog "Warning: input is a vector field ..."
      }
      size = im.tx*im.ty*im.tz*im.vdim
      format_size = vector_int(11,0)
      format_name = VarVector(11,"unknown")

      format_size[0]=1 # uchar
      format_name[0] = "uchar"

      format_size[1]=2 # ushort
      format_name[1] = "ushort"

      format_size[2]=2 # short
      format_name[2] = "short"

      format_size[3]=4 # int
      format_name[3] = "int"

      format_size[4]=4 # uint
      format_name[4] = "uint"

      format_size[5]=8 # long
      format_name[5] = "long"

      format_size[6]=8 # ulong
      format_name[6]="ulong"

      format_size[7]=4 # float
      format_name[7]="float"

      format_size[8]=8 # double
      format_name[8]="double"

      format_size[9]=3 # RGB
      format_name[9]="RGB"

      format_size[10]=4 # RGBA
      format_name[10]="RGBA"

      pixel_format = im.GetFormat
      if (pixel_format>10) {
        InfoDialog "Input: Wrong pixel format (%1%) !" % format
      }

      res = "%1% Mb " % (INT) (size*format_size[pixel_format]/(1024*1024))
      res = res+"(%1%)" % format_name[pixel_format]
      
      if ::trace { eval ::trace_end; }
    }
  
    #----------------------------
    proc ::load_input2() {
      if ::trace { eval ::trace_begin; }
      if (exists(::input2)) { del ::input2; }
      eval "::input2 = &"+::input2_name+";"
      if (::input2_name=="BrowseImage") {
        ::input2_name = "::input2"
      }
      if (::input2.tz==1){
        InfoDialog "Warning: input is a 2D image ..."
        del ::input2
      }
      if (exists (::input2)){
        ::UpdateImageInfo(&::input2,&::input2_size)
        ::win.SetLabelValue(::input2_size_id,::input2_size)
        #::UpdateVolPages()
        #::win.Update(-1)
      }
      if ::trace { eval ::trace_end; }
    }
  
    #----------------------------
    proc ::UpdateVolPages() \
    {
      if ::trace { eval ::trace_begin; }
      ::win.EnablePanel(::vol1_page , exists(::input))
      ::win.EnablePanel(::vol2_page , exists(::input2)&&(::volrenmapper_type!=3))
      if ::trace { eval ::trace_end; }
    }

    #----------------------------
    proc ::UpdateIntensityLimits() {
      if ::trace { eval ::trace_begin; }
      if (exists(::input)) {
        printn "min"
        ::min_val = min(::input)
        printn "max"
        ::max_val = max(::input)
        ::win.FloatConstraints(::opacitylevel_id,::min_val,::max_val,::opacitylevel)
        ::win.FloatConstraints(::opacitywindow_id,::min_val,::max_val,::opacitywindow)
        ::win.Update(-1)
      }
      if ::trace { eval ::trace_end; }
    }

    #----------------------------
    proc ::ImLoad(){
      if ::trace { eval ::trace_begin; }
      del ::input
      eval "::input = &"+::input_name+";"
      if (::input_name!="BrowseImage") {
         printn "Load 1"
        ::load_input()
      }
      del ::input2
      eval "::input2 = &"+::input2_name+";"
      if (::input2_name!="BrowseImage") {
        printn "Load 2"
        ::load_input2()
      }
      if ::trace { eval ::trace_end; }
    }
    Comments(::ImLoad,"Loads the input image. (Needed by AMILab mapper)")

    #----------------------------

    proc ::ImReload() \
    {
      if ::trace { eval ::trace_begin; }
      ::load_input()
      if ::trace { eval ::trace_end; }
    }
    Comments(::ImReload,"(Re)Loads the input image.")


    #----------------------------
    proc ::ImReload2() \
    {
      if ::trace { eval ::trace_begin; }
      ::load_input2()
      if ::trace { eval ::trace_end; }
    }
    Comments(::ImReload2,"(Re)Loads the second input image.")


    #----------------------------
    proc ::Resize_Vol1() \
    {
      if ::trace { eval ::trace_begin; }
      if (!exists(::input)) {
        ::load_input()
      }
      if (exists(::input)){
        ::resizevol1=1
        SetStatusText("Resizing ...")
        aux = Resize(::input, ::input.tx/2, ::input.ty/2, ::input.tz/2,1)
        SetStatusText("Resizing done")
        del ::input
        ::input=&aux
        ::UpdateImageInfo(&::input,&::input_size)
        ::win.SetLabelValue(::input_size_id,::input_size)
        ::UpdateVolPages()
        ::win.Update(-1)
      }
      if ::trace { eval ::trace_end; }
    }
    Comments(::Resize_Vol1,"Resize Volume 1 by half")

    #----------------------------
    proc ::Resize_Vol2() \
    {
      if ::trace { eval ::trace_begin; }
      if (!exists(::input2)) {
        ::load_input2()
      }
      if (exists(::input2)){
        ::resizevol2=1
        SetStatusText("Resizing ...")
        aux = Resize(::input2, ::input2.tx/2, ::input2.ty/2, ::input2.tz/2,1)
        SetStatusText("Resizing done")
        del ::input2
        ::input2=aux
        ::UpdateImageInfo(&::input2,&::input2_size)
        ::win.SetLabelValue(::input2_size_id,::input2_size)
        ::UpdateVolPages()
        ::win.Update(-1)
      }
      if ::trace { eval ::trace_end; }
    }
    Comments(::Resize_Vol2,"Resize Volume 2 by half")
    #----------------------------
    proc ::DeleteVariables() {
      if ::trace { eval ::trace_begin; }
      del ::renwin_interact
      del ::renwin
      del ::renderer
      # etc ...
      if ::trace { eval ::trace_end; }
    }

    #----------------------------
    proc ::CameraCallback() \
    {
      if ::trace { eval ::trace_begin; }
      ::renwin_interact.Render()
      if ::trace { eval ::trace_end; }
    }

    #----------------------------
    proc ::StartNew() \
    {
      if ::trace { eval ::trace_begin; }
      if (::volrenmapper_type!=3){
        if (::resizevol1==0){
          ::load_input()
        }
      }
      ::azimuthAnt=0
      ::elevationAnt=0
      ::zoomAnt=0
      ::azimuth=0
      ::elevation=0
      ::zoom=0
      ::resizevol1=0

      if (exists(::input)){
        #if (!::volVector[0].initialized){
        #  ::volVector[0].InitManager(&::renwin_interact)
        #  ::volVector[0].AddAnnotatedCube() 
        #}
        ::volVector[0].DelVTK()
        ::volVector[0].DefaultProperties() 
        ::volVector[0].SetVolRenMapper(::volrenmapper_type)
        #::volVector[0].CreateVTK( &::input)
        if (::volrenmapper_type!=3){
          ::volVector[0].SetInput(&::input)
        } else {
          ::volVector[0].SetInput(&::input)
          ::volVector[0].SetInput2(&::input2)
        }

        ::volVector[0].CreateVTK()
        if (::volrenmapper_type!=::volVector[0].volrenmapper_type) {
          ::volrenmapper_type=::volVector[0].volrenmapper_type
          ::win.Update(::volrentype_id)
        }
        ::volVector[0].InitRenderer()
        ::SetRendererBg()
        ::volVector[0].OnRender()


        ::renwin_interact.Render()
        ::renwin_interact.Refresh()
        ::EnableGPUmode(0)
        ::hist_mode = 1
        ::ShowHistogram()
        ::hist_mode = 0
        ::volVector[0].OnLinearColormap()

        # TODO: fix the dependency of the renderer for the volVector[0] ...
        ::vtk_camera_gui.SetCamera(&::volVector[0].camera)
        ::vtk_camera_gui.SetCallback(&::CameraCallback)
        #Set Linear curve
        ::volVector[0].ResetLinearCurve1()

        ::UpdateVolPages()
        ::win.Update(-1)
      }
      if ::trace { eval ::trace_end; }
    }
    Comments(::StartNew,"Starts rendering of first volume.")

    #----------------------------
    proc ::EnableGPUmode(NUM x) {
      if ::trace { eval ::trace_begin; }
      ::win.EnablePanel(::volVector[x].GPU_page,0)
      if  (::volVector[x].volrenmapper_type==0)||\
          (::volVector[x].volrenmapper_type==3)||\
          (::volVector[x].volrenmapper_type==4)\
      {
        mem = ::volVector[x].volmapper.GetMaxMemoryFraction()
        ::volVector[x].maxmemoryfraction=mem
        ::volVector[x].OnTextureMemory()
        ::win.Update(-1)
        ::win.EnablePanel(::volVector[x].GPU_page,1)
      }
      if ::trace { eval ::trace_end; }
    }
    #----------------------------
    proc ::SetRendererBg() \
    {

      if (::volVector.size()>0) {
        ::volVector[0].SetBackground(::background_color.Red(),\
            ::background_color.Green(),::background_color.Blue(),\
            ::background_color2.Red(),::background_color2.Green(),\
            ::background_color2.Blue(),::UseGradientBackground)
       }
    }

    #----------------------------
    proc ::AddVolume2() \
    {
      if ::trace { eval ::trace_begin; }
    
      if (::resizevol2==0){
        ::load_input2()
      }
     ::resizevol2=0
      if (exists(::input2)) {
        ::volVector[1].cpManager(&::volVector[0])
        ::volVector[1].DelVTK()
        ::volVector[1].DefaultProperties() 
        #::volVector[1].CreateVTK( &::input2)
        ::volVector[1].SetInput(&::input2)
        ::volVector[1].CreateVTK()
        if (::volrenmapper_type!=::volVector[1].volrenmapper_type) {
          ::volrenmapper_type=::volVector[1].volrenmapper_type
          ::win.Update(::volrentype_id)
        }
        ::volVector[1].OnRender()
        ::renwin_interact.Render()
        ::renwin_interact.Refresh()
        ::EnableGPUmode(1)
        ::hist_mode = 1
        ::ShowHistogram()
        ::hist_mode = 0
        ::volVector[1].OnLinearColormap()
        #Set Linear curve
        ::volVector[1].ResetLinearCurve1()

        ::UpdateVolPages()
        ::win.Update(-1)
      }
      if ::trace { eval ::trace_end; }
    }
    Comments(::AddVolume2,"Adds rendering of second volume.")


    #----------------------------
    proc ::MainBook_AddVolRenTab()  \
    {
      if ::trace { eval ::trace_begin; }
       mb = ami.MainFrame.GetMainBook()

      ::panel = wx.wxPanel(&ami.MainFrame)
      ::panel.SetName("VolRen panel")

      # StaticBox gives problems on XP ..., avoid it ...
      sbox_sizer = wx.wxBoxSizer(wx.wxVERTICAL)
      ::panel.SetSizer(&sbox_sizer)
      ::splitter =wx.wxSplitterWindow(&::panel,-1)

      sbox_sizer.Add( &::splitter, 1, wx.wxALL | wx.wxEXPAND,2)
      # create widget here
      ::renwin_interact = vtktools.wxVTKRenderWindowInteractor(&::splitter,-1)
      ::renwin_interact.UseCaptureMouseOn()
      ::renwin_interact.Enable(true)
      ::renwin_interact.Initialize()
      # Still drawing problem (missed exposed events???)
      ::icons.LoadIconPNG2("Transparent background","Transparent_background")
      ::panel2 = wx.wxPanel(&::splitter)
      ::win.EnablePanel(::vol1_page , true)
      ::win.EnablePanel(::vol2_page , true)

      sbox_sizerH = wx.wxBoxSizer(wx.wxHORIZONTAL)
      ::panel2.SetSizer(&sbox_sizerH)   
      ::obj1 = &::volVector[0].imhisto1.dw
      ::volVector[0].imhisto1.dw_boxsizer.Detach(&::obj1)
      ::obj1.Reparent(&::panel2)
      sbox_sizerH.Add(&::obj1,1, wx.wxEXPAND | wx.wxALL | wx.wxALIGN_CENTER,0 )
      ::obj1.Hide() 
      ::obj2 = &::volVector[1].imhisto1.dw
      ::volVector[1].imhisto1.dw_boxsizer.Detach(&::obj2)
      ::obj2.Reparent(&::panel2)
      sbox_sizerH.Add(&::obj2,1, wx.wxEXPAND | wx.wxALL | wx.wxALIGN_CENTER,0 )
      ::obj2.Hide()  

      ::win.EnablePanel(::vol1_page , false)
      ::win.EnablePanel(::vol2_page , false)

      //::splitter.SetSashGravity(1)//(0.8)
      
      ::splitter.SplitHorizontally(&::renwin_interact, &::panel2)
      ::splitter.Unsplit()
      # Add to main book
      ::icons.LoadIconPNG2("Transparent background","Transparent_background")
      mb.AddPage( &::panel,  "VolRen",1, wx.wxBitmap(&::icons._Transparent_background.Scale(16,16)))
      ::volren_pageindex = mb.GetPageIndex(&::panel)
      
      # initialize the renderer, camera, renderwindow in volvVctor[0]
      ::volVector[0].InitManager(&::renwin_interact)
      ::volVector[0].AddAnnotatedCube() 
      ::SetRendererBg()
      
      if ::trace { eval ::trace_end; }
    }

    #----------------------------
    proc ::SetGridLayout( NUM cols, NUM rows)  \
    {
      ::flex_sizer.SetCols(cols)
      ::flex_sizer.SetRows(rows)
    }

    #----------------------------
    proc ::SetGridSpacing( NUM hgap, NUM vgap)  \
    {
      ::flex_sizer.SetHGap(hgap)
      ::flex_sizer.SetVGap(vgap)
    }

    #----------------------------
    #proc ::Attach( OBJECT obj)  \
    #{
    #  obj.Reparent(&::panel)
    #  ::flex_sizer.Add(&obj, wx.wxSizerFlags().Expand().Proportion(1) )
    #  obj.Show()
    #}

    #----------------------------
    #proc ::Detach( OBJECT obj)  \
    #{
    #  ::flex_sizer.Detach(&obj)
    #  return = &obj
    #}

    #----------------------------
    proc ::MainBook_CloseTab()  \
    {
      if (exists(::volren_pageindex)){
        mb = ami.MainFrame.GetMainBook()
        mb.DeletePage(::volren_pageindex)
      }
      for n=0 to ::volVector.size()-1 {
        ::volVector[n].Close()
      }
    }
  #----------------------------
    #proc ::LoadCurve()  \
    #{
      #index=::vbCtrl.GetSelection()
      #//if (::volVector[index].initialized){
        #pathname=wx.FromWxString(wx.wxFileName.GetCwd())
#//aa=wx.wxFileDialog.wxFileDialog_2(::win,"Load Curve")
        ##del ::selected_curv
        ##selected_curv.Load(pathname)
        ##::background_color.Set(selected_curv.r1,selected_curv.g1,selected_curv.b1)
        ##::background_color2.Set(selected_curv.r2,selected_curv.g2,selected_curv.b2)
        ##::volVector[index].PreviewApplied(&selected_curv)
      #//}
    #}
  #----------------------------
    proc ::SaveCurve()  \
    {
      index=::vbCtrl.GetSelection()
      if (::volVector[index].initialized){
        pathname=wx.FromWxString(wx.wxFileName.GetCwd())

       ::volVector[index].SaveVTKCurve(pathname+wx.FromWxString(wx.wxFileName.GetPathSeparator()))
       InfoDialog "Curve saved in %1%" %pathname
      }
    }
    #----------------------------
    proc ::GetSnapshot()  \
    {    
      capturefilter = vtk.vtkWindowToImageFilter.New()
      if (::volVector[0].initialized){
        renwin=&::volVector[0].renwin
        capturefilter.SetInput( &renwin)
        capturefilter.Update()
        resim = vtktools.FromVtkImageData( &capturefilter.GetOutput())
        ::capture <<= Flip(resim,1)

        pathname=wx.FromWxString(wx.wxFileName.GetCwd())
        dir=wx.wxDir(pathname)
        nelem=0
        if ( dir.IsOpened() ){
          del list
          list=wx.wxArrayString()
          nelem=wx.wxDir.GetAllFiles(pathname,&list,"snapshot*.png")
        }
        ::capture.save "snapshot_%1%.png" %nelem
        InfoDialog "Image saved in %1%" %pathname
      }
    }
    #----------------------------
    proc ::ChangeView()  \
    { 
      ::ChangeViewA()
      ::ChangeViewE()
      ::ChangeViewZ()
      ::renwin_interact.Render()
    }
    Comments(::ChangeView,"Applies the user-given transformation to the camera.")
    #----------------------------
    proc ::ChangeViewA()  \
    { 
      ::volVector[0].Azimuth(0-::azimuthAnt)
      ::azimuthAnt=::azimuth
      ::volVector[0].Azimuth(::azimuth)
    }
    Comments(::ChangeView,"Applies the user-given transformation to the camera (azimut).")
    #----------------------------
    proc ::ChangeViewE()  \
    { 
      ::volVector[0].Elevation(0-::elevationAnt)
      ::elevationAnt=::elevation
      ::volVector[0].Elevation(::elevation)
    }
    Comments(::ChangeViewE,"Applies the user-given transformation to the camera (elevation).")
    #----------------------------
    proc ::ChangeViewZ()  \
    { 

      ::volVector[0].Zoom(exp(::zoomAnt*ln(2)))
      ::zoomAnt=::zoom*-1
      ::volVector[0].Zoom(exp(::zoom*ln(2)))
    }
    Comments(::ChangeViewE,"Applies the user-given transformation to the camera (elevation).")
    #----------------------------
    proc ::ResetView()  \
    {   
      ::volVector[0].Azimuth(0-::azimuthAnt) 
      ::volVector[0].Elevation(0-::elevationAnt) 
      ::volVector[0].Zoom(exp(::zoomAnt*ln(2)))
      ::azimuthAnt=0
      ::elevationAnt=0
      ::zoomAnt=0
      ::azimuth=0
      ::elevation=0
      ::zoom=0
      ::renwin_interact.Render()
      ::win.Update(-1)
    }
    Comments(::ResetView,"Resetview.")

    #----------------------------
    proc ::OnChangePage(){
      ::hist_mode=1
      ::ShowHistogram()
      ::hist_mode=0
    }
    #----------------------------
    proc ::PreviewApplied() \
    {
      index=::vbCtrl.GetSelection()
      del ::selected_curv
      selected_curv = &::previewer.GetSelection()

      ::background_color.Set(selected_curv.r1,selected_curv.g1,selected_curv.b1)
      ::background_color2.Set(selected_curv.r2,selected_curv.g2,selected_curv.b2)
      ::volVector[index].PreviewApplied(&selected_curv)
    }
    #----------------------------
    proc ::BackupView()  \
    {    
      if (!exists(::cam_backup)) {
        ::cam_backup = vtk.vtkCamera.New()
      }
      ::cam_backup.DeepCopy(&::renderer.GetActiveCamera())
    }
    Comments(::BackupView,"Backups the current camera.")

    #----------------------------
    proc ::RestoreView()  \
    { 
      if (exists(::cam_backup)) {
        camcopy = vtk.vtkCamera.New()
        camcopy.DeepCopy(&::cam_backup)
        ::renderer.SetActiveCamera(&camcopy)
        ::renwin.Render()
        ::renwin_interact.Render()
      } else {
        InfoDialog "No camera backed up!"
      }
    }
    Comments(::RestoreView,"Restores the last backed up camera.")


    #----------------------------
    proc ::ChoiceBackground() \
    {
      if (::d==1){
        ::background_color=wx.wxColour(255,255,255)
        ::background_color2=::background_color
        ::UseGradientBackground=0
  
      }
      if (::d==2){
        ::background_color=wx.wxColour(0,0,0)
        ::background_color2=::background_color
        ::UseGradientBackground=0

      }
      ::SetRendererBg()
      ::win.Update(-1)
    }
    #----------------------------
    # Redefinition of Close to close the panel tab in main_book
    #
    proc ::Close() {
      ::MainBook_CloseTab()
      ::win.HidePanel()
      ::mgr.DetachPane(&::tb)
      ::tb.Destroy()
      del ::tb
      ::mgr.Update()

      if (exists(::previewer)){
        ::previewer.Destroy()
        del ::previewer
      }
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")

    #----------------------------
    proc ::Gui() {
    
      # parameters window
      if (exists(::parent_panel)) {
        ::win = ParamPanel("VolRen",&::parent_panel)
      } else {
        ::win = ParamPanel("VolRen")
      }
      ::AddToolbar_VR()
      ::win.BeginHorizontal()
        ::AddBitmapButton16(&::win, &::icons._Show, "StartNew")
        ::win.SetPositionProp(1)
        ::icons.LoadIconPNG("Add")
        ::AddBitmapButton16(&::win, &::icons._Add, "AddVolume2")
        ::win.SetPositionProp(1)
      ::win.EndHorizontal()

      ::volrentype_id = ::win.AddEnum(&::volrenmapper_type,"VolRen Mapper")
        ::win.AddEnumChoice(::volrentype_id,"GPU mapper")
        ::win.AddEnumChoice(::volrentype_id,"FixedPoint mapper")
        ::win.AddEnumChoice(::volrentype_id,"Standard mapper")
        //if (::AmiVol) {
        ::win.AddEnumChoice(::volrentype_id,"AMILab mapper")
        ::win.AddEnumChoice(::volrentype_id,"Smart mapper")
        //}


      ::win.BeginBook()
        ::nb = ::win.GetBookCtrl()
        ::win.AddPage("IO")
          # set the input image drawing window
          ::win.BeginBoxPanel("Input")
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::AddBitmapButton16(&::win, &::icons._Refresh, "ImReload")

              ::icons.LoadIconPNG2("Resize image","Resize_image")
              ::AddBitmapButton16(&::win, &::icons._Resize_image, "Resize_Vol1")
              #::AddBitmapButton16(&::win, &::icons._Add, "ImLoad")
              #::win.AddButton( "ImReload",&::ImReload)
            ::win.EndHorizontal()
            ::input_size_id = ::win.AddLabel("Size:",::input_size)
          ::win.EndBoxPanel()

          ::win.BeginBoxPanel("Second Volume")
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input2_name, "")
              ::AddBitmapButton16(&::win, &::icons._Refresh, "ImReload2")
              ::AddBitmapButton16(&::win, &::icons._Resize_image, "Resize_Vol2")
            ::win.EndHorizontal()
            ::input2_size_id = ::win.AddLabel("Size:",::input2_size)
          ::win.EndBoxPanel()
          ::AddBitmapButton16(&::win, &::icons._Add, "ImLoad")
        ::win.AddPage("Volumes")
          ::win.BeginBook()
            ::vbCtrl = ::win.GetBookCtrl()
            ::vol1_page = ::win.AddPage("Vol1")
              ::volVector[0].AddGui( &::win)
            ::vol2_page = ::win.AddPage("Vol2")
              ::volVector[1].AddGui( &::win)

             ::evh_vb = wx.wxAmiEventHandler(&::OnChangePage) 
             ::vbCtrl.Connect( ::vbCtrl.GetId(), wx.wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED \
                  ,&::evh_vb.GetEventFunction(),\
                  &NULL,&::evh_vb)
          ::win.EndBook()

        ::win.AddPage("Scene")
          ::win.BeginBoxPanel("Background")
            ::win.BeginHorizontal()
              ::win.AddColor("Color",&::background_color)
              ::win.SetCallback(&::SetRendererBg)
              ::win.AddColor("Color 2",&::background_color2)
              ::win.SetCallback(&::SetRendererBg)
              ::win.AddBoolean(&::UseGradientBackground,"Gradient")
              ::win.SetCallback(&::SetRendererBg)
            ::win.EndHorizontal()

            ::win.BeginHorizontal()
              ::d_id = ::win.AddEnum(&::d,"Background")
              ::win.AddEnumChoice(::d_id,"Manual")
              ::win.AddEnumChoice(::d_id,"White")
              ::win.AddEnumChoice(::d_id,"Black")
              ::win.SetCallback(&::ChoiceBackground)
            ::win.EndHorizontal()
          ::win.EndBoxPanel()

          ::vtk_camera_gui.AddGui(&::win)
          #::win.BeginBoxPanel("Camera control")
            #::win.AddInt(&::azimuth,"azimuth",-180,180)
            #::win.SetCallback( &::ChangeView)
            #::win.AddInt(&::elevation,"elevation",-180,180)
            #::win.SetCallback( &::ChangeView)
            #::win.AddFloat(&::zoom,"zoom",-5,5)
            #::win.SetCallback( &::ChangeView)
   
            #::win.BeginHorizontal()
              #::win.AddButton("Apply",&::ChangeView)
              #::win.AddButton("Reset",&::ResetView)
            #::win.EndHorizontal()
          #::win.EndBoxPanel()
      ::win.EndBook()
      ::AddStandardButtons(&::win)
      
      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::UpdateVolPages()
      ::win.Update(-1)
      ::MainBook_AddVolRenTab()
   }

    ::Init()
  } 
  # Class VolRenClass
  Comments( VolRenClass, comments)
} 
# end if (!exists(VolRenClass))
  
  

