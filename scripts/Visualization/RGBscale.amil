#!/usr/bin/amilab

#
# Script for drawing 2D functions
# or lines from an image
#

comments="RGBscale: Linear rescaling of the intensity of RGB image per RGB component."


if (!exists(global::RGBscale)) {

  Class global::RGBscaleClass {

    ::ami_import = &global::ami_import
    #----------------------------
    proc ::Init() \
    {
      ::classname  = "global::RGBscaleClass"
      ::input_name =  "", "name of the input image, the drawing window of this image will be used"
      ::All_min = INT(0),    "min value for the 3 components"
      ::All_max = INT(255),  "max value for the 3 components"
      ::R_min = INT(0),  "minimum for red"
      ::G_min = INT(0),  "minimum for Green component of the color"
      ::B_min = INT(0),  "minimum for Blue component of the color"
      ::R_max = INT(255), "maximum for Red component of the color"
      ::G_max = INT(255), "maximum for Green component of the color"
      ::B_max = INT(255), "maximum for Blue component of the color"
      ::CreateWindow()
    }
    
    #----------------------------
    proc ::load_input() {
      eval "::input <<="+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        ::win.update
      }
    }
  
    #----------------------------
    proc ::Reload() \
    {
      ::load_input
      if (exists(::transf_im_draw)) { del ::transf_im_draw;}
      ::transf_im <<= ::input
    }

    #----------------------------
    proc ::Close() \
    {
      ::win.Hide
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
    
    #----------------------------
    proc ::CloseAll() \
    {
      closeclass_cmd = boost_format("if (exists(%1%)) { del %1%; };")%::classname
      eval closeclass_cmd
      ::Close
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    #----------------------------
    proc ::TransformComp(NUM numcomp, NUM cmin, NUM cmax) \
    {
      eval "_in =  &%1%;" % ::input_name
      if (!exists(::transf_im)) { ::transf_im = _in; }
      comp = (FLOAT) _in[numcomp]
      comp = (comp-cmin)/(cmax-cmin)*255
      comp = comp*(comp>0)
      comp = comp*(comp<=255)+(comp>255)*255
      ::transf_im[numcomp] = comp
    }

    #----------------------------
    proc ::UpdateDisplay_All() \
    {
      # Slow but ok for a trial
      ::TransformComp(0,::All_min,::All_max)
      ::TransformComp(1,::All_min,::All_max)
      ::TransformComp(2,::All_min,::All_max)
      ::R_min = ::All_min
      ::G_min = ::All_min
      ::B_min = ::All_min
      ::R_max = ::All_max
      ::R_max = ::All_max
      ::G_max = ::All_max
      ::B_max = ::All_max
      ::win.update
      show ::transf_im
    }

    #----------------------------
    proc ::UpdateDisplay_R() \
    {
      ::TransformComp(0,::R_min,::R_max)
      show ::transf_im
    }

    #----------------------------
    proc ::UpdateDisplay_G() \
    {
      ::TransformComp(1,::G_min,::G_max)
      show ::transf_im
    }

    #----------------------------
    proc ::UpdateDisplay_B() \
    {
      ::TransformComp(1,::B_min,::B_max)
      show ::transf_im
    }

    #----------------------------
    proc ::SetAsCallback() \
    {
      eval boost_format("ok = exists(%1%_draw);")%::input_name
      if (ok) {
        # get local reference to input image drawing window
        eval boost_format("_in_draw = &%1%_draw;") % ::input_name
        _in_draw.PaintCallback(::DrawGrid);
      }
    }
    ::SetAsCallback.Comments("Set the grid display function as a paint callback of the drawing area")

    #----------------------------
    proc ::CreateWindow() {
    
      # parameters window
      ::win = ParamWin("ImGrid")
      
      ::win.BeginBook
    
        ::win.AddPage("Param")

          # set the input image drawing window
          ::win.BeginBoxPanel("Input")
            ::win.BeginHorizontal
              ::win.AddImageChoice(::input_name, "")
              ::win.AddButton( "Reload",::Reload)
            ::win.EndHorizontal
          ::win.EndBoxPanel

          ::win.BeginBoxPanel("All Components")
            ::win.AddInt(::All_min,"min.",0,255)
            ::win.SetCallback(::UpdateDisplay_All)
            ::win.AddInt(::All_max,"max.",0,255)
            ::win.SetCallback(::UpdateDisplay_All)
          ::win.EndBoxPanel
          ::win.BeginBoxPanel("Red Component")
            ::win.AddInt(::R_min,"min.",0,255)
            ::win.SetCallback(::UpdateDisplay_R)
            ::win.AddInt(::R_max,"max.",0,255)
            ::win.SetCallback(::UpdateDisplay_R)
          ::win.EndBoxPanel
          ::win.BeginBoxPanel("Green Component")
            ::win.AddInt(::G_min,"min.",0,255)
            ::win.SetCallback(::UpdateDisplay_G)
            ::win.AddInt(::G_max,"max.",0,255)
            ::win.SetCallback(::UpdateDisplay_G)
          ::win.EndBoxPanel
          ::win.BeginBoxPanel("Blue Component")
            ::win.AddInt(::B_min,"min.",0,255)
            ::win.SetCallback(::UpdateDisplay_B)
            ::win.AddInt(::B_max,"max.",0,255)
            ::win.SetCallback(::UpdateDisplay_B)
          ::win.EndBoxPanel
  
      ::win.EndBook
      ::win.BeginHorizontal
        ::win.AddButton("Close", ::Close)
        ::win.AddButton("Close All", ::CloseAll)
      ::win.EndHorizontal
      
      ::win.update
      ::win.Display
   }

    ::Init
  } 
  # Class RGBscaleClass
  RGBscaleClass.Comments(comments)
} 
# end if (!exists(Functions2DClass))
  
  
#----------------------------
# Main
#----------------------------

if (!exists(rgb_scale)) {

  RGBscaleClass rgb_scale
  
} else {
  InfoDialog "The script seems to be already loaded."
}

