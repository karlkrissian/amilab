
func "Common/ScriptGui"

del ParametricSurfacesClass

Class ParametricSurfacesClass : public ScriptGui \
{
  
  func "VTKControls/vtkCamera/vtkCameraClass"
  vtkCameraClass ::vtk_camera_gui

  func "VTKControls/vtkRenderer/vtkRendererClass"
  vtkRendererClass ::vtk_renderer_gui

  func "VTKControls/vtkActor/vtkActorClass"
  vtkActorClass ::actor_ctrl
  vtkActorClass ::lineactor_ctrl

  func "VTKControls/vtkCubeAxesActor/vtkCubeAxesActorClass"
  vtkCubeAxesActorClass ::cubeaxesactor_ctrl

  func "Variable/ObjectIO"
  #===========================================================================
  # Set parameters here
  Class ::ParamClass : public ObjectIO {

    ::description = "Default parameters", \
                    "Description of the set of parameters"

    # resolution
    ::theta_dim = INT(100), "Resolution of theta"
    ::phi_dim   = INT(100), "Resolution of phi"

    # coefficients
    ::cx = 1, "Scaling factor in X"
    ::cy = 1, "Scaling factor in Y"
    ::cz = 1, "Scaling factor in Z"

    ::e_x = 1, "Superquadric coefficient in X"
    ::e_y = 1, "Superquadric coefficient in Y"
    ::e_z = 1, "Superquadric coefficient in Z"

    # 0: superquadric
    # 1: torus
    # 2: user
    ::type = INT(0), "Equation type 0: superquadric, 1: torus, 2: user"

    # torus param
    ::R = 1,    "Torus big radius"
    ::r = 0.1,  "Torus small radius"

    # range
    ::min1    = "0",    "Minimal value of the first parameter"
    ::max1    = "2*Pi", "Maximal value of the first parameter"
    ::min2    = "-Pi/2","Minimal value of the second parameter"
    ::max2    = "Pi/2", "Maximal value of the second parameter"
    
    # expressions as string
    ::X = "cos(U)*cos(V)", "Equation of X coordinates"
    ::Y = "sin(U)*cos(V)", "Equation of Y coordinates"
    ::Z = "sin(V)",        "Equation of Z coordinates"

    ::use_scalars = false, "Use scalar values to add colors to the surface"

    ::AutoUpdateEquation = false, "Automatically update the equation and the text changes"

    # temporal evolution of the equation
    # 
    ::evolve_state = INT(0), "evolution state 0:stopped, 1:running, 2:stopping"
    ::k        = INT(0), "Parameter for the set of curves"
    ::kmax     = INT(0), "maximal value of k"
    # 
    ::timestep = INT(100), "timestep in milliseconds"
                    
    #-----------------------------------------------------------------------
    # copy parameters
    proc ::__assign__( VAR p) \
    {
      ::theta_dim = p.theta_dim
      ::phi_dim   = p.phi_dim
      ::cx    = p.cx
      ::cy    = p.cy
      ::cz    = p.cz
      ::e_x   = p.e_x
      ::e_y   = p.e_y
      ::e_z   = p.e_z
      ::type  = p.type
      ::R     = p.R
      ::r     = p.r
      ::X     = p.X
      ::Y     = p.Y
      ::Z     = p.Z
      ::min1  = p.min1
      ::max1  = p.max1
      ::min2  = p.min2
      ::max2  = p.max2
      ::use_scalars = p.use_scalars
      ::AutoUpdateEquation  = p.AutoUpdateEquation
      ::evolve_state        = p.evolve_state
      ::k                   = p.k
      ::kmax                = p.kmax
      ::timestep            = p.timestep
    }

    #---------------------------------------------------------------------------
    proc ::ReadEquation(STRING filename, OBJECT win) {
      # need to allow ::win.Update(-1)
      del ::win
      ::win = &win
      # call func to read a script ...
      func filename
    }
    
  }

  #---------------------------------------------------------------------------
  proc ::Init() {
    
    ::ParamClass ::params
    ::updating    = 0
    ::in_evolve   = false
    ::eq_filename = "user_equation1.amil", "Equation file in previous format"

    #::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki"+
    # "/doku.php?id=tutorial-mainalgorithms-levelset#level_set_segmentation"
    ::background_color  = wx.wxColour(173,216,230)
    ::background_color2 = wx.wxColour(144,238,144)

    ::html_filename = GetScriptsDir+\
                      "/ParametricSurfaces/Doc/ParametricSurfaces/index.html"
  }

  #------------------------------------
  proc ::UpdateResolutionOld() \
  {
    #printn "UpdateResolution()"
    # 3D position image
    ::pos <<= Image(DOUBLE,::theta_dim,::phi_dim,1,3)

    # Parameters
    ::theta <<= (DOUBLE)Xpos(::pos)
    ::phi   <<= (DOUBLE)Ypos(::pos)

    if (::type==0)||(::type==2) {
      #printn "type in {0,2}"
      # limits of the parameters
      ::theta = ::theta/(::theta.tx-1)*2*Pi
      ::phi   = (::phi/(::phi.ty-1)-0.5)*Pi
    }
    if (::type==1) {
      #printn "type is 1"
      # limits of the parameters
      ::theta = ::theta/(::theta.tx-1)*2*Pi
      ::phi   = ::phi/(::phi.ty-1)*2*Pi
    }

  } // ::UpdateResolution()

  #---------------------------------------------------------------------------
  proc ::UpdateResolution() \
  {
    #printn "UpdateResolution()"
    # 3D position image
    ::pos <<= Image(DOUBLE,::params.theta_dim,::params.phi_dim,1,3)

    # Parameters
    ::theta <<= ((DOUBLE)Xpos(::pos))/(::pos.tx-1)
    ::phi   <<= ((DOUBLE)Ypos(::pos))/(::pos.ty-1)

    if (::params.type==0) {
      min1 = 0
      max1 = 2*Pi
      min2 = -Pi/2
      max2 = Pi/2
    }
    if (::params.type==1) {
      #printn "type is 1"
      # limits of the parameters
      min1 = 0
      max1 = 2*Pi
      min2 = 0
      max2 = 2*Pi
    }
    
    if (::params.type==2) {
      eval "min1=%1%;" % ::params.min1
      eval "max1=%1%;" % ::params.max1
      eval "min2=%1%;" % ::params.min2
      eval "max2=%1%;" % ::params.max2
    }
    
    ::theta = ::theta*(max1-min1)+min1
    ::phi   = ::phi  *(max2-min2)+min2

  } // ::UpdateResolution()

  #---------------------------------------------------------------------------
  proc ::NewType() {
    if (exists(::page_vec)) { del ::page_vec; }
    ::page_vec = VarVector();
    ::page_vec.push_back(::page_superquad)
    ::page_vec.push_back(::page_torus)
    ::page_vec.push_back(::page_expr)

    for n=0 to 2 {
      ::win.EnablePanel(::page_vec[n], ::params.type==n)
    }
    ::win.SelectPage(::book,::params.type+1)

    ::UpdateResolution()
    ::Update()
  }


  #---------------------------------------------------------------------------
  proc ::SetMeshColors( IMAGE mc) {
    ::mesh_colors <<= mc
  }

  #---------------------------------------------------------------------------
  proc ::UpdateRanges() \
  {
    printn "::UpdateRanges"
    ::UpdateResolution()
    ::Update()
  }
  
  #-----------------------------------------------------------------------------
  proc ::AddVTKPlaneActors( ) \
  {
    ::render_planes=true
    if (::render_planes) {
      if exists(::plane1_actor) {
        ::renderer.RemoveActor(::plane1_actor)
      }
      del ::plane1
      ::plane1 = vtk.vtkPlaneSource.New()

      # TODO: avoid this re-calculation
      zmin = min(::pos[2])
      zmax = max(::pos[2])
      eval "xmin=%1%;" % ::params.min1
      eval "xmax=%1%;" % ::params.max1
      eval "ymin=%1%;" % ::params.min2
      eval "ymax=%1%;" % ::params.max2

      ::plane1.SetOrigin(xmax,ymin,zmin)
      ::plane1.SetPoint1(xmax,ymax,zmin)
      ::plane1.SetPoint2(xmax,ymin,zmax)
      #::plane1.SetNormal(-1,0,0)
      del ::plane1_mapper
      ::plane1_mapper = vtk.vtkPolyDataMapper.New()
      ::plane1_mapper.SetInputConnection(::plane1.GetOutputPort())
      del ::plane1_actor
      ::plane1_actor = vtk.vtkActor.New()
      ::plane1_actor.SetMapper(::plane1_mapper)
    }
    ::renderer.AddActor(::plane1_actor)
  }

  #-----------------------------------------------------------------------------
  proc ::SwitchVtkSurface( OBJECT new_surf) \
  {
    first=false
    if (exists(::vtksurf_actor)) {
      ::renderer.RemoveActor(::vtksurf_actor)
      ::renderer.RemoveActor(::vtksurf_lineactor)
    } else {
      first=true
    }
    del ::vtksurf
    ::vtksurf = vtktools.ToVtkPolyData(new_surf)
    polynormals = vtk.vtkPolyDataNormals.New()
    polynormals.SetInput(::vtksurf)
    polynormals.SetFeatureAngle(60.0)
    polymapper = vtk.vtkPolyDataMapper.New()

    if (::params.use_scalars) {
      # use vtkElevationFilter to create the colors for the moment
      elevation_color = vtk.vtkElevationFilter.New()
      elevation_color.SetInputConnection(polynormals.GetOutputPort())
      low  = min(::pos[2])
      high = max(::pos[2])
      elevation_color.SetLowPoint (0,0,low)
      elevation_color.SetHighPoint(0,0,high)
      elevation_color.SetScalarRange(low,high)
      polymapper.SetInputConnection(elevation_color.GetOutputPort())
      polymapper.SetScalarRange(low,high)
      polymapper.ScalarVisibilityOn()

      lut = vtk.vtkLookupTable.New()
      lut.SetHueRange(0.6, 0)
      lut.SetSaturationRange(1.0, 0)
      lut.SetValueRange(0.5, 1.0)

      polymapper.SetLookupTable(lut)
    } else {
      polymapper.SetInputConnection(polynormals.GetOutputPort())
      polymapper.ScalarVisibilityOff()
    }

    del ::vtksurf_actor
    ::vtksurf_actor =  vtk.vtkActor.New()
    ::vtksurf_actor.SetMapper(polymapper)

    # create line actor and mapper
    #linedata = vtk.vtkPolyData.SafeDownCast(polymapper.GetInput())
    polylinemapper = vtk.vtkPolyDataMapper.New()
    polylinemapper.SetInput(::vtksurf)
    polylinemapper.ScalarVisibilityOff()
    del ::vtksurf_lineactor
    ::vtksurf_lineactor = vtk.vtkActor.New()
    ::vtksurf_lineactor.SetMapper(polylinemapper)

    # Set Line properties
    # color: black
    ::vtksurf_lineactor.GetProperty().SetColor(0,0,0)
    # type: lines
    ::vtksurf_lineactor.GetProperty().SetRepresentationToWireframe()

      # Add Actors
    ::renderer.AddActor(::vtksurf_actor)
    ::renderer.AddActor(::vtksurf_lineactor)

    # TODO: update the vtkrenderer_gui
    if (first) {
      ::actor_ctrl.SetActor(::vtksurf_actor)
    } else {
      ::actor_ctrl.SetActorNoUpdate(::vtksurf_actor)
    }
    # apply previous settings and render
    ::actor_ctrl.UpdateVTK()

    if (first) {
      ::lineactor_ctrl.SetActor(::vtksurf_lineactor)
    } else {
      ::lineactor_ctrl.SetActorNoUpdate(::vtksurf_lineactor)
    }
    # apply previous settings and render
    ::lineactor_ctrl.UpdateVTK()
    
    # setup ::cubAxesActor
    if (exists(::cubeAxesActor)) {
      # safer to remove it
      ::renderer.RemoveActor(::cubeAxesActor)
      del ::cubeAxesActor
    }

    ::cubeAxesActor = vtk.vtkCubeAxesActor.New()
    ::cubeAxesActor.SetCamera(::renderer.GetActiveCamera())
    ::cubeAxesActor.SetInertia(1000)
    ::cubeAxesActor.SetXLabelFormat("%-g")
    ::cubeAxesActor.SetYLabelFormat("%-g")
    ::cubeAxesActor.SetZLabelFormat("%-g")
    ::cubeAxesActor.SetBounds(::vtksurf.GetBounds())


    if (first) {
      ::cubeaxesactor_ctrl.SetCubeAxesActor(::cubeAxesActor)
    } else {
      ::cubeaxesactor_ctrl.SetCubeAxesActorNoUpdate(::cubeAxesActor)
    }
    ::cubeaxesactor_ctrl.UpdateVTK()

    ::renderer.AddActor(::cubeAxesActor)


    ::renderer.GetRenderWindow().Render()
  }

  #---------------------------------------------------------------------------
  # ::s is the previous surface
  #
  proc ::SwitchSurface( OBJECT new_surf) \
  {
    if (exists(::s_draw)) {
      ::s_draw.Remove(::s)
    }
    del ::s
    ::s = &new_surf
    if (exists(::s_draw)) {
      ::s_draw += ::s
    } else {
      show ::s
      #::s_draw = Viewer3D("3D Surface Viewer")
      #::s_draw += ::s
    }
    ::s.Normals()
    ::s.Recompute()
    ::s_draw.Paint()
  }
  
  #---------------------------------------------------------------------------
  proc ::Update() \
  {
    #printn "::Update()"
    if (::updating==0) {
      ::updating = 1
      if (!exists(::pos)) {
        ::UpdateResolution()
      }else {
        if ((::params.theta_dim!=::pos.tx)||(::params.phi_dim!=::pos.ty)) {
          ::UpdateResolution()
        }
      }
      # 0: superquadric
      if (::params.type==0) {
        ::pos.SetComponent(0, cos(::theta)*cos(::phi))
        ::pos.SetComponent(1, sin(::theta)*cos(::phi))
        ::pos.SetComponent(2, sin(::phi))

        # compute the signs
        spos0 = (::pos[0]>0) - (::pos[0]<0)
        spos1 = (::pos[1]>0) - (::pos[1]<0)
        spos2 = (::pos[2]>0) - (::pos[2]<0)

        ::pos.SetComponent( 0,\
                      exp(ln(abs(::pos[0]))/::params.e_x)*spos0*::params.cx)

        ::pos.SetComponent(1,\
                      exp(ln(abs(::pos[1]))/::params.e_y)*spos1*::params.cy)
                      
        ::pos.SetComponent(2,\
                      exp(ln(abs(::pos[2]))/::params.e_z)*spos2*::params.cz)
      }

      # 1: torus
      if (::params.type==1) {
        ::pos.SetComponent(0, (cos(::phi)*::params.r+::params.R)*cos(::theta))
        ::pos.SetComponent(1, (cos(::phi)*::params.r+::params.R)*sin(::theta))
        ::pos.SetComponent(2, sin(::phi)*::params.r)
      }

      # 2: User´s equation
      if (::params.type==2) {
        #printn "max(::theta) = %1%" % max(::theta)
        #printn "exists U = %1%" % exists(U) 
        TraceParsing 1
        U = ::theta
        TraceParsing 0
        #printn "max(::theta) = %1%" % max(::theta)
        V = ::phi
        k = ::params.k
        eval "::pos.SetComponent(0, "+::params.X+");"
        X = ::pos[0]
        eval "::pos.SetComponent(1, "+::params.Y+");"
        Y = ::pos[1]
        eval "::pos.SetComponent(2, "+::params.Z+");"
      }

      # parameter 0 invert normals
      #printn max(::theta)

      new_s = CreateFlatMesh(::theta*0+1, 0 )
      if (exists(::mesh_colors)) {
        #printn "Set Mesh Colors"
        new_s.SetColors(::mesh_colors)
        new_s.SetColorMaterial(1)
      }
      new_s.ElevateMesh(::pos)
      # need to show the surface before computing any opengl operation!!!

      #::SwitchSurface   (new_s)
      ::SwitchVtkSurface(new_s)
      ::updating = 0
    }
  }

  #---------------------------------------------------------------------------
  proc ::Evolve() \
  {
    if (::in_evolve==0) {
      ::in_evolve = 1
      if (::evolve_state==0) {
        if (::params.kmax>0) {
          ::k = 0
          # starts
          ::evolve_state=1
        }
      }
      if (::evolve_state==1) {
        # first update the equation
        ::Update()
        # second: increment ::k and schedule new update
        ::k = ::k + 1
        if (::k==::params.kmax) { 
          ::k = 0; 
        }
        schedule(::params.timestep,::Evolve)
      }
    }
    ::in_evolve = 0
  }

  #---------------------------------------------------------------------------
  proc ::UpdateEquation() \
  {
    if (::params.AutoUpdateEquation) {
      ::Update()
    }
  }

  #---------------------------------------------------------------------------
  proc ::Start() \
  {
    ::evolve_state = 0
    ::Evolve
  }

  #---------------------------------------------------------------------------
  proc ::Stop() \
  {
    ::evolve_state = 2
  }

  #---------------------------------------------------------------------------
  proc ::ResetScale() \
  {
    ::params.cx = 1
    ::params.cy = 1
    ::params.cz = 1
    ::win.Update(-1)
    ::Update()
  } # ::ResetScale()

  #---------------------------------------------------------------------------
  proc ::SetEllipsoid() \
  {
    ::params.type=0
    ::params.e_x = 1
    ::params.e_y = 1
    ::params.e_z = 1
    ::win.Update(-1)
    ::Update()
  } 
  # ::SetEllipsoid()

  #---------------------------------------------------------------------------
  # Deprecated
  #
  proc ::SaveEquation() {
    eq_file = File(::eq_filename,"w")

    eq_file._print("//-- Saving equation \n")

    eq_file._print("//---- Main Parameters\n")

    eq_file._print("::theta_dim = %1%\n" % ::params.theta_dim)
    eq_file._print("::phi_dim = %1%\n" %   ::params.phi_dim)

    eq_file._print("//---- Parametric equation expression \n")

    eq_file._printn("::X = \" %1% \" "  % ::params.X )
    eq_file._printn("::Y = \"" +::params.Y +"\"")
    eq_file._printn("::Z = \"" +::params.Z +"\"")

    eq_file._printn("::kmax = %1% " %   ::params.kmax )  
    eq_file._printn("::timestep = %1% " % ::params.timestep )

    eq_file._print("// Update interface\n")
    eq_file._print("::win.Update(-1)\n")

  }


  #---------------------------------------------------------------------------
  proc ::ReadEquation() {
    # call func to read a script ...
    ::params.ReadEquation(::eq_filename, ::win)
  }

  #---------------------------------------------------------------------------
  proc ::RenderCallback() \
  {
    if exists(::renwin_interact) {
      ::renwin_interact.Render()
    }
  }

  #---------------------------------------------------------------------------
  proc ::SetRendererBg() \
  {
    if (exists(::renderer)) {
      ::renderer.SetBackground( \
        (FLOAT) ::background_color.Red() /255, \
        (FLOAT) ::background_color.Green() /255, \
        (FLOAT) ::background_color.Blue() /255)
      ::renderer.SetBackground2( \
        (FLOAT) ::background_color2.Red() /255, \
        (FLOAT) ::background_color2.Green() /255, \
        (FLOAT) ::background_color2.Blue() /255)
      ::renderer.SetGradientBackground( true)
    }
  }

  #---------------------------------------------------------------------------
  proc ::InitCamera() {
    ::camera=::renderer.GetActiveCamera()
    ::camera.SetPosition(0,-100,0)
    ::camera.SetViewUp(0,0,1) # change orientation
    #::camera.SetParallelProjection(true)
  }

  #---------------------------------------------------------------------------
  #Initialize Interactor,Renderer, RendererWindow and variables
  proc ::CreateRenderer( OBJECT inter ) \
  {
    inter.Show()
    inter.Update()
    ::renderer = vtk.vtkRenderer.New()
    ::renderer.ResetCamera()   # carlos
    inter.GetRenderWindow().AddRenderer(&::renderer)
    interact = vtk.vtkInteractorStyleTrackballCamera.New()
    inter.SetInteractorStyle(interact)
    ::renwin = inter.GetRenderWindow()
    # enable line smoothing
    #::renwin.SetLineSmoothing(true)
    ::InitCamera()
  }

  #---------------------------------------------------------------------------
  proc ::MainBook_AddvtkSurfaceTab()  \
  {
    mb = ami.MainFrame.GetMainBook()

    ::panel = wx.wxPanel(ami.MainFrame)
    #sbox = wx.wxStaticBox(&::panel,-1,"VTK-based isosurface visualization.")
    ::sbox_sizer = wx.wxBoxSizer(wx.wxVERTICAL)
    ::panel.SetSizer(::sbox_sizer)
    # create widget here

    ::renwin_interact = wxvtk.wxVTKRenderWindowInteractor(::panel,wx.wxID_ANY)
    ::sbox_sizer.Add( ::renwin_interact, \
                      wx.wxSizerFlags().Expand().Proportion(1) )

    #::renwin_interact = wxvtk.wxVTKFrame(&panel,-1)

    ::renwin_interact.UseCaptureMouseOn()
    ::renwin_interact.Enable(true)
    ::renwin_interact.Initialize()

    ::renwin_interact.SetMinSize(&wx.wxSize(50,50))
    # Still drawing problem (missed exposed events???)
    ::renwin_interact.SetBackgroundColour(wx.wxColour(255,255,255))
    #::AttachRenWinInt()

    ::icons.LoadIconPNG2("Transparent background","Transparent_background")

    # Add to main book
    mb.AddPage( ::panel,  "ParamSurf",1, \
                wx.wxBitmap(&::icons._Transparent_background.Scale(16,16)))
    ::vtkren_pageindex = mb.GetPageIndex(&::panel)
    #mb.SetSelection(::vtkren_pageindex)

    ::renwin_interact.Show()
    ::panel.Show()
    ::renwin_interact.Update()
    ::panel.Update()

    # Create renderer 
    ::CreateRenderer(&::renwin_interact)
    ::SetRendererBg()
    ::renderer.ResetCamera()

    # Set gui info
    ::vtk_renderer_gui.SetRenderer(::renderer)
    ::vtk_camera_gui.SetCamera(::renderer.GetActiveCamera())


    # global VTK parameter to combine line and polygons
    vtk.vtkMapper.SetResolveCoincidentTopologyToPolygonOffset()
    vtk.vtkMapper.SetResolveCoincidentTopologyPolygonOffsetParameters(1,1)
 
  }


  #---------------------------------------------------------------------------
  proc ::MainBook_CloseTab()  \
  {
    if (exists(::vtkren_pageindex)){
      mb = ami.MainFrame.GetMainBook()
      mb.DeletePage(::vtkren_pageindex)
    }
  }

  #---------------------------------------------------------------------------
  # Redefinition of Close to close the panel tab in main_book
  #
  proc ::Close() {
    ::MainBook_CloseTab()
    ::win.HidePanel()
    delvars GetObjectName(::Close)
  }
  Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")


  #---------------------------------------------------------------------------
  proc ::Gui(){

    if (exists(::parent_panel)) {
      ::win = ParamPanel("ParamSurf",&::parent_panel)
    } else {
      ::win = ParamPanel("ParamSurf")
    }

    ::win.AddString(::params.description, "Description")
    
    ::type_id  = ::win.AddEnum( &::params.type)
      ::win.AddEnumChoice(::type_id,"SuperQuadric")
      ::win.AddEnumChoice(::type_id,"Torus")
      ::win.AddEnumChoice(::type_id,"Expression")
    ::win.SetCallback( &::NewType)

    ::book = ::win.BeginBook()
      # Main Page
      ::page_main = ::win.AddPage("Main")
        ::win.BeginBoxPanel("Resolution")
            ::thetadim_id = ::win.AddInt( ::params.theta_dim,  "theta", 4,500)
            ::win.SetCallback( ::Update)
            ::phidim_id   = ::win.AddInt( ::params.phi_dim,  "phi",   4,500)
            ::win.SetCallback( ::Update)
        ::win.EndBoxPanel()
        ::win.BeginBoxPanel("Scaling Coeff.")
            ::cx_id = ::win.AddFloat( ::params.cx,  "x", 0.1,5)
            ::win.SetCallback( ::Update)
            ::cy_id = ::win.AddFloat( ::params.cy,  "y", 0.1,5)
            ::win.SetCallback( ::Update)
            ::cz_id = ::win.AddFloat( ::params.cz,  "z", 0.1,5)
            ::win.SetCallback( ::Update)
            ::win.AddButton("Reset",   ::ResetScale)
        ::win.EndBoxPanel()


      # SuperQuadric Page
      ::page_superquad = ::win.AddPage("SuperQu.")
        ::win.BeginBoxPanel("Exponential Coeff.")
            ::ex_id = ::win.AddFloat( ::params.e_x,  "e_x", 0.1,5)
            ::win.SetCallback( ::Update)
            ::ey_id = ::win.AddFloat( ::params.e_y,  "e_y", 0.1,5)
            ::win.SetCallback( ::Update)
            ::ez_id = ::win.AddFloat( ::params.e_z,  "e_z", 0.1,5)
            ::win.SetCallback( ::Update)
            ::win.AddButton("Set Ellipsoid",   ::SetEllipsoid)
        ::win.EndBoxPanel()

      # SuperQuadric Torus
      ::page_torus = ::win.AddPage("Torus")
        ::win.BeginBoxPanel("Radii")
            ::R_id = ::win.AddFloat( ::params.R,  "R", 0.1,5)
            ::win.SetCallback( ::Update)
            ::r_id = ::win.AddFloat( ::params.r,  "r", 0.1,5)
            ::win.SetCallback( ::Update)
        ::win.EndBoxPanel()

      # User Equation Page
      ::page_expr = ::win.AddPage("Expr")
        ::win.BeginBoxPanel("Ranges:")
          ::win.BeginHorizontal()
            ::min1_id = ::win.AddString(::params.min1,"U min=")
            ::win.SetCallback( ::UpdateRanges)
            ::max1_id = ::win.AddString(::params.max1,"max=")
            ::win.SetCallback( ::UpdateRanges)
          ::win.EndHorizontal()
          ::win.BeginHorizontal()
            ::min2_id = ::win.AddString(::params.min2,"V min=")
            ::win.SetCallback( ::UpdateRanges)
            ::max2_id = ::win.AddString(::params.max2,"max=")
            ::win.SetCallback( ::UpdateRanges)
          ::win.EndHorizontal()
          ::win.BeginHorizontal()
          ::win.EndHorizontal()
        ::win.EndBoxPanel()
        ::win.BeginBoxPanel("Equation (U,V):")
          ::X_id = ::win.AddString( ::params.X,"X=")
          ::win.SetCallback( ::Update)
          ::Y_id = ::win.AddString( ::params.Y,"Y=")
          ::win.SetCallback( ::Update)
          ::Z_id = ::win.AddString( ::params.Z,"Z=")
          ::win.SetCallback( ::Update)
          ::win.AddBoolean(::params.use_scalars,        "Colors")
          ::win.SetCallback( ::Update)
          ::win.AddBoolean(::params.AutoUpdateEquation, "Auto-update")
        ::win.EndBoxPanel()
        ::win.BeginBoxPanel("Time evolution:")
          ::win.AddInt( ::params.kmax,  "kmax", 0,100)
          ::win.AddInt( ::params.timestep,  "timestep", 0,1000)
          ::win.BeginHorizontal()
            ::win.AddButton("Start", ::Start)
            ::win.AddButton("Stop",  ::Stop)
          ::win.EndHorizontal()
        ::win.EndBoxPanel()
        
        ::win.AddFilename( ::eq_filename,"Eq. filename", ".", "*.amil" )
        #::win.BeginHorizontal()
        #::win.AddButton("Save", ::SaveEquation)
        ::win.AddButton("Read", ::ReadEquation)
        #::win.EndHorizontal()


        ::win.AddPage("VTK")
        ::win.BeginBook()
        ::win.AddPage("Actor")
          ::actor_ctrl      .AddGui(::win)
          ::actor_ctrl      .SetCallback(::RenderCallback)
        ::win.AddPage("Lines")
          ::lineactor_ctrl  .AddGui(::win)
          ::lineactor_ctrl  .SetCallback(::RenderCallback)
        ::win.AddPage("Cube")
          ::cubeaxesactor_ctrl.AddGui(::win)
          ::cubeaxesactor_ctrl.SetCallback(::RenderCallback)

        ::win.AddPage("Scene")
          #::win.BeginBoxPanel("Snapshot")
            #::win.AddButton("Get",&::GetSnapshot)
          #::win.EndBoxPanel()

          ::vtk_camera_gui  .AddGui(::win)
          ::vtk_camera_gui  .SetCallback(::RenderCallback)
          ::vtk_renderer_gui.AddGui(::win)
        ::win.EndBook()

        # add page for saving/loading parameters
        ::AddParamPage(::win)

        # add help page
        if wx.wxFileName(::html_filename).FileExists() {
          ::AddHelpPage(::win)
        }
    ::win.EndBook()

    ::win.AddButton("Update Surface", ::Update)
    ::AddStandardButtons(::win)

    if (exists(::parent_panel)) {
      ::win.ShowPanel()
    } else {
      ::win.Display()
    }
    ::win.Update(-1)

    ::MainBook_AddvtkSurfaceTab()

  }

  ::Init()
  
}
# End of class
  
