#!/usr/bin/amilab

#
# Script for drawing 2D functions
# or lines from an image
#

comments="ImageHistoClass: this class allows to draw the histogram of an image."

func "Common/ScriptGui"


if (!exists(ImageHistoClass)) {

  Class ImageHistoClass : public ScriptGui {

    ::ami_import = &global::ami_import
    #----------------------------
    proc ::Init() \
    {
      ::input_name =  "", "name of the input image, the drawing window of this image will be used"
      ::minval = 0, "minimal value of the histogram"
      ::maxval = 255, "maximal value of the histogram"
      ::step = 1, "histogram step"
      ::InitColours()
      ::Gui()
    }

    #---------------------------
    proc ::InitColours() \
    {
      # set colors for the curves
      # start with 6 values, if more will need to add new colors
      ::ColoursVector = VarVector(6)
      ::ColoursVector.push_back("#FF0000")
      ::ColoursVector.push_back("#00FF00")
      ::ColoursVector.push_back("#0000FF")
      ::ColoursVector.push_back("#FFFF00")
      ::ColoursVector.push_back("#FF00FF")
      ::ColoursVector.push_back("#00FFFF")
    }
    
    #----------------------------
    proc ::LoadInput() \
    {
      printn "evaluation of --> ::input <<="+::input_name+";"
      eval "::input <<="+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        #::win.update
      }
      #::win.update
      ::UpdateImage()
      ::Update()
    }

    #-------------------------------------------------------------------
    proc ::UpdateImage() {
      Imin = min(::input[0])
      Imax = max(::input[0])
      for n=1 to ::input.vdim-1 {
        Imin = -max(-Imin,-min(::input[0]))
        Imax = max(Imax,max(::input[n]))          
      }
      ::step = 1
      ::win.FloatConstraints(::minval_id,Imin,Imax,::minval)
      ::win.FloatConstraints(::maxval_id,Imin,Imax,::maxval)
      ::win.FloatConstraints(::step_id,  0,(Imax-Imin)/20,::step)
    }

    #-------------------------------------------------------------------
    proc ::Update() {

      if (exists(::input)) {
        if (::maxval<::minval+0.00001) { ::maxval = ::minval+0.00001; ::win.Update(-1); }
        if (::step<0.01) { ::step=0.01; ::win.Update(-1); }
        # vector of histograms
        if (exists(::h)) { del ::h; }
        ::h = VarVector(::input.vdim)
        for n=0 to ::input.vdim-1 {
          ::h.push_back( histo(::input[n],::minval,::maxval,(::maxval-::minval)/::step+1))
          ::dw->SetXLimits(::minval,::maxval)
          ::dw->SetYLimits(min(::h[n]),max(::h[n]))
          ::dw->SetCurve(::h[n],n)
          ::dw->SetCurveProperties(n,::ColoursVector[n%6])
        }
      }
    }

    #----------------------------
    proc ::Gui() {
    
      # parameters window
      import = &global::ami_import;
      ::win = import->ParamPanel("ImHist")
      
      ::win.BeginBook()
    
        ::win.AddPage("Param")

          # set the input image drawing window
          ::win.BeginBoxPanel("Input")
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::LoadInput)
            ::win.EndHorizontal()
          ::win.EndBoxPanel()


          ::minval_id = ::win.AddFloat(&::minval,"min",0,255)
          ::win.SetCallback(&::Update)
          ::maxval_id = ::win.AddFloat(&::maxval,"max",0,255)
          ::win.SetCallback(&::Update)
          ::step_id   = ::win.AddFloat(&::step,"step",0,10)
          ::win.SetCallback(&::Update)

          ::win.AddButton("Update",::Update)
          # add Drawing Window
          d = ::win.CurrentParent()
          ::dw = import->wxDrawingWindow(&d)
          # sets minimal size here
          ::dw.SetMinSize(&wx.wxSize(80,80));
          ::dw.SetBackgroundColour(wx.wxColour(255,255,255))
          ::sizer_item = ::win.AddWidget(&::dw,0)

      ::win.EndBook()

      ::AddStandardButtons(&::win)
      
      ::win.Update(-1)
      ::win.Display()
   }

    ::Init()
  } 
  # Class ImageHistoClass
  Comments( ImageHistoClass, comments)
} 
# end if (!exists(ImageHistoClass))
  
  
#----------------------------
# Main
#----------------------------

if (!exists(imhist)) {

  ImageHistoClass imhist
  
} else {
  InfoDialog "The script seems to be already loaded."
}

