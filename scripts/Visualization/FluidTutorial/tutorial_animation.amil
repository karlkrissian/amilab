filtering   = 0
type_string="AfGG"
type_image=1
#-----------------------------------------------------------
# Adds an 2D image to the animation
# anim and anim_current are global variables
# if the animation 'anim' is full, add 20 more images
proc AnimAddImage( IMAGE newim) {
#    ------------
  if (anim_current<anim.tz) {
    anim.putimage(newim,0,0,anim_current)
    anim_current=anim_current+1;
  } else {
    global
      _tmpim = Image(RGB,anim.tx,anim.ty,anim.tz+100);
      print sprint("new animation size: %03.0f\n",_tmpim.tz)
      _tmpim.putimage(anim,0,0,0)
      del anim
      anim = _tmpim
      del _tmpim
    local
      anim.putimage(newim,0,0,anim_current)
      anim_current=anim_current+1;
  }
}
# rescaling of the altitudes
alt_factor = 4


imdir   ="WP01/package_02_LMD/images/"
clouddir="WP01/package_02_LMD/misc/"
i48 = IO.ReadRawImages2D(1024,1024,USHORT.val,0,imdir+"AfGG_c0.81.48",0)
# Without filtering
c48  =  IO.ReadRawImages2D(1024,1024,UCHAR.val,0,clouddir+"AfGG_CLA_scene_analysis.48",0)
t48 = IO.ReadRawImages2D(1024,1024,USHORT.val,0,imdir+"AfGG_c10.8.49",0)

i48min=min(i48)
i48max=max(i48)


# Creates the mesh for the earth
earth  = CreateFlatMesh(c48>=0)
#  Creates the meshes for the different types of clouds
#  epsilon allows letting some space between the different 
#  categories of clouds
epsilon=0.5-0.2
clouds=Surface[5]
clouds[0] = CreateFlatMesh(c48,100-epsilon,100+epsilon)
clouds[1] = CreateFlatMesh(c48,101-epsilon,103+epsilon)
clouds[2] = CreateFlatMesh(c48,104-epsilon,106+epsilon)
clouds[3] = CreateFlatMesh(c48,107-epsilon,109+epsilon)
clouds[4] = CreateFlatMesh(c48,110-epsilon,200)



#------------------------------------------------------------
proc ProcessMesh(OBJECT _s,IMAGE _j1, NUM _j1min, NUM _j1max, IMAGE _pos) {
#    -----------
  _s.SetColors(_j1,_j1min,_j1max)
  _s.ElevateMesh(_pos)
  _s.Normals
  _s.Recompute
}
#------------------------------------------------------------
coeff=Image "alt_coeff.ami.gz"
alt48 = ComputeAltitudes(t48,coeff)
alt48 = alt48*alt_factor
pos=Altitude2Position(alt48,type_image)
# Elevating the earth
j2 = i48*(c48<100)
# substract 10m to avoid collision with clouds (OpenGL pb) ...
pos1=Altitude2Position(alt48*(c48<100)-10,type_image) 
ProcessMesh(&earth ,j2,i48min,i48max,pos1)
# Elevating the different clouds
for k=0 to 4 { ProcessMesh(&clouds[k],i48,i48min,i48max,pos); }

# Add all the meshes into the same visualization window
show earth
for k=0 to 4 {earth_draw += clouds[k]; }
earth_draw.SetLightDiffuse(0,180,180,180)
# Set colormaterial ON
earth. SetColorMaterial(1)
for k=0 to 4 {clouds[k].SetColorMaterial(1);}
earth_draw.rotate(0,-90,0)
earth_draw.rotate(0,0,-90)
# Set the view
view1 = Transform("view1.txt")
earth_draw.SetTransform(view1)
earth_draw.Paint
earth_draw.SetBackground(5,5,40)
earth_draw.SetWindowSize(600,670)


# Saving a screen shot of the image with initial colors
im1 = earth_draw.GetImageFromX
# Creating the image containing the whole animation
anim = Image(RGB,im1.tx,im1.ty,300)
anim_current=0
# 1st part: from 2D image to 2D image with colors
# Set Colors of the different clouds
clouds[0].SetAmbient( 195, 195, 195 )
clouds[1].SetAmbient( 224,   0,   0 ) 
clouds[2].SetAmbient( 222, 222,   0 )
clouds[3].SetAmbient( 0,   254, 252 )
clouds[4].SetAmbient( 195, 195, 195 )
for k=0 to 4 {clouds[k].SetColorMaterial(0);}
earth_draw.Paint
# Saving a screen shot of the image with colors corresponding
# to each category of clouds
im2 = earth_draw.GetImageFromX
# Recording intermediate images between im1 and im2
# so that the colors will appear progressively
total_class = 40
for k=0 to total_class-1 {
  tmp = k/(total_class-1)
  im = im1*(1-tmp) + im2*tmp
  AnimAddImage(im)
}
del tmp


#------------------------------------------------------------
proc GenerateViews(STRING _st1, STRING _st2, NUM _total) {
#    -------------
# Load the 2 views from files _st1 and _st2,
# and creates a continuous transformation between them
# using '_total' images.
# All the images are added to the global animation 'anim'
# and the global variable anim_current is updated.
  _viewinit = Transform(_st1)
  _viewend  = Transform(_st2)
  for _n=0 to _total-1 {
    _vtmp = Interpolate(_viewinit,_viewend,_n/(_total-1))
    earth_draw.SetTransform(_vtmp)
    del _vtmp
    _im1 =  earth_draw.GetImageFromX
    AnimAddImage(_im1)
  }
  del _viewinit
  del _viewend
}
#------------------------------------------------------------
total_view = 40
# Rotate
GenerateViews("view1.txt","view4.txt",      total_view)
# Get Closer
GenerateViews("view4.txt",  "view5.txt",    total_view)
GenerateViews("view5.txt",  "view5_1.txt",  total_view)
GenerateViews("view5_1.txt","view5_1_1.txt",total_view)
# Rotate 360 degrees
total_rotate=100
for n=1 to total_rotate {
  earth_draw.rotate(0,360/total_rotate,0)
  im1 =  earth_draw.GetImageFromX
  AnimAddImage(im1)
}
GenerateViews("view5_1_1.txt","view12.txt",total_view)


# without filtering
t49 =  IO.ReadRawImages2D(1024,1024,USHORT.val,0,"WP01/package_02_LMD/images/AfGG_c10.8.49",0)
alt49 = ComputeAltitudes(t49,coeff)*alt_factor
# reading the vector fields
displ   = ReadFlow("test_arrows/01test_AfGG_SF_4_0.3_0.0_0.0_0.3_.uv_v2.txt")
displ1  =  displ*(c48>=107-epsilon)*(c48<=109+epsilon)
alt48_2 =  alt48*(c48>=107-epsilon)*(c48<=109+epsilon)
alt49_2 =  alt49*(c48>=107-epsilon)*(c48<=109+epsilon)
vect1 = CreateVectors(alt48_2,displ1,alt49_2,6,6,3,type_image)
vect1.SetColor(0,0,255)
vect1.SetColorMaterial(0)
vect1.SetAmbient(10,10,200)
vect1.SetOpacity(0)
earth_draw += vect1
# Progressive display of the vectors
total_vectors = 40
for n=1 to total_vectors {
  vect1.SetOpacity(n/total_vectors)
  earth_draw.Paint
  im1 =  earth_draw.GetImageFromX
  AnimAddImage(im1)
}
# Copy the last image a few times
total_final = 20
for n=1 to total_final {  AnimAddImage(im1);}
# Only keep the real number of images that have been used
ssanim = anim[:,:,0:anim_current-1]
show ssanim

