
func "Common/ScriptGui"

if (!exists(GraphVizClass)) {

  Class GraphVizClass : public ScriptGui \
  {
    
    //---------------------------------------------------
    proc ::Init() \
    {
      # use global AMILabConfig to read/save configuration of the script
      ::config_path = "/scripts/Visualization/GraphViz"
      ::graphviz_dotdir = ".", "Default file directory"
      ::ReadConfig()
    
      # try to read the user dir
      ::graphviz_program = "dot"

      ::graphviz_file = "graph.dot", "filename containing the graph description"
      ::graphviz_lang = "png"
      ::output_file = "graph.png", "output image filename"
      ::html_filename = GetScriptsDir+"/GraphViz/Doc/GraphViz/index.html"
      
    }

    //---------------------------------------------------
    proc ::ReadConfig() \
    {
      config_path_bak = ami.AMILabConfig.GetPath()
      ami.AMILabConfig.SetPath(::config_path)

      ::graphviz_bindir = wx.FromWxString(ami.AMILabConfig.\
        Read_11("GRAPHVIZ_BINDIR","/usr/bin"))

      # Set/Create the directory of the graph files
      sp = wx.wxStandardPathsBase.Get()
      user_app_path = wx.FromWxString(sp.GetUserLocalDataDir())
      if !wx.wxDir.Exists(user_app_path) {
        wx.wxFileName.Mkdir(user_app_path)
      }
      ::graphviz_dotdir = user_app_path + "/GraphViz"
      if !wx.wxDir.Exists(::graphviz_dotdir) {
        wx.wxFileName.Mkdir(::graphviz_dotdir)
      }

      ::graphviz_dotdir = wx.FromWxString(ami.AMILabConfig.\
        Read_11("GRAPHVIZ_DOTDIR",::graphviz_dotdir))
      #, "GraphViz binary path"

        
      ami.AMILabConfig.SetPath(&config_path_bak)
    }

    //---------------------------------------------------
    proc ::SaveConfig() \
    {
      config_path_bak = ami.AMILabConfig.GetPath()
      ami.AMILabConfig.SetPath(::config_path)

      ami.AMILabConfig.Write("GRAPHVIZ_BINDIR",::graphviz_bindir)
      ami.AMILabConfig.Write("GRAPHVIZ_DOTDIR",::graphviz_dotdir)
        
      ami.AMILabConfig.SetPath(&config_path_bak)
    }

    //---------------------------------------------------
    proc ::OutputAuto() \
    {
      f = wx.wxFileName(::graphviz_file)
      f.SetPath("/tmp")
      f.SetExt("png")
      ::output_file = f.GetFullPath().c_str()
      ::win.Update(-1)
    }
    
    //---------------------------------------------------
    proc ::Edit() \
    {
      if wx.wxFileName(::graphviz_file).FileExists() {
        ed = ami->MainFrame.GetAmilabEditor()
        ed.FileOpen(::graphviz_file)
        ed.Show()
        ed.Raise()
        ed.RequestUserAttention()
      } else {
        SetStatusText("File %1% not found" %1% ::graphviz_file)
      }
    }

    //---------------------------------------------------
    proc ::Run() \
    {
      cmd = ::graphviz_bindir+"/"+::graphviz_program+" -T%1%" % ::graphviz_lang \
              +" %1%" % ::graphviz_file \
              + " -o"+ ::output_file
      SetStatusText("GraphViz command : "+cmd)
      sh cmd
    }

    //---------------------------------------------------
    proc ::Show() {
      # 1. check existence of output file ?
      im = wx.wxImage(::output_file)
      if im.IsOk() {
        del ::bmp
        ::bmp = wx.wxBitmap(&im)
        dc = wx.wxClientDC(&::panel)
        dc_size = dc.GetSize()
        x_pos = (dc_size.GetWidth() -::bmp.GetWidth())/2
        y_pos = (dc_size.GetHeight()-::bmp.GetHeight())/2
        dc.DrawBitmap(&::bmp,wx.wxPoint(x_pos,y_pos))
      } else {
        SetStatusText("Failed to load image '%1%'" % ::output_file)
      }
      #::res <<= Image(::output_file)
      #show ::res
    }

    //---------------------------------------------------
    proc ::MainBook_AddTab()  \
    {
        # Interface wxWidgets
        mb = ami.MainFrame.GetMainBook()
        ::panel = wx.wxPanel(&ami.MainFrame)
        ::panel.SetName("GraphViz Result")


        #::dc.SetPen(wx.wxPen(wx.wxColour(255,0,0),2))
        #::dc.SetBrush(wx.wxBrush(wx.wxColour(255,0,0),wx.wxTRANSPARENT))
        #::dc.DrawCircle(25,25,10)
 
        # Add page to main book. This add the panel
        ::icons.LoadIconPNG2("Transparent background","Transparent_background")
        mb.AddPage( &::panel,  "GraphViz",1, wx.wxBitmap(&::icons._Transparent_background.Scale(16,16)))
        ::GraphViz_pageindex = mb.GetPageIndex(&::panel)
    }
    
    #----------------------------
    proc ::MainBook_CloseTab()  \
    {
      if (exists(::GraphViz_pageindex)){
        mb = ami.MainFrame.GetMainBook()
        mb.DeletePage(::GraphViz_pageindex)
      }
    }
  
    #----------------------------
    # Redefinition of Close to close the panel tab in main_book
    #
    proc ::Close() \
    {
      ::MainBook_CloseTab()
      ::win.HidePanel()
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
    

    //---------------------------------------------------
    proc ::Gui() \
    {
      if (exists(::parent_panel)) {
        ::win = ParamPanel("GraphViz",&::parent_panel)
      } else {
        ::win = ParamPanel("GraphViz")
      }
      
      ::win.BeginBook()
    
        ::win.AddPage("Params")
          ::win.AddFilename(&::graphviz_file,"graph file",::graphviz_dotdir,"*.dot")
          ::win.AddButton("Set Output",&::OutputAuto)
          ::win.AddFilename(&::output_file,"output",".","*.png")

        ::win.AddPage("Config")
          ::win.BeginBoxPanel("Script paths")
            ::bindir_id = ::win.AddDirname(&::graphviz_bindir,"Binary")
            ::dotpath_id = ::win.AddDirname(&::graphviz_dotdir,"Dot files")
          ::win.EndBoxPanel()
          ::win.AddButton("Save",&::SaveConfig)

        if wx.wxFileName(::html_filename).FileExists() {
          ::AddHelpPage(&::win)
        }
    
      ::win.EndBook()
      ::win.BeginHorizontal()
        ::win.AddButton("Edit",&::Edit)
        ::win.AddButton("Run",&::Run)
        ::win.AddButton("Show",&::Show)
      ::win.EndHorizontal()

      ::AddStandardButtons(&::win)

      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      #::win.Update(::bindir_id)
      #::graphviz_bin_dir = ::graphviz_bin_dir+"/"
      ::win.Update(-1)

      ::MainBook_AddTab()

    }
    ::Init()
    
  }
  # End of class
  
} 
# End of If
