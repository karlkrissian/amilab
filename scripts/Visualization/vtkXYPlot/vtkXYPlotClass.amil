
func "Common/ScriptGui"

if (!exists(vtkXYPlotClass)) {

  Class vtkXYPlotClass : public ScriptGui \
  {
    
    func "VTKControls/vtkChart/vtkChartClass"
    vtkChartClass ::chartctrl

    //---------------------------------------------------
    proc ::Init() {
      
        ::input_name   = "","Name of the input image variable"
        #::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki/doku.php?id=tutorial-mainalgorithms-levelset#level_set_segmentation"

        ::html_filename = GetScriptsDir+"/vtkXYPlot/Doc/vtkXYPlot/index.html"
        ::is_attached   = true
    }


    #-----------------------------------------------
    proc ::load_input() {
      eval "::input <<= (FLOAT)"+::input_name+";"
      if (::input_name=="BrowseImage") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
  
      if (exists(::win)) {
        ::win.Update(-1)
      }
    }
    Comments( ::load_input, "Copies the input image in a local image member named 'input'")


    #---------------------------------------------------------------------------
    proc ::RunExample() \
    {
      ::RunChartXY()
      #::RunXYPlot()
    }

    #---------------------------------------------------------------------------
    proc ::UpdateDisplay() \
    {
      if (exists(::renwin_interact1)) {
        if (::renwin_interact1.IsShown()) {
          ::renwin_interact1.Render()
        }
      }
      if (exists(::renwin_interact2)) {
        if (::renwin_interact2.IsShown()) {
          ::renwin_interact2.Render()
        }
      }
    }

    #---------------------------------------------------------------------------
    proc ::RunImage() \
    {
      chart_created = false
      if (!exists(::input)) {
        InfoDialog "Load input image first!"
      } else {
        del ::table
        ::table = vtk.vtkTable.New()
      
        arrX = vtk.vtkFloatArray.New()
        arrX.SetName("X Axis")
        ::table.AddColumn(&arrX)
      
        arrY = vtk.vtkFloatArray.New()
        arrY.SetName("Y Axis")
        ::table.AddColumn(&arrY)
        
        printn "Fill in the table with some example values"
        p = SpacePos(::input)
        px = p[0]
        # Fill in the table with some example values
        numPoints = ::input.tx
        ::table.SetNumberOfRows(numPoints)
        for  i = 0 to numPoints-1  {
          ::table.SetValue(i, 0, &vtk.vtkVariant.vtkVariant_16(px(i)))
          ::table.SetValue(i, 1, &vtk.vtkVariant.vtkVariant_16(::input(i)))
        }
      
        # Add multiple line plots, setting the colors etc
        if (!exists(::chart)) {
          ::chart = vtk.vtkChartXY.New()
          chart_created=true
          ::view.GetScene().AddItem(&::chart)
        }
        line = ::chart.AddPlot(vtk.vtkChart.LINE)
        line.SetInput_3(&::table, 0, 1)
        line.SetColor(0, 255, 0, 255)
        line.SetWidth(1.0)
        del line
      }
      if (chart_created) { 
        ::chartctrl.SetChart(::chart)
        ::chartctrl.SetChangedCallback(::UpdateDisplay)
      } else {
        ::chartctrl.Update()
      }
    }

    #-----------------------------------------------
    proc ::RunChartXY() \
    {
      # Create a table with some points in it
      ::table = vtk.vtkTable.New()
    
      arrX = vtk.vtkFloatArray.New()
      arrX.SetName("X Axis")
      ::table.AddColumn(&arrX)
    
      arrC = vtk.vtkFloatArray.New()
      arrC.SetName("Cosine")
      ::table.AddColumn(&arrC)
    
      arrS = vtk.vtkFloatArray.New()
      arrS.SetName("Sine")
      ::table.AddColumn(&arrS)
    
      printn "Fill in the table with some example values"
      # Fill in the table with some example values
      numPoints = 69
      _inc = 7.5 / (numPoints-1)
      ::table.SetNumberOfRows(numPoints)
      for  i = 0 to numPoints-1  {
        printn "point %1%" % i
        printn 0
        ::table.SetValue(i, 0, &vtk.vtkVariant.vtkVariant_16((DOUBLE)i * _inc))
        printn 1
        ::table.SetValue(i, 1, &vtk.vtkVariant.vtkVariant_16(cos((FLOAT)i * _inc)))
        printn 2
        ::table.SetValue(i, 2, &vtk.vtkVariant.vtkVariant_16(sin((FLOAT)i * _inc)))
      }
    
      printn "Set up the view"

      printn "Add multiple line plots"
      # Add multiple line plots, setting the colors etc
      ::chart = vtk.vtkChartXY.New()
      ::view.GetScene().AddItem(&::chart)
      printn "first line param"
      line = ::chart.AddPlot(vtk.vtkChart.LINE)
      printn "set input"
      line.SetInput_3(&::table, 0, 1)
      printn "set color"
      line.SetColor(0, 255, 0, 255)
      printn "set width"
      line.SetWidth(1.0)
      del line
      printn "second line param"
      line = ::chart.AddPlot(vtk.vtkChart.BAR)
      line.SetInput_3(&::table, 0, 2)
      line.SetColor(255, 0, 0, 255)
      #line.SetWidth(5.0)
    
      printn "Set up an interactor and start"
      # Set up an interactor and start
#  renderWindowInteractor = vtk.vtkRenderWindowInteractor.New()
#  renderWindowInteractor.UseCaptureMouseOn()
#  renderWindowInteractor.Enable(true)
#  renderWindowInteractor.SetRenderWindow(&::view.GetRenderWindow())
#  renderWindowInteractor.Initialize()
#  renderWindowInteractor.Start()

    }

    #-----------------------------------------------
    proc ::RunXYPlot() \
    {
      ::plot = vtk.vtkXYPlotActor.New()
      ::renwin   = ::renwin_interact2.GetRenderWindow()
      ::renderer = vtk.vtkRenderer.New()
      ::renderer.SetBackground(1,1,1)
      ::renwin.AddRenderer(&::renderer)
      ::renderer.SetViewport( 0.5, 0, 1, 1);
      ::renderer.AddActor2D(&::plot)
      ::plot.SetPlotRange(0,0,1,1)
      #::plot.AddDataObjectInput(&::table)

      arrX = vtk.vtkFloatArray.New()
      arrX.SetName("X Axis")
      arrC = vtk.vtkFloatArray.New()
      arrC.SetName("Cosine")

      numPoints = 69
      _inc = 7.5 / (numPoints-1)
      for  i = 0 to numPoints-1  {
        arrX.InsertNextValue((DOUBLE)i * _inc)
        arrC.InsertNextValue(cos((DOUBLE)i * _inc))
      }
      ::plot.AddInput_2(&arrX)
      ::plot.AddInput_2(&arrC)
      ::plot.SetTitle("Pressure vs. Arc Length (Zoomed View)")
      ::plot.SetXValuesToIndex ()
    }

    #---------------------------------------------------------------------------
    proc ::CreateRenderer() \
    {
      ::renwin_interact1 = wxvtk.wxVTKRenderWindowInteractor(\
                                ::panel, -1)
      ::panel.GetSizer().Add( ::renwin_interact1, \
                              wx.wxSizerFlags().Expand().Proportion(1))

      ::view = vtk.vtkContextView.New()
      ::view.SetInteractor(&::renwin_interact1)
      #::view.SetInteractionModeTo2D()
      ::renwin_interact1.UseCaptureMouseOn()
      ::renwin_interact1.Enable(true)
    }

    #---------------------------------------------------------------------------
    proc ::CB_Detach() \
    {
      if (!exists(::plotframe)) {
        #--- Create frame, sizer and interactor
        ::plotframe = wx.wxFrame( &ami.MainFrame,wx.wxID_ANY,"wxVTK example")
        ::plotframe.Show(); ::plotframe.Update()
        ::plotframe.SetSizer(&wx.wxBoxSizer(wx.wxVERTICAL))
        ::renwin_interact2 = \
          wxvtk.wxVTKRenderWindowInteractor(&::plotframe,wx.wxID_ANY)
        ::renwin_interact2.SetInteractorStyle(\
          &vtk.vtkInteractorStyleTrackballCamera.New())
        ::view2 = vtk.vtkContextView.New()
        ::view2.SetInteractor(&::renwin_interact2)
        ::renwin_interact2.UseCaptureMouseOn()
        ::renwin_interact2.Enable(true)
        ::plotframe.GetSizer().Add( &::renwin_interact2, \
                                wx.wxSizerFlags().Expand().Proportion(1))
      
        ::plotframe.SetSize(wx.wxSize(400,400))
        ::plotframe.Layout()

      } else {
        ::plotframe.Show()
      }
      if (exists(::chart)&&(::is_attached)) {
        ::view.GetScene().RemoveItem(::chart)
        ::view2.GetScene().AddItem(::chart)
      }
      ::is_attached=false
      ::renwin_interact2.Render()
      ::panel.Hide()
      ::win.Layout()
    }

    #---------------------------------------------------------------------------
    proc ::CB_Attach() {
      if (exists(::plotframe)&&(!::is_attached)) {
        if (exists(::chart)) {
          ::view2.GetScene().RemoveItem(::chart)
          ::view.GetScene().AddItem(::chart)
        }
        ::is_attached=true
        ::plotframe.Hide()
        ::panel.Show()
        ::win.Layout()
        ::renwin_interact1.Render()
      }
    }

    # overwrite scriptgui
    proc ::Attach() { ::CB_Attach(); }
    proc ::Detach() { ::CB_Detach(); }
    proc ::AttachDetach() {
      if (!::is_attached) { ::Attach(); } else { ::Detach(); }
    }

    //---------------------------------------------------
    proc ::Gui() {
    
      if (exists(::parent_panel)) {
        ::win = ParamPanel("vtkXYPlot",&::parent_panel)
      } else {
        ::win = ParamPanel("vtkXYPlot")
      }
      
        # add Drawing Window

      #::win.BeginBook()
      #::win.AddPage("")
        # Create a panel with its sizer
        ::panel = wx.wxPanel(::win.CurrentParent())
        ::panel.SetMinSize(wx.wxSize(100,200))
        ::panel.SetSizer(wx.wxBoxSizer(wx.wxVERTICAL))
        ::win.AddWidget(::panel,0)
      #::win.EndBook()
        #::panel.Show()
        #::panel.Update()

        #::renwin_interact2 = wxvtk.wxVTKRenderWindowInteractor(&d,-1)
        #interact = vtk.vtkXYPlotWidget.New()
        #::renwin_interact2.SetInteractorStyle(&interact)
        #::renwin_interact2.SetMinSize(&wx.wxSize(100,200))
        #::win.AddWidget(&::renwin_interact2,0)
        #::renwin_interact2.UseCaptureMouseOn()
        #::renwin_interact2.Enable(true)

      ::win.BeginBook()

        ::win.AddPage("Init")

          ::win.BeginBoxPanel("Input Image")
            # set the input image
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::load_input)
            ::win.EndHorizontal()
          ::win.EndBoxPanel()

        #::win.AddPage("Param")
          ::win.AddLabel("Info:","Set your parameters here")

        #::win.AddPage("Run")
          ::win.AddButton("Run Example",::RunExample)
          ::win.AddButton("Add Image",::RunImage)
          ::win.BeginHorizontal()
            ::win.AddButton("Detach", ::CB_Detach)
            ::win.AddButton("Attach", ::CB_Attach)
          ::win.EndHorizontal()

        ::win.AddPage("Chart")
            # Add Chart Gui
            ::chartctrl.AddGui(::win)
        if wx.wxFileName(::html_filename).FileExists() {
          ::AddHelpPage(&::win)
        }
    
      ::win.EndBook()
    
      ::AddStandardButtons(&::win)

      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::CreateRenderer()
      ::win.Update(-1)

    }
    ::Init()
    
  }
  # End of class
  
} 
# End of If
