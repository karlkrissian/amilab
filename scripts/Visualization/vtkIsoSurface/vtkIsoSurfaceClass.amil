#!/usr/bin/amilab

#
# Script for Volume Rendering using VTK
#

comments="vtkIsoSurface: VTK GPU RayCasting."

func "Common/ScriptGui"


if (!exists(vtkIsoSurfaceClass)) {


  #-----------------------------------------------------
  #  vtkIsoSurfaceClass
  #-----------------------------------------------------
  Class vtkIsoSurfaceClass : public ScriptGui {

    func "VTKControls/vtkCamera/vtkCameraClass"
    vtkCameraClass ::vtk_camera_gui

    func "VTKControls/vtkRenderer/vtkRendererClass"
    vtkRendererClass ::vtk_renderer_gui

    func "VTKControls/vtkProperty/vtkPropertyClass"
    vtkPropertyClass ::vtk_property1_gui
    vtkPropertyClass ::vtk_property2_gui

    #----------------------------
    proc ::Init() \
    {
      ::input_name  =  "", "name of the input image"
      ::input2_name =  "", "name of the second input image"
      ::input_size  = "0 Mb",  "input volume size in Mb (2^20 bytes)"
      ::input2_size = "0 Mb", "second input volume size in Mb (2^20 bytes)"
      ::background_color  = wx.wxColour(173,216,230)
      ::background_color2 = wx.wxColour(144,238,144)
      ::UseGradientBackground = UCHAR(1)
      ::azimuth = INT(45), "Rotate camera angle along vertical axis (in degrees)"
      ::vol1_threshold = 0, "Isosurface threshold for volume 1"
      ::vol2_threshold = 0, "Isosurface threshold for volume 2"
      #::Gui()
    }
    
    #----------------------------
    proc ::load_input() {
      if (exists(::input)) { del ::input; }
      eval "::input = &"+::input_name+";"
      if (::input_name=="BrowseImage") {
        ::input_name = "::input"
      }
      ::UpdateImageInfo(&::input,&::input_size)
      ::win.SetLabelValue(::input_size_id,::input_size)
      ::vol1min = min(::input)
      ::vol1max = max(::input)
      ::vol1_threshold = (::vol1min+::vol1max)/2.0
      ::win.FloatConstraints(::vol1threshold_id,::vol1min,::vol1max,::vol1_threshold)
      ::win.Update(-1)
    }

    #----------------------------
    proc ::UpdateImageInfo( IMAGE im, STRING res ) {
      if (im.vdim>1) {
        InfoDialog "Warning: input is a vector field ..."
      }
      size = im.tx*im.ty*im.tz*im.vdim
      format_size = vector_int(11,0)
      format_name = VarVector(11,"unknown")

      format_size[0]=1 # uchar
      format_name[0] = "uchar"

      format_size[1]=2 # ushort
      format_name[1] = "ushort"

      format_size[2]=2 # short
      format_name[2] = "short"

      format_size[3]=4 # int
      format_name[3] = "int"

      format_size[4]=4 # uint
      format_name[4] = "uint"

      format_size[5]=8 # long
      format_name[5] = "long"

      format_size[6]=8 # ulong
      format_name[6]="ulong"

      format_size[7]=4 # float
      format_name[7]="float"

      format_size[8]=8 # double
      format_name[8]="double"

      format_size[9]=3 # RGB
      format_name[9]="RGB"

      format_size[10]=4 # RGBA
      format_name[10]="RGBA"

      pixel_format = im.GetFormat
      if (pixel_format>10) {
        InfoDialog "Input: Wrong pixel format (%1%) !" % format
      }

      res = "%1% Mb " % (INT) (size*format_size[pixel_format]/(1024*1024))
      res = res+"(%1%)" % format_name[pixel_format]
      
    }
  
    #----------------------------
    proc ::load_input2() {
      if (exists(::input2)) { del ::input2; }
      eval "::input2 = &"+::input2_name+";"
      if (::input2_name=="BrowseImage") {
        ::input2_name = "::input2"
      }
      ::UpdateImageInfo(&::input2,&::input2_size)
      ::win.SetLabelValue(::input2_size_id,::input2_size)
      ::vol2min = min(::input2)
      ::vol2max = max(::input2)
      ::win.FloatConstraints(::vol2threshold_id,::vol2min,::vol2max,::vol2_threshold)
      ::win.Update(-1)
    }
  

    #----------------------------
    proc ::UpdateIntensityLimits() {
      if (exists(::input)) {
        printn "min"
        ::min_val = min(::input)
        printn "max"
        ::max_val = max(::input)
        ::win.FloatConstraints(::opacitylevel_id,::min_val,::max_val,::opacitylevel)
        ::win.FloatConstraints(::opacitywindow_id,::min_val,::max_val,::opacitywindow)
        ::win.Update(-1)
      }
    }

    #----------------------------
    proc ::ImReload() \
    {
      ::load_input()
    }
    Comments(::ImReload,"(Re)Loads the input image.")


    #----------------------------
    proc ::ImReload2() \
    {
      ::load_input2()
    }
    Comments(::ImReload2,"(Re)Loads the second input image.")

    #----------------------------
    proc ::DeleteVariables() {
      del ::renwin_interact
      del ::renwin
      del ::renderer
      # etc ...
    }

    #----------------------------
    #proc ::Start() \
    #{
      #if (!exists(::input)) {
        #::load_input()
      #}
      #::renwin_interact = vtktools.vtkGPURayCasting(&::input, \
        #::blend_type, ::opacitywindow, ::opacitylevel, ::clip)
      #::renwin   = ::renwin_interact.GetRenderWindow()
      #::renderer = ::renwin.GetRenderers().GetFirstRenderer()
      #interact = vtk.vtkInteractorStyleTrackballCamera.New()
      #::renwin_interact.SetInteractorStyle(&interact)
      ##::renderer.Render()
      #vols = ::renderer.GetVolumes()
      #vols.InitTraversal()
      #::vol      =  vols.GetNextVolume()
      #::property = ::vol.GetProperty()
      #mapper   = ::vol.GetMapper()
      #::volmapper = vtk.vtkVolumeMapper_SafeDownCast(&mapper)
      ##::renwin_interact.Render()

    #}

    #----------------------------
    proc ::StartNew() \
    {
      if (!exists(::input)) {
        ::load_input()
      }
      if (!exists(::renderer)) {
        InfoDialog "Missing renderer ..."
      } else {
        #if (exists(::renwin_interact)) { del ::renwin_interact; }
        if (!exists(::renwin_interact)) {
          ::renwin_interact = wxvtk.wxVTKFrame()
        }

        ::StartVolume1()

        ::vtk_property1_gui.SetProperty(::vol1_actor.GetProperty())
        ::vtk_property1_gui.SetCallback(::Vol1PropertyCallback)
      }

    }
    Comments(::StartNew,"Starts rendering of first volume.")

    #----------------------------
    proc ::AddVolume2() \
    {
      if (!exists(::input2)) {
        ::load_input2()
      }

      if (!exists(::renderer)) {
        InfoDialog "Missing renderer ..."
      } else {
        #if (exists(::renwin_interact)) { del ::renwin_interact; }
        if (!exists(::renwin_interact)) {
          ::renwin_interact = wxvtk.wxVTKFrame()
        }

        ::StartVolume2()

        ::vtk_property2_gui.SetProperty(::vol2_actor.GetProperty())
        ::vtk_property2_gui.SetCallback(::Vol2PropertyCallback)
      }


    }
    Comments(::AddVolume2,"Adds rendering of second volume.")

    #----------------------------
    proc ::StartVolume1() \
    {

      # Create isosurface and vtkPolyData 
      vol1_isosurf = isosurf(::input,::vol1_threshold)
      del ::vol1_polydata
      ::vol1_polydata = vtktools.ToVtkPolyData(&vol1_isosurf)

      # compute normals
      ::SetRendererBg()
      ::renderer.ResetCamera()
      ::vol1_normals = vtk.vtkPolyDataNormals.New()
      ::vol1_normals.SetInput(&::vol1_polydata)
      ::vol1_normals.SetFeatureAngle(60.0)

      # need a vtkPolyDataMapper here ...
      ::vol1_mapper = vtk.vtkPolyDataMapper.New()
      ::vol1_mapper.SetInputConnection(&::vol1_normals.GetOutputPort())
      ::vol1_mapper.ScalarVisibilityOff()
      #::vol1_mapper.ImmediateModeRenderingOn()
      # use display list to display faster ...
      ::vol1_mapper.ImmediateModeRenderingOff()

      # create actor
      ::vol1_actor = vtk.vtkActor.New()
      ::vol1_actor.SetMapper(&::vol1_mapper)
      # Set Color Property ...

      ::renderer.AddActor(&::vol1_actor)
      ::renderer.ResetCameraClippingRange()

      # Add the volume to the scene
      ::SetRendererBg()
      ::renderer.ResetCamera()
      ::BackupView()
      ::renwin_interact.Render()
    }

    #----------------------------
    proc ::StartVolume2() \
    {

      # Create isosurface and vtkPolyData 
      vol2_isosurf = isosurf(::input2,::vol2_threshold)
      del ::vol2_polydata
      ::vol2_polydata = vtktools.ToVtkPolyData(&vol2_isosurf)

      # compute normals
      ::renderer.ResetCamera()
      ::vol2_normals = vtk.vtkPolyDataNormals.New()
      ::vol2_normals.SetInput(::vol2_polydata)
      ::vol2_normals.SetFeatureAngle(60.0)

      # need a vtkPolyDataMapper here ...
      ::vol2_mapper = vtk.vtkPolyDataMapper.New()
      ::vol2_mapper.SetInputConnection(::vol2_normals.GetOutputPort())
      ::vol2_mapper.ScalarVisibilityOff()
      #::vol1_mapper.ImmediateModeRenderingOn()
      # use display list to display faster ...
      ::vol2_mapper.ImmediateModeRenderingOff()

      # create actor
      ::vol2_actor = vtk.vtkActor.New()
      ::vol2_actor.SetMapper(::vol2_mapper)
      # Set Color Property ...

      ::renderer.AddActor(::vol2_actor)
      ::renderer.ResetCameraClippingRange()
      ::renwin_interact.Render()

    }

    #----------------------------
    proc ::ApplyVol1() \
    {
      if (!exists(::vol1_actor)) {
        ::StartNew()
      } else {
        vol1_isosurf = isosurf(::input,::vol1_threshold)
        del ::vol1_polydata
        ::vol1_polydata = vtktools.ToVtkPolyData(&vol1_isosurf)
        ::vol1_normals.SetInput(&::vol1_polydata)
        ::renderer.ResetCamera()
        ::renwin_interact.Render()
      }
    }

    #----------------------------
    proc ::ApplyVol2() \
    {
      if (!exists(::vol2_actor)) {
        ::AddVolume2()
      } else {
        vol2_isosurf = isosurf(::input2,::vol2_threshold)
        del ::vol2_polydata
        ::vol2_polydata = vtktools.ToVtkPolyData(&vol2_isosurf)
        ::vol2_normals.SetInput(&::vol2_polydata)
        ::renderer.ResetCamera()
        ::renwin_interact.Render()
      }
    }

    #----------------------------
    proc ::SetRendererBg() \
    {
      if (exists(::renderer)) {
        ::renderer.SetBackground( \
          (FLOAT) ::background_color.Red() /255, \
          (FLOAT) ::background_color.Green() /255, \
          (FLOAT) ::background_color.Blue() /255)
        ::renderer.SetBackground2( \
          (FLOAT) ::background_color2.Red() /255, \
          (FLOAT) ::background_color2.Green() /255, \
          (FLOAT) ::background_color2.Blue() /255)
        ::renderer.SetGradientBackground( ::UseGradientBackground)
      }
    }

    #----------------------------
     proc ::InitCamera() {
      ::camera=::renderer.GetActiveCamera()
      ::camera.SetPosition(0,-100,0)
      ::camera.SetViewUp(0,0,1) # change orientation
      #::camera.SetParallelProjection(true)
    }

    #----------------------------
    #Initialize Interactor,Renderer, RendererWindow and variables
    proc ::CreateRenderer( OBJECT inter ) \
    {
      inter.Show()
      inter.Update()
      ::renderer = vtk.vtkRenderer.New()
      ::renderer.ResetCamera()   # carlos
      inter.GetRenderWindow().AddRenderer(&::renderer)
      interact = vtk.vtkInteractorStyleTrackballCamera.New()
      inter.SetInteractorStyle(interact)
      ::renwin = inter.GetRenderWindow()
      ::InitCamera()
    }

    #----------------------------
    proc ::MainBook_AddvtkIsoSurfaceTab()  \
    {
      mb = ami.MainFrame.GetMainBook()

      ::panel = wx.wxPanel(ami.MainFrame)
      #sbox = wx.wxStaticBox(&::panel,-1,"VTK-based isosurface visualization.")
      ::sbox_sizer = wx.wxBoxSizer(wx.wxVERTICAL)
      ::panel.SetSizer(::sbox_sizer)
      # create widget here

      ::renwin_interact = wxvtk.wxVTKRenderWindowInteractor(::panel,wx.wxID_ANY)
      ::sbox_sizer.Add( ::renwin_interact, \
                        wx.wxSizerFlags().Expand().Proportion(1) )

      #::renwin_interact = wxvtk.wxVTKFrame(&panel,-1)

      ::renwin_interact.UseCaptureMouseOn()
      ::renwin_interact.Enable(true)
      ::renwin_interact.Initialize()

      ::renwin_interact.SetMinSize(&wx.wxSize(50,50))
      # Still drawing problem (missed exposed events???)
      ::renwin_interact.SetBackgroundColour(wx.wxColour(255,255,255))
      #::AttachRenWinInt()

      ::icons.LoadIconPNG2("Transparent background","Transparent_background")

      # Add to main book
      mb.AddPage( ::panel,  "vtkIsoSurface",1, \
                  wx.wxBitmap(&::icons._Transparent_background.Scale(16,16)))
      ::volren_pageindex = mb.GetPageIndex(&::panel)
      #mb.SetSelection(::volren_pageindex)

      ::renwin_interact.Show()
      ::panel.Show()
      ::renwin_interact.Update()
      ::panel.Update()

      # Create renderer 
      ::CreateRenderer(&::renwin_interact)
      ::SetRendererBg()
      ::renderer.ResetCamera()

      # Set gui info
      ::vtk_renderer_gui.SetRenderer(::renderer)

      ::vtk_camera_gui.SetCamera(::renderer.GetActiveCamera())
      ::vtk_camera_gui.SetCallback(::CameraCallback)
    }

    ##----------------------------
    #proc ::AttachRenWinInt()  \
    #{
      #::renwin_interact.Reparent(&::panel)
    #}

    #----------------------------
    proc ::DetachRenWinInt()  \
    {
      ::sbox_sizer.Detach(&::renwin_interact)
      ::renwin_interact.Hide()
      return = &::renwin_interact
    }

    #----------------------------
    proc ::Attach( OBJECT obj)  \
    {
      obj.Reparent(&::panel)
      ::sbox_sizer.Add(&obj, wx.wxSizerFlags().Expand().Proportion(1) )
      obj.Show()
    }

    #----------------------------
    proc ::Detach( OBJECT obj)  \
    {
      ::obj.Hide()
      ::sbox_sizer.Detach(&obj)
      return = &obj
    }


    #----------------------------
    proc ::MainBook_CloseTab()  \
    {
      if (exists(::volren_pageindex)){
        mb = ami.MainFrame.GetMainBook()
        mb.DeletePage(::volren_pageindex)
      }
    }

    #----------------------------
    proc ::GetSnapshot()  \
    {    
       capturefilter = vtk.vtkWindowToImageFilter.New()
       capturefilter.SetInput( &::renwin)
       capturefilter.Update()
       resim = vtktools.FromVtkImageData( &capturefilter.GetOutput())
       ::capture <<= Flip(resim,1)
    }

    #----------------------------
    proc ::CameraCallback() \
    {
      ::renwin_interact.Render()
    }

    #----------------------------
    proc ::Vol1PropertyCallback() \
    {
      ::renwin_interact.Render()
    }

    #----------------------------
    proc ::Vol2PropertyCallback() \
    {
      ::renwin_interact.Render()
    }

    #----------------------------
    proc ::ChangeView()  \
    {    
      ::renderer.GetActiveCamera().Azimuth(::azimuth)
      ::renwin.Render()
      ::renwin_interact.Render()
    }
    Comments(::ChangeView,"Applies the user-given transformation to the camera.")

    #----------------------------
    proc ::ResetView()  \
    {    
      ::renderer.ResetCamera()
      ::renwin.Render()
      ::renwin_interact.Render()
    }
    Comments(::ChangeView,"Resets the camera.")

    #----------------------------
    proc ::BackupView()  \
    {    
      if (!exists(::cam_backup)) {
        ::cam_backup = vtk.vtkCamera.New()
      }
      ::cam_backup.DeepCopy(&::renderer.GetActiveCamera())
    }
    Comments(::BackupView,"Backups the current camera.")

    #----------------------------
    proc ::RestoreView()  \
    { 
      if (exists(::cam_backup)) {
        camcopy = vtk.vtkCamera.New()
        camcopy.DeepCopy(&::cam_backup)
        ::renderer.SetActiveCamera(&camcopy)
        ::renwin.Render()
        ::renwin_interact.Render()
      } else {
        InfoDialog "No camera backed up!"
      }
    }
    Comments(::RestoreView,"Restores the last backed up camera.")

    #----------------------------
    # Redefinition of Close to close the panel tab in main_book
    #
    proc ::Close() {
      ::MainBook_CloseTab()
      ::win.HidePanel()
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")

    #----------------------------
    proc ::Gui() {
    
      # parameters window
      if (exists(::parent_panel)) {
        ::win = ParamPanel("vtkIsoSurface",&::parent_panel)
      } else {
        ::win = ParamPanel("vtkIsoSurface")
      }
      
      #::win.BeginHorizontal()
      #  ::AddBitmapButton16(&::win, &::icons._Show, "StartNew")
      #  ::win.SetPositionProp(1)
      #  ::icons.LoadIconPNG("Add")
      #  ::AddBitmapButton16(&::win, &::icons._Add, "AddVolume2")
      #  ::win.SetPositionProp(1)
      #::win.EndHorizontal()

      ::win.BeginBook()
    
        ::win.AddPage("IO")
          # set the input image drawing window
          ::win.BeginBoxPanel("Input")
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::AddBitmapButton16(&::win, &::icons._Refresh, "ImReload")
              #::win.AddButton( "ImReload",&::ImReload)
            ::win.EndHorizontal()
            ::input_size_id = ::win.AddLabel("Size:",::input_size)
          ::win.EndBoxPanel()

          ::win.BeginBoxPanel("Second Volume")
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input2_name, "")
              ::AddBitmapButton16(&::win, &::icons._Refresh, "ImReload2")
              #::win.AddButton( "ImReload",&::ImReload)
            ::win.EndHorizontal()
            ::input2_size_id = ::win.AddLabel("Size:",::input2_size)
          ::win.EndBoxPanel()


        ::win.AddPage("Volumes")

          ::win.BeginBook()
            ::vol1_page = ::win.AddPage("Vol1")
              ::vol1threshold_id = ::win.AddFloat(::vol1_threshold,"Th",0,255)
              ::win.AddButton("Apply",::ApplyVol1)
              ::vtk_property1_gui.AddGui(::win)

            ::vol2_page = ::win.AddPage("Vol2")
              ::vol2threshold_id = ::win.AddFloat(::vol2_threshold,"Th",0,255)
              ::win.AddButton("Apply",::ApplyVol2)
              ::vtk_property2_gui.AddGui(::win)
          ::win.EndBook()

        ::win.AddPage("Scene")
          #::win.BeginBoxPanel("Background")
            #::win.BeginHorizontal()
              #::win.AddColor("Color",&::background_color)
              #::win.SetCallback(&::SetRendererBg)
              #::win.AddColor("Color 2",&::background_color2)
              #::win.SetCallback(&::SetRendererBg)
            #::win.EndHorizontal()
            #::win.AddBoolean(&::UseGradientBackground,"Gradient")
            #::win.SetCallback(&::SetRendererBg)
          #::win.EndBoxPanel()
          
          ::win.BeginBoxPanel("Snapshot")
            ::win.AddButton("Get",&::GetSnapshot)
          ::win.EndBoxPanel()

          ::vtk_camera_gui.AddGui(&::win)

          ::vtk_renderer_gui.AddGui(&::win)

          #::win.BeginBoxPanel("Camera control")
            #::win.AddInt(&::azimuth,"azimuth",-180,180)
            #::win.BeginHorizontal()
              #::win.AddButton("Apply",&::ChangeView)
              #::win.AddButton("Reset",&::ResetView)
            #::win.EndHorizontal()
            #::win.BeginHorizontal()
              #::win.AddButton("Backup", &::BackupView)
              #::win.AddButton("Restore",&::RestoreView)
            #::win.EndHorizontal()
          #::win.EndBoxPanel()

          #::win.AddButton("Start",   ::Start)
          #::icons.LoadIconPNG("Play")
  
        #::win.AddPage("Viewer")
          #d = ::win.CurrentParent()
          #::renwin_interact = wxvtk.wxVTKRenderWindowInteractor(&d)
          #::renwin_interact.SetMinSize(&wx.wxSize(100,400));
          #::sizer_item = ::win.AddWidget(&::renwin_interact,0)

      ::win.EndBook()


      ::AddStandardButtons(&::win)
      
      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::win.Update(-1)
      #    ::renwin_interact = wxvtk.wxVTKFrame()
      ::MainBook_AddvtkIsoSurfaceTab()
   }

    ::Init()
  } 
  # Class vtkIsoSurfaceClass
  Comments( vtkIsoSurfaceClass, comments)
} 
# end if (!exists(vtkIsoSurfaceClass))
  
  

