

#-------------------------------------------------------------------------------
# Scripting language vector class
# should soon be totally replaced by VNL vectors, once the template functions
# and operators can be wrapped ...
#

del VectorClass

Class VectorClass {

  #=======================================
  #===========Procedure Init==============
  #======================================= 
  proc ::Init() {
    ::v = vector_double(3,0)
  }

  proc ::Init_3( NUM vx, NUM vy, NUM vz) {
    ::v[0] = vx
    ::v[1] = vy
    ::v[2] = vz
  }

  # Initialize from another std::vector
  # Parameters:
  #  - v :use except another std::vector as input
  proc ::Init_vec( OBJECT v) \
  {
    del ::v
    ::v = v
  }

  # Initialize from a pointer
  proc ::Init_ptr( NUM n, VAR ptr) \
  {
    ::v.resize(n,0)
    for i=0 to n-1 {
      ::v[i] = ptr[i]
    }
  }

  proc ::Init_ptr2( NUM nmin, NUM nmax, VAR ptr) \
  {
    ::v.resize(nmax-nmin+1,0)
    for i=nmin to nmax {
      ::v[i-nmin] = ptr[i]
    }
  }

  proc ::size() { return=::v.size(); }
  
  #=======================================
  #===========Procedure Copy==============
  #=======================================
  proc ::__copy__() {
    #printn "_copy_"
    ::VectorClass newvect
    newvect.v = ::v
    return = &newvect
  }

  #=======================================
  #===========Procedure Assign============
  #=======================================
  proc ::__assign__(OBJECT v1) {
    #printn "_assign_"
    ::v = v1.v
  }

  #=======================================
  #===========Procedure At================
  #=======================================
  proc ::__at__(NUM n) {
    #print "_at_"
    return = &::v[n]
  }

  #=======================================
  #===========Procedure Postinc===========
  #=======================================
  proc ::__postinc__() {
    #printn "_postinc_"
    for n=0 to ::v.size()-1 {
      ::v[n]++
    }
   }

  #=======================================
  #=======Procedure Addition of vectors===
  #=======================================
  proc ::__add__( OBJECT v2) {
    # VectorClass is automatically included as a member
    ::VectorClass newvect
    #printn "_postinc_"
    for n=0 to newvect.v.size()-1 {
      newvect.v[n] = ::v[n]+v2.v[n]
    }
    return=&newvect
  }

  #=======================================
  #======Procedure Substract of vectors===
  #=======================================
  proc ::__substract__( OBJECT v2) {
    ::VectorClass newvect
    #printn "_postinc_"
    for n=0 to newvect.v.size()-1 {
      newvect.v[n] = ::v[n]-v2.v[n]
    }
    return=&newvect
   }

  #=======================================
  #==Procedure Product vector and number==
  #=======================================
  proc ::__mult__( NUM x) {
    ::VectorClass newvect
    #printn "_postinc_"
    for n=0 to newvect.v.size()-1 {
      newvect.v[n] = ::v[n]*x
    }
    return=&newvect
  }

  #=======================================
  #==Procedure Product vector and number==
  #=======================================
  proc ::__div__( NUM x) {
    ::VectorClass newvect
    #printn "_postinc_"
    for n=0 to newvect.v.size()-1 {
      newvect.v[n] = ::v[n]/x
    }
    return=&newvect
  }

  #=======================================
  #===========Procedure vect    ==========
  #=======================================
  proc ::vect(OBJECT v2) {
    #printn "ProdVect"
    ::VectorClass newvect
    newvect.v[0] = ::v[1]*v2.v[2]-::v[2]*v2.v[1]
    newvect.v[1] = ::v[2]*v2.v[0]-::v[0]*v2.v[2]
    newvect.v[2] = ::v[0]*v2.v[1]-::v[1]*v2.v[0]
    return= &newvect
  }

  #=======================================
  #===========Procedure dot     ==========
  #=======================================
  proc ::dot(OBJECT v2) {
    #printn "ProdEsc"
    
    return = ::v[0]*v2[0]+::v[1]*v2[1]+::v[2]*v2[2]
  }

  #=======================================
  #===========Procedure Norma=============
  #=======================================
  proc ::Norm() {
    #printn "Norma"
    return = sqrt(::v[0]*::v[0]\
          +::v[1]*::v[1]\
          +::v[2]*::v[2])
  }

  #=======================================
  #===========Procedure Normalize=========
  #=======================================
  proc ::Normalize() {
    #printn "Normalize"
    ::VectorClass newvect
    newvect.v = ::v
    n = ::Norm()
    newvect.v[0] /=n
    newvect.v[1] /=n
    newvect.v[2] /=n
    return = &newvect
    #printn "Normalize end"
  }

  #=======================================
  #===========Procedure Parallel==========
  #=======================================
  proc ::Parallel(OBJECT v2) {
    #printn "Parallel"
    x = ::dot(v2)	
    mod_v = ::Norm()
    mod_v2 = v2.Norm()
      cosA = x/(mod_v*mod_v2)
    
    if (cosA) {
      return = 1
    } \
    else \
      {
      return = 0
    }
   }

  #=======================================
  #===========Procedure Angle=============
  #=======================================
  proc ::Angle(OBJECT v2) {
    #printn "Angle"
    x = ::ProdEsc(v2)	
    mod_v = ::Norm()
    mod_v2 = v2.Norm()
          cosA = x/(mod_v*mod_v2)
    
    return = cosA
  }

  #=======================================
  #===========Procedure Print=============
  #=======================================
  proc ::Print() {
    #printn "Print"
    for n=0 to ::v.size()-1 {
      printn "%1%, " % ::v[n]
    }
    printn ""
   }

   ::Init()
}

