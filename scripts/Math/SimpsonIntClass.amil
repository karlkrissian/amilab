
func "StringFunctionClass"

del SimpsonIntClass
Class SimpsonIntClass : public StringFunctionClass\
{
  func "StringFunctionClass"
  # included by inheritence ... no ...
  ::StringFunctionClass = &StringFunctionClass

  ::debug=false
  # redefine ::varname here?
  del ::varname
  ::varname = "x", "Main variable name in case of a function"
  ::type = INT(0), "0: single integral, 1: double integral"

  #-----------------------------------------------------------------------------
  proc ::DebugPrint(STRING s) \
  {
    if (::debug) {
      printn s
    }
  }

  #-----------------------------------------------------------------------------
  proc ::SetType(NUM t) \
  {
    ::type = t
  }
  
  #-----------------------------------------------------------------------------
  proc ::SetFunction(VAR f) \
  {
    ::function = f
  }
  
  #-----------------------------------------------------------------------------
  proc ::GetFunction() \
  {
    return  = &::function
  }
  
  #-----------------------------------------------------------------------------
  proc ::SetString(STRING f_str) \
  {
    if (!exists(::function)) {
      ::StringFunctionClass ::function
    }
    ::function.SetFunctionString(f_str)
  }
  
  #-----------------------------------------------------------------------------
  # the factor is the common part that can be factorized out of the integral
  proc ::SetFactorString(STRING f_str) \
  {
    if (!exists(::factor_func)) {
      ::StringFunctionClass ::factor_func
    }
    ::factor_func.SetFunctionString(f_str)
  }
  
  #-----------------------------------------------------------------------------
  proc ::SetFirstVariable(STRING vname, NUM vmin, NUM vmax, NUM vn) \
  {
    ::vname    = vname
    ::vmin     = vmin
    ::vmax     = vmax
    ::vn       = vn
  }
  
  #-----------------------------------------------------------------------------
  proc ::SetSecondVariable(STRING uname,STRING umin_str,STRING umax_str,NUM un)\
  {
    ::uname    = uname
    ::umin_str = umin_str
    ::umax_str = umax_str
    ::un       = un
  }
  
  #---------------------------------------------------------------------------
  # adding the variable to the object context
  #
  proc ::AddParam(STRING pname, VAR value) \
  {
    ::function.AddParam(pname,value)
    if (exists(::factor_func)) {
      ::factor_func.AddParam(pname,value)
    }
  }

  #---------------------------------------------------------------------------
  # setting/adding the variable to the object context
  #
  proc ::SetParamValue(STRING pname, VAR value) \
  {
    ::function.SetParamValue(pname,value)
    if (exists(::factor_func)) {
      ::factor_func.SetParamValue(pname,value)
    }
  }

  #---------------------------------------------------------------------------
  # Name of the main variable
  #
  proc ::SetVarName(STRING v) \
  {
    ::varname = v
  }

  #-----------------------------------------------------------------------------
  proc ::Eval(VAR x)\
  {
    ::function.AddParam(::varname,x)
    if (::type==0) {
      ::function.SetVarName(::vname)
      return = ::Run(::function, ::vmin, ::vmax, ::vn)
    } else {
      if (::type==1) {
        return = ::RunDouble0()
      }
    }
    if (exists(::factor_func)) {
      ::factor_func.AddParam(::varname,x)
      return = return * ::factor_func(x)
    }
  }
  
  #-----------------------------------------------------------------------------
  proc ::RangeImage(NUM i, NUM j) \
  {
    # not very efficient but ok for now
    return = (DOUBLE) Xpos(Image(UCHAR,j-i+1,1,1))+i
  }

  #-----------------------------------------------------------------------------
  proc ::Sum(IMAGE i) \
  {
    sumop = ami_Sum()
    return = sumop(i)
  }

  #-----------------------------------------------------------------------------
  #
  # Compute simple Simpson integral, based on a function of 'x' given as a string
  # will use n intervals and 2*n values
  # optimized for scalar function
  #
  proc ::RunScalar(VAR function, NUM xmin, NUM xmax, NUM n) \
  {
    # check wikipedia http://en.wikipedia.org/wiki/Simpson%27s_rule
    # the integral can be written as a sum of 4 terms:
    # h=(xmax-xmin)/n
    # h/3* (f(xmin)+f(xmax)+4.sum_{k in [0..n-1]} f(xmin+h/2+kh) 
    # + 2.sum_{k in [1..n-1] f(xmin+kh))

    h = ((DOUBLE) xmax - xmin)/n
    fmin = function((DOUBLE)xmin)
    fmax = function((DOUBLE)xmax)
    sumval = fmin+fmax

    ::DebugPrint( "sumval(1) = %1%" % sumval)

    # here adding a 1D image to a 2D image ??
    pos     = xmin+h/2+::RangeImage(0,n-1)*h
    ::DebugPrint( "min(pos) = %1% " % min(pos))
    ::DebugPrint( "max(pos) = %1% " % max(pos))
    values  = function(pos)

    #global::pos <<= pos
    #show global::pos

    #global::val1 <<= values
    #show global::val1

    # now we need the sum of the values
    sumval  += ::Sum(values)*4
    ::DebugPrint( "sumval(2) = %1%" % sumval)

    pos     <<= xmin+::RangeImage(1,n-1)*h
    ::DebugPrint( "min(pos) = %1% " % min(pos))
    ::DebugPrint( "max(pos) = %1% " % max(pos))
    values  <<= function(pos)
    # now we need the sum of the values
    sumval  +=  ::Sum(values)*2
    ::DebugPrint( "sumval(3) = %1%" % sumval)

    return = sumval*h/6
  }

  #-----------------------------------------------------------------------------
  #
  # Compute simple Simpson integral, based on a function of 'x' given as a string
  # will use n intervals and 2*n values
  # run on any variable type that allows numerical operations (like images)
  #
  proc ::RunGeneral(VAR function, NUM xmin, NUM xmax, NUM n) \
  {
    ::DebugPrint("::RunGeneral() begin")

    # check wikipedia http://en.wikipedia.org/wiki/Simpson%27s_rule
    # the integral can be written as a sum of 4 terms:
    # h=(xmax-xmin)/n
    # h/3* (f(xmin)+f(xmax)+4.sum_{k in [0..n-1]} f(xmin+h/2+kh) 
    # + 2.sum_{k in [1..n-1] f(xmin+kh))

    h = ((DOUBLE) xmax - xmin)/n
    fmin = function((DOUBLE)xmin)
    fmax = function((DOUBLE)xmax)
    sumval = fmin+fmax

    # here adding a 1D image to a 2D image ??
    pos = (DOUBLE)xmin+h/2
    for k=0 to n-1 {
      sumval += 4*function(pos)
      pos += h
    }

    pos = (DOUBLE)xmin+h
    for k=1 to n-1 {
      sumval += 2*function(pos)
      pos += h
    }

    return = sumval*h/6
    ::DebugPrint("::RunGeneral() end")

  }

  #-----------------------------------------------------------------------------
  proc ::Run(VAR function, NUM xmin, NUM xmax, NUM n) \
  {
    ::DebugPrint("::Run() begin")
    # check function type
    r = function(0)
    if (language.WrapVariable(r).IsNumeric()) {
      return = ::RunScalar(function,xmin,xmax,n)
    } else {
      return = ::RunGeneral(function,xmin,xmax,n)
    }
    ::DebugPrint("::Run() end")
  }

  #-----------------------------------------------------------------------------
  #
  # Compute simple Simpson integral, based on a function of 'x' given as a string
  # will use n intervals and 2*n values
  #
  proc ::RunString(STRING fstring, STRING varname, NUM xmin, NUM xmax, NUM n) \
  {
    ::StringFunctionClass function
    function.SetVarName       (varname)
    function.SetFunctionString(fstring)
    return = ::Run(function.Eval,xmin,xmax,n)
  }


  #-----------------------------------------------------------------------------
  #
  # Compute Simpson double integral, based on a function of 'x' given as a string
  # will use n intervals and 2*n values
  #
  proc ::IntegrateU( VAR function, NUM vval)\
  {
    ::DebugPrint( "::IntegrateU ( .., %1%)" % vval)
    function.SetParamValue(::vname,vval)
    eval "%1% = vval;"     % ::vname
    eval "umin = %1%;" % ::umin_str
    eval "umax = %1%;" % ::umax_str
    return = ::Run(function.Eval,umin,umax,::un)
    #::debug=true
    ::DebugPrint("::IntegrateU(function,%1%) = " % vval + "%1%" % return)
    #::debug=false
    ::DebugPrint("::IntegrateU ( .., %1%) end" % vval)
  }


  
  #-----------------------------------------------------------------------------
  #
  # Compute Simpson double integral, based on a function of 'varname' given 
  # as a string will use n intervals and 2*n values
  #
  proc ::RunDouble0()\
  {
    ::DebugPrint("::RunDouble0() begin")

    ::DebugPrint("::RunDouble0() 1")
    ::function.SetVarName       (::uname)
    ::function.AddParam(::vname,0)

    ::DebugPrint("::RunDouble0() 2")
    h = ((DOUBLE) ::vmax - ::vmin)/::vn
    fmin = ::IntegrateU(::function,::vmin)
    fmax = ::IntegrateU(::function,::vmax)
    sumval = fmin+fmax

    ::DebugPrint("::RunDouble0() 3")
    # here adding a 1D image to a 2D image ??
    pos = ::vmin+h/2
    for k=0 to ::vn-1 {
      ::DebugPrint( "pos = %1%" % pos)
      sumval += 4*::IntegrateU(::function,pos)
      pos += h
    }

    ::DebugPrint("::RunDouble0() 4")
    pos = ::vmin+h
    for k=1 to ::vn-1 {
      ::DebugPrint( "pos = %1%" % pos)
      sumval += 2*::IntegrateU(::function,pos)
      pos += h
    }
    #sumval.info
    return = sumval*h/6
  }

  #-----------------------------------------------------------------------------
  #
  # Compute Simpson double integral, based on a function of 'varname' given 
  # as a string will use n intervals and 2*n values
  #
  proc ::RunDouble( VAR function, \
                     STRING vname, NUM vmin,          NUM vmax,         NUM vn,\
                     STRING uname, STRING umin_str,   STRING umax_str,  NUM un)\
  {
    ::DebugPrint("::RunDouble() begin")
    ::SetFunction       (function)
    ::SetFirstVariable  (vname,vmin    ,vmax,    vn)
    ::SetSecondVariable (uname,umin_str,umax_str,un)

    return = ::RunDouble0()
  }
  
  
  #-----------------------------------------------------------------------------
  # Compute Simpson double integral, based on a function of 'varname' given 
  # as a string will use n intervals and 2*n values
  #
  proc ::RunDoubleString( STRING fstring, \
                          STRING vname,NUM vmin,       NUM vmax,       NUM vn,\
                          STRING uname,STRING umin_str,STRING umax_str,NUM un)\
  {
    ::StringFunctionClass function
    function.SetFunctionString(fstring)
    return = ::RunDouble(function,vname,vmin,vmax,vn,uname,umin_str,umax_str,un)
  }
  
  #-----------------------------------------------------------------------------
  proc ::RunTests() \
  {
    epsilon = 1E-5

    printn "Checking int_0^1 \int_0^v e^u du dv = exp(1)-2 "
    res = ::RunDoubleString("exp(u)","v",0,1,10,"u","0","v",10)
    res_ideal = exp(1)-2
    diff = res-res_ideal
    if (abs(diff)<epsilon) {
      printn "Test passed: diff = %1%" % diff
    } else {
      printn "Test failed: diff = %1%" % diff
    }
  }

}

proc SimpsonInt(STRING fstring, STRING varname, NUM xmin, NUM xmax, NUM n) \
{
  # should be in another file and call func ...
  global::SimpsonIntClass sic

  proc function(NUM _x) {
    eval "%1% = &_x;" % ::varname
    eval "return = %1%;" % fstring
  }

  return = sic.Run(&function, xmin,xmax,n)
}
