
if (!exists(MinSearchClass)) {

  Class MinSearchClass {

    proc ::Init() {
      ::eval_string = "res = (P1-10)*(P1-10)", "Evaluation string, defines the function to minimize and uses 'P1', 'P2', ... as input value and 'res' as resulting value"

      ::P1min   = 0, "Minimal value, 1st parameter"
      ::P1max   = 1, "Maximal value, 1st parameter"
      ::P1nbits = INT(4), "number of iteration of dichotomial method, 1st parameter"
      ::P1inc   = 0.2, "increment for grid method, 1st parameter"

      ::P2min   = 0, "Minimal value, 2nd parameter"
      ::P2max   = 1, "Maximal value, 2nd parameter"
      ::P2nbits = INT(4), "number of iteration of dichotomial method, 2nd parameter"
      ::P2inc   = 0.2, "increment for grid method, 2nd parameter"

      ::result_string = "", "Display (param,value) at minimum"

      ::CreateWindow()
    }

    #----------------------------
    proc ::Close() \
    {
      ::win.Hide
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
    
    #----------------------------
    proc ::CloseAll() \
    {
      ::Close
      if (exists(MinSearchClass)) { del MinSearchClass; }
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    #
    # Simple procedure to find the minimum of a function
    #
    proc ::EvalFunction( NUM P1, NUM res ) {
      #res = (input-10)*(input-10)
      eval ::eval_string
      print sprint("%2.2f --> ",P1)+sprint("%2.2f\n",res);
    }
    
    
    #------------------------------------
    proc ::MinGrid() {
    #      -------
      _nval=(::P1max-::P1min)/::P1inc
      ::values <<= Image(DOUBLE,_nval+1,1,1)
      ::values = 0
      _val = 0
      for _n=0 to _nval { 
        _x = ::P1min+::P1inc*_n
        ::EvalFunction(_x,&_val)
        ::values.setpos(_n,0,0)
        ::values.set(_val)
        if (_n==0) {
          ::xmin = _x
          ::valmin = _val
        } else {
          if (_val<::valmin) {
            ::xmin = _x
            ::valmin = _val
          }
        }
      } 
      # end for _n
    
      ::result_string = boost_format("%1%, ")%::xmin
      ::result_string =  ::result_string + boost_format("%1%")%::valmin
      ::win.update
    
    }
    ::MinGrid.Comments("Simple procedure to find the minimum of a function by scanning a regular grid")


    #
    # Simple procedure to find the minimum of a function
    #
    proc ::MinDichotomy() {
    #    --------------
    #
      v0=0; v1=0; v2=0;
      v=0;
      _step=(::P1max-::P1min)/2.0
    
      ::EvalFunction(::P1min,&v0)
      ::EvalFunction(::P1min+_step,&v1)
      ::EvalFunction(::P1max,&v2)
    
      current=::P1min+_step
    
      for _n=0 to ::P1nbits { 
    
      # different configurations  
      if (v0<v1) {
        if ((current-2*_step)>::P1min) {
          v2=v1
          v1=v0
          current=current-_step
          ::EvalFunction(current-_step,&v0)      
        } else {
          v2=v1
          _step=_step/2.0
          current=current-_step
          ::EvalFunction(current,&v1)
        }
      } else {
        if ((v1<v0)&&(v1<v2)) {
          _step=_step/2
          ::EvalFunction(current-_step,&v0)
          ::EvalFunction(current+_step,&v2)
        } else {
          if (v2<v1) {
            if ((current+2*_step)<::P1max) {
              v0=v1
              v1=v2
              current=current+_step
              ::EvalFunction(current+_step,&v2)      
            } else {
              _step=_step/2
              current=current+_step
              v0=v1
              ::EvalFunction(current,&v1)     
            }
          }
        }
      }
    
      } // for
    
    
      print sprint("x=     %2.3f \t",current-_step)
      print sprint("%2.3f \t",current)
      print sprint("%2.3f \n",current+_step)
    
      print sprint("values %2.3f \t",v0)
      print sprint("%2.3f \t",v1)
      print sprint("%2.3f \n",v2)
    
      ::result_string = boost_format("%1%, ")%current
      ::result_string =  ::result_string + boost_format("%1%")%v1
    
    }
    ::MinDichotomy.Comments("Simple procedure to find the minimum of a function by dichotomy.")

    proc ::CreateWindow() \
    {
      # parameters window
      ::win = ParamWin("MinSearch")
      
      ::win.BeginBook
        ::win.AddPage("Parameters")
          ::win.AddString(::eval_string,"E")

          ::win.BeginBook
            ::win.AddPage("P1")
              ::win.BeginBoxPanel("1st parameter")
                ::win.AddFloat(::P1min,"min",0,100)
                ::win.AddFloat(::P1max,"max",0,100)
                ::win.AddFloat(::P1inc,"inc",0,100)
                ::win.AddInt(::P1nbits,"iter",1,10)
              ::win.EndBoxPanel
  
            ::win.AddPage("P2")
              ::win.BeginBoxPanel("2nd parameter")
                ::win.AddFloat(::P2min,"min",0,100)
                ::win.AddFloat(::P2max,"max",0,100)
                ::win.AddFloat(::P2inc,"inc",0,100)
                ::win.AddInt(::P2nbits,"iter",1,10)
              ::win.EndBoxPanel
          ::win.EndBook

          ::win.AddString(::result_string,"res")
          ::win.AddButton("Dichotomy",::MinDichotomy)
          ::win.AddButton("Grid",     ::MinGrid)
      ::win.EndBook
      ::win.BeginHorizontal
        ::win.AddButton("Close",      ::Close)
        ::win.AddButton("Close All",  ::CloseAll)
      ::win.EndHorizontal
      
      ::win.update
      ::win.Display
    }

    ::Init

  }
  # end class MinSearchClass
}

#----------------------------
# Main
#----------------------------

if (!exists(minsearch)) {

  MinSearchClass minsearch
  
  if (argc>=1) {
    printn "reading image"
    minsearch->eval_string = $1
    minsearch->win.update
  }

} else {
  InfoDialog "The script seems to be already loaded."
}

