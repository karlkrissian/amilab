#
# Class that parses the members of an AMILab scripting object
# and automatically writes the values of specific members (of predefined types)
# to a text file
# that can be automatically loaded with the function ReadFile(filename)
#

del WriteAmiObjectClass

Class WriteAmiObjectClass {

  proc ::Init() \
  {
    # list of types to accept
    ::accept = VarVector()
      ::accept.push_back("int")
      ::accept.push_back("float")
      ::accept.push_back("double")
      ::accept.push_back("bool")
      ::accept.push_back("unsigned char")
      ::accept.push_back("std::string")

    ::writeformat = VarVector()
      ::writeformat.push_back("%1%")
      ::writeformat.push_back("%1%")
      ::writeformat.push_back("%1%")
      ::writeformat.push_back("%1%")
      ::writeformat.push_back("%1%")
      ::writeformat.push_back("\"%1%\"")

    # list of variable name to ignore
    ::ignore = VarVector()
      ::ignore.push_back("classname")
      ::ignore.push_back("classfilename")
      ::ignore.push_back("objectfilename")
  }

  #proc ::ReadFile( STRING filename) \
  #{
    #func filename
  #}
  
  
  # Filter variables based on their comments
  proc ::SetCommentsFilter(STRING _filter) \
  {
    re = wx.wxRegEx(_filter,wx.wxRE_ADVANCED)
    if (!re.IsValid()) {
      InfoDialog "WriteAmiObject::SetCommentFilter(%1%) filter not valid" \
              % _filter
    } else {
      del ::comments_filter
      ::comments_filter = &re
    }
  }
  

  # Writes a context
  proc ::WriteFileContext( OBJECT oc, STRING filename) \
  {
    f = File(filename,"w")
    f._printn("#")
    f._printn("# Saving structure %1%" % ::classname)
    f._printn("#")
    # list variables in the context
    for n=0 to oc.GetSize()-1 {
      comments = oc[n].GetComments()
      filter_passed = true
      if exists(::comments_filter) {
        filter_passed = ::comments_filter.Matches(comments)
      }
      if filter_passed {
        name  = oc[n].Name()
        type  = oc[n].GetTypeName()
        value = oc[n].GetValueAsString()
        printn "name: %1%" % name + "\ttype: %1%" % type + "\tvalue: %1%" % value
        name_ok = true
        for k=0 to ::ignore.size()-1 {
          name_ok = name_ok && (name!=::ignore[k])
        }
        type_ok = false
        for k=0 to ::accept.size()-1 {
          accept = (type==::accept[k])
          if accept { type_id = k; }
          type_ok = type_ok || accept
        }
        if name_ok && type_ok {
          printn "format='%1%'" % ::writeformat[type_id]
          res = "# %1%" % comments
          f._printn("  "+res)
          res = "::%1%" % name + " = "+ \
                  ::writeformat[type_id] % value
          printn "****  '%1%'" % res 
          f._printn("  "+res)
        }
      }
    }
  }

  # Write a amiobject variable
  proc ::WriteFile( OBJECT var, STRING filename) \
  {
    # 1. wrap the variable
    wv = language.WrapVariable(var)
    # 2. convert it to Variable<AMIObject>
    ov = language.Variable_AMIObject.DynCast(wv)
    # 3. get the AMIObject context
    oc = ov.Pointer().GetContext()

    #oc = language.Vars.GetObjectContext()
    ::WriteFileContext(oc,filename)
  }
  
  ::Init()
}

# Create an instance of the class 
del WriteAmiObject
WriteAmiObjectClass WriteAmiObject
del WriteAmiObjectClass
