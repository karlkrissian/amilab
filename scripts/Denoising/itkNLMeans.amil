
func "Common/ScriptGui"

if (!exists(itkNLMeansClass)) {
  
  ami_import->ITK()
  
  Class itkNLMeansClass  : public ScriptGui{
    
    ::itk=&global::itk
    
    proc ::Init() \
    {
      ::input_name   = "","Name of the input image variable"
      # t
      ::searching_window = INT(7), "Searching window size."
      # f
      ::pattern_window = INT(3), "Pattern window size."
      ::threshold = 10, "Threshold for distance."
      ::noise = INT(0), "Noise type: additive Gaussian or Rician."
      ::dim = INT(1), "The dimension of the image."

      ::inputmin = 0, "Minimal Intensity of the image."
      ::inputmax = 32000, "Maximal Intensity of the image."

      ::nonl_filename = "NonLocalResult"
      ::result_filename_ext = ".ami.gz"
      ::n = UCHAR(0)

      ::Gui()
    }
    
    
    proc ::Load_input() \
    {

      eval "::input <<= (FLOAT)"+::input_name+";"
        if (::input_name=="Image") {
          ::input_name = "input"
          ::win.Update(-1)
        }

      ::inputmin = min(::input)
      ::inputmax = max(::input)

      show ::input
    }
    
    proc ::Run() \
    {
      if (::dim==0) {
        ::nlm = ::itk->BasicNLMeans2D(::input,::searching_window,::pattern_window,::threshold,::noise)
        ::n = 1			
      } else {
        ::nlm = ::itk->BasicNLMeans3D(::input,::searching_window,::pattern_window,::threshold,::noise)
        ::n = 1
      }
    } 
    
    proc ::Display() {
    
      show ::input
      show ::nlm
      ::input_draw.compare(::nlm_draw)
    
    }
    
    proc ::Save() \
    {
      filename=::nonl_filename-".gz"-".ami";
      if (::g) {
        filename = filename + sprint("_standDev%0.0f",::stand)
      } else {
        print "First you must create the image.\n"
      }
      filename = filename + ::result_filename_ext
      print "saving file "+filename+"\n"
      ::nlm.save filename
    }
  
    proc ::Gui() \
    {
      import = &global::ami_import;
      ::win = import->ParamPanel("itkNL-Means")
      ::win.BeginBook()
      
        ::win.AddPage("Init")
        
        ::win.BeginBoxPanel("Input Image")
            # set the input image
            ::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::Load_input)
            ::win.EndHorizontal()
            ::win.BeginHorizontal()
              dim_id = ::win.AddEnum( &::dim,"Dimension")
              ::win.AddEnumChoice(dim_id, "2D")
              ::win.AddEnumChoice(dim_id, "3D")
            ::win.EndHorizontal()
        ::win.EndBoxPanel()
        
        ::win.AddPage("Param")
        
        ::win.BeginBoxPanel("NL-Means Param")
          ::win.AddInt( &::searching_window,"Searching Window",1,30)
          ::win.AddInt( &::pattern_window,"Pattern Window",1,10)
          ::win.AddFloat( &::threshold,"Threshold",0.01,200)
          noise_id = ::win.AddEnum( &::noise,"Noise Type")
          ::win.AddEnumChoice(noise_id, "Additive Gaussian")
          ::win.AddEnumChoice(noise_id, "Rician")
        ::win.EndBoxPanel()
        
        ::win.BeginHorizontal()
          ::win.AddButton("Run",::Run)
          ::win.AddButton("Display",::Display)
          ::win.AddButton("Save",::Save)
        ::win.EndHorizontal()
        
      ::win.EndBook()
      
      ::AddStandardButtons(&::win)
      
      ::win.Update(-1)
      ::win.Display()
    }

    ::Init()
  
	}
  # Class itkNLMeansClass
}
# end if (!exists(itkNLMeansClass))

#----------------------------
# Main
#----------------------------

if (!exists(itknlm)) {

  itkNLMeansClass itknlm
  
  if (argc>=1) {
    printn "reading image"
    input = Image($1)
    itknlm->image_name = "input"
    itknlm->win.Update(-1)
  }

} else {
  InfoDialog "The script seems to be already loaded."
}
