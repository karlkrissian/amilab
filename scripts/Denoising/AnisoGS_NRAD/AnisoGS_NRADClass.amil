
func "Common/ScriptGui"

if (!exists(AnisoGS_NRADClass)) {

  Class AnisoGS_NRADClass : public ScriptGui \
  {
    # load the Level Sets Gui script
    func "QualityMeasures/ImageDifferences/ImageDifferencesClass.amil"
    ImageDifferencesClass            ::im_diff
    
    func "Variable/ObjectIO"
    #===========================================================================
    Class ::ParamClass : public ObjectIO {

        ::description = "Default parameters", \
                        "Description of the set of parameters"

        ::dt   = 1.0/6.0, "Time step for the Partial Differential Equation"
        ::t    = 2.0,     "Total diffusion time of the equation"

        ::neighborhood = INT(1),  "Size of the neighborhood for local "+\
                                  "statistics, the window size is (2n+1)^3, "+\
                                  "where n is the parameter"
  
        ::noise_estim_neigh = INT(3),  "Size of the neighborhood for the "+\
                                  "estimation of the noise STD, "+\
                                  "the window size is (2n+1)^3, "+\
                                  "where n is the parameter"
  
        ::ST_sigma1 = 0.7, "Gaussian convolution standard deviation for "+\
                        "computing the local structure (inner convolution)"

        ::ST_sigma2 = 1, "Gaussian convolution standard deviation for "+\
                        "computing the local structure (outer convolution)"

        # should be equal to ::ST_sigma2, kept for compatibility
        ::sigma = 0.7,  "Gaussian convolution standard deviation for "+\
                        "computing the local structure"

        # Local Structure 0: princ. curv 1: struct tensor
        ::local_struct = INT(1),    "Local Structure mode: either gradient "+\
                                    "and principal curvature directions, or "+\
                                    "structure tensor eigenvectors"

        # Eigenvalues mode 0: SUM 1: MAX
        ::eigen_mode = INT(0),  "Eigenvalues mode, decides how to combine "+\
                                "the diffusions along each line, plane and "+\
                                "local volume: either the sum, or the maximum "+\
                                "(default is sum)"

        ::use_linearinterp = UCHAR(0), "Use linear interpolation"
  
        # Scheme, 0: semi-implicit 1: explicit 
        ::scheme = INT(0),        "Numerical scheme: explicit or semi-implicit"
        ::run_on_roi = UCHAR(0),  "Run only on the selected region-of-interest"

        ::noise_models = VarVector()
          ::noise_models.push_back("Rician")
          ::noise_models.push_back("Additive Gaussian")
        mess = ""
        for n=0 to ::noise_models.size()-1 { 
          mess += "'%1%' " % ::noise_models[n]; 
        }
        ::noise_model = INT(0), "Statistical model of the noise (%1%)" % mess

        ::remove_bias = UCHAR(1), "Remove bias due to Rician noise model"

        ::use_new_convolution_filter = UCHAR(0), "Use new faster convolution"

        ::speedup            = UCHAR(1), "Allow speedup based on diffusion "+ \
                                          "coefficients"
        ::speedup_lowerbound = 0.5, "Lower bound to enable speedup"
        
        ::eigendecomp_modes = VarVector()
          ::eigendecomp_modes.push_back("INITIAL")
          ::eigendecomp_modes.push_back("NEW")
        mess = ""
        for n=0 to ::eigendecomp_modes.size()-1 { 
          mess += "'%1%' " % ::eigendecomp_modes[n]; 
        }
        ::eigendecomp_mode = INT(0), "Eigen decomposition mode for the structure"+\
                                     "tensor (%1%)" % mess
        ::eigen_onfly = UCHAR(0), "Compute eigenvalues on the fly"

        ::nb_threads = INT(wx.wxThread.GetCPUCount()), "Number of threads"

        ::display_evolution = UCHAR(1), "Display evolution"
        ::show_timing       = UCHAR(1), "Show timing"

        #-----------------------------------------------------------------------
        proc ::__assign__( OBJECT p) {
          printn "__assign__"
          ::t                     = p.t
          ::dt                    = p.dt
          ::neighborhood          = p.neighborhood
          ::ST_sigma1             = p.ST_sigma1
          ::ST_sigma2             = p.ST_sigma2
          ::sigma                 = p.sigma
          ::local_struct          = p.local_struct
          ::eigen_mode            = p.eigen_mode
          ::scheme                = p.scheme
          ::run_on_roi            = p.run_on_roi
          ::remove_bias           = p.remove_bias
          ::use_new_convolution_filter = p.use_new_convolution_filter
          ::speedup               = p.speedup
          ::speedup_lowerbound    = p.speedup_lowerbound
          ::eigendecomp_mode      = p.eigendecomp_mode
          ::eigen_onfly           = p.eigen_onfly
          ::nb_threads            = p.nb_threads
          ::noise_estim_neigh     = p.noise_estim_neigh
          ::use_linearinterp      = p.use_linearinterp
          ::display_evolution     = p.display_evolution
          ::show_timing           = p.show_timing
        }
        #-----------------------------------------------------------------------
        proc ::__copy__( ) {
          printn "__copy__"
          ::ParamClass newp
          newp.t                     = ::t
          newp.dt                    = ::dt
          newp.neighborhood          = ::neighborhood
          newp.ST_sigma1             = ::ST_sigma1
          newp.ST_sigma2             = ::ST_sigma2
          newp.sigma                 = ::sigma
          newp.local_struct          = ::local_struct
          newp.eigen_mode            = ::eigen_mode
          newp.scheme                = ::scheme
          newp.run_on_roi            = ::run_on_roi
          newp.remove_bias           = ::remove_bias
          newp.use_new_convolution_filter = ::use_new_convolution_filter
          newp.speedup               = ::speedup
          newp.speedup_lowerbound    = ::speedup_lowerbound
          newp.eigendecomp_mode      = ::eigendecomp_mode
          newp.eigen_onfly           = ::eigen_onfly
          newp.nb_threads            = ::nb_threads
          newp.noise_estim_neigh     = ::noise_estim_neigh
          newp.use_linearinterp      = ::use_linearinterp
          newp.display_evolution     = ::display_evolution
          newp.show_timing           = ::show_timing
          return = &newp
        }
    }

    #---------------------------------------------------------------------------
    proc ::Init() {
      
      ::input_name   = "","Name of the input image variable"

      ::result_imagename = "global::AnisoGS_NRAD_result", \
                            "Name of the resulting global variable."

      ::result_filename = "AnisoGS_NRAD_result.ami.gz", \
                        "Disk filename for the resulting image."

      ::ParamClass ::params
      ::trace_voxel = UCHAR(0)
      ::trace_voxel_x = INT(0)
      ::trace_voxel_y = INT(0)
      ::trace_voxel_z = INT(0)

      ::evaluate = UCHAR(false), "Evaluate result at each iteration"

      #::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki"+
      # "/doku.php?id=tutorial-mainalgorithms-levelset#level_set_segmentation"

      ::html_filename = op_system.GetCurrentScriptDir()+\
                        "/Doc/AnisoGS_NRAD/index.html"
    }


    #---------------------------------------------------------------------------
    proc ::load_input() {
      eval "::input <<= (FLOAT)"+::input_name+";"
      if (::input_name=="BrowseImage") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
  
      if (exists(::win)) {
        ::win.Update(-1)
      }
    }
    Comments( ::load_input, "Copies the input image in a local image "+\
                            "member named 'input'")

    #---------------------------------------------------------------------------
    proc ::set_input( IMAGE inp) \
    {
      del ::input
      ::input = &inp
    }

    #---------------------------------------------------------------------------
    proc ::ReloadInput() \
    {
      if (exists(::input)) {
        delvars "::*_draw"
        if (exists(::roi)) { del ::roi; }
        if (exists(::imbox)) { del ::imbox; }
      }
      ::load_input()
      ::Display()
    }
    Comments( ::ReloadInput, "Reload input image.")

    #---------------------------------------------------------------------------
    proc ::GetRoi() \
    {
      if (!exists(::input)) {
        ::load_input()
        ::Display()
      }
      if (exists(::input_draw)) {
        ::roi <<= ::input[::input_draw]
      }
      ::Display()
    }
    Comments( ::GetRoi, "Select the Region of Interest (ROI) for noise estimation.")

    #---------------------------------------------------------------------------
    proc ::SetRoi( IMAGE roi) \
    {
      del ::roi
      ::roi = &roi
    }
    
    #---------------------------------------------------------------------------
    proc ::FilterNRAD_Init() \
    {
      if (!exists(::input)) {
        ::load_input()
      }
      # running on the squared image
      ::squared=(::params.noise_models[::params.noise_model] == "Rician")
      del ::input1
      if ::squared {
        ::input1 <<= ::input*::input
      } else {
        ::input1 = &::input
      }
      if (::params.run_on_roi) {
        ::input1 <<= ::input1[::roi.GetExtent]
      }
      del ::NRADfilter
      ::NRADfilter = algorithms.ami_AnisoGS_NRAD.AnisoGS_NRAD()
      ::NRADfilter.Init(&::input1,::params.nb_threads)
      ::NRADfilter.SetInputIsSquared(::squared)

      if (::evaluate) {
        ::im_diff.SetInput(&::input1)
        ::im_diff.quiet = true
        ok = ::im_diff.Run()
        if (ok) {
          del ::RMSE_evol
          ::RMSE_evol = VarVector()
          for i=0 to ::im_diff.regions_info.size()-1 {
            printn "region %1%" % i
            printn "*** RMSE %1%" % ::im_diff.regions_info[i].RMSE
            del rmse
            rmse = vector_float()
            rmse.push_back(::im_diff.regions_info[i].RMSE)
            ::RMSE_evol.push_back(&rmse)
          }
        }
      }
    }

    #---------------------------------------------------------------------------
    proc ::FilterNRAD_Params() \
    {
      ::NRADfilter.Settrace_voxel(::trace_voxel)
      ::NRADfilter.Settrace_voxel_x(::trace_voxel_x)
      ::NRADfilter.Settrace_voxel_y(::trace_voxel_y)
      ::NRADfilter.Settrace_voxel_z(::trace_voxel_z)

      ::NRADfilter.Setshow_timing(::params.show_timing)

      ::NRADfilter.SetST_sigma1(::params.ST_sigma1)
      ::NRADfilter.SetST_sigma2(::params.ST_sigma2)

      if (::params.scheme==0) {
        ::NRADfilter.Setnum_scheme(algorithms.ami_AnisoGSBase.SEMIIMPLICIT)
      } else {
        ::NRADfilter.Setnum_scheme(algorithms.ami_AnisoGSBase.EXPLICIT)
      }
      # sigma = 0.7
      # threshold = 1 // not used
      # data attachment = 0
      # init must be called first since it calls InitParams() that
      # resets all the parameters
      ::NRADfilter.SetUseNewConvolutionFilter(\
          ::params.use_new_convolution_filter)
      if (::params.noise_models[::params.noise_model] == "Rician") {
        ::NRADfilter.Setnoise_model(algorithms.ami_AnisoGSBase.NOISE_RICIAN)
      }
      if (::params.noise_models[::params.noise_model] == "Additive Gaussian") {
        ::NRADfilter.Setnoise_model(algorithms.ami_AnisoGSBase.\
                                      NOISE_GAUSSIAN_ADDITIVE)
      }
      ::NRADfilter.Setnoise_estimation_neighborhood(::params.noise_estim_neigh)

      ::NRADfilter.SetUseLinearInterpolation(::params.use_linearinterp)

      # Setting speedup options
      ::NRADfilter.SetSpeedUp_c           (::params.speedup)
      ::NRADfilter.SetSpeedUp_c_lowerbound(::params.speedup_lowerbound)
      
      ::NRADfilter.Seteigendecomp_mode    (::params.eigendecomp_mode)
      ::NRADfilter.SetEigenvectors_onfly  (::params.eigen_onfly)

      ::NRADfilter.Setneighborhood(::params.neighborhood)
      ::NRADfilter.Setdt(::params.dt)
      # diffusion coefficient in minimal and maximal curvature directions
      #::NRADfilter.Setmincurv_coeff(0.5)
      #::NRADfilter.Setmaxcurv_coeff(0.01)
    
      ::NRADfilter.SetSRAD_ROI(&::roi)
    
      ::NRADfilter.Setlocal_structure_mode(::params.local_struct)
      ::NRADfilter.Setdiffusion_eigenvalues_mode(::params.eigen_mode)
    }

    #---------------------------------------------------------------------------
    proc ::FilterNRAD_Iterations() \
    {
      #  show ::res
      #  ::input_draw.compare(::res)
      SetProgress(0)
      RestartTime; InitTime
      cancel = false
      numit = ::params.t/::params.dt
      for k=1 to numit {
        if (!cancel) {
          #if (k>1) { ::NRADfilter.SetEstimateNoiseSTD(false); }

          # decrease the sigma(s)
          _t = ::params.dt*(k-1)
          new_s1 = max(0.8*0.8,::params.ST_sigma1*::params.ST_sigma1-_t*_t)
          new_s2 = max(1.2*1.2,::params.ST_sigma2*::params.ST_sigma2-_t*_t)
          new_s1 = sqrt(new_s1)
          new_s2 = sqrt(new_s2)
          #printn "new_s1 = %1%, " % new_s1 + "new_s2 = %1% " % new_s2
          ::NRADfilter.SetST_sigma1(new_s1)
          ::NRADfilter.SetST_sigma2(new_s2)

          ::NRADfilter.Iterate()
          ::res0 <<= ::NRADfilter.GetOutput()
          if ::params.noise_models[::params.noise_model] == "Rician" {
            ::res0 = ::res0*(::res0>0)
            if (::params.remove_bias) {
              ::res0 = ::res0 - 2*noise_variance
              ::res0 = ::res0*(::res0>0)
              ::res0 = sqrt(::res0)
            } else {
              ::res0 = sqrt(::res0)
            }
            if (::params.run_on_roi) {
              ::res.putimage(::res0)
            } else {
              ::res = ::res0
            }
          } else {
            if  ::params.noise_models[::params.noise_model] == \
                "Additive Gaussian" {
              if (::params.run_on_roi) {
                ::res.putimage(::res0)
              } else {
                ::res = ::res0
              }
            }
          }
          #if (exists(::groundtruth)) {
            #::ComputeMSE(::res);
          #}
          SetProgress((FLOAT)k/numit*100)
          if (::params.display_evolution) {
            show ::res
            ProcessXEvents(50)
          }

          if (::evaluate) {
            ::im_diff.SetInput(&::res)
            ::im_diff.quiet = true
            ::im_diff.Run()
            for i=0 to ::im_diff.regions_info.size()-1 {
              printn "region %1%" % i
              printn "*** RMSE %1%" % ::im_diff.regions_info[i].RMSE
              ::RMSE_evol[i].push_back(::im_diff.regions_info[i].RMSE)
            }
          }
        }
      }
      EndTime
      SetStatusText( "processing time: "+TimeSpent)
      SetProgress(0)

      if (::evaluate) {
        del ::gp
        ::gp = algorithms.ami_GnuPlot.GnuPlot()
        ::dw.SetYLimits(0,50)
        ::dw.SetXLimits(-2,::RMSE_evol.size()+2)
        colors = VarVector()
        cnames = VarVector()
        colors.push_back("#000000")
        cnames.push_back("global RMSE")
        colors.push_back("#FF0000")
        cnames.push_back("backgound")
        colors.push_back("#DDDD00")
        cnames.push_back("lumen")
        colors.push_back("#00FF00")
        cnames.push_back("backgound-lumen")
        colors.push_back("#00DDDD")
        cnames.push_back("lumen-dissection")
        colors.push_back("#0000FF")
        cnames.push_back("dissection")
        for i=0 to ::RMSE_evol.size()-1 {
          im = Image(FLOAT,::RMSE_evol[i].size(),1,1)
          im.setvoxelsize(::params.dt,1,1)
          for n=0 to ::RMSE_evol[i].size()-1 {
            im.setpos(n,0,0)
            im.set(::RMSE_evol[i][n])
          }
          ::dw.SetCurve(&im,i)
          ::gp.AddCurve(&im,cnames[i])
          if (i<colors.size()) {
            ::dw.SetCurveProperties(i,colors[i])
          }
        }
        ::gp.OpenSession()
        ::gp.SessionFillCommands()
      }
    }

    #---------------------------------------------------------------------------
    proc ::FilterNRAD() \
    {
printn "::FilterNRAD() begin"
printn "  1"
      ::FilterNRAD_Init()
      if (::input.tz==1) {
        InfoDialog "Filter only available for 3D images at the moment"
      } else {
    
printn "  2"
        ::FilterNRAD_Params()
      
printn "  3"
printn " run_on_roi %1% " % ::params.run_on_roi
printn " squared %1%" % ::squared
        # process iterations
        ::res0 <<= ::NRADfilter.GetOutput()
        if (::params.run_on_roi) {
          ::res <<= ::input
          if ::squared {
            ::res0 = sqrt(::res0)
          }
          ::res.putimage(::res0)
        } else {
          if ::squared {
            ::res <<= sqrt(::res0)
          }
        }

        # Output estimated noise standard deviation
        if ::params.noise_models[::params.noise_model] == "Rician" {
printn "Rician"
          noise_variance = ::NRADfilter.Compute_sigma2_MRI_mode(&::input1)
        } else {
printn "Gaussian"
          noise_variance = ::NRADfilter.Compute_sigma2_Gaussian_mode(&::input1,\
                            ::params.noise_estim_neigh)
printn "3.1"
        }
        printn " ------------------------"
        printn " Noise Standard Deviation  = %1% " % sqrt(noise_variance)
        printn " Variance = %1%" % noise_variance
        printn " ------------------------"

        fn = wx.wxFileName(::result_filename+"_noise.txt")
        if !(fn.IsDirWritable()) {
          fn.Assign(wx.wxFileName.GetTempDir(),fn.GetFullName())
        printn "Set File as %1%" % wx.FromWxString(fn.GetFullPath())
        }
        if fn.IsDirWritable() {
          noisefile = File(wx.FromWxString(fn.GetFullPath()),"w")
          noisefile._print( "noise SD = %1% \n" % sqrt(noise_variance))
        
          if (exists(::exact_noise_sd)) {
            noise_variance = ::exact_noise_sd*::exact_noise_sd
            printn " Using Given Variance = %1%" % noise_variance
            noisefile._print( "exact noise SD = %1% \n" % sqrt(noise_variance))
          }
          del noisefile
        }

printn "  4"
        ::FilterNRAD_Iterations()
printn "  5"

      }
    
    }
    
    #---------------------------------------------------------------------------
    proc ::FilterNRAD_Continue() \
    {
      if (exists(::NRADfilter)) {
        ::FilterNRAD_Iterations()
      }
    }

    #---------------------------------------------------------------------------
    proc ::Filter() {
print "::Filter()"
      inittime = wx.wxDateTime.UNow()
      if (!exists(::input)) {
        ::load_input()
      }
      if (!exists(::roi)) {
        InfoDialog  "Region of Interest not selected taking the full "+\
                    "image by default"
        ::roi = ::input
      }
  
      ::FilterNRAD()
      diff=wx.wxDateTime.UNow()-inittime
      time_elapsed = wx.FromWxString(diff.Format("%M min %S s %l ms"))
      SetStatusText("Denoising \tDone (%1%)" % time_elapsed)
    }
    Comments( ::Filter, "Run the denoising algorithm.")
    
    #---------------------------------------------------------------------------
    proc ::Display() {
      
      if (!exists(::input)) {
        ::load_input
      }
      if (!exists(::input_draw)) {
        show ::input
      }
      # draw limits of ROI
      if exists(::roi) {
        roibox = ::roi[0]*0+1
        ::imbox  <<= ::input[0]*0
        ::imbox.putimage(roibox)
        del roibox
        ::input_draw.SetIsoContour(0,&::imbox,0.5)
        ::input_draw.DrawIsoContour(0,1)
        show ::input
      }
      if exists(::res) {
        show ::res
        ::res_draw.update()
        ::input_draw.compare(&::res_draw)
      }
    }
    Comments( ::Display, "Display results")
    
    #---------------------------------------------------------------------------
    proc ::Cancel() {
      ::cancel = true
    }

    #---------------------------------------------------------------------------
    proc ::OnNoiseModel() {
      ::win.Enable( ::remove_bias_id,\
                    ::params.noise_models[::params.noise_model]=="Rician")
      ::win.Update(::remove_bias_id)
    }

    #---------------------------------------------------------------------------
    proc ::Save() {
      ::res.save ::result_filename
    }
    Comments( ::Save, "Save image to disk.")
  
    #---------------------------------------------------------------------------
    proc ::SaveToImage() {
      eval ::result_imagename+" <<= ::res;"
    }
    Comments( ::SaveToImage, "Save to global image variable.")
    
    #---------------------------------------------------------------------------
    proc ::Gui() {
    
      if (exists(::parent_panel)) {
        ::win = ParamPanel("AnisoGS_NRAD",&::parent_panel)
      } else {
        ::win = ParamPanel("AnisoGS_NRAD")
      }
      
      ::win.BeginBook()
        ::win.AddPage("Param")
          ::win.AddImageChoice( &::input_name, "Input")
          ::win.AddFloat( &::params.dt,"dt",0.01,1)
          ::win.AddFloat( &::params.t,"T",0,10)
          
          ::noise_model_id = ::win.AddEnum( &::params.noise_model,\
                                            "Noise model")
          for n=0 to ::params.noise_models.size()-1 { 
            ::win.AddEnumChoice(::noise_model_id,::params.noise_models[n])
          }
          ::win.SetCallback( &::OnNoiseModel)
          ::win.AddInt(&::params.noise_estim_neigh,"neigh size",1,10)

          ::remove_bias_id = ::win.AddBoolean(  &::params.remove_bias,\
                                                "Remove Bias")

          ::win.AddInt( &::params.neighborhood,"Neighborhood",0,4)
      
          ::win.BeginHorizontal()
            ::scheme_id       = ::win.AddEnum( &::params.scheme,"Sch.")
              ::win.AddEnumChoice(::scheme_id,"Semi-impl.")
              ::win.AddEnumChoice(::scheme_id,"Expl.")
          ::win.EndHorizontal()

          ::mat_boxid = ::win.BeginBoxPanel("Matrix diffusion parameters")
            ::sigma_id = ::win.AddFloat( &::params.sigma,"sigma",0.01,10)
            ::win.Enable(::sigma_id,false)
            ::win.AddFloat( &::params.ST_sigma1,"sigma1",0.01,10)
            ::win.AddFloat( &::params.ST_sigma2,"sigma2",0.01,10)

            ::localstruct_id = ::win.AddEnum( &::params.local_struct,\
                                              "Local Struct.")
              ::win.AddEnumChoice(::localstruct_id,"Grad & Curv. Dir.")
              ::win.AddEnumChoice(::localstruct_id,"Struct. Tensor")
        
            ::eigenmode_id = ::win.AddEnum( &::params.eigen_mode,"Eigen mode")
              ::win.AddEnumChoice(::eigenmode_id,"Sum")
              ::win.AddEnumChoice(::eigenmode_id,"Max")
            ::eigen_onfly_id = ::win.AddBoolean(&::params.eigen_onfly,\
                                        "Compute Eigenvalues on the fly.")
          ::win.EndBoxPanel()
          
          ::win.AddBoolean(&::params.use_linearinterp, "Linear Interp")

          ::win.AddPage("Trace")
            ::win.AddBoolean(&::trace_voxel,"trace")
            ::win.AddInt(&::trace_voxel_x,"X",0,512)
            ::win.AddInt(&::trace_voxel_y,"Y",0,512)
            ::win.AddInt(&::trace_voxel_z,"Z",0,512)
          ::win.AddPage("Controls")
            ::win.BeginHorizontal()
              ::AddBitmapButton(&::win, &::icons._Refresh,   32, "ReloadInput")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Selection, 32, "GetRoi")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Apply,     32, "Filter")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Show,      32, "Display")
              ::win.SetPositionProp(-1,0)
              ::icons.LoadIconPNG("Stop")
              ::AddBitmapButton(&::win, &::icons._Stop,      32, "Cancel")
              ::win.SetPositionProp(-1,0)
            ::win.EndHorizontal()
            ::win.AddButton("Continue",&::FilterNRAD_Continue)
            ::win.AddBoolean( &::evaluate,"Evaluate result")
            ::win.AddBoolean( &::params.run_on_roi,"Run on ROI")
            ::win.AddBoolean( &::params.use_new_convolution_filter,\
                              "New Convolution")
            ::win.BeginBoxPanel("Speedup")
              ::win.AddBoolean(&::params.speedup,"Enable speedup")
              ::win.AddFloat(&::params.speedup_lowerbound,"Lower bound",0,1)
              ::eigendecomp_id = ::win.AddEnum(&::params.eigendecomp_mode,"Eigen decomp.")
              for n=0 to ::params.eigendecomp_modes.size()-1 { 
                ::win.AddEnumChoice(::eigendecomp_id,::params.eigendecomp_modes[n])
              }
            ::win.EndBoxPanel()
            ::win.AddInt(&::params.nb_threads,"threads",1,20)

            ::win.BeginBoxPanel("Result --> disk")
              ::win.BeginHorizontal()
                ::win.AddString(&::result_filename,"File")
                # make it proportional
                ::win.SetPositionProp(1)
                ::AddBitmapButton16(&::win, &::icons._Save, "Save")
              ::win.EndHorizontal()
            ::win.EndBoxPanel()
            ::win.BeginBoxPanel("Result --> global variable")
              ::win.BeginHorizontal()
                ::win.AddString(&::result_imagename,"Name")
                # make it proportional
                ::win.SetPositionProp(1)
                ::AddBitmapButton16(&::win, &::icons._Copy, "SaveToImage")
              ::win.EndHorizontal()
            ::win.EndBoxPanel()

        # add page for saving/loading parameters
        ::AddParamPage(&::win)

        # add help page
        if wx.wxFileName(::html_filename).FileExists() {
          ::AddHelpPage(&::win)
        }
    
    
      ::win.AddPage("Eval")
        ::win.BeginBook()
          ::im_diff.SetParentPanel(&::win)
          ::im_diff.Gui()
          ::win.AddPage("ImDiff",&::im_diff.win)

          ::win.AddPage("Curves")
            ::dw = wxDrawingWindow(&::win.CurrentParent())
            ::dw.SetMinSize(&wx.wxSize(50,300))
            ::dw.SetBackgroundColour(\
                &wx.wxColour(255,255,255))
            ::win.AddWidget(&::dw,0)
        ::win.EndBook()
      ::win.EndBook()

      ::AddStandardButtons(&::win)

      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::win.Update(-1)


    }
    ::Init()
    
  }
  # End of class
  
} 
# End of If

