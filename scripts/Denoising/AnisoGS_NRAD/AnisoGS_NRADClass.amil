
func "Common/ScriptGui"

if (!exists(AnisoGS_NRADClass)) {

  Class AnisoGS_NRADClass : public ScriptGui \
  {
    
    func "Variable/ObjectIO"
    #===========================================================================
    Class ::ParamClass : public ObjectIO {

        ::description = "Default parameters", \
                        "Description of the set of parameters"

        ::dt   = 1.0/6.0, "Time step for the Partial Differential Equation"
        ::t    = 2.0,     "Total diffusion time of the equation"

        ::neighborhood = INT(1),  "Size of the neighborhood for local "+\
                                  "statistics, the window size is (2n+1)^3, "+\
                                  "where n is the parameter"
  
        ::sigma = 0.7,  "Gaussian convolution standard deviation for "+\
                        "computing the local structure"

        # Local Structure 0: princ. curv 1: struct tensor
        ::local_struct = INT(1),    "Local Structure mode: either gradient "+\
                                    "and principal curvature directions, or "+\
                                    "structure tensor eigenvectors"

        # Eigenvalues mode 0: SUM 1: MAX
        ::eigen_mode = INT(0),  "Eigenvalues mode, decides how to combine "+\
                                "the diffusions along each line, plane and "+\
                                "local volume: either the sum, or the maximum "+\
                                "(default is sum)"
  
        # Scheme, 0: explicit 1: semi-implicit
        ::scheme = INT(1),        "Numerical scheme: explicit or semi-implicit"
        ::run_on_roi = UCHAR(0),  "Run only on the selected region-of-interest"
        ::remove_bias = UCHAR(1), "Remove bias due to Rician noise model"

        #-----------------------------------------------------------------------
        proc ::__assign__( VAR p) {
          ::t                     = p.t
          ::dt                    = p.dt
          ::neighborhood          = p.neighborhood
          ::sigma                 = p.sigma
          ::local_struct          = p.local_struct
          ::eigen_mode            = p.eigen_mode
          ::scheme                = p.scheme
          ::run_on_roi            = p.run_on_roi
          ::remove_bias           = p.remove_bias
        }
    }

    #---------------------------------------------------------------------------
    proc ::Init() {
      
      ::input_name   = "","Name of the input image variable"

      ::result_imagename = "global::AnisoGS_NRAD_result", \
                            "Name of the resulting global variable."

      ::result_filename = "AnisoGS_NRAD_result.ami.gz", \
                        "Disk filename for the resulting image."

      ::ParamClass ::params

      #::wiki_help = "http://www.ctm.ulpgc.es/amilab_dokuwiki/dokuwiki"+
      # "/doku.php?id=tutorial-mainalgorithms-levelset#level_set_segmentation"

      ::html_filename = GetScriptsDir+\
                        "/AnisoGS_NRAD/Doc/AnisoGS_NRAD/index.html"
    }


    #---------------------------------------------------------------------------
    proc ::load_input() {
      eval "::input <<= (FLOAT)"+::input_name+";"
      if (::input_name=="BrowseImage") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
  
      if (exists(::win)) {
        ::win.Update(-1)
      }
    }
    Comments( ::load_input, "Copies the input image in a local image "+\
                            "member named 'input'")


    #---------------------------------------------------------------------------
    proc ::ReloadInput() \
    {
      if (exists(::input)) {
        delvars "::*_draw"
        if (exists(::roi)) { del ::roi; }
        if (exists(::imbox)) { del ::imbox; }
      }
      ::load_input()
      ::Display()
    }
    Comments( ::ReloadInput, "Reload input image.")

    #---------------------------------------------------------------------------
    proc ::GetRoi() \
    {
      if (!exists(::input)) {
        ::load_input
        ::Display()
      }
      if (exists(::input_draw)) {
        ::roi <<= ::input[::input_draw]
      }
      ::Display()
    }
    Comments( ::GetRoi, "Select the Region of Interest (ROI) for noise estimation.")

    #---------------------------------------------------------------------------
    proc ::FilterFlux() \
    {
      if (!exists(::input)) {
        ::load_input
      }
      numit = ::params.t/::params.dt
      # running on the squared image
      input1 = ::input*::input
      if (::params.run_on_roi) {
        input1 <<= input1[::roi.GetExtent]
      }
    
      if (exists(::NRADfilter)) { del ::NRADfilter; }
      ::NRADfilter = algorithms.ami_AnisoGS_NRAD.AnisoGS_NRAD()
      # sigma = 0.7
      # threshold = 1 // not used
      # data attachment = 0
      ::NRADfilter.Init(&input1,::params.sigma,1,0)
      ::NRADfilter.SetInputIsSquared(true)
      ::NRADfilter.Setneighborhood(::params.neighborhood)
      ::NRADfilter.Setdt(::params.dt)
      # diffusion coefficient in minimal and maximal curvature directions
      ::NRADfilter.Setmincurv_coeff(0.5)
      ::NRADfilter.Setmaxcurv_coeff(0.01)
    
      ::NRADfilter.SetSRAD_ROI(&::roi)
    
      ::NRADfilter.Setlocal_structure_mode(::params.local_struct)
      ::NRADfilter.Setdiffusion_eigenvalues_mode(::params.eigen_mode)
    
      # process iterations
      ::res0 <<= ::NRADfilter.GetOutput()
      if (::params.run_on_roi) {
        ::res <<= ::input
        ::res0 = sqrt(::res0)
        ::res.putimage(::res0)
      } else {
        ::res <<= sqrt(::res0)
      }

      # Output estimated noise standard deviation
      noise_variance = ::NRADfilter.Compute_sigma2_MRI_mode(&input1)
      printn " ------------------------"
      printn " Noise Standard Deviation  = %1% " % sqrt(noise_variance)
      printn " Variance = %1%" % noise_variance
      printn " ------------------------"

      fn = wx.wxFileName(::result_filename+"_noise.txt")
      if !(fn.IsDirWritable()) {
        fn.Assign(wx.wxFileName.GetTempDir(),fn.GetFullName())
      printn "Set File as %1%" % fn.GetFullPath().c_str()
      }
      if fn.IsDirWritable() {
        noisefile = File(fn.GetFullPath().c_str(),"w")
        noisefile._print( "noise SD = %1% \n" % sqrt(noise_variance))
      
        if (exists(::exact_noise_sd)) {
          noise_variance = ::exact_noise_sd*::exact_noise_sd
          printn " Using Given Variance = %1%" % noise_variance
          noisefile._print( "exact noise SD = %1% \n" % sqrt(noise_variance))
        }
        del noisefile
      }

      #  show ::res
      #  ::input_draw.compare(::res)
      SetProgress(0)
      RestartTime; InitTime
      for k=1 to numit {
        ::NRADfilter.Iterate()
        ::res0 = ::NRADfilter.GetOutput()
        ::res0 = ::res0*(::res0>0)
        if (::params.run_on_roi) {
          if (::params.remove_bias) {
            ::res0 = ::res0 - 2*noise_variance
            ::res0 = ::res0*(::res0>0)
            ::res0 = sqrt(::res0)
          } else {
            ::res0 = sqrt(::res0)
          }
          ::res.putimage(::res0)
        } else {
          if (::params.remove_bias) {
            ::res0 = ::res0 - 2*noise_variance
            ::res0 = ::res0*(::res0>0)
            ::res = sqrt(::res0)
          } else {
            ::res = sqrt(::res0)
          }
        }
        #if (exists(::groundtruth)) {
          #::ComputeMSE(::res);
        #}
        SetProgress((FLOAT)k/numit*100)
        show ::res
        ProcessXEvents(50)
      }
      EndTime
      SetStatusText( "processing time: "+TimeSpent)
      SetProgress(0)
    
    }
    
    #---------------------------------------------------------------------------
    proc ::Filter() {
      inittime = wx.wxDateTime.UNow()
      if (!exists(::input)) {
        ::load_input()
      }
      if (!exists(::roi)) {
        InfoDialog  "Region of Interest not selected taking the full "+\
                    "image by default"
        ::roi = ::input
      }
  
      ::FilterFlux()
      diff=wx.wxDateTime.UNow()-inittime
      time_elapsed = diff.Format("%M min %S s %l ms").c_str()
      SetStatusText("Denoising \tDone (%1%)" % time_elapsed)
    }
    Comments( ::Filter, "Run the denoising algorithm.")
    
    #---------------------------------------------------------------------------
    proc ::Display() {
      
      if (!exists(::input)) {
        ::load_input
      }
      if (!exists(::input_draw)) {
        show ::input
      }
      # draw limits of ROI
      if exists(::roi) {
        roibox = ::roi[0]*0+1
        ::imbox  <<= ::input[0]*0
        ::imbox.putimage(roibox)
        del roibox
        ::input_draw.SetIsoContour(0,&::imbox,0.5)
        ::input_draw.DrawIsoContour(0,1)
        show ::input
      }
      if exists(::res) {
        show ::res
        ::res_draw.update()
        ::input_draw.compare(&::res_draw)
      }
    }
    Comments( ::Display, "Display results")
    
    #---------------------------------------------------------------------------
    proc ::Save() {
      ::res.save ::result_filename
    }
    Comments( ::Save, "Save image to disk.")
  
    #---------------------------------------------------------------------------
    proc ::SaveToImage() {
      eval ::result_imagename+" <<= ::res;"
    }
    Comments( ::SaveToImage, "Save to global image variable.")
    
    #---------------------------------------------------------------------------
    proc ::Gui() {
    
      if (exists(::parent_panel)) {
        ::win = ParamPanel("AnisoGS_NRAD",&::parent_panel)
      } else {
        ::win = ParamPanel("AnisoGS_NRAD")
      }
      
      ::win.BeginBook()
        ::win.AddPage("Param")
          ::win.AddImageChoice( &::input_name, "Input")
          ::win.AddFloat( &::params.dt,"dt",0.01,1)
          ::win.AddFloat( &::params.t,"T",0,10)
          
          ::win.AddInt( &::params.neighborhood,"Neighborhood",0,4)
      
          ::win.BeginHorizontal()
            ::scheme_id       = ::win.AddEnum( &::params.scheme,"Sch.")
              ::win.AddEnumChoice(::scheme_id,"Expl.")
              ::win.AddEnumChoice(::scheme_id,"Semi-impl.")
          ::win.EndHorizontal()

          ::mat_boxid = ::win.BeginBoxPanel("Matrix diffusion parameters")
            ::sigma_id = ::win.AddFloat( &::params.sigma,"sigma",0.01,10)

            ::localstruct_id = ::win.AddEnum( &::params.local_struct,\
                                              "Local Struct.")
              ::win.AddEnumChoice(::localstruct_id,"Grad & Curv. Dir.")
              ::win.AddEnumChoice(::localstruct_id,"Struct. Tensor")
        
            ::eigenmode_id = ::win.AddEnum( &::params.eigen_mode,"Eigen mode")
              ::win.AddEnumChoice(::eigenmode_id,"Sum")
              ::win.AddEnumChoice(::eigenmode_id,"Max")
          ::win.EndBoxPanel()
          
          ::win.AddPage("Controls")
            ::win.BeginHorizontal()
              ::AddBitmapButton(&::win, &::icons._Refresh,   32, "ReloadInput")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Selection, 32, "GetRoi")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Apply,     32, "Filter")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Show,      32, "Display")
              ::win.SetPositionProp(-1,0)
            ::win.EndHorizontal()
            ::win.AddBoolean( &::params.run_on_roi,"Run on ROI")
            ::win.AddBoolean( &::params.remove_bias,"Remove Bias")
            ::win.BeginBoxPanel("Result --> disk")
              ::win.BeginHorizontal()
                ::win.AddString(&::result_filename,"File")
                # make it proportional
                ::win.SetPositionProp(1)
                ::AddBitmapButton16(&::win, &::icons._Save, "Save")
              ::win.EndHorizontal()
            ::win.EndBoxPanel()
            ::win.BeginBoxPanel("Result --> global variable")
              ::win.BeginHorizontal()
                ::win.AddString(&::result_imagename,"Name")
                # make it proportional
                ::win.SetPositionProp(1)
                ::AddBitmapButton16(&::win, &::icons._Copy, "SaveToImage")
              ::win.EndHorizontal()
            ::win.EndBoxPanel()

        # add page for saving/loading parameters
        ::AddParamPage(&::win)

        # add help page
        if wx.wxFileName(::html_filename).FileExists() {
          ::AddHelpPage(&::win)
        }
    
      ::win.EndBook()
    
      ::AddStandardButtons(&::win)

      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::win.Update(-1)


    }
    ::Init()
    
  }
  # End of class
  
} 
# End of If

