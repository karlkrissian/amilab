#!/usr/bin/amilab

#
# Denoising algorithm
#

func "Common/ScriptGui"

if (!exists(AnisoGSClass)) {

  Class AnisoGSClass : public ScriptGui {

  #----------------------------
  proc ::Init() {

    ::input_name  = ""
    ::mask_name  = "", "mask image to compute the data attachment"
    ::use_mask = UCHAR(0), "use mask image"
    
    ::result_name = "AnisoGS_result"
    ::result_filename = "AnisoGS_result.ami.gz"
    ::sigma=1
    ::threshold=10
    ::datacoeff=0.05
    ::niter=INT(5)
    ::use_zoom=UCHAR(0)
    Comments( ::use_zoom, "Allow to process only on the Region-Of-Interest defined by the current zoom in the input image display window")
    ::started=0
  
    ::CreateWindow()
  }
  
  #------------------------------------
  proc ::load_input() {
    if (::input_name=="Image") {
      # read image using browser
      ::input <<= Image
      ::input_name = "::input"
      ::win.Update(-1)
    } else {
      eval "::input <<="+::input_name+";"
    }
    printn "exists input %1%" % exists(::input)
  }

  #------------------------------------
  proc ::load_mask() {
    if (::mask_name=="Image") {
      # read image using browser
      ::mask <<= Image
      ::mask_name = "::mask"
      ::win.Update(-1)
    } else {
      eval "::mask <<="+::mask_name+";"
    }
  }

  #------------------------------------
  proc ::Restart() {

    del ::input
    ::load_input()
    if (::use_mask) {
        del ::mask
        ::load_mask()
    }
    del ::res_draw
    del ::res
    if (::use_zoom)&&(exists(::input_draw)) {
      ::input_roi <<= (FLOAT) ::input[(::input_draw.GetXmin()):(::input_draw.GetXmax()),\
                            (::input_draw.GetYmin()):(::input_draw.GetYmax()),\
                            (::input_draw.GetZmin()):(::input_draw.GetZmax()) ]
    } else {
      ::input_roi <<= (FLOAT) ::input
    }
    del ::aniso
    ::aniso = filters.AnisoGS()
    ::aniso.Init(::input_roi,::sigma,::threshold,::datacoeff)
    if (::use_mask) {
      ::aniso.SetAttachMask(&::mask)
    }
    ::started=1
    ::res <<= ::aniso.GetOutput()
  }
  
  #------------------------------------
  
  proc ::Filter() {

    if (!::started) {
      ::Restart()
    }
    SetProgress(0)
    for k=1 to ::niter {
      ::aniso.Iterate()
      ::res = ::aniso.GetOutput()
      SetProgress((FLOAT)k/::niter*100)
      if exists(::res_draw) {
        show ::res
      }
    }
    ::res = ::aniso.GetOutput()
    SetProgress(0)
  }
  
  #------------------------------------
  
  proc ::Display() {
    show ::input
    if (::use_mask) {
      ::input_draw.SetIsoContour(0,&::mask,0.5)
    }
    if exists(::res) {
        show ::res
        ::input_draw.compare(&::res_draw)
    }
  }
  
  #------------------------------------
  proc ::Save() {
    ::res.save ::result_name
  }
  
  #------------------------------------
  
  proc ::CreateWindow() {

    # parameters window
    ::win = ParamPanel("AnisoGS")

    ::win.BeginBook() 
    ::win.AddPage("Param")
        ::win.AddImageChoice( &::input_name, "Input")
        ::win.AddImageChoice( &::mask_name, "Mask")
        ::win.AddBoolean( &::use_mask,"Use Mask")
    
        ::win.AddFloat( &::sigma,  "::sigma", 0.01,10)
        ::win.AddFloat( &::threshold,  "::threshold", 0,100)
        ::win.AddFloat( &::datacoeff,  "::datacoeff", 0.01,10)
        ::win.AddInt( &::niter,  "::niter", 0,100)
        ::win.AddBoolean( &::use_zoom,"Use Zoom")
        ::win.AddString( &::result_name,"result name")
        ::win.AddString( &::result_filename,"result filename")
        
        ::win.BeginBoxPanel("Controls")
          ::win.BeginHorizontal()
            ::win.AddButton("Restart",    &::Restart)
            ::win.AddButton("Filter",     &::Filter)
            ::win.AddButton("Display",    &::Display)
            ::win.AddButton("Save",       &::Save)
          ::win.EndHorizontal()
        ::win.EndBoxPanel()
      ::win.AddPage("Contour Smoothing")
        ::win.BeginBoxPanel("2D Images")
        ::win.EndBoxPanel()
        ::win.BeginBoxPanel("3D Images")
        ::win.EndBoxPanel()

    ::win.EndBook()

    ::AddStandardButtons(&::win)

    ::win.Display()
    ::win.Update(-1)
  }
  
  ::Init
  
  }#end of class
  
}#end of if

#----------------------------
# Main
#----------------------------

if (!exists(anigsc)) {

  AnisoGSClass anisogs  
   
  if (argc>=2) {
      printn "reading image"
      input_arg = Image($1)
      anisogs->input_image = "input_arg"
      anisogs->result_filename = $2
      anisogs->win.Update(-1)
  }
} else {
InfoDialog "The script seems to be already loaded." 
}
