#!/usr/bin/amilab

#
# Non Local Means GUI
#
# Based on the work of Buades et al.
#

# call 
# NLM_init( IMAGE)
#
# result in NLM_res
#

# NLM_resultname = $2

if (!exists(NLmeansClass)) {

  import_filters
  
  Class NLmeansClass {

    #----------------------------
    proc ::Init() \
    {
        ::input_name =  ""
        ::result_image_name =  "NLM_res", "name of the resulting image global variable"

        ::result_filename = "NLM_result.ami.gz", "filename for saving the resulting image to disk"

        #
        # Filter type
        #
        ::filter_mode = INT(0), "Filter mode: 0 for standard, 1 for MRI, 2 for feature-based, 3 for fast"

        ::noisetype = INT(1), "noise type: 0 additive Gaussian, 1: Rician"
        ::threads   = INT(2)
  
        ::f = INT(2),     "Patch window size"
        ::t = INT(4),     "Match window area"
  
        #  
        ::h = 10, "Threshold for distance"
        # 
        ::sigma = 1, "Sigma: standard deviation of the Gaussian smoothing for fast version"
        # 
        ::usegrad = UCHAR(0), "use the norm of the gradient as a feature"
    
        # 
        ::filter_type = INT(0), "0: standard 1: probability variant"
        #  
        ::presmooth_SD = 0, "standard deviation of Gaussian pre-smoothing"
    
        ::pattern_weight_param = 0.5, "Size of the Gaussian weighting function for the pattern similarity, the standard deviation of the Gaussian is pattern_weight_param*f"

        ::minweight = 15, "sets the minimal weight threshold is exp(-minweight)"
        # 
        ::iterations = INT(1), "Number of iterations"
        ::stop =0
        ::show_images = UCHAR(1)
        ::mse = 0
        ::surf_scaling = 0.1
        ::CreateWindow()
    }
    
    #----------------------------
    proc ::Close() \
    {
      ::win.Hide
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
    
    #----------------------------
    proc ::CloseAll() \
    {
      ::Close
      if (exists(NLmeansClass)) { del NLmeansClass; }
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
    
    #----------------------------
    proc ::LoadInput() \
    {
      printn "evaluation of --> ::input <<="+::input_name+";"
      eval "::input <<="+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        ::win.update
      }
      ::win.update
      if (exists(::input_draw)) { del ::input_draw; }
      show ::input
    }
    
    #----------------------------
    proc ::SetGroundTruth( IMAGE gt, NUM sigma) \
    {
      ::groundtruth = gt
      ::noisesigma  = sigma
    }
    
    #----------------------------
    proc ::ComputeMSE( IMAGE res) \
    {
      if exists(::groundtruth) {
        if (::noisetype==1) {
          res1=res*res-2*::noisesigma*::noisesigma
          res1 = sqrt(res1*(res1>0))
          mask = res1*0
          if (exists(::roi)) {
            smask = ::roi*0+1
            mask.putimage(smask)
          } else {
            mask = 1
          }
          ::mse = mean[mask]((res1-::groundtruth)*(res1-::groundtruth))
          printn sprint("MSE %3.5f \n",::mse)
        } else {
          mask = res*0
          if (exists(::roi)) {
            smask = ::roi*0+1
            mask.putimage(smask)
          } else {
            mask = 1
          }
          ::mse = mean[mask]((res-::groundtruth)*(res-::groundtruth))
          printn sprint("MSE %3.5f \n",::mse)
        }
      }
    }
    
    
    #----------------------------
    proc ::GetROI() \
    {
      if (exists(::input_draw)) {
        ::roi <<= ::input[::input_draw]
      }
      ::Display()
    }
    
    #----------------------------
    proc ::GetNoiseROI() \
    {
      if (exists(::input_draw)) {
        ::noise_roi <<= ::input[::input_draw]
      }
      ::Display()
    }
    
    
    #----------------------------
    proc ::Filter() {

      InitTime
      if (exists(::roi)) {
        ::res0 = ::res[::roi]
  
        if (::res0.GetFormat != RGB) {
          InitTime
          ::res_roi = NLmeans((FLOAT)::res0,\
                                ::t,::f,::h,\
                                ::noisetype,\
                                ::threads,\
                                ::filter_type,\
                                ::presmooth_SD,\
                                ::pattern_weight_param)
          EndTime
          printn "processing time: "+TimeSpent
        } else {
          ::res_roi = ::res0
          ::res_roi.info
          ::res_roi[0] = NLmeans( (FLOAT)::res0[0],\
                                    ::t,::f,::h,\
                                    ::noisetype,\
                                    ::threads,\
                                    ::filter_type,\
                                    ::presmooth_SD,\
                                    ::pattern_weight_param)
          ::res_roi[1] = NLmeans( (FLOAT)::res0[1],\
                                    ::t,::f,::h,\
                                    ::noisetype,::threads,\
                                    ::filter_type,\
                                ::presmooth_SD,\
                                ::pattern_weight_param)
          ::res_roi[2] = NLmeans( (FLOAT)::res0[2],\
                                    ::t,::f,::h,\
                                    ::noisetype,::threads,\
                                    ::filter_type,\
                                ::presmooth_SD,\
                                ::pattern_weight_param)
        }
  
        ::res0.info
        ::res_roi.info
        diff = sqrt(mean((::res0-::res_roi)*\
                        (::res0-::res_roi)))
        print sprint("Diff = %f \n",diff)
        ::res.putimage(::res_roi)
      } else {
        ::res0 = ::res
  
        if (::res0.GetFormat != RGB) {
          ::res = NLmeans(::res0,\
                          ::t,::f,::h,\
                          ::noisetype,::threads,\
                          ::filter_type,\
                          ::presmooth_SD,\
                          ::pattern_weight_param)
        } else {
          ::res[0] = NLmeans((FLOAT)::res0[0],::t,::f,::h,::noisetype,::threads,\
                                ::filter_type,\
                                ::presmooth_SD,\
                                ::pattern_weight_param)
          ::res[1] = NLmeans((FLOAT)::res0[1],::t,::f,::h,::noisetype,::threads,\
                                ::filter_type,\
                                ::presmooth_SD,\
                                ::pattern_weight_param)
          ::res[2] = NLmeans((FLOAT)::res0[2],::t,::f,::h,::noisetype,::threads,\
                                ::filter_type,\
                                ::presmooth_SD,\
                                ::pattern_weight_param)
        }
  
        diff = sqrt(mean((::res0-::res)*(::res0-::res)))
        print sprint("Diff = %f \n",diff)
      }
      EndTime
      printn "processing time: "+TimeSpent

      if (exists(::res0)) {
        del ::res0
      }
      if (exists(::res_roi)) {
        del ::res_roi
      }
    }
    
    #----------------------------
    proc ::ComputeMatchField() \
    {
      printn "ComputeMatchField()"
    
      # Precomputes matching field
      if (::res.GetFormat != RGB) {
        num_features = 1
        if (::usegrad) { num_features++; }
        ::matchfield <<= Image( FLOAT,\
                                  num_features,\
                                  ::res);
        current_feature = 0
        ::matchfield[current_feature] = filter((FLOAT)::res,::sigma,0,0,0)
        if (::usegrad) {
          current_feature++
          ::matchfield[current_feature] = normgrad((FLOAT)::res,::sigma)*::sigma
        }
        #::matchfield[1] = secdergrad((FLOAT)::res,::sigma) 
        #normgrad((FLOAT)::res,::sigma)
      } else {
        ::matchfield <<=  Image(FLOAT,6,::res)
        tmp <<= (FLOAT)::res[0]
        ::matchfield[0] = filter(  tmp,::sigma,0,0,0)
        ::matchfield[1] = normgrad(tmp,::sigma)
        tmp <<= (FLOAT)::res[1]
        ::matchfield[2] = filter(  tmp,::sigma,0,0,0)
        ::matchfield[3] = normgrad(tmp,::sigma)
        tmp <<= (FLOAT)::res[2]
        ::matchfield[4] = filter(  tmp,::sigma,0,0,0)
        ::matchfield[5] = normgrad(tmp,::sigma)
      }
    
    }
    
    #----------------------------
    proc ::FeatureFilter() \
    {
      ::ComputeMatchField()
    
        #InitTime
        if (exists(::roi)) {
          ::res0 = ::res[::roi]
          ::mf0  = ::matchfield[::roi]
          ::matchfield.info
          ::mf0.info
          ::roi.info
          if (::res0.vdim != 3) {
            InitTime
            ::res_roi = NLmeans_fast((FLOAT)::res0,::mf0,::t,::h,::noisetype,::threads)
            EndTime
            printn "processing time: "+TimeSpent
          } else {
            ::res_roi = ::res0
            ::res_roi[0] = NLmeans_fast((FLOAT) ::res0[0],::mf0,::t,::h,::noisetype,::threads)
            ::res_roi[1] = NLmeans_fast((FLOAT) ::res0[1],::mf0,::t,::h,::noisetype,::threads)
            ::res_roi[2] = NLmeans_fast((FLOAT) ::res0[2],::mf0,::t,::h,::noisetype,::threads)
          }
          ::res0.info
          ::res_roi.info
          diff = sqrt(mean((::res0-::res_roi)*(::res0-::res_roi)))
          print sprint("Diff = %f \n",diff)
          ::res.putimage(::res_roi)
          printn "--- OK --- "
        } else {
          ::res0 <<= (FLOAT) ::res
          printn "starting !"
          if (::res0.vdim != 3) {
            printn  sprint(" t=%f ",::t)+\
                    sprint(" h=%f ",::h)+\
                    sprint(" noisetype=%f ",::noisetype)+\
                    sprint(" threads=%f ",::threads)
            ::res0.info
            printn  sprint(" min=%f ",min(::res0))+\
                    sprint(" max=%f ",max(::res0))
            ::matchfield.info
            printn  sprint(" min=%f ",min(::matchfield))+\
                    sprint(" max=%f ",max(::matchfield))
    
            ::res = NLmeans_fast( ::res0,\
                                    ::matchfield,\
                                    ::t,\
                                    ::h,\
                                    ::noisetype,\
                                    ::threads)
          } else {
            ::res = ::res0
            ::res[0] = NLmeans_fast((FLOAT)::res0[0],::matchfield,::t,::h,::noisetype,::threads)
            ::res[1] = NLmeans_fast((FLOAT)::res0[1],::matchfield,::t,::h,::noisetype,::threads)
            ::res[2] = NLmeans_fast((FLOAT)::res0[2],::matchfield,::t,::h,::noisetype,::threads)
          }
    
          _diff = sqrt(mean((::res0-::res)*(::res0-::res)))
          print sprint("Diff = %f \n",_diff)
        }
    
      #  printn "freeing memory 1"
      if (exists(::res0)) {
        del ::res0
      }
      #  printn "freeing memory 2"
      if (exists(::mf0)) {
        del ::mf0
      }
      #  printn "freeing memory 3"
      if (exists(::res_roi)) {
        del ::res_roi
      }
      #printn "end fast NLM"
    }
    
    
    #----------------------------
    proc ::FastFilter() \
    {
      InitTime
      ::res <<= NewNLmeans(&::res,::t,::f,::h,::threads,::minweight)
      EndTime
    }
    # ::FastFilter()
    
    #----------------------------
    proc ::MRIFilter() \
    {
      InitTime
      if (exists(::noise_roi)) {
    
          ::res = NLmeans_MRI(::res,::noise_roi,\
                        ::t,::h,::sigma,\
                        ::iterations,::threads)
    
        printn "--- OK --- "
      } else {
        print  "Please refine a ROI for "
        printn "noise estimation ..."
      }
      EndTime
      printn "processing time: "+TimeSpent
      ::ComputeMSE(::res)
    }
    # ::MRIFilter()
    
    
    #----------------------------
    proc ::Run() \
    {
      if (!exists(::input)) { ::LoadInput; }
      ::stop = 0
      if (!exists(::res)) {
        ::res =  ::input
      }
      for k=1 to ::iterations {
        if (!::stop) {
          print sprint("Iteration %0.0f \n",k)
          if (::filter_mode==0) { ::Filter; }
          if (::filter_mode==1) { ::MRIFilter; }
          if (::filter_mode==2) { ::FeatureFilter; }
          if (::filter_mode==3) { ::FastFilter; }
        }
        if (::show_images) {
          ::Display
          ProcessXEvents(50)
        }
        ::ComputeMSE(::res)
      } 
      # end for k

      eval "global::"+::result_image_name+"<<="+"::res;"
    }
    # end ::Run()

    #----------------------------
    proc ::Display() \
    {
      printn "::Display begin"
      #::LoadInput
      if (!exists(::input_draw)) {
        show ::input
      }
      # draw limits of ROI
      if exists(::roi) {
        roibox = (FLOAT)::roi*0+1
        ::imbox  = (FLOAT)::input*0
        ::imbox.putimage(roibox)
        ::input_draw.SetIsoContour(0,::imbox,0.5)
        ::input_draw.DrawIsoContour(0,1)
        show ::input
      }
      # draw limits of Noise ROI
      if exists(::noise_roi) {
        roibox = (FLOAT)::noise_roi*0+1
        ::noise_imbox  = (FLOAT)::input*0
        ::noise_imbox.putimage(roibox)
        del roibox
        ::input_draw.SetIsoContour(1,::noise_imbox,0.5)
        ::input_draw.DrawIsoContour(1,1)
        show ::input
      }
      if exists(::res) {
        show ::res
        if exists(::roi) {
          ::res_draw.SetIsoContour(0,::imbox,0.5)
          ::res_draw.DrawIsoContour(0,1)
        }
        ::input_draw.compare(::res_draw)
        # draw limits of ROI
      }
    }
    
    #----------------------------
    proc ::DisplaySurfaces() \
    {
      if (::input.tz==1)&&(::input.GetFormat != RGB) {
        if (exists(::input_surf_draw)) { del ::input_surf_draw; }
        if (exists(::res_surf_draw))   { del ::res_surf_draw; }
        if (exists(::input_surf)) { del ::input_surf; }
        if (exists(::res_surf))   { del ::res_surf; }
    
        ::input_surf = CreateFlatMesh(::input,0)
        ::res_surf   = CreateFlatMesh(::res,0)
        ::input_surf.ElevateMesh(::input*::surf_scaling)
        ::res_surf.ElevateMesh(::res*::surf_scaling)
        ::input_surf.Normals
        ::res_surf.Normals
        show ::input_surf
        show ::res_surf
        ::input_surf_draw.compare(::res_surf_draw)
      }
    }
    
    
    #----------------------------
    proc ::Restart() \
    {
      ::LoadInput
      ::res <<= ::input
      show ::res
    }
    
    #----------------------------
    proc ::Save() \
    {
      ::res.save ::result_filename
    }
    ::Save.Comments("Save image to disk as NLM_result.ami.gz")
    
    #----------------------------
    proc ::Stop() \
    {
      ::stop = 1
    }
    ::Stop.Comments("Stop the current process")
    
    #--------------------------------
    proc ::FilterModeEvent() \
    {
      ::win.EnablePanel(::standard_param_panel , ::filter_mode==0)
      ::win.EnablePanel(::mri_param_panel ,      ::filter_mode==1)
      ::win.EnablePanel(::feature_param_panel ,  ::filter_mode==2)
      ::win.EnablePanel(::fast_param_panel ,     ::filter_mode==3)
      ::win.SelectPage(::param_book,::filter_mode)
    }

    
    #----------------------------
    proc ::CreateWindow() {
    
      # parameters window
      ::win = ParamWin("NL-means")
      
      ::win.BeginBook
    
        ::win.AddPage("Input/Output")

          # set the input image
          ::win.BeginBoxPanel("Input")
            ::win.BeginHorizontal
              ::win.AddImageChoice(::input_name, "")
              ::win.AddButton("Load",::LoadInput)
            ::win.EndHorizontal
          ::win.EndBoxPanel

          ::win.AddString(::result_image_name,"Result image")

        ::win.AddPage("Param")
          filtermode_id = ::win.AddEnum(::filter_mode,"Method")
            ::win.AddEnumChoice(filtermode_id,"Standard")
            ::win.AddEnumChoice(filtermode_id,"MRI")
            ::win.AddEnumChoice(filtermode_id,"Feature")
            ::win.AddEnumChoice(filtermode_id,"Fast")
          ::win.SetCallback(::FilterModeEvent)

          ::win.BeginBoxPanel("Common Parameters")
            ::win.AddFloat(::h,      "h",      0.01,200)
            ::win.AddInt(  ::threads,"Threads",1,   10 )
            ::win.AddInt(  ::t,      "t",      1,   30 )
          ::win.EndBoxPanel
    
          ::param_book = ::win.BeginBook
            ::standard_param_panel = ::win.AddPage("Stand")
              ::presmooth_id     = ::win.AddFloat(::presmooth_SD,"pre-smooth",0,3)
              ::win.AddInt(::f,"f", 1,10)
              ::noisetype_id = ::win.AddEnum(::noisetype,"Type")
                ::win.AddEnumChoice(::noisetype_id,"Add. Gaussian")
                ::win.AddEnumChoice(::noisetype_id,"Rician (MRI)")
              ::filtertype_id = ::win.AddEnum(::filter_type)
                ::win.AddEnumChoice(::filtertype_id,"Stand.")
                ::win.AddEnumChoice(::filtertype_id,"Prob.")
                ::win.AddEnumChoice(::filtertype_id,"Prob. + Smooth.")
              ::win.AddFloat(::pattern_weight_param,"Weights size",0.1,10)

            ::mri_param_panel = ::win.AddPage("MRI")
              ::win.AddInt(::f,"f", 1,10)
              ::win.AddFloat(  ::sigma,"Sigma",0.5,10)
              ::win.AddButton("Select noise ROI", ::GetNoiseROI)

            ::feature_param_panel = ::win.AddPage("Feature")
              ::win.AddFloat(  ::sigma,"Sigma",0.5,10)
              ::usegrad_id = ::win.AddBoolean(::usegrad,"Use_Grad")
              ::noisetype_id = ::win.AddEnum(::noisetype,"Type")
                ::win.AddEnumChoice(::noisetype_id,"Add. Gaussian")
                ::win.AddEnumChoice(::noisetype_id,"Rician (MRI)")

            ::fast_param_panel = ::win.AddPage("Fast")
              ::win.AddInt(::f,"f", 1,10)
              ::win.AddFloat(::minweight,"Min. weight",1,100)
          ::win.EndBook

    
        ::win.AddPage("Controls")
          ::win.BeginBoxPanel("Execution")
              ROI_id     = ::win.AddButton("Select ROI", ::GetROI)
              ::win.BeginHorizontal
                  restart_id = ::win.AddButton("Restart", ::Restart)
                  display_id = ::win.AddButton("Stop",    ::Stop)
              ::win.EndHorizontal
              ::it_id      = ::win.AddInt(::iterations,"Iter",1,50)
              ::win.AddButton("Run",     ::Run)
          ::win.EndBoxPanel
  
          ::win.BeginBoxPanel("Result")
              ::win.AddString(::result_filename,"file")
              ::win.BeginHorizontal
                  display_id = ::win.AddButton("Save",       ::Save)
                  display_id = ::win.AddButton("Display",    ::Display)
              ::win.EndHorizontal
          ::win.EndBoxPanel

          ::win.BeginBoxPanel("Surface display")
              ::win.AddFloat(::surf_scaling,"surf scale",0.01,10)
              display_surf_id = ::win.AddButton("Surfaces",    ::DisplaySurfaces)
          ::win.EndBoxPanel
      ::win.EndBook
      ::win.BeginHorizontal
        ::win.AddButton("Close",      ::Close)
        ::win.AddButton("Close All",  ::CloseAll)
      ::win.EndHorizontal
      
      ::win.update
      ::win.Display
      ::FilterModeEvent
    }

    ::Init
  } 
  # Class NLmeansClass
} 
# end if (!exists(NLmeansClass))
  
  
#----------------------------
# Main
#----------------------------

if (!exists(nlm)) {

  NLmeansClass nlm
  
  if (argc>=1) {
    printn "reading image"
    input = Image($1)
    nlm->image_name = "input"
    nlm->win.update
  }

} else {
  InfoDialog "The script seems to be already loaded."
}

