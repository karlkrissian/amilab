#!/usr/bin/amilab

#
# Noise Reducing Anisotropic Diffusion
#
# Based on the paper of Yu and Acton: Speckle Reducing Anisotropic Diffusion TIP 2002
# and
# Krissian and Aja-Fernandez TIP 2009
#

# call 
# ::CreateParams( IMAGE)
# and
# ::CreateWindow()
#
# result in ::res
#
# Style Conventions:
#   all variables and functions will start with ::
#   function variables will start with an uppercase character after
#   other variables will start with a lowercase character
#
# ::resultname = $2

func "Common/ScriptGui"

if (!exists(AnisoMatrixClass)) {


  Class AnisoMatrixClass : public ScriptGui {

    func "Variable/ObjectIO"
    # 
    #===========================================================================
    Class ::ParamClass : public ObjectIO {

        func "WxUtils/alEnum"

        ::description = "Default parameters", \
                        "Description of the set of parameters"

        ::dt   = 1.0/6.0, "Time step for the Partial Differential Equation"
        ::t    = 2.0,     "Total diffusion time of the equation"
  
   #enum ContourMode {
      #CONTOURS_FLUX, /**< Matrix diffusion based on Flux-based anisotropic diffusion paper. */
      #CONTOURS_OSRAD, /**< Matrix diffusion based on OSRAD paper */
      #CONTOURS_NRAD, /**< Matrix diffusion based on NRAD paper 
                        #* new version using directional local statistics 
                        #* for the diffusion matrix. */
    #};
  

        # ----- Contour mode
        alEnum ::contour_modes
        ::contour_modes.SetTitle("Contours")
        ::contour_modes.SetHelp("Defines the way to filter noise at the "+\
                                "contours")
        ::contour_modes.AddValue( "FLUX",\
                                  "Matrix diffusion based on Flux-based"+\
                                  " anisotropic diffusion paper")
        ::contour_modes.AddValue( "OSRAD",\
                                  "Matrix diffusion based on OSRAD paper "+\
                                  "(diffusion in minimal curvature direction)")
        ::contour_modes.AddValue( "NRAD",\
                                  "Matrix diffusion based on NRAD paper "+\
                                  "(directional local statistics)")
        ::contour_mode = INT(2), ::contour_modes.GetHelpMessage()
        ::contour_modes.SetVariable(&::contour_mode)

    #enum NoiseEstimationModel {
      #NOISE_LEE,  /**< Multiplicative Gaussian noise with Lee's estimation (Speckle)*/
      #NOISE_KUAN, /**< Multiplicative Gaussian noise with Kuan's estimation (Speckle) */
      #NOISE_GAUSSIAN_ADDITIVE,/**< Additive Gaussian noise */
      #NOISE_RICIAN /**< Rician noise (MRI)*/
    #};

        # ----- Noise Models
        alEnum ::noise_models
        ::noise_models.SetTitle("Noise Model")
        ::noise_models.SetHelp( "Defines the statistical distribution of the "+\
                                "noise and its estimator")
        ::noise_models.AddValue("Lee",  "Multiplicative Gaussian (Speckle) "+\
                                        "with Lee's estimation")
        ::noise_models.AddValue("Kuan", "Multiplicative Gaussian (Speckle) "+\
                                        "with Kuan's estimation")
        ::noise_models.AddValue("AddGauss", "Additive Gaussian model")
        ::noise_models.AddValue("Rician",   "Rician model (MRI)")
        ::noise_model = INT(2), ::noise_models.GetHelpMessage()
        ::noise_models.SetVariable(&::noise_model)


        # obsolete ...
        ## ----- Matrix mode
        ## 0: Grad, 1: MRI,  2:MRI_NEW 
        #alEnum ::matrix_modes
        #::matrix_modes.SetTitle("Matrix")
        #::matrix_modes.SetHelp("Diffusion Matrix mode")
        #::matrix_modes.AddValue("Gradient", "Using Gradient to compute "+\
                                            #"eigenvalues")
        #::matrix_modes.AddValue("MRI",      "Using local statistics to compute "+\
                                            #"eigenvalue in gradient direction")
        #::matrix_modes.AddValue("MRI_new",  "Using local statistics to compute "+\
                                            #"eigenvalues in all directions")
        #::matrix_mode  = INT(2), ::matrix_modes.GetHelpMessage()
        #::matrix_modes.SetVariable(&::matrix_mode)

        ::neighborhood = INT(1),  "Size of the neighborhood for local "+\
                                  "statistics, the window size is (2n+1)^3, "+\
                                  "where n is the parameter"
  
        ::sigma = 0.7,  "Gaussian convolution standard deviation for "+\
                        "computing the local structure"

        # ----- Local Structure 0: princ. curv 1: struct tensor
        alEnum ::local_struct_modes
        ::local_struct_modes.SetTitle("LocalStruct")
        ::local_struct_modes.SetHelp( "Computation of the local structure "+\
                                      "matrix")
        ::local_struct_modes.AddValue("GradCurv","Smoothed gradient and principal"+\
                                "curvature directions")
        ::local_struct_modes.AddValue("StructTensor","Structure Tensor")
        ::local_struct = INT(1),  ::local_struct_modes.GetHelpMessage()
        ::local_struct_modes.SetVariable(&::local_struct)

        # ----- Eigenvalue mode
        alEnum ::eigen_modes
        ::eigen_modes.SetTitle("EigenMode")
        ::eigen_modes.SetHelp("Eigenvalues mode, decides how to combine "+\
                              "the diffusions along each line, plane and "+\
                              "local volume.")
        ::eigen_modes.AddValue("SUM", "Taking the sum of eigenvalues (def)")
        ::eigen_modes.AddValue("MAX", "Taking the maximum of eigenvalues ")
        # Eigenvalues mode 0: SUM 1: MAX
        ::eigen_mode = INT(0),  ::eigen_modes.GetHelpMessage()
        ::eigen_modes.SetVariable(&::eigen_mode)
  
        # ----- Scheme, 0: explicit 1: semi-implicit
        alEnum ::scheme_modes
        ::scheme_modes.SetTitle("Num.Scheme")
        ::scheme_modes.SetHelp("PDE Numerical Scheme")
        ::scheme_modes.AddValue("Explicit","Explicit numerical scheme")
        ::scheme_modes.AddValue("Semi-implicit","Semi-implicit numerical "\
                                  +"scheme, Jacobi")
        ::scheme = INT(1),   ::scheme_modes.GetHelpMessage()
        ::scheme_modes.SetVariable(&::scheme)
    
        ::run_on_roi = UCHAR(0),  "Run only on the selected region-of-interest"

        ::remove_bias = UCHAR(1), "Remove bias due to Rician noise model"

        #-----------------------------------------------------------------------
        proc ::__assign__( VAR p) {
          ::t                     = p.t
          ::dt                    = p.dt
          ::noise_model           = p.noise_model
          ::contour_mode          = p.contour_mode
          #::matrix_mode           = p.matrix_mode
          ::neighborhood          = p.neighborhood
          ::sigma                 = p.sigma
          ::local_struct          = p.local_struct
          ::eigen_mode            = p.eigen_mode
          ::scheme                = p.scheme
          ::run_on_roi            = p.run_on_roi
          ::remove_bias           = p.remove_bias
        }
    }

    #---------------------------------------------------------------------------
    proc ::Init() \
    {
        ::class_name ="global::AnisoMatrixClass"
        ::input_name = ""
        # suggested 1/6 in 3D and 1/4 in 2D
  
        ::result_imagename = "global::AnisoMatrix_result", \
                              "Name of the resulting global variable."
        ::result_filename = "AnisoMatrix_result.ami.gz", \
                              "Disk filename for the resulting image."
  
        ::ParamClass ::params

        ::wiki_help = ::AmilabWiki("tutorial-nrad") 
  
        ::html_filename = GetScriptsDir+\
                          "/Denoising/AnisoMatrix/Doc/AnisoMatrix_gui/index.html"
#       ::html_filename = GetScriptsDir+"/Denoising/AnisoMatrix/Doc/AnisoMatrix_gui.html"
  
        #::CreateWindow()
        # ::ROI 
    }
    
    #---------------------------------------------------------------------------
    proc ::load_input() {
      if (::input_name=="BrowseImage") {
        # read image using browser
        ::input <<= BrowseImage
        ::input_name = "::input"
        ::win.Update(-1)
      } else {
        del ::input
        eval "::input =&"+::input_name+";"
      }
    }
  
    #--------------------------------------------------
    proc ::set_input(IMAGE im)  \
    {
      del ::input
      ::input = &im
      ::input_name = "::input"
    }

    #---------------------------------------------------------------------------
    proc ::SetNoiseStandardDeviation(NUM nsd) {
      ::exact_noise_sd = nsd
    }

    

    #---------------------------------------------------------------------------
    proc ::SetGroundTruth( IMAGE gt, NUM sigma) {
      
    
      ::groundtruth = gt
      ::noisesigma  = sigma
    }
    
    #---------------------------------------------------------------------------
    proc ::ComputeMSE( IMAGE res) {
      res1=res*res-2*::noisesigma*::noisesigma
      res1 = sqrt(res1*(res1>0))
      printn sprint("MSE %3.2f \n",mean((res1-::groundtruth)*(res1-::groundtruth)))
    
      res1=res*res-2*::noisesigma*::noisesigma
      res1 = sqrt(res1*(res1>0))
      printn sprint("MSE %3.2f (I>0) \n",mean[::groundtruth>0]((res1-::groundtruth)*(res1-::groundtruth)))
    }
    
    #---------------------------------------------------------------------------
    proc ::ReloadInput() \
    {
      if (exists(::input)) {
        delvars "::*_draw"
        if (exists(::roi)) { del ::roi; }
        if (exists(::imbox)) { del ::imbox; }
      }
      ::load_input()
      ::Display()
    }
    Comments( ::ReloadInput, "Reload input image.")
    
    #---------------------------------------------------------------------------
    proc ::SetRoiImage( IMAGE _roi) \
    {
      ::roi <<= _roi
    }
  
    #---------------------------------------------------------------------------
    proc ::GetRoi() \
    {
      if (!exists(::input)) {
        ::load_input
        ::Display()
      }
      if (exists(::input_draw)) {
        ::roi <<= ::input[::input_draw]
      }
      ::Display()
    }
    Comments( ::GetRoi, "Select the Region of Interest (ROI) for noise estimation.")
    
    #---------------------------------------------------------------------------
    proc ::FilterFlux() \
    {
      if (!exists(::input)) {
        ::load_input
      }
      numit = ::params.t/::params.dt

      ::squared = (::params.noise_model == 3) # Rician model
      if ::squared {
        # running on the squared image
        input1 <<= ::input*::input
      } else {
        input1 = &::input
      }
      if (::params.run_on_roi) {
        input1 <<= input1[::roi.GetExtent]
      }
    
      del ::NRADfilter
      ::NRADfilter = algorithms.ami_AnisoGS.AnisoGS()
      # sigma = 0.7
      # threshold = 1 // not used
      # data attachment = 0
      ::NRADfilter.Init(&input1,::params.sigma,1,0)
      ::NRADfilter.Setneighborhood(::params.neighborhood)
      ::NRADfilter.Setdt(::params.dt)
      # diffusion coefficient in minimal and maximal curvature directions
      ::NRADfilter.Setmincurv_coeff(0.5)
      ::NRADfilter.Setmaxcurv_coeff(0.01)

      ::NRADfilter.Settang_coeff(0.25)
    
      ::NRADfilter.SetSRAD_ROI(&::roi)

      ::NRADfilter.Setnoise_model(   ::params.noise_model)
      ::NRADfilter.Setcontours_mode( ::params.contour_mode)

      #if (::params.matrix_mode==1) {
        ## set Rician Noise Reducing Anisotropic Diffusion and the ROI
        ## important here to use reference to the image, 
        ## otherwise the temporary copy will be automatically deleted !!!
        #::NRADfilter.Setcontours_mode( algorithms.ami_AnisoGS.CONTOURS_OSRAD)
      #}
      #if (::params.matrix_mode==2) {
        ## set Rician Noise Reducing Anisotropic Diffusion and the ROI
        ## same comment as above
        #::NRADfilter.Setcontours_mode(algorithms.ami_AnisoGS.CONTOURS_NRAD)
        #::NRADfilter.Setnoise_model( algorithms.ami_AnisoGS.NOISE_RICIAN)
      #}
    
      ::NRADfilter.Setlocal_structure_mode(::params.local_struct)
      ::NRADfilter.Setdiffusion_eigenvalues_mode(::params.eigen_mode)
    
      # process iterations
      ::res0 <<= ::NRADfilter.GetOutput()
      if (::params.run_on_roi) {
        ::res <<= ::input
        if (::squared) { ::res0 = sqrt(::res0); }
        ::res.putimage(::res0)
      } else {
        if (::squared) { ::res0 = sqrt(::res0); }
        ::res <<= ::res0
      }

      # Output estimated noise standard deviation
      noise_variance = ::NRADfilter.Compute_sigma2_MRI_mode(&input1)
      printn " ------------------------"
      printn " Noise Standard Deviation  = %1% " % sqrt(noise_variance)
      printn " Variance = %1%" % noise_variance
      printn " ------------------------"

      fn = wx.wxFileName(::result_filename+"_noise.txt")
      if !(fn.IsDirWritable()) {
        fn.Assign(wx.wxFileName.GetTempDir(),fn.GetFullName())
      printn "Set File as %1%" % wx.FromWxString(fn.GetFullPath())
      }
      if fn.IsDirWritable() {
        noisefile = File(wx.FromWxString(fn.GetFullPath()),"w")
        noisefile._print( "noise SD = %1% \n" % sqrt(noise_variance))
      
        if (exists(::exact_noise_sd)) {
          noise_variance = ::exact_noise_sd*::exact_noise_sd
          printn " Using Given Variance = %1%" % noise_variance
          noisefile._print( "exact noise SD = %1% \n" % sqrt(noise_variance))
        }
        del noisefile
      }

      #  show ::res
      #  ::input_draw.compare(::res)
      SetProgress(0)
      RestartTime; InitTime
      for k=1 to numit {
        ::NRADfilter.Iterate()
        ::res0 <<= ::NRADfilter.GetOutput()
        ::res0 = ::res0*(::res0>0)
        if (::params.run_on_roi) {
          if (::params.remove_bias) {
            ::res0 = ::res0 - 2*noise_variance
            ::res0 = ::res0*(::res0>0)
            if (::squared) { ::res0 = sqrt(::res0); }
          } else {
            if (::squared) { ::res0 = sqrt(::res0); }
          }
          ::res.putimage(::res0)
        } else {
          if (::params.remove_bias) {
            ::res0 = ::res0 - 2*noise_variance
            ::res0 = ::res0*(::res0>0)
            if (::squared) { ::res0 = sqrt(::res0); }
            ::res <<= ::res0
          } else {
            if (::squared) { ::res0 = sqrt(::res0); }
            ::res <<= ::res0
          }
        }
        if (exists(::groundtruth)) {
          ::ComputeMSE(::res);
        }
        SetProgress((FLOAT)k/numit*100)
        show ::res
        ProcessXEvents(50)
      }
      EndTime
      SetStatusText( "processing time: "+TimeSpent)
      SetProgress(0)
    
    }
    
    #---------------------------------------------------------------------------
    proc ::Filter() {
      inittime = wx.wxDateTime.UNow()
      if (!exists(::input)) {
        ::load_input
      }
      if (!exists(::roi)) {
        InfoDialog  "Region of Interest not selected taking the full "+\
                    "image by default"
        ::roi <<= ::input
      }

      ::FilterFlux()

      diff=wx.wxDateTime.UNow()-inittime
      time_elapsed = wx.FromWxString(diff.Format("%M min %S s %l ms"))
      SetStatusText("Denoising \tDone (%1%)" % time_elapsed)
    }
    Comments( ::Filter, "Run the denoising algorithm, using the following "   +\
                        " ::FilterFlux ")
    
    #---------------------------------------------------------------------------
    proc ::Display() {
      
      if (!exists(::input)) {
        ::load_input
      }
      if (!exists(::input_draw)) {
        show ::input
      }
      // draw limits of ROI
      if exists(::roi) {
        roibox <<= ::roi[0]*0+1
        ::imbox  <<= ::input[0]*0
        ::imbox.putimage(roibox)
        del roibox
        ::input_draw.SetIsoContour(0,&::imbox,0.5)
        ::input_draw.DrawIsoContour(0,1)
        show ::input
      }
      if exists(::res) {
        show ::res
        ::res_draw.update()
        ::input_draw.compare(&::res_draw)
      }
    }
    Comments( ::Display, "Display results")
    
    #---------------------------------------------------------------------------
    proc ::CompareSurfaces(IMAGE i1, IMAGE i2) {
      
        delvars "::*_surf_draw"
        delvars "::*_surf"
        ::input_surf = CreateFlatMesh(i1,0)
        ::res_surf   = CreateFlatMesh(i2,0)
        ::input_surf.ElevateMesh(i1/10)
        ::res_surf.ElevateMesh(i2/10)
        ::input_surf.Normals()
        ::res_surf.Normals()
        show ::input_surf
        show ::res_surf
        ::input_surf_draw.compare(&::res_surf_draw)
    }
  
    #---------------------------------------------------------------------------
    proc ::DisplaySurfaces() {
      if (::input.tz==1) {
        ::CompareSurfaces(&::input,&::res)
      } else {
        if (exists(::input_draw)) {
          InfoDialog "Taking the current slice from input image viewer"
          zpos = ::input_draw.GetZPos()
        } else {
          InfoDialog "Taking the middle slice of the image"
          zpos = ::input.tz/2 
        }
        inslice = ::input[:,:,zpos:zpos]
        resslice = ::res[:,:,zpos:zpos]
        ::CompareSurfaces(&inslice,&resslice)
      }
    }
    
    #---------------------------------------------------------------------------
    proc ::Save() {
      ::res.save ::result_filename
    }
    Comments( ::Save, "Save image to disk.")
  
    #---------------------------------------------------------------------------
    proc ::SaveToImage() {
      eval ::result_imagename+" <<= ::res;"
    }
    Comments( ::SaveToImage, "Save to global image variable.")
    
  
    #---------------------------------------------------------------------------
    proc ::CB_ContourMode() \
    {
      ::params.eigen_modes.ShowParam(::params.contour_mode==2)
    }

    #---------------------------------------------------------------------------
    proc ::CB_NoiseModel() \
    {
      ::win.Enable(::bias_id,::params.noise_model==3)
    }

    #---------------------------------------------------------------------------
    proc ::Gui() {
      # parameters window
      if (exists(::parent_panel)) {
        ::win = ParamPanel("Mat.AD",&::parent_panel)
      } else {
        ::win = ParamPanel("Mat.AD")
      }
  
      ::win.BeginBook()
        ::win.AddPage("Main")
          ::win.BeginPanel("Input")
            ::input_parent = ::win.CurrentParent()
            ::input_sizer = ::win..GetCurrentSizer()
            ::win.CurrentParent().SetBackgroundColour(wx.wxColour(240,220,200))
            ::win.AddImageChoice( &::input_name, "Input")
          ::win.EndPanel()

          ::win.BeginPanel("PDE parameters",true)
            ::win.CurrentParent().SetBackgroundColour(wx.wxColour(240,210,230))
            
            ::win.BeginHorizontal()
              ::dt_id = ::win.AddFloat( &::params.dt,"dt",0.01,1)
              ::win.ShowSlider(::dt_id,false)
              ::T_id = ::win.AddFloat( &::params.t,"T",0,10)
              ::win.ShowSlider(::T_id,false)
            ::win.EndHorizontal()

            ::params.scheme_modes.SetGuiMode(1)
            ::params.scheme_modes.AddGui(&::win)
          ::win.EndPanel()


          #------------ Matrix diffusion ----------------
          ::mat_boxid = ::win.BeginBoxPanel("Matrix diffusion parameters")
            del s
            s = ::win.GetCurrentSizer()
            ::win.CurrentParent().SetBackgroundColour(wx.wxColour(200,240,230))

            ::params.local_struct_modes.SetGuiMode(1)
            ::params.local_struct_modes.AddGui(&::win)

            ::sigma_id = ::win.AddFloat( &::params.sigma,"sigma",0.5,5)
            ::win.ShowSlider(::sigma_id,false)

            #::win.BeginHorizontal()
              ::params.contour_modes.SetGuiMode(1)
              ::params.contour_modes.AddGui(&::win)
              ::params.contour_modes.SetCallback(&::CB_ContourMode)

              #::params.matrix_modes.SetGuiMode(1)
              #::params.matrix_modes.AddGui(&::win)
              #s.GetItem(1).SetFlag(wx.wxALIGN_CENTER_HORIZONTAL)
      
          
              ::params.eigen_modes.SetGuiMode(1)
              ::params.eigen_modes.AddGui(&::win)
              #s.GetItem(3).SetFlag(wx.wxALIGN_CENTER_HORIZONTAL)
            #::win.EndHorizontal()

          ::win.EndBoxPanel()
          
          #------------ Noise ----------------
          ::win.BeginBoxPanel("Noise parameters")
            ::win.CurrentParent().SetBackgroundColour(wx.wxColour(240,240,220))

            ::win.BeginHorizontal()
              ::params.noise_models.SetGuiMode(1)
              ::params.noise_models.AddGui(&::win)
              ::params.noise_models.SetCallback(&::CB_NoiseModel)
            ::win.EndHorizontal()
            ::win.BeginHorizontal()
              ::bias_id = ::win.AddBoolean( &::params.remove_bias,"Remove Bias")
              ::neigh_id = ::win.AddInt(  &::params.neighborhood,\
                                        "Neighborhood",0,4)
            ::win.EndHorizontal()
            ::win.ShowSlider(::neigh_id,false)
            # Recompute text size ?
            #::win.IntegerConstraints(::neigh_id,0,10,1)
         ::win.EndBoxPanel()
          
          #------------ Controls ----------------
          ::win.BeginPanel("Controls")
            ::win.CurrentParent().SetBackgroundColour(wx.wxColour(200,220,250))
            del s
            s = ::win.GetCurrentSizer()
            ::win.BeginHorizontal()
              ::AddBitmapButton(&::win, &::icons._Refresh,   32, "ReloadInput")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Selection, 32, "GetRoi")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Apply,     32, "Filter")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Show,      32, "Display")
              ::win.SetPositionProp(-1,0)
            ::win.EndHorizontal()
            s.GetItem(0).SetFlag(wx.wxALIGN_CENTER_HORIZONTAL)
            ::win.BeginHorizontal()
              ::win.AddBoolean( &::params.run_on_roi,"Run on ROI")
              ::win.AddButton("Display Surfaces", ::DisplaySurfaces)
            ::win.EndHorizontal()
            s.GetItem(1).SetFlag(wx.wxALIGN_CENTER_HORIZONTAL)
          ::win.EndPanel()
          
        ::win.AddPage("Save")
          ::win.BeginBoxPanel("Result --> disk")
            ::win.BeginHorizontal()
              ::win.AddString(&::result_filename,"File")
              # make it proportional
              ::win.SetPositionProp(1)
              ::AddBitmapButton16(&::win, &::icons._Save, "Save")
            ::win.EndHorizontal()
          ::win.EndBoxPanel()
          ::win.BeginBoxPanel("Result --> global variable")
            ::win.BeginHorizontal()
              ::win.AddString(&::result_imagename,"Name")
              # make it proportional
              ::win.SetPositionProp(1)
              ::AddBitmapButton16(&::win, &::icons._Copy, "SaveToImage")
            ::win.EndHorizontal()
          ::win.EndBoxPanel()

          ::AddParamPage(&::win)
          if wx.wxFileName(::html_filename).FileExists() {
            ::AddHelpPage(&::win)
          }
  
      ::win.EndBook()
  
      ::AddStandardButtons(&::win)
      
      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::CB_NoiseModel()
      ::CB_ContourMode()
      ::win.Update(-1)
    }
    #---------------------------------------------------------------------------
    
    ::Init()
  
  }#End of Class

}#End of if

