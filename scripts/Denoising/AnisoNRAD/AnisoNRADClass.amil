#!/usr/bin/amilab

#
# Noise Reducing Anisotropic Diffusion
#
# Based on the paper of Yu and Acton: Speckle Reducing Anisotropic Diffusion TIP 2002
# and
# Krissian and Aja-Fernandez TIP 2009
#

# call 
# ::CreateParams( IMAGE)
# and
# ::CreateWindow()
#
# result in ::res
#
# Style Conventions:
#   all variables and functions will start with ::
#   function variables will start with an uppercase character after
#   other variables will start with a lowercase character
#
# ::resultname = $2

func "Common/ScriptGui"

if (!exists(AnisoNRADClass)) {


  Class AnisoNRADClass : public ScriptGui {

    func "Variable/ObjectIO"
    # 
    #===========================================================================
    Class ::ParamClass : public ObjectIO {

        ::description = "Default parameters", \
                        "Description of the set of parameters"

        ::dt   = 1.0/6.0, "Time step for the Partial Differential Equation"
        ::t    = 2.0,     "Total diffusion time of the equation"
  
        # 0: Lee, 1: Kuan, 2: Additive, 3: MRI
        ::scalar_modes = VarVector()
          ::scalar_modes.push_back("Lee")
          ::scalar_modes.push_back("Kuan")
          ::scalar_modes.push_back("Additive")
          ::scalar_modes.push_back("MRI")
          ::scalar_modes.push_back("MRI new")
        mess = ""
        for n=0 to ::scalar_modes.size()-1 { mess += "'%1%' " % ::scalar_modes[n]; }
        ::scalar_mode = INT(3), "Scalar mode (%1%)" % mess
  
        ::estimate_noise_from_histogram = UCHAR(0), "EStimate the noise from "+\
          "the mode of the histogram (only for scalar additive equation)"

        # 0: Grad, 1: MRI,  2:MRI_NEW 
        ::matrix_mode  = INT(2), "Matrix mode: 0:Gradient, 1:MRI or 2:MRI_new"
        ::neighborhood = INT(1),  "Size of the neighborhood for local "+\
                                  "statistics, the window size is (2n+1)^3, "+\
                                  "where n is the parameter"
  
        ::sigma = 0.7,  "Gaussian convolution standard deviation for "+\
                        "computing the local structure"
        # Local Structure 0: princ. curv 1: struct tensor
        ::local_struct = INT(1),    "Local Structure mode: either gradient "+\
                                    "and principal curvature directions, or "+\
                                    "structure tensor eigenvectors"
        # Eigenvalues mode 0: SUM 1: MAX
        ::eigen_mode = INT(0),  "Eigenvalues mode, decides how to combine "+\
                                "the diffusions along each line, plane and "+\
                                "local volume: either the sum, or the maximum "+\
                                "(default is sum)"
  
        # 0: scalar diffusion, 1: matrix diffusion equation
        ::equation_types = VarVector()
          ::equation_types.push_back("Scalar")
          ::equation_types.push_back("Matrix")
        mess = ""
        for n=0 to ::equation_types.size()-1 { 
          mess += "'%1%' " % ::equation_types[n];
        }
        ::equation_type = INT(0), "Equation type (%1%)" % mess
  
        # Scheme, 0: explicit 1: semi-implicit
        ::scheme = INT(1),        "Numerical scheme: explicit or semi-implicit"
    
        ::run_on_roi = UCHAR(0),  "Run only on the selected region-of-interest"

        ::remove_bias = UCHAR(1), "Remove bias due to Rician noise model"

        #-----------------------------------------------------------------------
        proc ::__assign__( VAR p) {
          ::t                     = p.t
          ::dt                    = p.dt
          ::scalar_mode           = p.scalar_mode
          ::matrix_mode           = p.matrix_mode
          ::neighborhood          = p.neighborhood
          ::sigma                 = p.sigma
          ::local_struct          = p.local_struct
          ::eigen_mode            = p.eigen_mode
          ::equation_type         = p.equation_type
          ::scheme                = p.scheme
          ::run_on_roi            = p.run_on_roi
          ::remove_bias           = p.remove_bias
        }
    }

    #---------------------------------------------------------------------------
    proc ::Init() \
    {
        ::class_name ="global::AnisoNRADClass"
        ::input_name = ""
        # suggested 1/6 in 3D and 1/4 in 2D
  
        ::result_imagename = "global::AnisoNRAD_result", \
                              "Name of the resulting global variable."
        ::result_filename = "AnisoNRAD_result.ami.gz", \
                              "Disk filename for the resulting image."
  
        ::ParamClass ::params

        ::wiki_help = ::AmilabWiki("tutorial-nrad") 
  
        ::html_filename = GetScriptsDir+\
                          "/Denoising/AnisoNRAD/Doc/AnisoNRAD_gui/index.html"
#       ::html_filename = GetScriptsDir+"/Denoising/AnisoNRAD/Doc/AnisoNRAD_gui.html"
  
        #::CreateWindow()
        # ::ROI 
    }
    
    #---------------------------------------------------------------------------
    proc ::load_input() {
      if (::input_name=="BrowseImage") {
        # read image using browser
        ::input <<= BrowseImage
        ::input_name = "::input"
        ::win.Update(-1)
      } else {
        del ::input
        eval "::input =&"+::input_name+";"
      }
    }
  
    #--------------------------------------------------
    proc ::set_input(IMAGE im)  \
    {
      del ::input
      ::input = &im
      ::input_name = "::input"
    }

    #---------------------------------------------------------------------------
    proc ::SetNoiseStandardDeviation(NUM nsd) {
      ::exact_noise_sd = nsd
    }

    

    #---------------------------------------------------------------------------
    proc ::SetGroundTruth( IMAGE gt, NUM sigma) {
      
    
      ::groundtruth = gt
      ::noisesigma  = sigma
    }
    
    #---------------------------------------------------------------------------
    proc ::ComputeMSE( IMAGE res) {
      res1=res*res-2*::noisesigma*::noisesigma
      res1 = sqrt(res1*(res1>0))
      printn sprint("MSE %3.2f \n",mean((res1-::groundtruth)*(res1-::groundtruth)))
    
      res1=res*res-2*::noisesigma*::noisesigma
      res1 = sqrt(res1*(res1>0))
      printn sprint("MSE %3.2f (I>0) \n",mean[::groundtruth>0]((res1-::groundtruth)*(res1-::groundtruth)))
    }
    
    #---------------------------------------------------------------------------
    proc ::ReloadInput() \
    {
      if (exists(::input)) {
        delvars "::*_draw"
        if (exists(::roi)) { del ::roi; }
        if (exists(::imbox)) { del ::imbox; }
      }
      ::load_input()
      ::Display()
    }
    Comments( ::ReloadInput, "Reload input image.")
    
    #---------------------------------------------------------------------------
    proc ::SetRoiImage( IMAGE _roi) \
    {
      ::roi <<= _roi
    }
  
    #---------------------------------------------------------------------------
    proc ::GetRoi() \
    {
      if (!exists(::input)) {
        ::load_input
        ::Display()
      }
      if (exists(::input_draw)) {
        ::roi <<= ::input[::input_draw]
      }
      ::Display()
    }
    Comments( ::GetRoi, "Select the Region of Interest (ROI) for noise estimation.")
    
    #---------------------------------------------------------------------------
    proc ::FilterFlux() \
    {
      if (!exists(::input)) {
        ::load_input
      }
      numit = ::params.t/::params.dt
      # running on the squared image
      input1 = ::input*::input
      if (::params.run_on_roi) {
        input1 <<= input1[::roi.GetExtent]
      }
    
      if (exists(::NRADfilter)) { del ::NRADfilter; }
      ::NRADfilter = filters.AnisoGS()
      # sigma = 0.7
      # threshold = 1 // not used
      # data attachment = 0
      ::NRADfilter.Init(input1,::params.sigma,1,0)
      ::NRADfilter.Setneighborhood(::params.neighborhood)
      ::NRADfilter.Setdt(::params.dt)
      # diffusion coefficient in minimal and maximal curvature directions
      ::NRADfilter.setcoeff(0.5,0.01)
    
      if (::params.matrix_mode==1) {
        # set Rician Noise Reducing Anisotropic Diffusion and the ROI
        # important here to use reference to the image, 
        # otherwise the temporary copy will be automatically deleted !!!
        ::NRADfilter.SetRNRADROI(&::roi)
      }
      if (::params.matrix_mode==2) {
        # set Rician Noise Reducing Anisotropic Diffusion and the ROI
        # same comment as above
        ::NRADfilter.SetRNRADROI_NEW(&::roi)
      }
    
      ::NRADfilter.SetLocalStruct(::params.local_struct)
      ::NRADfilter.SetEigenMode(  ::params.eigen_mode)
    
      # process iterations
      ::res0 <<= ::NRADfilter.GetOutput()
      if (::params.run_on_roi) {
        ::res <<= ::input
        ::res0 = sqrt(::res0)
        ::res.putimage(::res0)
      } else {
        ::res <<= sqrt(::res0)
      }

      # Output estimated noise standard deviation
      noise_variance = ::NRADfilter.Compute_sigma2_MRI_mode(&input1)
      printn " ------------------------"
      printn " Noise Standard Deviation  = %1% " % sqrt(noise_variance)
      printn " Variance = %1%" % noise_variance
      printn " ------------------------"

      fn = wx.wxFileName(::result_filename+"_noise.txt")
      if !(fn.IsDirWritable()) {
        fn.Assign(wx.wxFileName.GetTempDir(),fn.GetFullName())
      printn "Set File as %1%" % fn.GetFullPath().c_str()
      }
      if fn.IsDirWritable() {
        noisefile = File(fn.GetFullPath().c_str(),"w")
        noisefile._print( "noise SD = %1% \n" % sqrt(noise_variance))
      
        if (exists(::exact_noise_sd)) {
          noise_variance = ::exact_noise_sd*::exact_noise_sd
          printn " Using Given Variance = %1%" % noise_variance
          noisefile._print( "exact noise SD = %1% \n" % sqrt(noise_variance))
        }
        del noisefile
      }

      #  show ::res
      #  ::input_draw.compare(::res)
      SetProgress(0)
      RestartTime; InitTime
      for k=1 to numit {
        ::NRADfilter.Iterate()
        ::res0 = ::NRADfilter.GetOutput()
        ::res0 = ::res0*(::res0>0)
        if (::params.run_on_roi) {
          if (::params.remove_bias) {
            ::res0 = ::res0 - 2*noise_variance
            ::res0 = ::res0*(::res0>0)
            ::res0 = sqrt(::res0)
          } else {
            ::res0 = sqrt(::res0)
          }
          ::res.putimage(::res0)
        } else {
          if (::params.remove_bias) {
            ::res0 = ::res0 - 2*noise_variance
            ::res0 = ::res0*(::res0>0)
            ::res = sqrt(::res0)
          } else {
            ::res = sqrt(::res0)
          }
        }
        if (exists(::groundtruth)) {
          ComputeMSE(::res);
        }
        SetProgress((FLOAT)k/numit*100)
        show ::res
        ProcessXEvents(50)
      }
      EndTime
      SetStatusText( "processing time: "+TimeSpent)
      SetProgress(0)
    
    //  ::NRADfilter.end
    //  hide ::res
    }
    
    #---------------------------------------------------------------------------
    proc ::Filter() {
      inittime = wx.wxDateTime.UNow()
      if (!exists(::input)) {
        ::load_input
      }
      if (!exists(::roi)) {
        InfoDialog  "Region of Interest not selected taking the full "+\
                    "image by default"
        ::roi = ::input
      }
  
      if (::params.equation_types[::params.equation_type]=="Matrix") {
        ::FilterFlux()
      } else {
        numit = ::params.t/::params.dt
        if (::params.scalar_modes[::params.scalar_mode]=="MRI") {
            printn "running on squared image"
            local::input1 = ::input*::input
            ::res <<= \
              algorithms.ami_SRAD.AnisoNRAD(&input1,\
                                            ::params.scalar_mode,\
                                            ::params.dt,\
                                            numit,\
                                            ::params.neighborhood,\
                                            ::roi.GetExtent)
            ::res <<= sqrt(::res)
        } else {
          if ::params.scalar_modes[::params.scalar_mode]=="Additive" \
          {
            noiseestim_mode_bak = algorithms.ami_SRAD.GetNoiseEstimationMode()
            algorithms.ami_SRAD.SetNoiseEstimationMode(\
              ::params.estimate_noise_from_histogram)
          }
          if (::input.vdim ==1) {
            ::res <<= \
              algorithms.ami_SRAD.AnisoNRAD(&::input,::params.scalar_mode,\
                                            ::params.dt,numit,\
                                            ::params.neighborhood,\
                                            ::roi.GetExtent)
          } else {
            ::res <<= ::input
            for n=0 to ::input.vdim-1 {
              if exists(tmp) { del tmp; }
              tmp = &::input[n]
              res = \
                algorithms.ami_SRAD.AnisoNRAD(&tmp,::params.scalar_mode,\
                                              ::params.dt,numit,\
                                              ::params.neighborhood,\
                                              ::roi.GetExtent)
              ::res.SetComponent(n, res)
            }
          }
          if ::params.scalar_modes[::params.scalar_mode]=="Additive" \
          {
            algorithms.ami_SRAD.SetNoiseEstimationMode( noiseestim_mode_bak)
          }
        }
      }
      diff=wx.wxDateTime.UNow()-inittime
      time_elapsed = diff.Format("%M min %S s %l ms").c_str()
      SetStatusText("Denoising \tDone (%1%)" % time_elapsed)
    }
    Comments( ::Filter, "Run the denoising algorithm, using the following "   +\
                        "criteria:       - if equation_type is 0 (scalar): "  +\
                        "- if scalar_mode is 3 (MRI) runs AnisoRNAD on the "  +\
                        "image squared,          - otherwise, runs AnisoRNAD "+\
                        "on the initial image      - otherwise (matrix "      +\
                        "equation):          - calls ::FilterFlux ")
    
    #---------------------------------------------------------------------------
    proc ::Display() {
      
      if (!exists(::input)) {
        ::load_input
      }
      if (!exists(::input_draw)) {
        show ::input
      }
      // draw limits of ROI
      if exists(::roi) {
        roibox = ::roi[0]*0+1
        ::imbox  <<= ::input[0]*0
        ::imbox.putimage(roibox)
        del roibox
        ::input_draw.SetIsoContour(0,&::imbox,0.5)
        ::input_draw.DrawIsoContour(0,1)
        show ::input
      }
      if exists(::res) {
        show ::res
        ::res_draw.update()
        ::input_draw.compare(&::res_draw)
      }
    }
    Comments( ::Display, "Display results")
    
    proc ::CompareSurfaces(IMAGE i1, IMAGE i2) {
      
        delvars "::*_surf_draw"
        delvars "::*_surf"
        ::input_surf = CreateFlatMesh(i1,0)
        ::res_surf   = CreateFlatMesh(i2,0)
        ::input_surf.ElevateMesh(i1/10)
        ::res_surf.ElevateMesh(i2/10)
        ::input_surf.Normals()
        ::res_surf.Normals()
        show ::input_surf
        show ::res_surf
        ::input_surf_draw.compare(&::res_surf_draw)
    }
  
    proc ::DisplaySurfaces() {
      if (::input.tz==1) {
        ::CompareSurfaces(&::input,&::res)
      } else {
        if (exists(::input_draw)) {
          InfoDialog "Taking the current slice from input image viewer"
          zpos = ::input_draw.GetZPos()
        } else {
          InfoDialog "Taking the middle slice of the image"
          zpos = ::input.tz/2 
        }
        inslice = ::input[:,:,zpos:zpos]
        resslice = ::res[:,:,zpos:zpos]
        ::CompareSurfaces(&inslice,&resslice)
      }
    }
    
    proc ::Save() {
      ::res.save ::result_filename
    }
    Comments( ::Save, "Save image to disk.")
  
    proc ::SaveToImage() {
      eval ::result_imagename+" <<= ::res;"
    }
    Comments( ::SaveToImage, "Save to global image variable.")
    
    proc ::new_eq_type() {
      ::win.EnablePanel(::mat_boxid, ::params.equation_type==1)
      #::win.Enable(::sigma_id, ::params.equation_type==1)
      #::win.Enable(::matrix_mode_id, ::params.equation_type==1)
      #::win.Enable(::localstruct_id, ::params.equation_type==1)
      #::win.Enable(::eigenmode_id, ::params.equation_type==1)
  
      ::win.EnablePanel(::scal_boxid,::params.equation_type!=1)
      #::win.Enable(::params.scalar_mode_id,::params.equation_type!=1)

      ::win.Enable( ::histomode_id, \
                    ::params.scalar_modes[::params.scalar_mode]=="Additive")
    }
    
  
    #---------------------------------------------------------------------------
    proc ::Gui() {
      # parameters window
      if (exists(::parent_panel)) {
        ::win = ParamPanel("NRAD",&::parent_panel)
      } else {
        ::win = ParamPanel("NRAD")
      }
  
      ::win.BeginBook()
        ::win.AddPage("Param")
          ::win.AddImageChoice( &::input_name, "Input")
          ::win.AddFloat( &::params.dt,"dt",0.01,1)
          ::win.AddFloat( &::params.t,"T",0,10)
          
          ::win.AddInt( &::params.neighborhood,"Neighborhood",0,4)
      
          ::win.BeginHorizontal()
            ::scheme_id       = ::win.AddEnum( &::params.scheme,"Sch.")
              ::win.AddEnumChoice(::scheme_id,"Expl.")
              ::win.AddEnumChoice(::scheme_id,"Semi-impl.")
          
            ::eq_type_id      = ::win.AddEnum( &::params.equation_type,"Eq.")
              for n=0 to ::params.equation_types.size()-1 { 
                ::win.AddEnumChoice(::eq_type_id,::params.equation_types[n])
              }
            ::win.SetCallback( &::new_eq_type)
          ::win.EndHorizontal()

      
          ::scal_boxid = ::win.BeginBoxPanel("Scalar diffusion parameters")
            ::scalar_mode_id = ::win.AddEnum( &::params.scalar_mode,\
                                              "Scalar mode")
              for n=0 to ::params.scalar_modes.size()-1 { 
                ::win.AddEnumChoice(::scalar_mode_id,::params.scalar_modes[n])
              }
            ::win.SetCallback( &::new_eq_type)
          ::win.EndBoxPanel()

          ::histomode_id = ::win.AddBoolean(&::params.estimate_noise_from_histogram, \
              "Estimate noise from histogram ")
  
          ::mat_boxid = ::win.BeginBoxPanel("Matrix diffusion parameters")
            ::sigma_id = ::win.AddFloat( &::params.sigma,"sigma",0.01,10)
            ::matrix_mode_id = ::win.AddEnum( &::params.matrix_mode,\
                                              "Matrix mode")
              ::win.AddEnumChoice(::matrix_mode_id,"Grad")
              ::win.AddEnumChoice(::matrix_mode_id,"MRI")
              ::win.AddEnumChoice(::matrix_mode_id,"MRI new")
    
            ::localstruct_id = ::win.AddEnum( &::params.local_struct,\
                                              "Local Struct.")
              ::win.AddEnumChoice(::localstruct_id,"Grad & Curv. Dir.")
              ::win.AddEnumChoice(::localstruct_id,"Struct. Tensor")
        
            ::eigenmode_id = ::win.AddEnum( &::params.eigen_mode,"Eigen mode")
              ::win.AddEnumChoice(::eigenmode_id,"Sum")
              ::win.AddEnumChoice(::eigenmode_id,"Max")
          ::win.EndBoxPanel()
          
          ::win.AddPage("Controls")
            ::win.BeginHorizontal()
              ::AddBitmapButton(&::win, &::icons._Refresh,   32, "ReloadInput")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Selection, 32, "GetRoi")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Apply,     32, "Filter")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Show,      32, "Display")
              ::win.SetPositionProp(-1,0)
            ::win.EndHorizontal()
            ::win.AddBoolean( &::params.run_on_roi,"Run on ROI")
            ::win.AddBoolean( &::params.remove_bias,"Remove Bias")
            ::win.AddButton("Display Surfaces", ::DisplaySurfaces)
            ::win.BeginBoxPanel("Result --> disk")
              ::win.BeginHorizontal()
                ::win.AddString(&::result_filename,"File")
                # make it proportional
                ::win.SetPositionProp(1)
                ::AddBitmapButton16(&::win, &::icons._Save, "Save")
              ::win.EndHorizontal()
            ::win.EndBoxPanel()
            ::win.BeginBoxPanel("Result --> global variable")
              ::win.BeginHorizontal()
                ::win.AddString(&::result_imagename,"Name")
                # make it proportional
                ::win.SetPositionProp(1)
                ::AddBitmapButton16(&::win, &::icons._Copy, "SaveToImage")
              ::win.EndHorizontal()
            ::win.EndBoxPanel()

          ::AddParamPage(&::win)
          ::AddHelpPage(&::win)
  
      ::win.EndBook()
  
      ::AddStandardButtons(&::win)
      
      if (exists(::parent_panel)) {
        ::win.ShowPanel()
      } else {
        ::win.Display()
      }
      ::win.Update(-1)
      ::new_eq_type()
    }
    #---------------------------------------------------------------------------
    
    ::Init()
  
  }#End of Class

}#End of if

