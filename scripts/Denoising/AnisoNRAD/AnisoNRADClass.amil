#!/usr/bin/amilab

#
# Noise Reducing Anisotropic Diffusion
#
# Based on the paper of Yu and Acton: Speckle Reducing Anisotropic Diffusion TIP 2002
# and
# Krissian and Aja-Fernandez TIP 2009
#

# call 
# ::CreateParams( IMAGE)
# and
# ::CreateWindow()
#
# result in ::res
#
# Style Conventions:
#   all variables and functions will start with ::
#   function variables will start with an uppercase character after
#   other variables will start with a lowercase character
#
# ::resultname = $2

func "Common/ScriptGui"

if (!exists(AnisoNRADClass)) {

  ami_import->Filters()

  Class AnisoNRADClass : public ScriptGui {

    #----------------------------
    proc ::Init() \
    {
        ::class_name ="global::AnisoNRADClass"
        ::input_name = ""
        # suggested 1/6 in 3D and 1/4 in 2D
        ::dt   = 1.0/6.0, "Time step for the Partial Differential Equation"
        ::t    = 2.0, "Total diffusion time of the equation"
  
        # 0: Lee, 1: Kuan, 2: Additive, 3: MRI
        ::scalar_mode = INT(3), "Scalar mode: Lee, Kuan, Additive or MRI"
  
        # 0: Grad, 1: MRI,  2:MRI_NEW 
        ::matrix_mode = INT(2), "Matrix mode: 0:Gradient, 1:MRI or 2:MRI_new"
  
        ::neighborhood = INT(1), "Size of the neighborhood for local statistics, the window size is (2n+1)^3, where n is the parameter"
  
        ::sigma = 0.7, "Gaussian convolution standard deviation for computing the local structure"
        # Local Structure 0: princ. curv 1: struct tensor
        ::local_struct = INT(1), "Local Structure mode: either gradient and principal curvature directions, or structure tensor eigenvectors"
        # Eigenvalues mode 0: SUM 1: MAX
        ::eigen_mode = INT(0), "Eigenvalues mode, decides how to combine the diffusions along each line, plane and local volume: either the sum, or the maximum (default is sum)"
  
        # 0: scalar diffusion, 1: matrix diffusion equation
        ::equation_type = INT(0), "Equation type: 0:scalar or 1:matrix"
  
        # Scheme, 0: explicit 1: semi-implicit
        ::scheme = INT(1), "Numerical scheme: explicit or semi-implicit"
    
        ::run_on_roi = UCHAR(0), "Run only on the selected region-of-interest"

        ::remove_bias = UCHAR(1), "Remove bias due to Rician noise model"
  
        ::result_imagename = "global::AnisoNRAD_result", "Name of the resulting global variable."
        ::result_filename = "AnisoNRAD_result.ami.gz", "Disk filename for the resulting image."
  
  
        ::wiki_help = ::AmilabWiki("tutorial-nrad") 
  
        ::html_filename = GetScriptsDir+"/Denoising/AnisoNRAD/Doc/AnisoNRAD_gui/index.html"
#       ::html_filename = GetScriptsDir+"/Denoising/AnisoNRAD/Doc/AnisoNRAD_gui.html"
  
        ::CreateWindow()
        # ::ROI 
    }
    
    #----------------------------
    proc ::load_input() {
      if (::input_name=="BrowseImage") {
        # read image using browser
        ::input <<= BrowseImage
        ::input_name = "::input"
        ::win.Update(-1)
      } else {
        eval "::input <<="+::input_name+";"
      }
    }
  

    #------------------------------------
    proc ::SetNoiseStandardDeviation(NUM nsd) {
      ::exact_noise_sd = nsd
    }

    

    #------------------------------------
    proc ::SetGroundTruth( IMAGE gt, NUM sigma) {
      
    
      ::groundtruth = gt
      ::noisesigma  = sigma
    }
    
    #------------------------------------
    proc ::ComputeMSE( IMAGE res) {
      res1=res*res-2*::noisesigma*::noisesigma
      res1 = sqrt(res1*(res1>0))
      printn sprint("MSE %3.2f \n",mean((res1-::groundtruth)*(res1-::groundtruth)))
    
      res1=res*res-2*::noisesigma*::noisesigma
      res1 = sqrt(res1*(res1>0))
      printn sprint("MSE %3.2f (I>0) \n",mean[::groundtruth>0]((res1-::groundtruth)*(res1-::groundtruth)))
    }
    
    #------------------------------------
    proc ::ReloadInput() \
    {
      if (exists(::input)) {
        delvars "::*_draw"
        if (exists(::roi)) { del ::roi; }
        if (exists(::imbox)) { del ::imbox; }
      }
      ::load_input()
      ::Display()
    }
    Comments( ::ReloadInput, "Reload input image.")
    
    #------------------------------------
    proc ::SetRoiImage( IMAGE _roi) \
    {
      ::roi <<= _roi
    }
  
    #------------------------------------
    proc ::GetRoi() \
    {
      if (!exists(::input)) {
        ::load_input
        ::Display()
      }
      if (exists(::input_draw)) {
        ::roi <<= ::input[::input_draw]
      }
      ::Display()
    }
    Comments( ::GetRoi, "Select the Region of Interest (ROI) for noise estimation.")
    
    #------------------------------------
    proc ::FilterFlux() \
    {
      if (!exists(::input)) {
        ::load_input
      }
      numit = ::t/::dt
      # running on the squared image
      input1 = ::input*::input
      if (::run_on_roi) {
        input1 <<= input1[::roi.GetExtent]
      }
    
      if (exists(::NRADfilter)) { del ::NRADfilter; }
      ::NRADfilter = global::filters.AnisoGS()
      # sigma = 0.7
      # threshold = 1 // not used
      # data attachment = 0
      ::NRADfilter.Init(input1,::sigma,1,0)
      ::NRADfilter.Setneighborhood(::neighborhood)
      ::NRADfilter.Setdt(::dt)
      # diffusion coefficient in minimal and maximal curvature directions
      ::NRADfilter.setcoeff(0.5,0.01)
    
      if (::matrix_mode==1) {
        # set Rician Noise Reducing Anisotropic Diffusion and the ROI
        # important here to use reference to the image, otherwise the temporary copy will be automatically deleted !!!
        ::NRADfilter.SetRNRADROI(&::roi)
      }
      if (::matrix_mode==2) {
        # set Rician Noise Reducing Anisotropic Diffusion and the ROI
        # same comment as above
        ::NRADfilter.SetRNRADROI_NEW(&::roi)
      }
    
      ::NRADfilter.SetLocalStruct(::local_struct)
      ::NRADfilter.SetEigenMode(  ::eigen_mode)
    
      # process iterations
      ::res0 <<= ::NRADfilter.GetOutput()
      if (::run_on_roi) {
        ::res <<= ::input
        ::res0 = sqrt(::res0)
        ::res.putimage(::res0)
      } else {
        ::res <<= sqrt(::res0)
      }

      # Output estimated noise standard deviation
      noise_variance = ::NRADfilter.Compute_sigma2_MRI_mode(&input1)
      printn " ------------------------"
      printn " Noise Standard Deviation  = %1% " % sqrt(noise_variance)
      printn " Variance = %1%" % noise_variance
      printn " ------------------------"

      noisefile = File(::result_filename+"_noise.txt","w")
      noisefile._print( "noise SD = %1% \n" % sqrt(noise_variance))
      
      if (exists(::exact_noise_sd)) {
        noise_variance = ::exact_noise_sd*::exact_noise_sd
        printn " Using Given Variance = %1%" % noise_variance
        noisefile._print( "exact noise SD = %1% \n" % sqrt(noise_variance))
      }
      del noisefile

    #  show ::res
    #  ::input_draw.compare(::res)
      SetProgress(0)
      RestartTime; InitTime
      for k=1 to numit {
        ::NRADfilter.Iterate()
        ::res0 = ::NRADfilter.GetOutput()
        ::res0 = ::res0*(::res0>0)
        if (::run_on_roi) {
          if (::remove_bias) {
            ::res0 = ::res0 - 2*noise_variance
            ::res0 = ::res0*(::res0>0)
            ::res0 = sqrt(::res0)
          } else {
            ::res0 = sqrt(::res0)
          }
          ::res.putimage(::res0)
        } else {
          if (::remove_bias) {
            ::res0 = ::res0 - 2*noise_variance
            ::res0 = ::res0*(::res0>0)
            ::res = sqrt(::res0)
          } else {
            ::res = sqrt(::res0)
          }
        }
        if (exists(::groundtruth)) {
          ComputeMSE(::res);
        }
        SetProgress((FLOAT)k/numit*100)
        show ::res
        ProcessXEvents(50)
      }
      EndTime
      SetStatusText( "processing time: "+TimeSpent)
      SetProgress(0)
    
    //  ::NRADfilter.end
    //  hide ::res
    }
    
    #------------------------------------
    proc ::Filter() {
      if (!exists(::input)) {
        ::load_input
      }
      if (!exists(::roi)) {
        InfoDialog "Region of Interest not selected taking the full image by default"
        ::roi = ::input
      }
  
      if (::equation_type==1) {
        ::FilterFlux()
      } else {
        numit = ::t/::dt
        if (::scalar_mode==3) {
            printn "running on squared image"
            local::input1 = ::input*::input
            ::res <<= AnisoNRAD(input1,::scalar_mode,\
                        ::dt,numit,::neighborhood,::roi.GetExtent)
            ::res <<= sqrt(::res)
        } else {
          if (::input.vdim ==1) {
            ::res <<= AnisoNRAD(::input,::scalar_mode,\
                        ::dt,numit,::neighborhood,::roi.GetExtent)
          } else {
            ::res <<= ::input
            for n=0 to ::input.vdim-1 {
              if exists(tmp) { del tmp; }
              tmp = &::input[n]
              res = AnisoNRAD(tmp,::scalar_mode,\
                        ::dt,numit,::neighborhood,::roi.GetExtent)
              ::res.SetComponent(n, res)
            }
          }
        }
      }
    }
    Comments( ::Filter, "Run the denoising algorithm, using the following criteria:       - if equation_type is 0 (scalar):          - if scalar_mode is 3 (MRI) runs AnisoRNAD on the image squared,          - otherwise, runs AnisoRNAD on the initial image      - otherwise (matrix equation):          - calls ::FilterFlux ")
    
    #------------------------------------
    proc ::Display() {
      
      if (!exists(::input)) {
        ::load_input
      }
      if (!exists(::input_draw)) {
        show ::input
      }
      // draw limits of ROI
      if exists(::roi) {
        roibox = ::roi[0]*0+1
        ::imbox  <<= ::input[0]*0
        ::imbox.putimage(roibox)
        del roibox
        ::input_draw.SetIsoContour(0,&::imbox,0.5)
        ::input_draw.DrawIsoContour(0,1)
        show ::input
      }
      if exists(::res) {
        show ::res
        ::res_draw.update()
        ::input_draw.compare(&::res_draw)
      }
    }
    Comments( ::Display, "Display results")
    
    proc ::CompareSurfaces(IMAGE i1, IMAGE i2) {
      
        delvars "::*_surf_draw"
        delvars "::*_surf"
        ::input_surf = CreateFlatMesh(i1,0)
        ::res_surf   = CreateFlatMesh(i2,0)
        ::input_surf.ElevateMesh(i1/10)
        ::res_surf.ElevateMesh(i2/10)
        ::input_surf.Normals()
        ::res_surf.Normals()
        show ::input_surf
        show ::res_surf
        ::input_surf_draw.compare(&::res_surf_draw)
    }
  
    proc ::DisplaySurfaces() {
      if (::input.tz==1) {
        ::CompareSurfaces(&::input,&::res)
      } else {
        if (exists(::input_draw)) {
          InfoDialog "Taking the current slice from input image viewer"
          zpos = ::input_draw.GetZPos()
        } else {
          InfoDialog "Taking the middle slice of the image"
          zpos = ::input.tz/2 
        }
        inslice = ::input[:,:,zpos:zpos]
        resslice = ::res[:,:,zpos:zpos]
        ::CompareSurfaces(&inslice,&resslice)
      }
    }
    
    proc ::Save() {
      ::res.save ::result_filename
    }
    Comments( ::Save, "Save image to disk.")
  
    proc ::SaveToImage() {
      eval ::result_imagename+" <<= ::res;"
    }
    Comments( ::SaveToImage, "Save to global image variable.")
    
    proc ::new_eq_type() {
      ::win.EnablePanel(::mat_boxid, ::equation_type==1)
      #::win.Enable(::sigma_id, ::equation_type==1)
      #::win.Enable(::matrix_mode_id, ::equation_type==1)
      #::win.Enable(::localstruct_id, ::equation_type==1)
      #::win.Enable(::eigenmode_id, ::equation_type==1)
  
      ::win.EnablePanel(::scal_boxid,::equation_type!=1)
      #::win.Enable(::scalar_mode_id,::equation_type!=1)
    }
    
  
    #------------------------------------
    proc ::CreateWindow() {
      # parameters window
      import = &global::ami_import;
      ::win = import->ParamPanel("NRAD")
  
      ::win.BeginBook()
        ::win.AddPage("Param")
          ::win.AddImageChoice( &::input_name, "Input")
          ::win.AddFloat( &::dt,"dt",0.01,1)
          ::win.AddFloat( &::t,"T",0,10)
          
          ::win.AddInt( &::neighborhood,"Neighborhood",0,4)
      
          ::win.BeginHorizontal()
            ::scheme_id       = ::win.AddEnum( &::scheme,"Sch.")
              ::win.AddEnumChoice(::scheme_id,"Expl.")
              ::win.AddEnumChoice(::scheme_id,"Semi-impl.")
          
            ::eq_type_id      = ::win.AddEnum( &::equation_type,"Eq.")
              ::win.AddEnumChoice(::eq_type_id,"Scalar")
              ::win.AddEnumChoice(::eq_type_id,"Matrix")
            ::win.SetCallback( &::new_eq_type)
          ::win.EndHorizontal()
      
          ::scal_boxid = ::win.BeginBoxPanel("Scalar diffusion parameters")
            ::scalar_mode_id = ::win.AddEnum( &::scalar_mode,"Scalar mode")
              ::win.AddEnumChoice(::scalar_mode_id,"Lee")
              ::win.AddEnumChoice(::scalar_mode_id,"Kuan")
              ::win.AddEnumChoice(::scalar_mode_id,"Additive")
              ::win.AddEnumChoice(::scalar_mode_id,"MRI")
              ::win.AddEnumChoice(::scalar_mode_id,"MRI new")
          ::win.EndBoxPanel()
  
          ::mat_boxid = ::win.BeginBoxPanel("Matrix diffusion parameters")
            ::sigma_id = ::win.AddFloat( &::sigma,"sigma",0.01,10)
            ::matrix_mode_id = ::win.AddEnum( &::matrix_mode,"Matrix mode")
              ::win.AddEnumChoice(::matrix_mode_id,"Grad")
              ::win.AddEnumChoice(::matrix_mode_id,"MRI")
              ::win.AddEnumChoice(::matrix_mode_id,"MRI new")
    
            ::localstruct_id = ::win.AddEnum( &::local_struct,"Local Struct.")
              ::win.AddEnumChoice(::localstruct_id,"Grad & Curv. Dir.")
              ::win.AddEnumChoice(::localstruct_id,"Struct. Tensor")
        
            ::eigenmode_id = ::win.AddEnum( &::eigen_mode,"Eigen mode")
              ::win.AddEnumChoice(::eigenmode_id,"Sum")
              ::win.AddEnumChoice(::eigenmode_id,"Max")
          ::win.EndBoxPanel()
          
          ::win.AddPage("Controls")
            ::win.BeginHorizontal()
              ::AddBitmapButton(&::win, &::icons._Refresh,   32, "ReloadInput")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Selection, 32, "GetRoi")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Apply,     32, "Filter")
              ::win.SetPositionProp(-1,0)
              ::AddBitmapButton(&::win, &::icons._Show,      32, "Display")
              ::win.SetPositionProp(-1,0)
            ::win.EndHorizontal()
            ::win.AddBoolean( &::run_on_roi,"Run on ROI")
            ::win.AddBoolean( &::remove_bias,"Remove Bias")
            ::win.AddButton("Display Surfaces", ::DisplaySurfaces)
            ::win.BeginBoxPanel("Result --> disk")
              ::win.BeginHorizontal()
                ::win.AddString(&::result_filename,"File")
                # make it proportional
                ::win.SetPositionProp(1)
                ::AddBitmapButton16(&::win, &::icons._Save, "Save")
              ::win.EndHorizontal()
            ::win.EndBoxPanel()
            ::win.BeginBoxPanel("Result --> global variable")
              ::win.BeginHorizontal()
                ::win.AddString(&::result_imagename,"Name")
                # make it proportional
                ::win.SetPositionProp(1)
                ::AddBitmapButton16(&::win, &::icons._Copy, "SaveToImage")
              ::win.EndHorizontal()
            ::win.EndBoxPanel()

          ::AddHelpPage(&::win)
  
      ::win.EndBook()
  
      ::AddStandardButtons(&::win)
      
      ::win.Display()
      ::win.Update(-1)
      ::new_eq_type
    }
    
    #------------------------------------
    
    ::Init
  
  }#End of Class

}#End of if

