#!/usr/bin/amilab

#
# Non Local Means GUI
#
# Based on the work of Buades et al.
#

# call 
# NLM_init( IMAGE)
#
# result in NLM_res
#

# NLM_resultname = $2
func "Common/ScriptGui"

if (!exists(MSEClass)) {

  Class MSEClass : public ScriptGui {

    #----------------------------
    proc ::Init() \
    {
        ::input_name          =  "", "input image"
        ::groundtruth_name    =  "", "ground truth image" 
        ::regions_name        = "", "image regions"
        ::RMSE_string         = "", "Root Mean Square Error value"
        ::MSE_string          = "", "Mean Square Error value"
        ::MAE_string          = "", "Mean Absolute Error value"
        ::PSNR_string         = "", "Pick Signal To Noise Ratio value"
        ::display_error_image = UCHAR(0), "Display the image of errors"
        ::border              = INT(0), "Remove border"
        ::CreateWindow()
    }
    
    #----------------------------
    proc ::LoadInput() \
    {
      printn "evaluation of --> ::input <<="+::input_name+";"
      eval "::input <<="+::input_name+";"
      if (::input_name=="Image") {
        ::input_name = "::input"
        ::win.Update(-1)
      }
      ::win.Update(-1)
      ::CheckInputs()
    }
    
    #----------------------------
    proc ::LoadGroundTruth() \
    {
      printn "evaluation of --> ::gt <<="+::groundtruth_name+";"
      eval "::gt <<="+::groundtruth_name+";"
      if (::groundtruth_name=="Image") {
        ::groundtruth_name = "::gt"
        ::win.Update(-1)
      }
      ::win.Update(-1)
      ::CheckInputs()
    }

    #----------------------------
    proc ::LoadRegions() \
    {
      printn "evaluation of --> ::regions <<="+::regions_name+";"
      eval "::regions <<="+::regions_name+";"
      if (::regions_name=="Image") {
        ::regions_name = "::regions"
        ::win.Update(-1)
      }
      ::win.Update(-1)
      ::CheckInputs()
    }

    #----------------------------
    proc ::Display() \
    {
      if (exists(::input_draw)) { del ::input_draw; }
      show ::input
      if (exists(::gt_draw)) { del ::gt_draw; }
      show ::gt
      ::input_draw.compare(&::gt_draw)
    }
    

    #----------------------------
    proc ::CheckInputs() \
    {
      input_ok =  (exists(::input)&&exists(::gt))
      if (input_ok) {
        size_ok =     (::input.tx==::gt.tx) \
                  && (::input.ty==::gt.ty) \
                  && (::input.tz==::gt.tz) 
        if (!size_ok) {
          InfoDialog "Input and Groundtruth have different sizes ..."
        }
      } else {
        size_ok = 0
      }
      ::win.EnablePanel(::results_panel,(input_ok&&size_ok))
      ::win.EnablePanel(::display_panel,(input_ok&&size_ok))
    }

    #----------------------------
    proc ::Run() \
    {
      # test for ROI and for noise type ??
      if (exists(::input) &&exists(::gt)) {
        _xmin = min(::border,::input.tx-1)
        _xmax = max(::input.tx-1-::border,0)
        _ymin = min(::border,::input.ty-1)
        _ymax = max(::input.ty-1-::border,0)
        _zmin = min(::border,::input.tz-1)
        _zmax = max(::input.tz-1-::border,0)
        ::roi <<= ::input[_xmin:_xmax,_ymin:_ymax,_zmin:_zmax]
        # MSE
          mask = ::input*0
          smask = ::roi*0+1
          mask.putimage(smask)
          ::MSE = mean[mask]((::input-::gt)*(::input-::gt))
          ::RMSE = sqrt(::MSE)
          ::MAE = mean[mask](abs(::input-::gt))
          if exists(::regions) {
            n = floor(max(::regions))
            for i=0 to n {
              mask1 = mask*(::regions==i)
              if ami_count(mask)>0 {
                printn "Region %1%" %i
                MSE = mean[mask1]((::input-::gt)*(::input-::gt))
                RMSE = sqrt(MSE)
                MAE = mean[mask1](abs(::input-::gt))
                printn "MSE  = %1%, " % MSE + \
                       "RMSE = %1%, " % RMSE + \
                       "MAE  = %1%, " % MAE 
              } // end if
            } // end for
          }
        ::MSE_string  = "%1%" %::MSE
        ::RMSE_string = "%1%" %::RMSE
        ::MAE_string  = "%1%" %::MAE
        # PSNR
        ::PSNR = 10*(2*log(255)-log(::MSE))
        ::PSNR_string = "%1%" %::PSNR

        ::win.Update(-1)
      } else {
        InfoDialog "You need to load the input and ground truth first"
      }
    }
    
    
    #----------------------------
    proc ::DisplayErrorImage() \
    {
      if (::display_error_image) {
        show ::input
        ::errors <<= abs(::input-::gt)
        show ::errors
        ::input_draw.compare(&::errors_draw)
      } else {
        if (exists(::errors_draw)) {
          del ::errors_draw
        }
      }
    }

    #----------------------------
    proc ::DisplayDiff() \
    {
      show ::input
      ::diff <<= ::input-::gt
      show ::diff
      ::input_draw.compare(&::diff_draw)
    }

    #----------------------------
    proc ::CreateWindow() {
    
      # parameters window
      ::win = ParamPanel("ImDiff")
      
      ::win.BeginBook()
    
        ::win.AddPage("Inputs")

          # set the input image
          ::win.BeginBoxPanel("Input")
            #::win.BeginHorizontal()
              ::win.AddImageChoice( &::input_name, "")
              ::win.AddButton("Load",::LoadInput)
            #::win.EndHorizontal()
          ::win.EndBoxPanel()

          # set the input image
          ::win.BeginBoxPanel("Ground truth")
            #::win.BeginHorizontal()
              ::win.AddImageChoice( &::groundtruth_name, "")
              ::win.AddButton("Load",::LoadGroundTruth)
            #::win.EndHorizontal()
          ::win.EndBoxPanel()

          # set the regions image
          ::win.BeginBoxPanel("Image Regions")
            #::win.BeginHorizontal()
              ::win.AddImageChoice( &::regions_name, "")
              ::win.AddButton("Load",::LoadRegions)
            #::win.EndHorizontal()
          ::win.EndBoxPanel()

        ::win.AddPage("Param")
          ::win.AddInt( &::border,"Border",0,20) 

          ::results_panel = ::win.BeginBoxPanel("Results")
            ::runbutton_id = ::win.AddButton("Run",     ::Run)
            ::win.AddString( &::RMSE_string, "RMSE =")
            ::win.AddString( &::MSE_string,  "MSE =")
            ::win.AddString( &::MAE_string,  "MAE =")
            ::win.AddString( &::PSNR_string, "PSNR =")
          ::win.EndBoxPanel()

          ::display_panel = ::win.BeginBoxPanel("Display")
            ::win.AddButton("Display images",::Display)
            ::win.AddBoolean( &::display_error_image, "Error Image")
            ::win.SetCallback( &::DisplayErrorImage)
            ::win.AddButton("Difference image",&::DisplayDiff)
          ::win.EndBoxPanel()

      ::win.EndBook()

      ::AddStandardButtons(&::win)
      
      ::win.Update(-1)
      ::win.Display()
      ::CheckInputs()
    }

    ::Init()
  } 
  # Class MSEClass
} 
# end if (!exists(MSEClass))
  
  
#----------------------------
# Main
#----------------------------

if (!exists(mse)) {

  MSEClass mse
  
  if (argc>=1) {
    printn "reading image"
    input = Image($1)
    mse->image_name = "input"
    mse->win.Update(-1)
  }

} else {
  InfoDialog "The script seems to be already loaded."
}

