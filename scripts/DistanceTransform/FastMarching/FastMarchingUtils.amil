

#
# usefull functions for the Fast Marching Geodesic Distance Transform
#
Class FastMarchingUtils \
{


  #---------------------------------------------
  proc ::FastMarchingFromPoint( IMAGE speed, \
                              NUM maxtime, NUM x, NUM y, NUM z) \
  {
    # Create initialization image
    initim = (FLOAT) speed*0+maxtime
    initim.setpos(x,y,z)
    initim.set(-4)

    import_vtk

    # convert images to VTK images
    vtk_input  = ToVtkImageData(&speed)
    vtk_init   = ToVtkImageData(&initim)

    vtk_FM = algorithms.vtkLevelSetFastMarching.New()

    vtk_FM.SetInput(&vtk_input)
    vtk_FM.Setinitimage(&vtk_init);
    # if we set initiso to a different value than -1E10 (default value)
    # the it will call InitIsoSurf which recomputes the distance close to the surface
    # otherwise, it call InitWithImage which is much faster, and
    # all values lower than initmaxdist will be accepted to start with.

    vtk_FM.Setinitiso(   0);
    vtk_FM.Setinitmaxdist(1+1E-3);
    vtk_FM.SetmaxTime( maxtime);
    vtk_FM.Update();

    return = FromVtkImageData(&vtk_FM.GetOutput())
    vtk_FM.Delete()
  }
  Comments(::FastMarchingFromPoint, "Fast Marching evolution from the initial point up to the given maximal distance.")

  #---------------------------------------------
  proc ::FastMarchingTarget(  IMAGE input, IMAGE initim, \
                              NUM maxtime, NUM x, NUM y, NUM z) \
  {

    import_vtk
    # convert images to VTK images
    vtk_input  = ToVtkImageData(&input)
    vtk_init   = ToVtkImageData(&initim)

    vtk_FM = algorithms.vtkLevelSetFastMarching.New()

    # initialize with the seed points
    for i=-1 to 1 {
      for j=-1 to 1 {
        for k=-1 to 1 {
          x1 = x+i
          y1 = y+j
          z1 = z+k
          if  (x1>=0)&&(y1>=0)&&(z1>=0)&&\
              (x1<input.tx)&&(y1<input.ty)&&(z1<input.tz) \
          {
            vtk_FM.AddTargetPoint( x1,y1,z1)
          }
        }
      }
    }

    vtk_FM.SetInput(&vtk_input)
    vtk_FM.Setinitimage(&vtk_init);
    # if we set initiso to a different value than -1E10 (default value)
    # the it will call InitIsoSurf which recomputes the distance close to the surface
    # otherwise, it call InitWithImage which is much faster, and
    # all values lower than initmaxdist will be accepted to start with.

    vtk_FM.Setinitiso(   0);
    vtk_FM.Setinitmaxdist(1+1E-3);
    vtk_FM.SetmaxTime( maxtime);
    vtk_FM.Update();

    return = FromVtkImageData(&vtk_FM.GetOutput())
    vtk_FM.Delete()
  }
  Comments(::FastMarchingTarget, "Fast Marching evolution from the initial contour up to the given target point, for 2D and 3D images.")

  #---------------------------------------------
  proc ::FastMarchingTarget4D(  IMAGE input, IMAGE initim, \
                              NUM maxtime, NUM x, NUM y, NUM z, NUM t) \
  {
    import_vtk
    # convert images to VTK images
    vtk_input  = ToVtkImageData(&input)
    vtk_init   = ToVtkImageData(&initim)

    vtk_FM = algorithms.vtkFastMarching_nD_plus.New()

    # initialize with the seed points
    for i=-1 to 1 {
      for j=-1 to 1 {
        for k=-1 to 1 {
          for l=-1 to 1 {
            x1 = x+i
            y1 = y+j
            z1 = z+k
            t1 = t+l
            if  (x1>=0)&&(y1>=0)&&(z1>=0)&&(t1>=0)&&\
                (x1<input.tx)&&(y1<input.ty)&&(z1<input.tz)&&(t1<input.vdim) \
            {
              vtk_FM.AddTargetPoint( x1,y1,z1,t1)
            }
          }
        }
      }
    }

    vtk_FM.SetInput(&vtk_input)
    vtk_FM.Setinitimage(&vtk_init);
    # if we set initiso to a different value than -1E10 (default value)
    # the it will call InitIsoSurf which recomputes the distance close to the surface
    # otherwise, it call InitWithImage which is much faster, and
    # all values lower than initmaxdist will be accepted to start with.

    vtk_FM.Setinitiso(   0);
    vtk_FM.Setinitmaxdist(1+1E-3);
    vtk_FM.SetmaxTime( maxtime);
    vtk_FM.Update();

    return = FromVtkImageData(&vtk_FM.GetOutput())
    vtk_FM.Delete()
  }
  Comments(::FastMarchingTarget4D, "Fast Marching evolution from the initial contour up to the given target point, for 3D+t images.")

}

#---------------------------------------------------------
# CompetingFastMarching
#---------------------------------------------------------

Class CompetingFastMarching {

  ::vtk_FM = algorithms.vtkLevelSetFastMarching.New()

  #---------------------------------------------
  proc ::SetSpeedImage(IMAGE speed) \
  {
    ::speed  = &speed
    ::use_point3 = false
  }

  #---------------------------------------------
  proc ::SetPoint1(NUM px, NUM py, NUM pz) \
  {
    ::p1x = px
    ::p1y = py
    ::p1z = pz
  }

  #---------------------------------------------
  proc ::SetPoint2(NUM px, NUM py, NUM pz) \
  {
    ::p2x = px
    ::p2y = py
    ::p2z = pz
  }

  #---------------------------------------------
  proc ::SetPoint3(NUM px, NUM py, NUM pz) \
  {
    ::p3x = px
    ::p3y = py
    ::p3z = pz
    ::use_point3 = true
  }

  #---------------------------------------------
  proc ::Evolve( NUM maxtime) \
  {
    # Create initialization image
    initim  = (FLOAT) ::speed*0+maxtime
    ::classim = (SHORT) ::speed*0-1

    # init first point
    for i=-1 to 1 {
      for j=-1 to 1 {
        for k=-1 to 1 {
          initim.setpos(::p1x+i,::p1y+j,::p1z+k)
          initim.set(-4)
          ::classim.setpos(::p1x+i,::p1y+j,::p1z+k)
          ::classim.set(0)
        }
      }
    }

    # init second point
    for i=-1 to 1 {
      for j=-1 to 1 {
        for k=-1 to 1 {
          initim.setpos(::p2x+i,::p2y+j,::p2z+k)
          initim.set(-4)
          ::classim.setpos(::p2x+i,::p2y+j,::p2z+k)
          ::classim.set(1)
        }
      }
    }

    if (::use_point3) {
      for i=-1 to 1 {
        for j=-1 to 1 {
          for k=-1 to 1 {
            initim.setpos(::p3x+i,::p3y+j,::p3z+k)
            initim.set(-4)
            ::classim.setpos(::p3x+i,::p3y+j,::p3z+k)
            ::classim.set(2)
          }
        }
      }
    }

    import_vtk

    SetStatusText("Converting inputs to vtkImageData")
    # convert images to VTK images
    vtk_speed   = ToVtkImageData(&::speed)
    vtk_init    = ToVtkImageData(&initim)
    vtk_class   = ToVtkImageData(&::classim)

    ::vtk_FM.SetInput(      &vtk_speed)
    ::vtk_FM.Setinitimage(  &vtk_init);
    ::vtk_FM.Setclass_image(&vtk_class);
    # if we set initiso to a different value than -1E10 (default value)
    # the it will call InitIsoSurf which recomputes the distance close to the surface
    # otherwise, it call InitWithImage which is much faster, and
    # all values lower than initmaxdist will be accepted to start with.

    #::vtk_FM.Setinitiso(   -1E-10);
    ::vtk_FM.Setinitmaxdist(1+1E-3);
    ::vtk_FM.SetmaxTime( maxtime);
    SetStatusText("Running the Fast Marching algorithm")
    ::vtk_FM.Update();

    SetStatusText("Keeping the results")
    ::result  = FromVtkImageData(&::vtk_FM.GetOutput())
    ::classim = FromVtkImageData(&::vtk_FM.Getclass_image())
    
    ::vtk_FM.Delete()
  }
  Comments(::Evolve, "Fast Marching evolution from the initial two points up to the given maximal distance, partitioning the result in 2 classes.")

}
