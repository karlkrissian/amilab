#
#
#

func "Common/ScriptGui"


if (!exists(DICOMClass)) {
  
  
  Class DICOMClass : public ScriptGui {
  
    proc ::Init() {
      
      ::dicom_folder = wx.FromWxString(wx.wxFileName.GetHomeDir()), "Dicom Path Folder"
      ::image_name = "dicomim", "Name of the resulting image variable"
      ::dicom_save = "dicomim", "Dicom Save Path Folder"
      ::image_save = "dicomim", "Name of the save image"
      
     # ::help1 = "http://www.itk.org/Doxygen316/html/classitk_1_1DICOMImageIO2.html" 
     # ::help2 = "http://www.itk.org/Doxygen316/html/classitk_1_1DICOMSeriesFileNames.html"
      ::html_filename = GetScriptsDir+"/IO/itkDICOM/doc/dicom/index.html"
      ::scan_level = INT(3), "level of recursivity in scanning the subdirectories"

      ::file_spec = "*", "file filter"
      ::max_scan = INT(10000), "maximum number of scanned files"
      ::list_files = UCHAR(0), "list (in the control text) the files found"

      func "WxUtils/alEnum"

      # ----- Dicom Reader library
      alEnum ::readerlibs
      ::readerlibs.SetTitle("Reader lib")
      ::readerlibs.SetHelp("Choose the DICOM reader library")
      ::readerlibs.AddValue( "VTK",\
                                "Visualization Toolkit")
      ::readerlibs.AddValue( "ITK",\
                                "Insight Toolkit")
      ::reader_lib = INT(1), ::readerlibs.GetHelpMessage()
      ::readerlibs.SetVariable(&::reader_lib)

      ::Gui()
    }
    
    #---------------------------
    proc ::File2Varname( OBJECT st) \
    {
      st.Replace(" ", "_")
      st.Replace(".", "_")
      st.Replace("(", "_")
      st.Replace(")", "_")
      st.Replace("[", "_")
      st.Replace("]", "_")
      st.Replace("-", "_")
      st.Replace("+", "_")
      st.Replace("/", "_")
    }
    
    
    #---------------------------
    proc ::OnDir() \
    {
      # propose image name based on directory
      folder = wx.wxFileName(::dicom_folder+"/")
      dirs = folder.GetDirs()
      if (dirs.GetCount()>0) {
        last_dir = dirs[dirs.GetCount()-1]
      } else {
        last_dir = wx.wxString("root_dir")
      }
      # replace non-valid characters
      ::File2Varname(&last_dir)
      ::image_name = wx.FromWxString(last_dir)
      ::win.Update(-1)
    }

    #---------------------------
    proc ::ScanDir( STRING dirpath, STRING subpath, STRING indent, NUM level) \
    {   
      if (level<=::scan_level)&&(::scan_count<::max_scan) {
        SetStatusText("scanning %1%" % dirpath + "(%1%"%level+" | %1%)"%::scan_count)
        nextDir = wx.wxDir(dirpath)
        ## create smart pointer to allow deleting the object
        #nextDir_ptr = wx.std_auto_ptr_wxDir.auto_ptr_1(&nextDir)

        nextFile = wx.wxString()
        # Scan files
        process = nextDir.GetFirst(&nextFile, ::file_spec, wx.wxDIR_FILES)
        # and while there are still files to process
        files_info = VarVector()
        sum_size = 0
        while process {
          nfile = wx.FromWxString(&nextFile)
          sum_size = sum_size + wx.wxFileName(dirpath+"/"+nfile)\
                                    .GetSize().ToDouble()
          fsize = wx.FromWxString(wx.wxFileName(dirpath+"/"+nfile)\
                                    .GetHumanReadableSize())
          ::scan_count++
          files_info.push_back(indent+"%1%" % nfile + " \t%1%"%fsize)
          # and get the next file
          process = nextDir.GetNext(&nextFile);
        }
        #printn "2"
        if files_info.size()>0 {
          ::txtctrl.AppendText(indent+" %1% files"   % files_info.size()\
                                    + "\t %0.1f Mb" % (sum_size/1000000.0))
          ::txtctrl.LineBreak()
          ::AddToList(subpath, "%0.1f" % (sum_size/1000000.0),files_info.size())
        }

        if ::list_files {
          for n=0 to files_info.size()-1 {
            ::txtctrl.AppendText(files_info[n])
            ::txtctrl.LineBreak()
          }
        }
        #printn "3"

        # Scan directories
        process = nextDir.GetFirst(&nextFile,  "", wx.wxDIR_DIRS)
        # and while there are still files to process
        while process {
          nfile = wx.FromWxString(&nextFile)
          ::scan_count++
          ::txtctrl.AppendText( indent+"%1%/" % nfile)
          ::txtctrl.LineBreak()
          if wx.wxDir.Exists(dirpath+"/"+nfile) \
          {  
            ::ScanDir(dirpath+"/"+nfile, subpath+"/"+nfile, indent+"  ", level+1)
          }
          # and get the next file
          process = nextDir.GetNext(&nextFile);
        }
      } else {
        if ::scan_count>::max_scan {
          SetStatusText("Maximum number of files reached (%1%)" % ::max_scan)
        }
      }
        #printn "4"
    }

    #---------------------------
    proc ::AddToList( STRING subpath, STRING disksize, NUM files) \
    {
      n = ::listctrl.GetItemCount()
      pos = ::listctrl.InsertItem(n,"%1%"%subpath)
      ::listctrl.SetItemData(pos,n)
      ::listctrl.SetItem(pos,1,"%1%"%disksize)
      ::listctrl.SetItem(pos,2,"%1%"%files)
    }


    #---------------------------
    proc ::Scan() \
    {   
      ::txtctrl.Clear()
      ::listctrl.DeleteAllItems()
      ::scan_count = 0
      ::ScanDir(::dicom_folder+"/","","",0)
      ::listctrl.SetColumnWidth(0, wx.wxLIST_AUTOSIZE)
      ::listctrl.SetColumnWidth(1, wx.wxLIST_AUTOSIZE)
    }
    
    #---------------------------
    proc ::ReadDir( STRING ddir) \
    {
      if (::readerlibs.OptionName(::reader_lib)=="VTK") {
          v = vtk.vtkDICOMImageReader.New()
          v.SetDirectoryName( ddir)
          # use vtk progress ...
          v.Update()
          p = v.GetImagePositionPatient()
          printn "Position:"
          for n=0 to 2 { print "%1%, " % p[n]; }
          d = v.GetImageOrientationPatient()
          printn "Orientation:"
          for n=0 to 5 { print "%1%, " % d[n]; }
          printn ""
          del ::res_vtk
          ::res_vtk = v.GetOutput()
          return = vtktools.FromVtkImageData(::res_vtk)
      }
      if (::readerlibs.OptionName(::reader_lib)=="ITK") {
        return = itk.DICOMRead( ddir)
      }
    }
    
    #---------------------------
    proc ::Run() \
    {
      ::out <<= ::ReadDir(::dicom_folder+"/")
    }
    
    #---------------------------
    proc ::Copy() \
    {   
      if exists(::out) {
        eval "global::"+::image_name+"<<= ::out;"
      }
    }
    Comments(::Copy, "Copy image variable to global context with the chosen name")
    
    #---------------------------
    proc ::Save() \
    {   
      itk.Write(::out, ::dicom_save+"\\"+::image_save)
    }

    #---------------------------
    proc ::Display() \
    {
      eval "show "+"global::"+::image_name+";"
    }
    
    #---------------------------
    proc ::CB_ListItemSelected( OBJECT event ) \
    {
      index = event.GetIndex()
      printn "index %1%" % index
      text = wx.FromWxString(event.GetItem().GetText())
      printn "item text = %1%" % text
      #::selected_point = pos
    }
    
    #---------------------------
    proc ::LoadSelected() \
    {
      folder = wx.wxFileName(::dicom_folder+"/")
      dirs = folder.GetDirs()
      last_dir = dirs[dirs.GetCount()-1]

      item = ::listctrl.GetNextItem(-1,\
                                     wx.wxLIST_NEXT_ALL,\
                                     wx.wxLIST_STATE_SELECTED)
      ok = (item!=-1)
      while ok {
        printn "item = %1%" % item
        list_item = wx.wxListItem()
        list_item.SetId(item)
        ::listctrl.GetItem(&list_item)

        wx_im_name = last_dir
        wx_im_name.Append(list_item.GetText())
        ::File2Varname(&wx_im_name)

        im_name =  wx.FromWxString(wx_im_name)
        ::image_name = im_name
        ::win.Update(-1)
        sub_path = wx.FromWxString(list_item.GetText())
        full_path = ::dicom_folder+sub_path
        cmd =  "::%1% <<= ::ReadDir(" % im_name + "\"%1%\");" % full_path
        printn "running '%1%'" % cmd
        eval cmd

        item = ::listctrl.GetNextItem(item,\
                                      wx.wxLIST_NEXT_ALL,\
                                      wx.wxLIST_STATE_SELECTED)
        ok = (item!=-1)
      }

    }

    #---------------------------
    proc ::DisplayLoaded() \
    {
      eval "show ::%1%;" % ::image_name
    }
    
    #---------------------------
    proc ::Gui() \
    {
      ::win = ParamPanel("DICOM")
      ::win.BeginBook()
      
        ::win.AddPage("Init")
        
          ::win.BeginBoxPanel("DICOM Folder")
            #::win.BeginHorizontal
              ::dir_id = ::win.AddDirname( &::dicom_folder, "Dir")
              ::win.SetCallback(&::OnDir)
              #::win.AddString( &::dicom_folder,"DICOM Folder")
              ::win.AddString( &::image_name,"varname")
            #::win.EndHorizontal


          ::win.EndBoxPanel()
          
          ::readerlibs.SetGuiMode(1)
          ::readerlibs.AddGui(&::win)
          ::win.BeginHorizontal()
            ::win.AddButton("Run",&::Run)
            ::win.AddButton("Copy to global",&::Copy)
            ::win.AddButton("Display",&::Display)
          ::win.EndHorizontal()
          ::win.BeginHorizontal()
            ::win.AddButton("Scan",&::Scan)
            ::win.AddButton("LoadSelected",&::LoadSelected)
            ::win.AddButton("Display",&::DisplayLoaded)
          ::win.EndHorizontal()
          ::win.AddInt(&::scan_level,"scan_level",1,10)

          ::win.BeginBook()
            ::win.AddPage("List")
              ::listctrl = wx.wxListCtrl(&::win.CurrentParent())
              ::win.AddWidget(&::listctrl,1)
              ::listctrl.SetWindowStyle(wx.wxLC_REPORT)
              ::listctrl.InsertColumn_2(0,"Sub-path")
              ::listctrl.InsertColumn_2(1,"Size (Mb)")
              ::listctrl.InsertColumn_2(3,"Files")

              # connect event
              ::evh_selected = wx.wxAmiEventHandler(&::CB_ListItemSelected)
              ::evh_selected.SetSendListEvent(true)
              ::listctrl.Connect( wx.wxEVT_COMMAND_LIST_ITEM_SELECTED\
                                  ,&::evh_selected.GetEventFunction(),\
                                  &NULL,&::evh_selected)
            ::win.AddPage("Text")
              d = ::win.CurrentParent()
              ::txtctrl = wx.wxRichTextCtrl(&d)
              ::win.AddWidget(&::txtctrl,1)
          ::win.EndBook()
        
        ::win.AddPage("Params")
          ::win.AddString(  &::file_spec,"File Spec.")
          ::win.AddBoolean( &::list_files,"List files")
          ::win.AddInt(     &::max_scan,"Max scan",100,100000)
        ::win.AddPage("Save As")
        
          ::win.BeginHorizontal()
            ::win.AddDirname(&::dicom_save, "Save Folder")
          ::win.EndHorizontal()
          
          ::win.BeginHorizontal()
            ::win.AddString( &::image_save,"Output Name")
          ::win.EndHorizontal()
        
          ::win.BeginHorizontal()
            ::win.AddButton("Save",::Save)
          ::win.EndHorizontal()

        ::AddHelpPage(&::win)
        
      ::win.EndBook()
      
      ::AddStandardButtons(&::win)
      
      #::win.Update(-1)
      #::win.Display()

      # something strange with wxDirPickerCtrl ...
      df = ::dicom_folder
      ::dicom_folder = df+"/"
      ::win.Update(::dir_id)
      ::dicom_folder = df

      ::win.Update(-1)
      ::win.Display()
    }
    
    ::Init()
  }
  # Class DICOMClass
}
# end if (!exists(DICOMClass))

if (!exists(dicomclass_obj)) {
  DICOMClass dicomclass_obj
}
