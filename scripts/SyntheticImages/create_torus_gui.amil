#
# Creates a torus within a volume data
#

if (!exists(CT_defined)) {
  CT_defined=1

  import_filters
  
  proc CT_Init() {
    global_new
    
    CT_dimx = INT(100)
    CT_dimy = INT(100)
    CT_dimz = INT(100)
    # Background intensity
    CT_bg = 0
    # Foreground intensity
    CT_fg = 100
    # Big radius
    CT_R = 20 
    # Small radius
    CT_r = 4
    
    CT_image_name = "i"
    CT_Gui
  }
  
  proc CT_Close() {
    CT_win.Hide
    delvars "CT_*_draw"
    delvars "CT_*"
  }
  
  proc CT_Create() {
    tmp = Image(FLOAT,CT_dimx,CT_dimy,CT_dimz)
    tmp_x = (FLOAT) Xpos(tmp)
    tmp_y = (FLOAT) Ypos(tmp)
    tmp_z = (FLOAT) Zpos(tmp)
    tmp_x = tmp_x-CT_dimx/2
    tmp_y = tmp_y-CT_dimy/2
    tmp_z = tmp_z-CT_dimz/2
    dxy=sqrt(tmp_x*tmp_x+tmp_y*tmp_y)-CT_R
    res = -(dxy*dxy+tmp_z*tmp_z)+(CT_r*CT_r)
  
    # estimate partial volume effect based on linear interpolation
    res = ComputePV_subdiv(res)
    
    eval "global::"+CT_image_name+"<<=res;"
  }
  
  proc CT_Show() {
    global_new
    eval "show "+CT_image_name+";"
  }
  
  proc CT_Gui() {
    global::CT_win = ParamWin("CreateTorus")
  
    CT_win.AddInt(CT_dimx,1,1000)
    CT_win.AddInt(CT_dimy,1,1000)
    CT_win.AddInt(CT_dimz,1,1000)
  
    CT_win.AddFloat(CT_bg,0.1,500)
    CT_win.AddFloat(CT_fg,0.1,500)
  
    CT_win.AddFloat(CT_R,0.1,50)
    CT_win.AddFloat(CT_r,0.1,50)
  
    CT_win.AddButton("Create", CT_Create)
    CT_win.AddButton("Show",   CT_Show)
    CT_win.AddButton("Close",  CT_Close)
  
    CT_win.update
    CT_win.Display
  }
  
  CT_Init()
}
#endif CT_defined

