#
# Creates a torus within a volume data
#

func "Common/ScriptGui"

if (!exists(CreateTorusClass)) {

  
  Class CreateTorusClass : public ScriptGui {

    #----------------------------
    proc ::Init() {
      ::autoresize = UCHAR(0) , "Allow automatic calculation of the image dimensions"
      ::margin = INT(10), "Image margin in all directions for automatic calculation"
      ::dimx = INT(100), "Image dimension in X (in voxels)"
      ::dimy = INT(100), "Image dimension in Y (in voxels)"
      ::dimz = INT(100), "Image dimension in Z (in voxels)"
      ::center_x = INT(50), "Center in X (in voxels)"
      ::center_y = INT(50), "Center in Y (in voxels)"
      ::center_z = INT(50), "Center in Z (in voxels)"

      ::bg = 0, "Background intensity"

      # Foreground intensity
      ::fg = 100, "Foreground intensity"
      # Big radius
      ::R = 20, "Big Radius of the torus"
      # Small radius
      ::r = 4, "Small Radius of the torus"
      
      ::image_name = "global::torus", "Name of the resulting image variable"
      #::Gui
    }

        
    #------------------------------------
    
    proc ::Create() {

    # if the dimensions have changed close the potential window
    eval "exists_win = exists("+::image_name+"_draw);"
    if (exists_win) {
      if (exists(::dimx_prev)) {
        if (::dimx_prev!=::dimx) ||(::dimy_prev!=::dimy) ||(::dimz_prev!=::dimz) {
          eval "del "+::image_name+"_draw;"
        }
      } else {
        InfoDialog "Image "+::image_name+" already exists and will be overwritten !"
        eval "del "+::image_name+"_draw;"
      }
    }

    tmp = Image(FLOAT,::dimx,::dimy,::dimz)
    tmp_x = (FLOAT) Xpos(tmp)
    tmp_y = (FLOAT) Ypos(tmp)
    tmp_z = (FLOAT) Zpos(tmp)
    tmp_x = tmp_x-::center_x
    tmp_y = tmp_y-::center_y
    tmp_z = tmp_z-::center_z
    dxy=sqrt(tmp_x*tmp_x+tmp_y*tmp_y)-::R
    #dxy.info
    #tmp_z.info
    res = -(dxy*dxy+tmp_z*tmp_z)+(::r*::r)
  
    #printn "res.info"
    #res.info
    # estimate partial volume effect based on linear interpolation
    res = filters.ComputePV_subdiv(res)
    res = res*(::fg-::bg)+::bg
    
    ::dimx_prev = ::dimx
    ::dimy_prev = ::dimy
    ::dimz_prev = ::dimz
    eval ::image_name+"<<=res;"
  }
  
  proc ::ComputeSize() {
    ::dimx = 2*(::R+::r)+::margin
    ::dimy = ::dimx
    ::dimz = 2*::r+::margin
    ::win.Update(-1)
  }

  proc ::GetOutput() {
    eval "return = "+::image_name+";"
  }

  proc ::Show() {
    
    eval "show "+::image_name+";"
  }
  
  proc ::Gui() {
    ::win = ParamPanel("CreateTorus")
  
    ::win.BeginBook()
      b = ::win.GetBookCtrl()
      b_classname =  b.GetClassInfo().GetClassName()
      if b_classname=="wxAuiNotebook" {
        printn "*"
        b.SetWindowStyle(wx.wxAUI_NB_BOTTOM)
      }
      ::win.AddPage("Param")

        ::win.BeginBoxPanel("Radii")
          ::win.AddFloat( &::R,"R",0.1,50)
          ::win.AddFloat( &::r,"r",0.1,50)
        ::win.EndBoxPanel()

        ::win.BeginBoxPanel("Colors")
          ::win.AddFloat( &::bg,"Bg",0.1,500)
          ::win.AddFloat( &::fg,"Fg",0.1,500)
        ::win.EndBoxPanel()
      
        ::win.AddString( &::image_name,"Result name")
        ::win.AddButton("Create", ::Create)
        ::win.AddButton("Show",   ::Show)

      ::win.AddPage("Dimensions")
        ::win.BeginBoxPanel("Dimensions")
          ::win.AddInt( &::dimx,  "::dimx", 1,1000)
          ::win.AddInt( &::dimy,  "::dimy", 1,1000)
          ::win.AddInt( &::dimz,  "::dimz", 1,1000)
        ::win.EndBoxPanel()
        ::win.BeginBoxPanel("Center")
          ::win.AddInt( &::center_x,  "::X", 1,1000)
          ::win.AddInt( &::center_y,  "::Y", 1,1000)
          ::win.AddInt( &::center_z,  "::Z", 1,1000)
        ::win.EndBoxPanel()
        ::win.BeginBoxPanel("Automatic size")
          ::win.AddInt( &::margin,"margin",1,50)
          ::win.AddButton("Compute Size",::ComputeSize)
        ::win.EndBoxPanel()

    ::win.EndBook()

    ::AddStandardButtons(&::win)
  
    ::win.Update(-1)
    ::win.Display()
  }
  
  ::Init()
} #End of class
  
} # End of if

      
