#
# Creates a sphere within a volume data
#
if (!exists(CSPHClass)) {

  ami_import->Filters()
  
  Class CSPHClass {

    ::filters=&global::filters

    #----------------------------
    proc ::Init() {
    
      ::class_name ="global::CSPHClass"
      ::dimx = INT(100)
      Comments( ::dimx, "Image dimension in X axis")
      ::dimy = INT(100)
      Comments( ::dimy, "Image dimension in Y axis")
      ::dimz = INT(100)
      Comments( ::dimz, "Image dimension in Z axis")

      ::bg = 0
      Comments( ::bg, "Image background intensity")

      ::fg = 100
      Comments( ::fg, "Image foreground intensity")

      ::R = 20 
      Comments( ::R, "Sphere radius")
      
      ::image_name = "global::sphere"
      Comments( ::image_name, "Output image variable name")

      ::Gui
    }
    
    #----------------------------
    proc ::Close() {
      ::win.HidePanel
      delvars GetObjectName(::Close)
    }
    Comments( ::Close, "Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
    
    #----------------------------
    proc ::CloseAll() {
      eval  "if (exists(%1%)) { del %1%; };"  % ::class_name 
      ::Close
    }
    Comments( ::CloseAll, "Call ::Close() method and delete the class variable")
        
    #------------------------------------
      
      
    proc ::Create() {
      tmp = Image(FLOAT,::dimx,::dimy,::dimz)
      tmp_x = (FLOAT) Xpos(tmp)
      tmp_y = (FLOAT) Ypos(tmp)
      tmp_z = (FLOAT) Zpos(tmp)
      tmp_x = tmp_x-::dimx/2
      tmp_y = tmp_y-::dimy/2
      tmp_z = tmp_z-::dimz/2
      res=-sqrt(tmp_x*tmp_x+tmp_y*tmp_y+tmp_z*tmp_z)+::R
    
      # estimate partial volume effect based on linear interpolation
      res = ::filters->ComputePV_subdiv(res)
      res = res*(::fg-::bg)+::bg
      
      eval ::image_name+"<<=res;"
    }
    Comments( ::Create, "Create the synthetic image of a sphere")
    
    proc ::Show() {
      
      eval "show "+::image_name+";"
    }
    Comments( ::Show, "Shows the resulting sphere")
    
    proc ::Gui() {
      import = &global::ami_import;
      ::win = import->ParamPanel("CreateSphere")
    
      ::win.BeginBook
        ::win.AddPage("Param")
          ::win.AddInt( &::dimx,"X_dim",1,1000)
          ::win.AddInt( &::dimy,"Y_dim",1,1000)
          ::win.AddInt( &::dimz,"Z_dim",1,1000)
        
          ::win.BeginBoxPanel("Intensity param")
          ::win.BeginPanel("Intensities")
            ::win.AddFloat( &::bg,"Background",0.1,500)
            ::win.AddFloat( &::fg,"Foreground",0.1,500)
          ::win.EndPanel
          ::win.EndBoxPanel
        
          ::win.AddFloat( &::R,"Radius",0.1,50)
        
          ::win.AddString( &::image_name,"Result name")
          ::win.AddButton("Create", ::Create)
          ::win.AddButton("Show",   ::Show)
      ::win.EndBook
      ::win.BeginHorizontal
          ::win.AddButton("Close",      ::Close)
          ::win.AddButton("Close All",  ::CloseAll)
        ::win.EndHorizontal
    
      ::win.Update(-1)
      ::win.Display
    }
    
    ::Init
    
  } #End of class
  
} # End of if

#----------------------------
# Main
#----------------------------

if (!exists(csph)) {

  CSPHClass csph
  } else {
  InfoDialog "The script seems to be already loaded."
}
