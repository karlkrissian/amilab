if (!exists(SuperquadricClass)) {

  func "SyntheticImages/superquadric.amil"
  
  Class SuperquadricClass {

    #----------------------------
    proc ::Init() {
      ::class_name ="global::SuperquadricClass"
      ::imdimx = INT(110)
      ::imdimy = INT(110)
      ::imdimz = INT(110)
      ::s1 = INT(50)
      ::s2 = INT(50)
      ::s3 = INT(50)
      ::r = 1
      ::s = 1
      ::t = 1
      ::torus_radius = 30
      ::type = INT(0) # 0:Spherical 1:Cylindrical 2:Toroidal
      ::image = Image(FLOAT,::imdimx,::imdimy,::imdimz)
      ::Update()
      ::isosurf = Surface()
      ::Gui()
    }

    # print parameters 
    # to do
    proc ::Print() {
      
    }
    
    # save parameters 
    # to do
    proc ::SaveParam() {
      
    }

    proc ::Update() {
      if (::image.tx!=::imdimx) || (::image.ty!=::imdimy) || (::image.tz!=::imdimz) {
        ::image <<= Image(FLOAT,::imdimx,::imdimy,::imdimz)
      }
      if (::type == 0) {
        global::SuperQuadric(::s1,::s2,::s3,::r,::s,::t,&::image)
      }
      if (::type == 1) {
        global::CylindricalSuperQuadric(::s1,::s2,::r,::s,&::image)
      }
      if (::type == 2) {
        global::ToroidalSuperQuadric(::torus_radius,::s1,::s2,::r,::s,&::image)
      }
    }

    proc ::CreateImage() {
      ::Update()
      show ::image
    }

    proc ::ShowIsoSurface() {
      ::Update()
      if (exists(::isosurf_draw)) {
        ::isosurf_draw -= ::isosurf
      }
      ::isosurf <<= isosurf(-::image,0.0001)
      if (exists(::isosurf_draw)) {
        ::isosurf_draw += ::isosurf
      } else {
        show ::isosurf
      }
    }

    proc ::CreateParamSurface() {
    }

    proc ::UpdateType() {

      # to do: show/hide a parameter !!!

      #::win.ShowSlider(::torus_radius_id,::type==2)
      #::win.update
      #::win.Display
    }
    
    
    #----------------------------
    proc ::Close() {
      ::win.Hide
      delvars GetObjectName(::Close)
    }
    ::Close.Comments("Will close the interface and delete the corresponding object named '"+GetObjectName(::Close)+"'.")
      
    #----------------------------
    proc ::CloseAll() {
      eval boost_format( "if (exists(%1%)) { del %1%; };" ) % ::class_name 
      ::Close
    }
    ::CloseAll.Comments("Call ::Close() method and delete the class variable")
        
    #------------------------------------
    
    
    proc ::Gui( ) {
      ::win = ParamWin("SuperQuadrics")
      ::win.BeginBook
      ::win.AddPage("Resolution")

     ::win.BeginBox("Image dimensions")
          ::imx_i  = ::win.AddInt    (::imdimx,0,1024)
          ::imy_i  = ::win.AddInt    (::imdimy,0,1024)
          ::imz_i  = ::win.AddInt    (::imdimz,0,1024)
     ::win.EndBox

      ::win.AddPage("Sup.Quad.")
     ::win.BeginBox("SQ dimensions")
          ::s1_i  = ::win.AddInt    (::s1,0,1024)
          ::s2_i  = ::win.AddInt    (::s2,0,1024)
          ::s3_i  = ::win.AddInt    (::s3,0,1024)
     ::win.EndBox

     ::win.BeginBox("Coefficients")
          ::r_i  = ::win.AddFloat    (::r,0,5)
          ::s_i  = ::win.AddFloat    (::s,0,5)
          ::t_i  = ::win.AddFloat    (::t,0,5)
      ::win.EndBox

      ::type_id  = ::win.AddEnum   (::type,3)
        ::win.AddEnumChoice(::type_id,"SPHERICAL")
        ::win.AddEnumChoice(::type_id,"CYLINDRICAL")
        ::win.AddEnumChoice(::type_id,"TOROIDAL")
      ::win.SetCallback(::UpdateType)

      ::torus_radius_id =  ::win.AddFloat(::torus_radius,0,200)
      #::win.ShowSlider(::torus_radius_id,::type==2)

      ::win.BeginHorizontal
        ::win.AddButton("Image",              ::CreateImage)
        ::win.AddButton("IsoSurface",           ::ShowIsoSurface)
      ::win.EndHorizontal
      ::win.AddButton("Parametric Surf.", ::CreateParamSurface)
      
      ::win.BeginHorizontal
          ::win.AddButton("Close",      ::Close)
          ::win.AddButton("Close All",  ::CloseAll)
        ::win.EndHorizontal
      
      ::win.update
      ::win.Display
      
    }

    ::Init()
  } #End of class
  
} # End of if

#----------------------------
# Main
#----------------------------

if (!exists(superq)) {

  SuperquadricClass superq
  } else {
  InfoDialog "The script seems to be already loaded."
}
